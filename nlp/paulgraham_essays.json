["January 2023\n\n(Someone fed my essays into GPT to make something that could answer\nquestions based on them, then asked it where good ideas come from.  The\nanswer was ok, but not what I would have said. This is what I would have said.)\n\nThe way to get new ideas is to notice anomalies: what seems strange,\nor missing, or broken? You can see anomalies in everyday life (much\nof standup comedy is based on this), but the best place to look for\nthem is at the frontiers of knowledge.\n\nKnowledge grows fractally.\nFrom a distance its edges look smooth, but when you learn enough\nto get close to one, you'll notice it's full of gaps. These gaps\nwill seem obvious; it will seem inexplicable that no one has tried\nx or wondered about y. In the best case, exploring such gaps yields\nwhole new fractal buds.\n\n", "November 2022\n\nIn the science fiction books I read as a kid, reading had often\nbeen replaced by some more efficient way of acquiring knowledge.\nMysterious \"tapes\" would load it into one's brain like a program\nbeing loaded into a computer.\n\nThat sort of thing is unlikely to happen anytime soon. Not just\nbecause it would be hard to build a replacement for reading, but\nbecause even if one existed, it would be insufficient. Reading about\nx doesn't just teach you about x; it also teaches you how to write.\n[1]\n\nWould that matter? If we replaced reading, would anyone need to be\ngood at writing?\n\nThe reason it would matter is that writing is not just a way to\nconvey ideas, but also a way to have them.\n\nA good writer doesn't just think, and then write down what he\nthought, as a sort of transcript. A good writer will almost always\ndiscover new things in the process of writing. And there is, as far\nas I know, no substitute for this kind of discovery. Talking about\nyour ideas with other people is a good way to develop them. But\neven after doing this, you'll find you still discover new things\nwhen you sit down to write. There is a kind of thinking that can\nonly be done by writing.\n\nThere are of course kinds of thinking that can be done without\nwriting. If you don't need to go too deeply into a problem, you can\nsolve it without writing. If you're thinking about how two pieces\nof machinery should fit together, writing about it probably won't\nhelp much. And when a problem can be described formally, you can\nsometimes solve it in your head. But if you need to solve a\ncomplicated, ill-defined problem, it will almost always help to\nwrite about it. Which in turn means that someone who's not good at\nwriting will almost always be at a disadvantage in solving such\nproblems.\n\nYou can't think well without writing well, and you can't write well\nwithout reading well. And I mean that last \"well\" in both senses.\nYou have to be good at reading, and read good things.\n[2]\n\nPeople who just want information may find other ways to get it.\nBut people who want to have ideas can't afford to.\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nAudiobooks can give you examples of good writing, but having\nthem read to you doesn't teach you as much about writing as reading\nthem yourself.\n\n[2]\nBy \"good at reading\" I don't mean good at the mechanics of\nreading. You don't have to be good at extracting words from the\npage so much as extracting meaning from the words.\n\n", "November 2022\n\nSince I was about 9 I've been puzzled by the apparent contradiction\nbetween being made of matter that behaves in a predictable way, and\nthe feeling that I could choose to do whatever I wanted. At the\ntime I had a self-interested motive for exploring the question. At\nthat age (like most succeeding ages) I was always in trouble with\nthe authorities, and it seemed to me that there might possibly be\nsome way to get out of trouble by arguing that I wasn't responsible\nfor my actions. I gradually lost hope of that, but the puzzle\nremained: How do you reconcile being a machine made of matter with\nthe feeling that you're free to choose what you do?\n[1]\n\nThe best way to explain the answer may be to start with a slightly\nwrong version, and then fix it. The wrong version is: You can do\nwhat you want, but you can't want what you want. Yes, you can control\nwhat you do, but you'll do what you want, and you can't control\nthat.\n\nThe reason this is mistaken is that people do sometimes change what\nthey want. People who don't want to want something \u2014 drug addicts,\nfor example \u2014 can sometimes make themselves stop wanting it. And\npeople who want to want something \u2014 who want to like classical\nmusic, or broccoli \u2014 sometimes succeed.\n\nSo we modify our initial statement: You can do what you want, but\nyou can't want to want what you want.\n\nThat's still not quite true. It's possible to change what you want\nto want. I can imagine someone saying \"I decided to stop wanting\nto like classical music.\" But we're getting closer to the truth.\nIt's rare for people to change what they want to want, and the more\n\"want to\"s we add, the rarer it gets.\n\nWe can get arbitrarily close to a true statement by adding more \"want\nto\"s in much the same way we can get arbitrarily close to 1 by adding\nmore 9s to a string of 9s following a decimal point. In practice\nthree or four \"want to\"s must surely be enough. It's hard even to\nenvision what it would mean to change what you want to want to want\nto want, let alone actually do it.\n\nSo one way to express the correct answer is to use a regular\nexpression. You can do what you want, but there's some statement\nof the form \"you can't (want to)* want what you want\" that's true.\nUltimately you get back to a want that you don't control.\n[2]\n\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nI didn't know when I was 9 that matter might behave randomly,\nbut I don't think it affects the problem much. Randomness destroys\nthe ghost in the machine as effectively as determinism.\n\n[2]\nIf you don't like using an expression, you can make the same\npoint using higher-order desires: There is some n such that you\ndon't control your nth-order desires.\n\n\n\n\nThanks to Trevor Blackwell,\nJessica Livingston, Robert Morris, and\nMichael Nielsen for reading drafts of this.\n\n", "October 2022\n\nIf there were intelligent beings elsewhere in the universe, they'd\nshare certain truths in common with us. The truths of mathematics\nwould be the same, because they're true by definition. Ditto for\nthe truths of physics; the mass of a carbon atom would be the same\non their planet. But I think we'd share other truths with aliens\nbesides the truths of math and physics, and that it would be\nworthwhile to think about what these might be.\n\nFor example, I think we'd share the principle that a controlled\nexperiment testing some hypothesis entitles us to have proportionally\nincreased belief in it. It seems fairly likely, too, that it would\nbe true for aliens that one can get better at something by practicing.\nWe'd probably share Occam's razor. There doesn't seem anything\nspecifically human about any of these ideas.\n\nWe can only guess, of course. We can't say for sure what forms\nintelligent life might take. Nor is it my goal here to explore that\nquestion, interesting though it is. The point of the idea of alien\ntruth is not that it gives us a way to speculate about what forms\nintelligent life might take, but that it gives us a threshold, or\nmore precisely a target, for truth. If you're trying to find the\nmost general truths short of those of math or physics, then presumably\nthey'll be those we'd share in common with other forms of intelligent\nlife.\n\nAlien truth will work best as a heuristic if we err on the side of\ngenerosity. If an idea might plausibly be relevant to aliens, that's\nenough. Justice, for example. I wouldn't want to bet that all\nintelligent beings would understand the concept of justice, but I\nwouldn't want to bet against it either.\n\nThe idea of alien truth is related to Erdos's idea of God's book.\nHe used to describe a particularly good proof as being in God's\nbook, the implication being (a) that a sufficiently good proof was\nmore discovered than invented, and (b) that its goodness would be\nuniversally recognized. If there's such a thing as alien truth,\nthen there's more in God's book than math.\n\nWhat should we call the search for alien truth? The obvious choice\nis \"philosophy.\" Whatever else philosophy includes, it should\nprobably include this. I'm fairly sure Aristotle would have thought\nso. One could even make the case that the search for alien truth\nis, if not an accurate description of philosophy, a good\ndefinition for it. I.e. that it's what people who call\nthemselves philosophers should be doing, whether or not they currently\nare. But I'm not wedded to that; doing it is what matters, not what\nwe call it.\n\nWe may one day have something like alien life among us in the form\nof AIs. And that may in turn allow us to be precise about what\ntruths an intelligent being would have to share with us. We might\nfind, for example, that it's impossible to create something we'd\nconsider intelligent that doesn't use Occam's razor. We might one\nday even be able to prove that. But though this sort of research\nwould be very interesting, it's not necessary for our purposes, or\neven the same field; the goal of philosophy, if we're going to call it that, would be\nto see what ideas we come up with using alien truth as a target,\nnot to say precisely where the threshold of it is. Those two questions might one\nday converge, but they'll converge from quite different directions,\nand till they do, it would be too constraining to restrict ourselves\nto thinking only about things we're certain would be alien truths.\nEspecially since this will probably be one of those areas where the\nbest guesses turn out to be surprisingly close to optimal. (Let's\nsee if that one does.)\n\nWhatever we call it, the attempt to discover alien truths would be\na worthwhile undertaking. And curiously enough, that is itself\nprobably an alien truth.\n\n\n\n\n\nThanks to Trevor Blackwell, Greg Brockman, \nPatrick Collison, Robert Morris, and Michael Nielsen for reading drafts of this.\n\n", "September 2022\n\nI recently told applicants to Y Combinator that the best advice I\ncould give for getting in, per word, was \n\n  Explain what you've learned from users.\n\nThat tests a lot of things: whether you're paying attention to\nusers, how well you understand them, and even how much they need\nwhat you're making.\n\nAfterward I asked myself the same question. What have I learned\nfrom YC's users, the startups we've funded?\n\nThe first thing that came to mind was that most startups have the\nsame problems. No two have exactly the same problems, but it's\nsurprising how much the problems remain the same, regardless of\nwhat they're making. Once you've advised 100 startups all doing\ndifferent things, you rarely encounter problems you haven't seen\nbefore.\n\nThis fact is one of the things that makes YC work. But I didn't\nknow it when we started YC. I only had a few data points: our own\nstartup, and those started by friends. It was a surprise to me how\noften the same problems recur in different forms. Many later stage\ninvestors might never realize this, because later stage investors\nmight not advise 100 startups in their whole career, but a YC partner\nwill get this much experience in the first year or two.\n\nThat's one advantage of funding large numbers of early stage companies\nrather than smaller numbers of later-stage ones. You get a lot of\ndata. Not just because you're looking at more companies, but also\nbecause more goes wrong.\n\nBut knowing (nearly) all the problems startups can encounter doesn't\nmean that advising them can be automated, or reduced to a formula.\nThere's no substitute for individual office hours with a YC partner.\nEach startup is unique, which means they have to be advised\nby specific partners who know them well.\n[1]\n\nWe learned that the hard way, in the notorious \"batch that broke\nYC\" in the summer of 2012. Up till that point we treated the partners\nas a pool. When a startup requested office hours, they got the next\navailable slot posted by any partner. That meant every partner had\nto know every startup. This worked fine up to 60 startups, but when\nthe batch grew to 80, everything broke. The founders probably didn't\nrealize anything was wrong, but the partners were confused and\nunhappy because halfway through the batch they still didn't know\nall the companies yet.\n[2]\n\nAt first I was puzzled. How could things be fine at 60 startups and\nbroken at 80? It was only a third more. Then I realized what had\nhappened. We were using an O(n2) algorithm. So of course it blew\nup.\n\nThe solution we adopted was the classic one in these situations.\nWe sharded the batch into smaller groups of startups, each overseen\nby a dedicated group of partners. That fixed the problem, and has\nworked fine ever since. But the batch that broke YC was a powerful\ndemonstration of how individualized the process of advising startups\nhas to be.\n\nAnother related surprise is how bad founders can be at realizing\nwhat their problems are. Founders will sometimes come in to talk\nabout some problem, and we'll discover another much bigger one in\nthe course of the conversation. For example (and this case is all\ntoo common), founders will come in to talk about the difficulties\nthey're having raising money, and after digging into their situation,\nit turns out the reason is that the company is doing badly, and\ninvestors can tell. Or founders will come in worried that they still\nhaven't cracked the problem of user acquisition, and the reason turns out\nto be that their product isn't good enough. There have been times\nwhen I've asked \"Would you use this yourself, if you hadn't built\nit?\" and the founders, on thinking about it, said \"No.\" Well, there's\nthe reason you're having trouble getting users.\n\nOften founders know what their problems are, but not their relative\nimportance.\n[3]\nThey'll come in to talk about three problems\nthey're worrying about. One is of moderate importance, one doesn't\nmatter at all, and one will kill the company if it isn't addressed\nimmediately. It's like watching one of those horror movies where\nthe heroine is deeply upset that her boyfriend cheated on her, and\nonly mildly curious about the door that's mysteriously ajar. You\nwant to say: never mind about your boyfriend, think about that door!\nFortunately in office hours you can. So while startups still die\nwith some regularity, it's rarely because they wandered into a room\ncontaining a murderer. The YC partners can warn them where the\nmurderers are.\n\nNot that founders listen. That was another big surprise: how often\nfounders don't listen to us. A couple weeks ago I talked to a partner\nwho had been working for YC for a couple batches and was starting\nto see the pattern. \"They come back a year later,\" she said, \"and\nsay 'We wish we'd listened to you.'\"\n\nIt took me a long time to figure out why founders don't listen. At\nfirst I thought it was mere stubbornness. That's part of the reason,\nbut another and probably more important reason is that so much about\nstartups is counterintuitive. \nAnd when you tell someone something\ncounterintuitive, what it sounds to them is wrong. So the reason\nfounders don't listen to us is that they don't believe us. At\nleast not till experience teaches them otherwise.\n[4]\n\nThe reason startups are so counterintuitive is that they're so\ndifferent from most people's other experiences. No one knows what\nit's like except those who've done it. Which is why YC partners\nshould usually have been founders themselves. But strangely enough,\nthe counterintuitiveness of startups turns out to be another of the\nthings that make YC work. If it weren't counterintuitive, founders\nwouldn't need our advice about how to do it.\n\nFocus is doubly important for early stage startups, because not\nonly do they have a hundred different problems, they don't have\nanyone to work on them except the founders. If the founders focus\non things that don't matter, there's no one focusing on the things\nthat do. So the essence of what happens at YC is to figure out which\nproblems matter most, then cook up ideas for solving them \u2014 ideally\nat a resolution of a week or less \u2014 and then try those ideas and\nmeasure how well they worked. The focus is on action, with measurable,\nnear-term results.\n\nThis doesn't imply that founders should rush forward regardless of\nthe consequences. If you correct course at a high enough frequency,\nyou can be simultaneously decisive at a micro scale and tentative\nat a macro scale. The result is a somewhat winding path, but executed\nvery rapidly, like the path a running back takes downfield. And in\npractice there's less backtracking than you might expect. Founders\nusually guess right about which direction to run in, especially if\nthey have someone experienced like a YC partner to bounce their\nhypotheses off. And when they guess wrong, they notice fast, because\nthey'll talk about the results at office hours the next week.\n[5]\n\nA small improvement in navigational ability can make you a lot\nfaster, because it has a double effect: the path is shorter, and\nyou can travel faster along it when you're more certain it's the\nright one. That's where a lot of YC's value lies, in helping founders\nget an extra increment of focus that lets them move faster. And\nsince moving fast is the essence of a startup, YC in effect makes\nstartups more startup-like.\n\nSpeed defines startups. Focus enables speed. YC improves focus.\n\nWhy are founders uncertain about what to do? Partly because startups\nalmost by definition are doing something new, which means no one\nknows how to do it yet, or in most cases even what \"it\" is. Partly\nbecause startups are so counterintuitive generally. And partly\nbecause many founders, especially young and ambitious ones, have\nbeen trained to win the wrong way. That took me years to figure\nout. The educational system in most countries trains you to win by\nhacking the test \ninstead of actually doing whatever it's supposed\nto measure. But that stops working when you start a startup. So\npart of what YC does is to retrain founders to stop trying to hack\nthe test. (It takes a surprisingly long time. A year in, you still\nsee them reverting to their old habits.)\n\nYC is not simply more experienced founders passing on their knowledge.\nIt's more like specialization than apprenticeship. The knowledge\nof the YC partners and the founders have different shapes: It\nwouldn't be worthwhile for a founder to acquire the encyclopedic\nknowledge of startup problems that a YC partner has, just as it\nwouldn't be worthwhile for a YC partner to acquire the depth of\ndomain knowledge that a founder has. That's why it can still be\nvaluable for an experienced founder to do YC, just as it can still\nbe valuable for an experienced athlete to have a coach.\n\nThe other big thing YC gives founders is colleagues, and this may\nbe even more important than the advice of partners. If you look at\nhistory, great work clusters around certain places and institutions:\nFlorence in the late 15th century, the University of G\u00f6ttingen in\nthe late 19th, The New Yorker under Ross, Bell Labs, Xerox PARC.\nHowever good you are, good colleagues make you better. Indeed, very\nambitious people probably need colleagues more than anyone else,\nbecause they're so starved for them in everyday life.\n\nWhether or not YC manages one day to be listed alongside those\nfamous clusters, it won't be for lack of trying. We were very aware\nof this historical phenomenon and deliberately designed YC to be\none. By this point it's not bragging to say that it's the biggest\ncluster of great startup founders. Even people trying to attack YC\nconcede that.\n\nColleagues and startup founders are two of the most powerful forces\nin the world, so you'd expect it to have a big effect to combine\nthem. Before YC, to the extent people thought about the question\nat all, most assumed they couldn't be combined \u2014 that loneliness\nwas the price of independence. That was how it felt to us when we\nstarted our own startup in Boston in the 1990s. We had a handful\nof older people we could go to for advice (of varying quality), but\nno peers. There was no one we could commiserate with about the\nmisbehavior of investors, or speculate with about the future of\ntechnology. I often tell founders to make something they themselves\nwant, and YC is certainly that: it was designed to be exactly what\nwe wanted when we were starting a startup.\n\nOne thing we wanted was to be able to get seed funding without\nhaving to make the rounds of random rich people. That has become a\ncommodity now, at least in the US. But great colleagues can never\nbecome a commodity, because the fact that they cluster in some\nplaces means they're proportionally absent from the rest.\n\nSomething magical happens where they do cluster though. The energy\nin the room at a YC dinner is like nothing else I've experienced.\nWe would have been happy just to have one or two other startups to\ntalk to. When you have a whole roomful it's another thing entirely.\n\nYC founders aren't just inspired by one another. They also help one\nanother. That's the happiest thing I've learned about startup\nfounders: how generous they can be in helping one another. We noticed\nthis in the first batch and consciously designed YC to magnify it.\nThe result is something far more intense than, say, a university.\nBetween the partners, the alumni, and their batchmates, founders\nare surrounded by people who want to help them, and can.\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] \nThis is why I've never liked it when people refer to YC as a\n\"bootcamp.\" It's intense like a bootcamp, but the opposite in\nstructure. Instead of everyone doing the same thing, they're each\ntalking to YC partners to figure out what their specific startup\nneeds.\n\n[2] \nWhen I say the summer 2012 batch was broken, I mean it felt\nto the partners that something was wrong. Things weren't yet so\nbroken that the startups had a worse experience. In fact that batch\ndid unusually well.\n\n[3] \nThis situation reminds me of the research showing that people\nare much better at answering questions than they are at judging how\naccurate their answers are. The two phenomena feel very similar.\n\n[4] \nThe Airbnbs were \nparticularly good at listening \u2014 partly\nbecause they were flexible and disciplined, but also because they'd\nhad such a rough time during the preceding year. They were ready\nto listen.\n\n[5] \nThe optimal unit of decisiveness depends on how long it takes\nto get results, and that depends on the type of problem you're\nsolving. When you're negotiating with investors, it could be a\ncouple days, whereas if you're building hardware it could be months.\n\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, \nHarj Taggar, and Garry Tan for reading drafts of this.\n\n", "April 2022\n\nOne of the most surprising things I've witnessed in my lifetime is\nthe rebirth of the concept of heresy.\n\nIn his excellent biography of Newton, Richard Westfall writes about the\nmoment when he was elected a fellow of Trinity College:\n\n  Supported comfortably, Newton was free to devote himself wholly\n  to whatever he chose. To remain on, he had only to avoid the three\n  unforgivable sins: crime, heresy, and marriage.\n  [1]\n\nThe first time I read that, in the 1990s, it sounded amusingly\nmedieval. How strange, to have to avoid committing heresy. But when\nI reread it 20 years later it sounded like a description of\ncontemporary employment.\n\nThere are an ever-increasing number of opinions you can be fired\nfor. Those doing the firing don't use the word \"heresy\" to describe\nthem, but structurally they're equivalent. Structurally there are\ntwo distinctive things about heresy: (1) that it takes priority\nover the question of truth or falsity, and (2) that it outweighs\neverything else the speaker has done.\n\nFor example, when someone calls a statement \"x-ist,\" they're also\nimplicitly saying that this is the end of the discussion. They do\nnot, having said this, go on to consider whether the statement is\ntrue or not. Using such labels is the conversational equivalent of\nsignalling an exception. That's one of the reasons they're used:\nto end a discussion.\n\nIf you find yourself talking to someone who uses these labels a\nlot, it might be worthwhile to ask them explicitly if they believe\nany babies are being thrown out with the bathwater. Can a statement\nbe x-ist, for whatever value of x, and also true? If the answer is\nyes, then they're admitting to banning the truth. That's obvious\nenough that I'd guess most would answer no. But if they answer no,\nit's easy to show that they're mistaken, and that in practice such\nlabels are applied to statements regardless of their truth or\nfalsity.\n\nThe clearest evidence of this is that whether a statement is\nconsidered x-ist often depends on who said it. Truth doesn't work\nthat way. The same statement can't be true when one person says it,\nbut x-ist, and therefore false, when another person does.\n[2]\n\nThe other distinctive thing about heresies, compared to ordinary\nopinions, is that the public expression of them outweighs everything\nelse the speaker has done. In ordinary matters, like knowledge of\nhistory, or taste in music, you're judged by the average of your\nopinions. A heresy is qualitatively different. It's like dropping\na chunk of uranium onto the scale.\n\nBack in the day (and still, in some places) the punishment for\nheresy was death. You could have led a life of exemplary goodness,\nbut if you publicly doubted, say, the divinity of Christ, you were\ngoing to burn. Nowadays, in civilized countries, heretics only get\nfired in the metaphorical sense, by losing their jobs. But the\nstructure of the situation is the same: the heresy\noutweighs everything else. You could have spent the last ten years\nsaving children's lives, but if you express certain opinions, you're\nautomatically fired.\n\nIt's much the same as if you committed a crime. No matter how\nvirtuously you've lived, if you commit a crime, you must still\nsuffer the penalty of the law. Having lived a previously blameless\nlife might mitigate the punishment, but it doesn't affect whether\nyou're guilty or not.\n\nA heresy is an opinion whose expression is treated like a crime \u2014\none that makes some people feel not merely that you're mistaken,\nbut that you should be punished. Indeed, their desire to see you\npunished is often stronger than it would be if you'd committed an\nactual crime. There are many on the far left who believe\nstrongly in the reintegration of felons (as I do myself), and yet\nseem to feel that anyone guilty of certain heresies should never\nwork again.\n\nThere are always some heresies \u2014 some opinions you'd be punished\nfor expressing. But there are a lot more now than there were a few\ndecades ago, and even those who are happy about this would have to\nagree that it's so.\n\nWhy? Why has this antiquated-sounding religious concept come back\nin a secular form? And why now?\n\nYou need two ingredients for a wave of intolerance: intolerant\npeople, and an ideology to guide them. The intolerant people are\nalways there. They exist in every sufficiently large society. That's\nwhy waves of intolerance can arise so suddenly; all they need is\nsomething to set them off.\n\nI've already written an essay \ndescribing the aggressively\nconventional-minded. The short version is that people can be\nclassified in two dimensions according to (1) how independent- or\nconventional-minded they are, and (2) how aggressive they are about\nit. The aggressively conventional-minded are the enforcers of\northodoxy.\n\nNormally they're only locally visible. They're the grumpy, censorious\npeople in a group \u2014 the ones who are always first to complain when\nsomething violates the current rules of propriety. But occasionally,\nlike a vector field whose elements become aligned, a large number\nof aggressively conventional-minded people unite behind some ideology\nall at once. Then they become much more of a problem, because a mob\ndynamic takes over, where the enthusiasm of each participant is\nincreased by the enthusiasm of the others.\n\nThe most notorious 20th century case may have been the Cultural\nRevolution. Though initiated by Mao to undermine his rivals, the\nCultural Revolution was otherwise mostly a grass-roots phenomenon.\nMao said in essence: There are heretics among us. Seek them out and\npunish them. And that's all the aggressively conventional-minded\never need to hear. They went at it with the delight of dogs chasing\nsquirrels.\n\nTo unite the conventional-minded, an ideology must have many of the\nfeatures of a religion. In particular it must have strict and\narbitrary rules that adherents can demonstrate their \npurity \nby obeying, and its adherents must believe that anyone who obeys these\nrules is ipso facto morally superior to anyone who doesn't.\n[3]\n\nIn the late 1980s a new ideology of this type appeared in US\nuniversities. It had a very strong component of moral purity, and\nthe aggressively conventional-minded seized upon it with their usual\neagerness \u2014 all the more because the relaxation of social norms\nin the preceding decades meant there had been less and less to\nforbid. The resulting wave of intolerance has been eerily similar\nin form to the Cultural Revolution, though fortunately much smaller\nin magnitude.\n[4]\n\nI've deliberately avoided mentioning any specific heresies here.\nPartly because one of the universal tactics of heretic hunters, now\nas in the past, is to accuse those who disapprove of the way in\nwhich they suppress ideas of being heretics themselves. Indeed,\nthis tactic is so consistent that you could use it as a way of\ndetecting witch hunts in any era.\n\nAnd that's the second reason I've avoided mentioning any specific\nheresies. I want this essay to work in the future, not just now.\nAnd unfortunately it probably will. The aggressively conventional-minded\nwill always be among us, looking for things to forbid. All they\nneed is an ideology to tell them what. And it's unlikely the current\none will be the last.\n\nThere are aggressively conventional-minded people on both the right\nand the left. The reason the current wave of intolerance comes from\nthe left is simply because the new unifying ideology happened to\ncome from the left. The next one might come from the right. Imagine\nwhat that would be like.\n\nFortunately in western countries the suppression of heresies is\nnothing like as bad as it used to be. Though the window of opinions\nyou can express publicly has narrowed in the last decade, it's still\nmuch wider than it was a few hundred years ago. The problem is the\nderivative. Up till about 1985 the window had been growing ever\nwider. Anyone looking into the future in 1985 would have expected\nfreedom of expression to continue to increase. Instead it has\ndecreased.\n[5]\n\nThe situation is similar to what's happened with infectious diseases\nlike measles. Anyone looking into the future in 2010 would have\nexpected the number of measles cases in the US to continue to\ndecrease. Instead, thanks to anti-vaxxers, it has increased. The\nabsolute number is still not that high. The problem is the derivative.\n[6]\n\nIn both cases it's hard to know how much to worry. Is it really\ndangerous to society as a whole if a handful of extremists refuse\nto get their kids vaccinated, or shout down speakers at universities?\nThe point to start worrying is presumably when their efforts start\nto spill over into everyone else's lives. And in both cases that\ndoes seem to be happening.\n\nSo it's probably worth spending some amount of effort on pushing\nback to keep open the window of free expression. My hope is that\nthis essay will help form social antibodies not just against current\nefforts to suppress ideas, but against the concept of heresy in\ngeneral. That's the real prize. How do you disable the concept of\nheresy? Since the Enlightenment, western societies have discovered\nmany techniques for doing that, but there are surely more to be\ndiscovered.\n\nOverall I'm optimistic. Though the trend in freedom of expression\nhas been bad over the last decade, it's been good over the longer\nterm. And there are signs that the current wave of intolerance is\npeaking. Independent-minded people I talk to seem more confident\nthan they did a few years ago. On the other side, even some of the\nleaders are starting to wonder if things have \ngone too far. And popular culture among the young has already moved on. \nAll we have\nto do is keep pushing back, and the wave collapses. And then we'll\nbe net ahead, because as well as having defeated this wave, we'll\nalso have developed new tactics for resisting the next one.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] \nOr more accurately, biographies of Newton, since Westfall wrote\ntwo: a long version called Never at Rest, and a shorter one called\nThe Life of Isaac Newton. Both are great. The short version moves\nfaster, but the long one is full of interesting and often very funny\ndetails. This passage is the same in both.\n\n[2]\nAnother more subtle but equally damning bit of evidence is\nthat claims of x-ism are never qualified. You never hear anyone say\nthat a statement is \"probably x-ist\" or \"almost certainly y-ist.\"\nIf claims of x-ism were actually claims about truth, you'd expect\nto see \"probably\" in front of \"x-ist\" as often as you see it in\nfront of \"fallacious.\"\n\n[3] \nThe rules must be strict, but they need not be demanding. So\nthe most effective type of rules are those about superficial matters,\nlike doctrinal minutiae, or the precise words adherents must use.\nSuch rules can be made extremely complicated, and yet don't repel\npotential converts by requiring significant sacrifice.\n\nThe superficial demands of orthodoxy make it an inexpensive substitute\nfor virtue. And that in turn is one of the reasons orthodoxy is so\nattractive to bad people. You could be a horrible person, and yet\nas long as you're orthodox, you're better than everyone who isn't.\n\n[4] \nArguably there were two. The first had died down somewhat by\n2000, but was followed by a second in the 2010s, probably caused\nby social media.\n\n[5] \nFortunately most of those trying to suppress ideas today still\nrespect Enlightenment principles enough to pay lip service to them.\nThey know they're not supposed to ban ideas per se, so they have\nto recast the ideas as causing \"harm,\" which sounds like something\nthat can be banned. The more extreme try to claim speech itself is\nviolence, or even that silence is. But strange as it may sound,\nsuch gymnastics are a good sign. We'll know we're really in trouble\nwhen they stop bothering to invent pretenses for banning ideas \u2014\nwhen, like the medieval church, they say \"Damn right we're banning\nideas, and in fact here's a list of them.\"\n\n[6] \nPeople only have the luxury of ignoring the medical consensus\nabout vaccines because vaccines have worked so well. If we didn't\nhave any vaccines at all, the mortality rate would be so high that\nmost current anti-vaxxers would be begging for them. And the situation\nwith freedom of expression is similar. It's only because they live\nin a world created by the Enlightenment that kids from the suburbs\ncan play at banning ideas.\n\n\n\nThanks to Marc Andreessen, Chris Best, \nTrevor Blackwell, Nicholas\nChristakis, Daniel Gackle, Jonathan Haidt, Claire Lehmann, Jessica\nLivingston, Greg Lukianoff, Robert Morris, and Garry Tan for reading\ndrafts of this.\n\n", "February 2022\n\nWriting about something, even something you know well, usually shows\nyou that you didn't know it as well as you thought. Putting ideas\ninto words is a severe test. The first words you choose are usually\nwrong; you have to rewrite sentences over and over  to\nget them exactly right. And your ideas won't just be imprecise, but\nincomplete too. Half the ideas that end up in an essay will be ones\nyou thought of while you were writing it. Indeed, that's why I write\nthem.\n\nOnce you publish something, the convention is that whatever you\nwrote was what you thought before you wrote it. These were your\nideas, and now you've expressed them. But you know this isn't true.\nYou know that putting your ideas into words changed them. And not\njust the ideas you published. Presumably there were others that\nturned out to be too broken to fix, and those you discarded instead.\n\nIt's not just having to commit your ideas to specific words that\nmakes writing so exacting. The real test is reading what you've\nwritten. You have to pretend to be a neutral reader who knows nothing\nof what's in your head, only what you wrote. When he reads what you\nwrote, does it seem correct? Does it seem complete? If you make an\neffort, you can read your writing as if you were a complete stranger,\nand when you do the news is usually bad. It takes me many cycles\nbefore I can get an essay past the stranger. But the stranger is\nrational, so you always can, if you ask him what he needs. If he's\nnot satisfied because you failed to mention x or didn't qualify\nsome sentence sufficiently, then you mention x or add more\nqualifications. Happy now? It may cost you some nice sentences, but\nyou have to resign yourself to that. You just have to make them as\ngood as you can and still satisfy the stranger.\n\nThis much, I assume, won't be that controversial. I think it will\naccord with the experience of anyone who has tried to write about\nanything nontrivial. There may exist people whose thoughts are so\nperfectly formed that they just flow straight into words. But I've\nnever known anyone who could do this, and if I met someone who said\nthey could, it would seem evidence of their limitations rather than\ntheir ability. Indeed, this is a trope in movies: the guy who claims\nto have a plan for doing some difficult thing, and who when questioned\nfurther, taps his head and says \"It's all up here.\" Everyone watching\nthe movie knows what that means. At best the plan is vague and\nincomplete. Very likely there's some undiscovered flaw that invalidates\nit completely. At best it's a plan for a plan.\n\nIn precisely defined domains it's possible to form complete ideas\nin your head. People can play chess in their heads, for example.\nAnd mathematicians can do some amount of math in their heads, though\nthey don't seem to feel sure of a proof over a certain length till\nthey write it down. But this only seems possible with ideas you can\nexpress in a formal language.  [1] Arguably what such people are\ndoing is putting ideas into words in their heads. I can to some\nextent write essays in my head. I'll sometimes think of a paragraph\nwhile walking or lying in bed that survives nearly unchanged in the\nfinal version. But really I'm writing when I do this. I'm doing the\nmental part of writing; my fingers just aren't moving as I do it.\n[2]\n\nYou can know a great deal about something without writing about it.\nCan you ever know so much that you wouldn't learn more from trying\nto explain what you know? I don't think so. I've written about at\nleast two subjects I know well \u2014 Lisp hacking and startups\n\u2014 and in both cases I learned a lot from writing about them.\nIn both cases there were things I didn't consciously realize till\nI had to explain them. And I don't think my experience was anomalous.\nA great deal of knowledge is unconscious, and experts have if\nanything a higher proportion of unconscious knowledge than beginners.\n\nI'm not saying that writing is the best way to explore all ideas.\nIf you have ideas about architecture, presumably the best way to\nexplore them is to build actual buildings. What I'm saying is that\nhowever much you learn from exploring ideas in other ways, you'll\nstill learn new things from writing about them.\n\nPutting ideas into words doesn't have to mean writing, of course.\nYou can also do it the old way, by talking. But in my experience,\nwriting is the stricter test. You have to commit to a single, optimal\nsequence of words. Less can go unsaid when you don't have tone of\nvoice to carry meaning. And you can focus in a way that would seem\nexcessive in conversation. I'll often spend 2 weeks on an essay and\nreread drafts 50 times. If you did that in conversation\nit would seem evidence of some kind of\nmental disorder. \nIf you're lazy,\nof course, writing and talking are equally useless. But if you want\nto push yourself to get things right, writing is the steeper hill.\n[3]\n\nThe reason I've spent so long establishing this rather obvious point\nis that it leads to another that many people will find shocking.\nIf writing down your ideas always makes them more precise and more\ncomplete, then no one who hasn't written about a topic has fully\nformed ideas about it. And someone who never writes has no fully\nformed ideas about anything nontrivial.\n\nIt feels to them as if they do, especially if they're not in the\nhabit of critically examining their own thinking. Ideas can feel\ncomplete. It's only when you try to put them into words that you\ndiscover they're not. So if you never subject your ideas to that\ntest, you'll not only never have fully formed ideas, but also never\nrealize it.\n\nPutting ideas into words is certainly no guarantee that they'll be\nright. Far from it. But though it's not a sufficient condition, it\nis a necessary one.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] Machinery and\ncircuits are formal languages.\n\n[2] I thought of this\nsentence as I was walking down the street in Palo Alto.\n\n[3] There are two\nsenses of talking to someone: a strict sense in which the conversation\nis verbal, and a more general sense in which it can take any form,\nincluding writing. In the limit case (e.g. Seneca's letters),\nconversation in the latter sense becomes essay writing.\n\nIt can be very useful to talk (in either sense) with other people\nas you're writing something. But a verbal conversation will never\nbe more exacting than when you're talking about something you're\nwriting.\n\n\n\n Thanks to Trevor Blackwell, Patrick\nCollison, and Robert Morris for reading drafts of this.  \n\n", "November 2021\n\n(This essay is derived from a talk at the Cambridge Union.)\n\nWhen I was a kid, I'd have said there wasn't. My father told me so.\nSome people like some things, and other people like other things,\nand who's to say who's right?\n\nIt seemed so obvious that there was no such thing as good taste\nthat it was only through indirect evidence that I realized my father\nwas wrong. And that's what I'm going to give you here: a proof by\nreductio ad absurdum. If we start from the premise that there's no\nsuch thing as good taste, we end up with conclusions that are\nobviously false, and therefore the premise must be wrong.\n\nWe'd better start by saying what good taste is. There's a narrow\nsense in which it refers to aesthetic judgements and a broader one\nin which it refers to preferences of any kind. The strongest proof\nwould be to show that taste exists in the narrowest sense, so I'm\ngoing to talk about taste in art. You have better taste than me if\nthe art you like is better than the art I like.\n\nIf there's no such thing as good taste, then there's no such thing\nas good art. Because if there is such a\nthing as good art, it's\neasy to tell which of two people has better taste. Show them a lot\nof works by artists they've never seen before and ask them to\nchoose the best, and whoever chooses the better art has better\ntaste.\n\nSo if you want to discard the concept of good taste, you also have\nto discard the concept of good art. And that means you have to\ndiscard the possibility of people being good at making it. Which\nmeans there's no way for artists to be good at their jobs. And not\njust visual artists, but anyone who is in any sense an artist. You\ncan't have good actors, or novelists, or composers, or dancers\neither. You can have popular novelists, but not good ones.\n\nWe don't realize how far we'd have to go if we discarded the concept\nof good taste, because we don't even debate the most obvious cases.\nBut it doesn't just mean we can't say which of two famous painters\nis better. It means we can't say that any painter is better than a\nrandomly chosen eight year old.\n\nThat was how I realized my father was wrong. I started studying\npainting. And it was just like other kinds of work I'd done: you\ncould do it well, or badly, and if you tried hard, you could get\nbetter at it. And it was obvious that Leonardo and Bellini were\nmuch better at it than me. That gap between us was not imaginary.\nThey were so good. And if they could be good, then art could be\ngood, and there was such a thing as good taste after all.\n\nNow that I've explained how to show there is such a thing as good\ntaste, I should also explain why people think there isn't. There\nare two reasons. One is that there's always so much disagreement\nabout taste. Most people's response to art is a tangle of unexamined\nimpulses. Is the artist famous? Is the subject attractive? Is this\nthe sort of art they're supposed to like? Is it hanging in a famous\nmuseum, or reproduced in a big, expensive book? In practice most\npeople's response to art is dominated by such extraneous factors.\n\nAnd the people who do claim to have good taste are so often mistaken.\nThe paintings admired by the so-called experts in one generation\nare often so different from those admired a few generations later.\nIt's easy to conclude there's nothing real there at all. It's only\nwhen you isolate this force, for example by trying to paint and\ncomparing your work to Bellini's, that you can see that it does in\nfact exist.\n\nThe other reason people doubt that art can be good is that there\ndoesn't seem to be any room in the art for this goodness. The\nargument goes like this. Imagine several people looking at a work\nof art and judging how good it is. If being good art really is a\nproperty of objects, it should be in the object somehow. But it\ndoesn't seem to be; it seems to be something happening in the heads\nof each of the observers. And if they disagree, how do you choose\nbetween them?\n\nThe solution to this puzzle is to realize that the purpose of art\nis to work on its human audience, and humans have a lot in common.\nAnd to the extent the things an object acts upon respond in the\nsame way, that's arguably what it means for the object to have the\ncorresponding property. If everything a particle interacts with\nbehaves as if the particle had a mass of m, then it has a mass of\nm. So the distinction between \"objective\" and \"subjective\" is not\nbinary, but a matter of degree, depending on how much the subjects\nhave in common. Particles interacting with one another are at one\npole, but people interacting with art are not all the way at the\nother; their reactions aren't random.\n\nBecause people's responses to art aren't random, art can be designed\nto operate on people, and be good or bad depending on how effectively\nit does so. Much as a vaccine can be. If someone were talking about\nthe ability of a vaccine to confer immunity, it would seem very\nfrivolous to object that conferring immunity wasn't really a property\nof vaccines, because acquiring immunity is something that happens\nin the immune system of each individual person. Sure, people's\nimmune systems vary, and a vaccine that worked on one might not\nwork on another, but that doesn't make it meaningless to talk about\nthe effectiveness of a vaccine.\n\nThe situation with art is messier, of course. You can't measure\neffectiveness by simply taking a vote, as you do with vaccines.\nYou have to imagine the responses of subjects with a deep knowledge\nof art, and enough clarity of mind to be able to ignore extraneous\ninfluences like the fame of the artist. And even then you'd still\nsee some disagreement. People do vary, and judging art is hard,\nespecially recent art. There is definitely not a total order either\nof works or of people's ability to judge them. But there is equally\ndefinitely a partial order of both. So while it's not possible to\nhave perfect taste, it is possible to have good taste.\n\n\n\n\n\n\n\n\nThanks to the Cambridge Union for inviting me, and to Trevor\nBlackwell, Jessica Livingston, and Robert Morris for reading drafts\nof this.\n\n\n", "October 2021\n\nIf you asked people what was special about Einstein, most would say\nthat he was really smart. Even the ones who tried to give you a\nmore sophisticated-sounding answer would probably think this first.\nTill a few years ago I would have given the same answer myself. But\nthat wasn't what was special about Einstein. What was special about\nhim was that he had important new ideas. Being very smart was a\nnecessary precondition for having those ideas, but the two are not\nidentical.\n\nIt may seem a hair-splitting distinction to point out that intelligence\nand its consequences are not identical, but it isn't. There's a big\ngap between them. Anyone who's spent time around universities and\nresearch labs knows how big. There are a lot of genuinely smart\npeople who don't achieve very much.\n\nI grew up thinking that being smart was the thing most to be desired.\nPerhaps you did too. But I bet it's not what you really want. Imagine\nyou had a choice between being really smart but discovering nothing\nnew, and being less smart but discovering lots of new ideas. Surely\nyou'd take the latter. I would. The choice makes me uncomfortable,\nbut when you see the two options laid out explicitly like that,\nit's obvious which is better.\n\nThe reason the choice makes me uncomfortable is that being smart\nstill feels like the thing that matters, even though I know\nintellectually that it isn't. I spent so many years thinking it\nwas. The circumstances of childhood are a perfect storm for fostering\nthis illusion. Intelligence is much easier to measure than the value\nof new ideas, and you're constantly being judged by it. Whereas\neven the kids who will ultimately discover new things aren't usually\ndiscovering them yet. For kids that way inclined, intelligence is\nthe only game in town.\n\nThere are more subtle reasons too, which persist long into adulthood.\nIntelligence wins in conversation, and thus becomes the basis of\nthe dominance hierarchy.\n[1]\nPlus having new ideas is such a new\nthing historically, and even now done by so few people, that society\nhasn't yet assimilated the fact that this is the actual destination,\nand intelligence merely a means to an end.\n[2]\n\nWhy do so many smart people fail to discover anything new? Viewed\nfrom that direction, the question seems a rather depressing one.\nBut there's another way to look at it that's not just more optimistic,\nbut more interesting as well. Clearly intelligence is not the only\ningredient in having new ideas. What are the other ingredients?\nAre they things we could cultivate?\n\nBecause the trouble with intelligence, they say, is that it's mostly\ninborn. The evidence for this seems fairly convincing, especially\nconsidering that most of us don't want it to be true, and the\nevidence thus has to face a stiff headwind. But I'm not going\nto get into that question here, because it's the other ingredients\nin new ideas that I care about, and it's clear that many of them\ncan be cultivated.\n\nThat means the truth is excitingly different from the story I got\nas a kid. If intelligence is what matters, and also mostly inborn,\nthe natural consequence is a sort of Brave New World fatalism. The\nbest you can do is figure out what sort of work you have an \"aptitude\"\nfor, so that whatever intelligence you were born with will at least\nbe put to the best use, and then work as hard as you can at it.\nWhereas if intelligence isn't what matters, but only one of several\ningredients in what does, and many of those aren't inborn, things\nget more interesting. You have a lot more control, but the problem\nof how to arrange your life becomes that much more complicated.\n\nSo what are the other ingredients in having new ideas? The fact\nthat I can even ask this question proves the point I raised earlier\n\u2014 that society hasn't assimilated the fact that it's this and not\nintelligence that matters. Otherwise we'd all know the answers\nto such a fundamental question.\n[3]\n\nI'm not going to try to provide a complete catalogue of the other\ningredients here. This is the first time I've posed\nthe question to myself this way, and I think it may take a while\nto answer. But I wrote recently about one of the most important:\nan obsessive interest in a particular topic. \nAnd this can definitely be cultivated.\n\nAnother quality you need in order to discover new ideas is\nindependent-mindedness. I wouldn't want to \nclaim that this is\ndistinct from intelligence \u2014 I'd be reluctant to call someone smart\nwho wasn't independent-minded \u2014 but though largely inborn, this\nquality seems to be something that can be cultivated to some extent.\n\nThere are general techniques for having new ideas \u2014 for example,\nfor working on your own projects\nand\nfor overcoming the obstacles you face with early work\n\u2014 and these\ncan all be learned. Some of them can be learned by societies. And\nthere are also collections of techniques for generating specific types\nof new ideas, like startup ideas and \nessay topics.\n\nAnd of course there are a lot of fairly mundane ingredients in\ndiscovering new ideas, like working hard, \ngetting enough sleep, avoiding certain\nkinds of stress, having the right colleagues, and finding tricks\nfor working on what you want even when it's not what you're supposed\nto be working on. Anything that prevents people from doing great\nwork has an inverse that helps them to. And this class of ingredients\nis not as boring as it might seem at first. For example, having new\nideas is generally associated with youth. But perhaps it's not youth\nper se that yields new ideas, but specific things that come with\nyouth, like good health and lack of responsibilities. Investigating\nthis might lead to strategies that will help people of any age to\nhave better ideas.\n\nOne of the most surprising ingredients in having new ideas is writing\nability. There's a class of new ideas that are best discovered by\nwriting essays and books. And that \"by\" is deliberate: you don't\nthink of the ideas first, and then merely write them down. There\nis a kind of thinking that one does by writing, and if you're clumsy\nat writing, or don't enjoy doing it, that will get in your way if\nyou try to do this kind of thinking.\n[4]\n\nI predict the gap between intelligence and new ideas will turn out\nto be an interesting place. If we think of this gap merely as a measure\nof unrealized potential, it becomes a sort of wasteland that we try to\nhurry through with our eyes averted. But if we flip the question,\nand start inquiring into the other ingredients in new ideas that\nit implies must exist, we can mine this gap for discoveries about\ndiscovery.\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nWhat wins in conversation depends on who with. It ranges from\nmere aggressiveness at the bottom, through quick-wittedness in the\nmiddle, to something closer to actual intelligence at the top,\nthough probably always with some component of quick-wittedness.\n\n[2]\nJust as intelligence isn't the only ingredient in having new\nideas, having new ideas isn't the only thing intelligence is useful\nfor. It's also useful, for example, in diagnosing problems and figuring\nout how to fix them. Both overlap with having new ideas, but both\nhave an end that doesn't.\n\nThose ways of using intelligence are much more common than having\nnew ideas. And in such cases intelligence is even harder to distinguish\nfrom its consequences.\n\n[3]\nSome would attribute the difference between intelligence and\nhaving new ideas to \"creativity,\" but this doesn't seem a very\nuseful term. As well as being pretty vague, it's shifted half a frame\nsideways from what we care about: it's neither separable from\nintelligence, nor responsible for all the difference between\nintelligence and having new ideas.\n\n[4]\nCuriously enough, this essay is an example. It started out\nas an essay about writing ability. But when I came to the distinction\nbetween intelligence and having new ideas, that seemed so much more\nimportant that I turned the original essay inside out, making that\nthe topic and my original topic one of the points in it. As in many\nother fields, that level of reworking is easier to contemplate once\nyou've had a lot of practice.\n\n\n\n\nThanks to Trevor Blackwell, Patrick Collison, Jessica Livingston,\nRobert Morris, Michael Nielsen, and Lisa Randall for reading drafts\nof this.\n\n\n", "August 2021\n\nWhen people say that in their experience all programming languages\nare basically equivalent, they're making a statement not about\nlanguages but about the kind of programming they've done.\n\n99.5% of programming consists of gluing together calls to library\nfunctions. All popular languages are equally good at this. So one\ncan easily spend one's whole career operating in the intersection\nof popular programming languages.\n\nBut the other .5% of programming is disproportionately interesting.\nIf you want to learn what it consists of, the weirdness of weird\nlanguages is a good clue to follow.\n\nWeird languages aren't weird by accident. Not the good ones, at\nleast. The weirdness of the good ones usually implies the existence\nof some form of programming that's not just the usual gluing together\nof library calls.\n\nA concrete example: Lisp macros. Lisp macros seem weird even to\nmany Lisp programmers. They're not only not in the intersection of\npopular languages, but by their nature would be hard to implement\nproperly in a language without turning it into a dialect of\nLisp. And macros are definitely evidence of techniques that go\nbeyond glue programming. For example, solving problems by first\nwriting a language for problems of that type, and then writing\nyour specific application in it. Nor is this all you can do with\nmacros; it's just one region in a space of program-manipulating\ntechniques that even now is far from fully explored.\n\nSo if you want to expand your concept of what programming can be,\none way to do it is by learning weird languages. Pick a language\nthat most programmers consider weird but whose median user is smart,\nand then focus on the differences between this language and the\nintersection of popular languages. What can you say in this language\nthat would be impossibly inconvenient to say in others? In the\nprocess of learning how to say things you couldn't previously say,\nyou'll probably be learning how to think things you couldn't\npreviously think.\n\n\n\n\n\n\n\n\nThanks to Trevor Blackwell, Patrick Collison, Daniel Gackle, Amjad\nMasad, and Robert Morris for reading drafts of this.\n\n\n", "June 2021\n\nIt might not seem there's much to learn about how to work hard.\nAnyone who's been to school knows what it entails, even if they\nchose not to do it. There are 12 year olds who work amazingly hard. And\nyet when I ask if I know more about working hard now than when I\nwas in school, the answer is definitely yes.\n\nOne thing I know is that if you want to do great things, you'll\nhave to work very hard. I wasn't sure of that as a kid. Schoolwork\nvaried in difficulty; one didn't always have to work super hard to\ndo well. And some of the things famous adults did, they seemed to\ndo almost effortlessly. Was there, perhaps, some way to evade hard\nwork through sheer brilliance? Now I know the answer to that question.\nThere isn't.\n\nThe reason some subjects seemed easy was that my school had low\nstandards. And the reason famous adults seemed to do things\neffortlessly was years of practice; they made it look easy.\n\nOf course, those famous adults usually had a lot of natural ability\ntoo. There are three ingredients in great work: natural ability,\npractice, and effort. You can do pretty well with just two, but to\ndo the best work you need all three: you need great natural ability\nand to have practiced a lot and to be trying very hard. \n[1]\n\nBill Gates, for example, was among the smartest people in business\nin his era, but he was also among the hardest working. \"I never\ntook a day off in my twenties,\" he said. \"Not one.\" It was similar\nwith Lionel Messi. He had great natural ability, but when his youth\ncoaches talk about him, what they remember is not his talent but\nhis dedication and his desire to win. P. G. Wodehouse would probably\nget my vote for best English writer of the 20th century, if I had\nto choose. Certainly no one ever made it look easier. But no one\never worked harder. At 74, he wrote\n\n  with each new book of mine I have, as I say, the feeling that\n  this time I have picked a lemon in the garden of literature. A\n  good thing, really, I suppose. Keeps one up on one's toes and\n  makes one rewrite every sentence ten times. Or in many cases\n  twenty times.\n\nSounds a bit extreme, you think. And yet Bill Gates sounds even\nmore extreme. Not one day off in ten years?  These two had about\nas much natural ability as anyone could have, and yet they also\nworked about as hard as anyone could work. You need both.\n\nThat seems so obvious, and yet in practice we find it slightly hard\nto grasp. There's a faint xor between talent and hard work. It comes\npartly from popular culture, where it seems to run very deep, and\npartly from the fact that the outliers are so rare. If great talent\nand great drive are both rare, then people with both are rare\nsquared. Most people you meet who have a lot of one will have less\nof the other. But you'll need both if you want to be an outlier\nyourself. And since you can't really change how much natural talent\nyou have, in practice doing great work, insofar as you can, reduces\nto working very hard.\n\nIt's straightforward to work hard if you have clearly defined,\nexternally imposed goals, as you do in school. There is some technique\nto it: you have to learn not to lie to yourself, not to procrastinate\n(which is a form of lying to yourself), not to get distracted, and\nnot to give up when things go wrong. But this level of discipline\nseems to be within the reach of quite young children, if they want\nit.\n\nWhat I've learned since I was a kid is how to work toward goals\nthat are neither clearly defined nor externally imposed. You'll\nprobably have to learn both if you want to do really great things.\n\nThe most basic level of which is simply to feel you should be working\nwithout anyone telling you to. Now, when I'm not working hard, alarm\nbells go off. I can't be sure I'm getting anywhere when I'm working\nhard, but I can be sure I'm getting nowhere when I'm not, and it\nfeels awful.\n[2]\n\nThere wasn't a single point when I learned this. Like most little\nkids, I enjoyed the feeling of achievement when I learned or did\nsomething new. As I grew older, this morphed into a feeling of\ndisgust when I wasn't achieving anything. The one precisely dateable\nlandmark I have is when I stopped watching TV, at age\u00a013.\n\nSeveral people I've talked to remember getting serious about work\naround this age. When I asked Patrick Collison when he started to\nfind idleness distasteful, he said\n\n  I think around age 13 or 14. I have a clear memory from around\n  then of sitting in the sitting room, staring outside, and wondering\n  why I was wasting my summer holiday.\n\nPerhaps something changes at adolescence. That would make sense.\n\nStrangely enough, the biggest obstacle to getting serious about\nwork was probably school, which made work (what they called work)\nseem boring and pointless. I had to learn what real work was before\nI could wholeheartedly desire to do it. That took a while, because\neven in college a lot of the work is pointless; there are entire\ndepartments that are pointless. But as I learned the shape of real\nwork, I found that my desire to do it slotted into it as if they'd\nbeen made for each other.\n\nI suspect most people have to learn what work is before they can\nlove it. Hardy wrote eloquently about this in A Mathematician's\nApology:\n\n  I do not remember having felt, as a boy, any passion for\n  mathematics, and such notions as I may have had of the career of\n  a mathematician were far from noble. I thought of mathematics in\n  terms of examinations and scholarships: I wanted to beat other\n  boys, and this seemed to be the way in which I could do so most\n  decisively.\n\nHe didn't learn what math was really about till part way through\ncollege, when he read Jordan's Cours d'analyse.\n\n  I shall never forget the astonishment with which I read that\n  remarkable work, the first inspiration for so many mathematicians\n  of my generation, and learnt for the first time as I read it what\n  mathematics really meant.\n\nThere are two separate kinds of fakeness you need to learn to\ndiscount in order to understand what real work is. One is the kind\nHardy encountered in school. Subjects get distorted when they're\nadapted to be taught to kids \u2014 often so distorted that they're\nnothing like the work done by actual practitioners.\n[3]\nThe other\nkind of fakeness is intrinsic to certain types of work. Some types\nof work are inherently bogus, or at best mere busywork.\n\nThere's a kind of solidity to real work. It's not all writing the\nPrincipia, but it all feels necessary. That's a vague criterion,\nbut it's deliberately vague, because it has to cover a lot of\ndifferent types.\n[4]\n\nOnce you know the shape of real work, you have to learn how many\nhours a day to spend on it. You can't solve this problem by simply\nworking every waking hour, because in many kinds of work there's a\npoint beyond which the quality of the result will start to decline.\n\nThat limit varies depending on the type of work and the person.\nI've done several different kinds of work, and the limits were\ndifferent for each. My limit for the harder types of writing or\nprogramming is about five hours a day. Whereas when I was running\na startup, I could\nwork all the time. At least for the three years I did it; if I'd\nkept going much longer, I'd probably have needed to take occasional\nvacations.\n[5]\n\nThe only way to find the limit is by crossing it. Cultivate a\nsensitivity to the quality of the work you're doing, and then you'll\nnotice if it decreases because you're working too hard. Honesty is\ncritical here, in both directions: you have to notice when you're\nbeing lazy, but also when you're working too hard. And if you think\nthere's something admirable about working too hard, get that idea\nout of your head. You're not merely getting worse results, but\ngetting them because you're showing off \u2014 if not to other people,\nthen to yourself.\n[6]\n\nFinding the limit of working hard is a constant, ongoing process,\nnot something you do just once. Both the difficulty of the work and\nyour ability to do it can vary hour to hour, so you need to be\nconstantly judging both how hard you're trying and how well you're\ndoing.\n\nTrying hard doesn't mean constantly pushing yourself to work, though.\nThere may be some people who do, but I think my experience is fairly\ntypical, and I only have to push myself occasionally when I'm\nstarting a project or when I encounter some sort of check. That's\nwhen I'm in danger of procrastinating. But once I get rolling, I\ntend to keep going.\n\nWhat keeps me going depends on the type of work. When I was working\non Viaweb, I was driven by fear of failure. I barely procrastinated\nat all then, because there was always something that needed doing,\nand if I could put more distance between me and the pursuing beast\nby doing it, why wait? [7]\nWhereas what drives me now, writing\nessays, is the flaws in them. Between essays I fuss for a few days,\nlike a dog circling while it decides exactly where to lie down. But\nonce I get started on one, I don't have to push myself to work,\nbecause there's always some error or omission already pushing me.\n\nI do make some amount of effort to focus on important topics. Many\nproblems have a hard core at the center, surrounded by easier stuff\nat the edges. Working hard means aiming toward the center to the\nextent you can. Some days you may not be able to; some days you'll\nonly be able to work on the easier, peripheral stuff. But you should\nalways be aiming as close to the center as you can without stalling.\n\nThe bigger question of what to do with your life is one of these\nproblems with a hard core. There are important problems at the\ncenter, which tend to be hard, and less important, easier ones at\nthe edges. So as well as the small, daily adjustments involved in\nworking on a specific problem, you'll occasionally have to make\nbig, lifetime-scale adjustments about which type of work to do.\nAnd the rule is the same: working hard means aiming toward the\ncenter \u2014 toward the most ambitious problems.\n\nBy center, though, I mean the actual center, not merely the current\nconsensus about the center. The consensus about which problems are\nmost important is often mistaken, both in general and within specific\nfields. If you disagree with it, and you're right, that could\nrepresent a valuable opportunity to do something new.\n\nThe more ambitious types of work will usually be harder, but although\nyou should not be in denial about this, neither should you treat\ndifficulty as an infallible guide in deciding what to do. If you\ndiscover some ambitious type of work that's a bargain in the sense\nof being easier for you than other people, either because of the\nabilities you happen to have, or because of some new way you've\nfound to approach it, or simply because you're more excited about\nit, by all means work on that. Some of the best work is done by\npeople who find an easy way to do something hard.\n\nAs well as learning the shape of real work, you need to figure out\nwhich kind you're suited for. And that doesn't just mean figuring\nout which kind your natural abilities match the best; it doesn't\nmean that if you're 7 feet tall, you have to play basketball. What\nyou're suited for depends not just on your talents but perhaps even\nmore on your interests. A deep interest \nin a topic makes people\nwork harder than any amount of discipline can.\n\nIt can be harder to discover your interests than your talents.\nThere are fewer types of talent than interest, and they start to\nbe judged early in childhood, whereas interest in a topic is a\nsubtle thing that may not mature till your twenties, or even later.\nThe topic may not even exist earlier. Plus there are some powerful\nsources of error you need to learn to discount. Are you really\ninterested in x, or do you want to work on it because you'll make\na lot of money, or because other people will be impressed with you,\nor because your parents want you to?\n[8]\n\nThe difficulty of figuring out what to work on varies enormously\nfrom one person to another. That's one of the most important things\nI've learned about work since I was a kid. As a kid, you get the\nimpression that everyone has a calling, and all they have to do is\nfigure out what it is. That's how it works in movies, and in the\nstreamlined biographies fed to kids. Sometimes it works that way\nin real life. Some people figure out what to do as children and\njust do it, like Mozart. But others, like Newton, turn restlessly\nfrom one kind of work to another. Maybe in retrospect we can identify\none as their calling \u2014 we can wish Newton spent more time on math\nand physics and less on alchemy and theology \u2014 but this is an\nillusion induced by hindsight bias. \nThere was no voice calling to him that he could have heard.\n\nSo while some people's lives converge fast, there will be others\nwhose lives never converge. And for these people, figuring out what\nto work on is not so much a prelude to working hard as an ongoing\npart of it, like one of a set of simultaneous equations. For these\npeople, the process I described earlier has a third component: along\nwith measuring both how hard you're working and how well you're\ndoing, you have to think about whether you should keep working in\nthis field or switch to another. If you're working hard but not\ngetting good enough results, you should switch. It sounds simple\nexpressed that way, but in practice it's very difficult. You shouldn't\ngive up on the first day just because you work hard and don't get\nanywhere. You need to give yourself time to get going. But how much\ntime? And what should you do if work that was going well stops going\nwell? How much time do you give yourself then?\n[9]\n\nWhat even counts as good results? That can be really hard to decide.\nIf you're exploring an area few others have worked in, you may not\neven know what good results look like. History is full of examples\nof people who misjudged the importance of what they were working\non.\n\nThe best test of whether it's worthwhile to work on something is\nwhether you find it interesting. That may sound like a dangerously\nsubjective measure, but it's probably the most accurate one you're\ngoing to get. You're the one working on the stuff. Who's in a better\nposition than you to judge whether it's important, and what's a\nbetter predictor of its importance than whether it's interesting?\n\nFor this test to work, though, you have to be honest with yourself.\nIndeed, that's the most striking thing about the whole question of\nworking hard: how at each point it depends on being honest with\nyourself.\n\nWorking hard is not just a dial you turn up to 11. It's a complicated,\ndynamic system that has to be tuned just right at each point. You\nhave to understand the shape of real work, see clearly what kind\nyou're best suited for, aim as close to the true core of it as you\ncan, accurately judge at each moment both what you're capable of\nand how you're doing, and put in as many hours each day as you can\nwithout harming the quality of the result. This network is too\ncomplicated to trick. But if you're consistently honest and\nclear-sighted, it will automatically assume an optimal shape, and\nyou'll be productive in a way few people are.\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nIn \"The Bus Ticket Theory of Genius\" I said the three ingredients\nin great work were natural ability, determination, and interest.\nThat's the formula in the preceding stage; determination and interest\nyield practice and effort.\n\n[2]\nI mean this at a resolution of days, not hours. You'll often\nget somewhere while not working in the sense that the solution to\na problem comes to you while taking a \nshower, or even in your sleep,\nbut only because you were working hard on it the day before.\n\nIt's good to go on vacation occasionally, but when I go on vacation,\nI like to learn new things. I wouldn't like just sitting on a beach.\n\n[3]\nThe thing kids do in school that's most like the real version\nis sports. Admittedly because many sports originated as games played\nin schools. But in this one area, at least, kids are doing exactly\nwhat adults do.\n\nIn the average American high school, you have a choice of pretending\nto do something serious, or seriously doing something pretend.\nArguably the latter is no worse.\n\n[4]\nKnowing what you want to work on doesn't mean you'll be able\nto. Most people have to spend a lot of their time working on things\nthey don't want to, especially early on. But if you know what you\nwant to do, you at least know what direction to nudge your life in.\n\n[5]\nThe lower time limits for intense work suggest a solution to\nthe problem of having less time to work after you have kids: switch\nto harder problems. In effect I did that, though not deliberately.\n\n[6]\nSome cultures have a tradition of performative hard work. I\ndon't love this idea, because (a) it makes a parody of something\nimportant and (b) it causes people to wear themselves out doing\nthings that don't matter. I don't know enough to say for sure whether\nit's net good or bad, but my guess is bad.\n\n[7]\nOne of the reasons people work so hard on startups is that\nstartups can fail, and when they do, that failure tends to be both\ndecisive and conspicuous.\n\n[8]\nIt's ok to work on something to make a lot of money. You need\nto solve the money problem somehow, and there's nothing wrong with\ndoing that efficiently by trying to make a lot at once. I suppose\nit would even be ok to be interested in money for its own sake;\nwhatever floats your boat. Just so long as you're conscious of your\nmotivations. The thing to avoid is unconsciously letting the need\nfor money warp your ideas about what kind of work you find most\ninteresting.\n\n[9]\nMany people face this question on a smaller scale with\nindividual projects. But it's easier both to recognize and to accept\na dead end in a single project than to abandon some type of work\nentirely. The more determined you are, the harder it gets. Like a\nSpanish Flu victim, you're fighting your own immune system: Instead\nof giving up, you tell yourself, I should just try harder. And who\ncan say you're not right?\n\n\n\n\nThanks to Trevor Blackwell, John Carmack, John Collison, Patrick Collison,\nRobert Morris, Geoff Ralston, and Harj Taggar for reading drafts of this.\n\n", "June 2021\n\nA few days ago, on the way home from school, my nine year old son\ntold me he couldn't wait to get home to write more of the story he\nwas working on. This made me as happy as anything I've heard him\nsay \u2014 not just because he was excited about his story, but because\nhe'd discovered this way of working. Working on a project of your\nown is as different from ordinary work as skating is from walking.\nIt's more fun, but also much more productive.\n\nWhat proportion of great work has been done by people who were\nskating in this sense? If not all of it, certainly a lot.\n\nThere is something special about working on a project of your own.\nI wouldn't say exactly that you're happier. A better word would be\nexcited, or engaged. You're happy when things are going well, but\noften they aren't. When I'm writing an essay, most of the time I'm\nworried and puzzled: worried that the essay will turn out badly,\nand puzzled because I'm groping for some idea that I can't see\nclearly enough. Will I be able to pin it down with words? In the\nend I usually can, if I take long enough, but I'm never sure; the\nfirst few attempts often fail.\n\nYou have moments of happiness when things work out, but they don't\nlast long, because then you're on to the next problem. So why do\nit at all? Because to the kind of people who like working this way,\nnothing else feels as right. You feel as if you're an animal in its\nnatural habitat, doing what you were meant to do \u2014 not always\nhappy, maybe, but awake and alive.\n\nMany kids experience the excitement of working on projects of their\nown. The hard part is making this converge with the work you do as\nan adult. And our customs make it harder. We treat \"playing\" and\n\"hobbies\" as qualitatively different from \"work\". It's not clear\nto a kid building a treehouse that there's a direct (though long)\nroute from that to architecture or engineering. And instead of\npointing out the route, we conceal it, by implicitly treating the\nstuff kids do as different from real work.\n[1]\n\nInstead of telling kids that their treehouses could be on the path\nto the work they do as adults, we tell them the path goes through\nschool. And unfortunately schoolwork tends to be very different from\nworking on projects of one's own. It's usually neither a project,\nnor one's own. So as school gets more serious, working on projects\nof one's own is something that survives, if at all, as a thin thread\noff to the side.\n\nIt's a bit sad to think of all the high school kids turning their\nbacks on building treehouses and sitting in class dutifully learning\nabout Darwin or Newton to pass some exam, when the work that made\nDarwin and Newton famous was actually closer in spirit to building\ntreehouses than studying for exams.\n\nIf I had to choose between my kids getting good grades and \nworking on ambitious projects of their own, I'd pick\nthe projects. And not because I'm an indulgent parent, but because\nI've been on the other end and I know which has more predictive\nvalue. When I was picking startups for Y Combinator, I didn't care\nabout applicants' grades. But if they'd worked on projects of their\nown, I wanted to hear all about those.\n[2]\n\nIt may be inevitable that school is the way it is. I'm not saying\nwe have to redesign it (though I'm not saying we don't), just that\nwe should understand what it does to our attitudes to work \u2014 that\nit steers us toward the dutiful plodding kind of work, often using\ncompetition as bait, and away from skating.\n\nThere are occasionally times when schoolwork becomes a project of\none's own. Whenever I had to write a paper, that would become a\nproject of my own \u2014 except in English classes, ironically, because\nthe things one has to write in English classes are so \nbogus. And\nwhen I got to college and started taking CS classes, the programs\nI had to write became projects of my own. Whenever I was writing\nor programming, I was usually skating, and that has been true ever\nsince.\n\nSo where exactly is the edge of projects of one's own? That's an\ninteresting question, partly because the answer is so complicated,\nand partly because there's so much at stake. There turn out to be\ntwo senses in which work can be one's own: 1) that you're doing it\nvoluntarily, rather than merely because someone told you to, and\n2) that you're doing it by yourself.\n\nThe edge of the former is quite sharp. People who care a lot about\ntheir work are usually very sensitive to the difference between\npulling, and being pushed, and work tends to fall into one category\nor the other. But the test isn't simply whether you're told to do\nsomething. You can choose to do something you're told to do. Indeed,\nyou can own it far more thoroughly than the person who told you to\ndo it.\n\nFor example, math homework is for most people something they're\ntold to do. But for my father, who was a mathematician, it wasn't.\nMost of us think of the problems in a math book as a way to test\nor develop our knowledge of the material explained in each section.\nBut to my father the problems were the part that mattered, and the\ntext was merely a sort of annotation. Whenever he got a new math\nbook it was to him like being given a puzzle: here was a new set\nof problems to solve, and he'd immediately set about solving all\nof them.\n\nThe other sense of a project being one's own \u2014 working on it by\noneself \u2014 has a much softer edge. It shades gradually into\ncollaboration. And interestingly, it shades into collaboration in\ntwo different ways. One way to collaborate is to share a single\nproject. For example, when two mathematicians collaborate on a proof\nthat takes shape in the course of a conversation between them. The\nother way is when multiple people work on separate projects of their\nown that fit together like a jigsaw puzzle. For example, when one\nperson writes the text of a book and another does the graphic design.\n[3]\n\nThese two paths into collaboration can of course be combined. But\nunder the right conditions, the excitement of working on a project\nof one's own can be preserved for quite a while before disintegrating\ninto the turbulent flow of work in a large organization. Indeed,\nthe history of successful organizations is partly the history of\ntechniques for preserving that excitement.\n[4]\n\nThe team that made the original Macintosh were a great example of\nthis phenomenon. People like Burrell Smith and Andy Hertzfeld and\nBill Atkinson and Susan Kare were not just following orders. They\nwere not tennis balls hit by Steve Jobs, but rockets let loose by\nSteve Jobs. There was a lot of collaboration between them, but\nthey all seem to have individually felt the excitement of\nworking on a project of one's own.\n\nIn Andy Hertzfeld's book on the Macintosh, he describes how they'd\ncome back into the office after dinner and work late into the night.\nPeople who've never experienced the thrill of working on a project\nthey're excited about can't distinguish this kind of working long\nhours from the kind that happens in sweatshops and boiler rooms,\nbut they're at opposite ends of the spectrum. That's why it's a\nmistake to insist dogmatically on \"work/life balance.\" Indeed, the\nmere expression \"work/life\" embodies a mistake: it assumes work and\nlife are distinct. For those to whom the word \"work\" automatically\nimplies the dutiful plodding kind, they are. But for the skaters,\nthe relationship between work and life would be better represented\nby a dash than a slash. I wouldn't want to work on anything that I didn't\nwant to take over my life.\n\nOf course, it's easier to achieve this level of motivation when\nyou're making something like the Macintosh. It's easy for something\nnew to feel like a project of your own. That's one of the reasons\nfor the tendency programmers have to rewrite things that don't need\nrewriting, and to write their own versions of things that already\nexist. This sometimes alarms managers, and measured by total number\nof characters typed, it's rarely the optimal solution. But it's not\nalways driven simply by arrogance or cluelessness.\nWriting code from scratch is also much more rewarding \u2014 so much\nmore rewarding that a good programmer can end up net ahead, despite\nthe shocking waste of characters. Indeed, it may be one of the\nadvantages of capitalism that it encourages such rewriting. A company\nthat needs software to do something can't use the software already\nwritten to do it at another company, and thus has to write their\nown, which often turns out better.\n[5]\n\nThe natural alignment between skating and solving new problems is\none of the reasons the payoffs from startups are so high. Not only\nis the market price of unsolved problems higher, you also get a\ndiscount on productivity when you work on them. In fact, you get a\ndouble increase in productivity: when you're doing a clean-sheet\ndesign, it's easier to recruit skaters, and they get to spend all\ntheir time skating.\n\nSteve Jobs knew a thing or two about skaters from having watched\nSteve Wozniak. If you can find the right people, you only have to\ntell them what to do at the highest level. They'll handle the\ndetails. Indeed, they insist on it. For a project to feel like your\nown, you must have sufficient autonomy. You can't be working to\norder, or slowed down \nby bureaucracy.\n\nOne way to ensure autonomy is not to have a boss at all. There are\ntwo ways to do that: to be the boss yourself, and to work on projects\noutside of work. Though they're at opposite ends of the scale\nfinancially, startups and open source projects have a lot in common,\nincluding the fact that they're often run by skaters. And indeed,\nthere's a wormhole from one end of the scale to the other: one of\nthe best ways to discover \nstartup ideas is to work on a project\njust for fun.\n\nIf your projects are the kind that make money, it's easy to work\non them. It's harder when they're not. And the hardest part, usually,\nis morale. That's where adults have it harder than kids. Kids just\nplunge in and build their treehouse without worrying about whether\nthey're wasting their time, or how it compares to other treehouses.\nAnd frankly we could learn a lot from kids here. The high standards\nmost grownups have for \"real\" work do not always serve us well.\n\nThe most important phase in a project of one's own is at the\nbeginning: when you go from thinking it might be cool to do x to\nactually doing x. And at that point high standards are not merely\nuseless but positively harmful. There are a few people who start\ntoo many new projects, but far more, I suspect, who are deterred\nby fear of failure from starting projects that would have succeeded\nif they had.\n\nBut if we couldn't benefit as kids from the knowledge that our\ntreehouses were on the path to grownup projects, we can at least\nbenefit as grownups from knowing that our projects are on a path\nthat stretches back to treehouses. Remember that careless confidence\nyou had as a kid when starting something new? That would be a\npowerful thing to recapture.\n\nIf it's harder as adults to retain that kind of confidence, we at\nleast tend to be more aware of what we're doing. Kids bounce, or\nare herded, from one kind of work to the next, barely realizing\nwhat's happening to them. Whereas we know more about different types\nof work and have more control over which we do. Ideally we can have\nthe best of both worlds: to be deliberate in choosing to work on\nprojects of our own, and carelessly confident in starting new ones.\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\n\"Hobby\" is a curious word. Now it means work that isn't real\nwork \u2014 work that one is not to be judged by \u2014 but originally it just\nmeant an obsession in a fairly general sense (even a political\nopinion, for example) that one metaphorically rode as a child rides\na hobby-horse. It's hard to say if its recent, narrower meaning is\na change for the better or the worse. For sure there are lots of\nfalse positives \u2014 lots of projects that end up being important but\nare dismissed initially as mere hobbies. But on the other hand, the\nconcept provides valuable cover for projects in the early, ugly\nduckling phase.\n\n[2]\nTiger parents, as parents so often do, are fighting the last\nwar. Grades mattered more in the old days when the route to success\nwas to acquire \ncredentials \nwhile ascending some predefined ladder.\nBut it's just as well that their tactics are focused on grades. How\nawful it would be if they invaded the territory of projects, and\nthereby gave their kids a distaste for this kind of work by forcing\nthem to do it. Grades are already a grim, fake world, and aren't\nharmed much by parental interference, but working on one's own\nprojects is a more delicate, private thing that could be damaged\nvery easily.\n\n[3]\nThe complicated, gradual edge between working on one's own\nprojects and collaborating with others is one reason there is so\nmuch disagreement about the idea of the \"lone genius.\" In practice\npeople collaborate (or not) in all kinds of different ways, but the\nidea of the lone genius is definitely not a myth. There's a core\nof truth to it that goes with a certain way of working.\n\n[4]\nCollaboration is powerful too. The optimal organization would\ncombine collaboration and ownership in such a way as to do the least\ndamage to each. Interestingly, companies and university departments\napproach this ideal from opposite directions: companies insist on\ncollaboration, and occasionally also manage both to recruit skaters\nand allow them to skate, and university departments insist on the\nability to do independent research (which is by custom treated as\nskating, whether it is or not), and the people they hire collaborate\nas much as they choose.\n\n[5]\nIf a company could design its software in such a way that the\nbest newly arrived programmers always got a clean sheet, it could\nhave a kind of eternal youth. That might not be impossible. If you\nhad a software backbone defining a game with sufficiently clear\nrules, individual programmers could write their own players.\n\n\n\n\n\n\nThanks to Trevor Blackwell, Paul Buchheit, Andy Hertzfeld, Jessica\nLivingston, and Peter Norvig for reading drafts of this.\n\n", "May 2021\n\nMost people think of nerds as quiet, diffident people. In ordinary\nsocial situations they are \u2014 as quiet and diffident as the star\nquarterback would be if he found himself in the middle of a physics\nsymposium. And for the same reason: they are fish out of water.\nBut the apparent diffidence of nerds is an illusion due to the fact\nthat when non-nerds observe them, it's usually in ordinary social\nsituations. In fact some nerds are quite fierce.\n\nThe fierce nerds are a small but interesting group. They are as a\nrule extremely competitive \u2014 more competitive, I'd say, than highly\ncompetitive non-nerds. Competition is more personal for them. Partly\nperhaps because they're not emotionally mature enough to distance\nthemselves from it, but also because there's less randomness in the\nkinds of competition they engage in, and they are thus more justified\nin taking the results personally.\n\nFierce nerds also tend to be somewhat overconfident, especially\nwhen young. It might seem like it would be a disadvantage to be\nmistaken about one's abilities, but empirically it isn't. Up to a\npoint, confidence is a self-fullfilling prophecy.\n\nAnother quality you find in most fierce nerds is intelligence. Not\nall nerds are smart, but the fierce ones are always at least\nmoderately so. If they weren't, they wouldn't have the confidence\nto be fierce.\n[1]\n\nThere's also a natural connection between nerdiness and\nindependent-mindedness. It's hard to be \nindependent-minded without\nbeing somewhat socially awkward, because conventional beliefs are\nso often mistaken, or at least arbitrary. No one who was both\nindependent-minded and ambitious would want to waste the effort it\ntakes to fit in. And the independent-mindedness of the fierce nerds\nwill obviously be of the aggressive \nrather than the passive type:\nthey'll be annoyed by rules, rather than dreamily unaware of them.\n\nI'm less sure why fierce nerds are impatient, but most seem to be.\nYou notice it first in conversation, where they tend to interrupt\nyou. This is merely annoying, but in the more promising fierce nerds\nit's connected to a deeper impatience about solving problems. Perhaps\nthe competitiveness and impatience of fierce nerds are not separate \nqualities, but two manifestations of a single underlying drivenness.\n\nWhen you combine all these qualities in sufficient quantities, the\nresult is quite formidable. The most vivid example of fierce nerds\nin action may be James Watson's The Double Helix. The first sentence\nof the book is \"I have never seen Francis Crick in a modest mood,\"\nand the portrait he goes on to paint of Crick is the quintessential\nfierce nerd: brilliant, socially awkward, competitive, independent-minded,\noverconfident. But so is the implicit portrait he paints of himself.\nIndeed, his lack of social awareness makes both portraits that much\nmore realistic, because he baldly states all sorts of opinions and\nmotivations that a smoother person would conceal. And moreover it's\nclear from the story that Crick and Watson's fierce nerdiness was\nintegral to their success. Their independent-mindedness caused them\nto consider approaches that most others ignored, their overconfidence\nallowed them to work on problems they only half understood (they\nwere literally described as \"clowns\" by one eminent insider), and\ntheir impatience and competitiveness got them to the answer ahead\nof two other groups that would otherwise have found it within the\nnext year, if not the next several months.\n[2]\n\nThe idea that there could be fierce nerds is an unfamiliar one not\njust to many normal people but even to some young nerds. Especially\nearly on, nerds spend so much of their time in ordinary social\nsituations and so little doing real work that they get a lot more\nevidence of their awkwardness than their power. So there will be\nsome who read this description of the fierce nerd and realize \"Hmm,\nthat's me.\" And it is to you, young fierce nerd, that I now turn.\n\nI have some good news, and some bad news. The good news is that\nyour fierceness will be a great help in solving difficult problems.\nAnd not just the kind of scientific and technical problems that\nnerds have traditionally solved. As the world progresses, the number\nof things you can win at by getting the right answer increases.\nRecently getting rich became \none of them: 7 of the 8 richest people\nin America are now fierce nerds.\n\nIndeed, being a fierce nerd is probably even more helpful in business\nthan in nerds' original territory of scholarship. Fierceness seems\noptional there. Darwin for example doesn't seem to have been\nespecially fierce. Whereas it's impossible to be the CEO of a company\nover a certain size without being fierce, so now that nerds can win\nat business, fierce nerds will increasingly monopolize the really\nbig successes.\n\nThe bad news is that if it's not exercised, your fierceness will\nturn to bitterness, and you will become an intellectual playground\nbully: the grumpy sysadmin, the forum troll, the \nhater, the shooter\ndown of new ideas.\n\nHow do you avoid this fate? Work on ambitious projects. If you\nsucceed, it will bring you a kind of satisfaction that neutralizes\nbitterness. But you don't need to have succeeded to feel this;\nmerely working on hard projects gives most fierce nerds some\nfeeling of satisfaction. And those it doesn't, it at least keeps\nbusy.\n[3]\n\nAnother solution may be to somehow turn off your fierceness, by\ndevoting yourself to meditation or psychotherapy or something like\nthat. Maybe that's the right answer for some people. I have no idea.\nBut it doesn't seem the optimal solution to me. If you're given a\nsharp knife, it seems to me better to use it than to blunt its edge\nto avoid cutting yourself.\n\nIf you do choose the ambitious route, you'll have a tailwind behind\nyou. There has never been a better time to be a nerd. In the past\ncentury we've seen a continuous transfer of power from dealmakers\nto technicians \u2014 from the charismatic to the competent \u2014 and I\ndon't see anything on the horizon that will end it. At least not\ntill the nerds end it themselves by bringing about the singularity.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nTo be a nerd is to be socially awkward, and there are two\ndistinct ways to do that: to be playing the same game as everyone\nelse, but badly, and to be playing a different game. The smart nerds\nare the latter type.\n\n[2]\nThe same qualities that make fierce nerds so effective can\nalso make them very annoying. Fierce nerds would do well to remember\nthis, and (a) try to keep a lid on it, and (b) seek out organizations\nand types of work where getting the right answer matters more than\npreserving social harmony. In practice that means small groups\nworking on hard problems. Which fortunately is the most fun kind\nof environment anyway.\n\n[3]\nIf success neutralizes bitterness, why are there some people\nwho are at least moderately successful and yet still quite bitter?\nBecause people's potential bitterness varies depending on how\nnaturally bitter their personality is, and how ambitious they are:\nsomeone who's naturally very bitter will still have a lot left after\nsuccess neutralizes some of it, and someone who's very ambitious\nwill need proportionally more success to satisfy that ambition.\n\nSo the worst-case scenario is someone who's both naturally bitter\nand extremely ambitious, and yet only moderately successful.\n\n\n\n\nThanks to Trevor Blackwell, Steve Blank, Patrick Collison, Jessica\nLivingston, Amjad Masad, and Robert Morris for reading drafts of this.\n\n", "May 2021\n\nThere's one kind of opinion I'd be very afraid to express publicly.\nIf someone I knew to be both a domain expert and a reasonable person\nproposed an idea that sounded preposterous, I'd be very reluctant\nto say \"That will never work.\"\n\nAnyone who has studied the history of ideas, and especially the\nhistory of science, knows that's how big things start. Someone\nproposes an idea that sounds crazy, most people dismiss it, then\nit gradually takes over the world.\n\nMost implausible-sounding ideas are in fact bad and could be safely\ndismissed. But not when they're proposed by reasonable domain\nexperts. If the person proposing the idea is reasonable, then they\nknow how implausible it sounds. And yet they're proposing it anyway.\nThat suggests they know something you don't. And if they have deep\ndomain expertise, that's probably the source of it.\n[1]\n\nSuch ideas are not merely unsafe to dismiss, but disproportionately\nlikely to be interesting. When the average person proposes an\nimplausible-sounding idea, its implausibility is evidence of their\nincompetence. But when a reasonable domain expert does it, the\nsituation is reversed. There's something like an efficient market\nhere: on average the ideas that seem craziest will, if correct,\nhave the biggest effect. So if you can eliminate the theory that\nthe person proposing an implausible-sounding idea is incompetent,\nits implausibility switches from evidence that it's boring to\nevidence that it's exciting.\n[2]\n\nSuch ideas are not guaranteed to work. But they don't have to be.\nThey just have to be sufficiently good bets \u2014 to have sufficiently\nhigh expected value. And I think on average they do. I think if you\nbet on the entire set of implausible-sounding ideas proposed by\nreasonable domain experts, you'd end up net ahead.\n\nThe reason is that everyone is too conservative. The word \"paradigm\"\nis overused, but this is a case where it's warranted. Everyone is\ntoo much in the grip of the current paradigm. Even the people who\nhave the new ideas undervalue them initially. Which means that\nbefore they reach the stage of proposing them publicly, they've\nalready subjected them to an excessively strict filter.\n[3]\n\nThe wise response to such an idea is not to make statements, but\nto ask questions, because there's a real mystery here. Why has this\nsmart and reasonable person proposed an idea that seems so wrong?\nAre they mistaken, or are you? One of you has to be. If you're the\none who's mistaken, that would be good to know, because it means\nthere's a hole in your model of the world. But even if they're\nmistaken, it should be interesting to learn why. A trap that an\nexpert falls into is one you have to worry about too.\n\nThis all seems pretty obvious. And yet there are clearly a lot of\npeople who don't share my fear of dismissing new ideas. Why do they\ndo it? Why risk looking like a jerk now and a fool later, instead\nof just reserving judgement?\n\nOne reason they do it is envy. If you propose a radical new idea\nand it succeeds, your reputation (and perhaps also your wealth)\nwill increase proportionally. Some people would be envious if that\nhappened, and this potential envy propagates back into a conviction\nthat you must be wrong.\n\nAnother reason people dismiss new ideas is that it's an easy way\nto seem sophisticated. When a new idea first emerges, it usually\nseems pretty feeble. It's a mere hatchling. Received wisdom is a\nfull-grown eagle by comparison. So it's easy to launch a devastating\nattack on a new idea, and anyone who does will seem clever to those\nwho don't understand this asymmetry.\n\nThis phenomenon is exacerbated by the difference between how those\nworking on new ideas and those attacking them are rewarded. The\nrewards for working on new ideas are weighted by the value of the\noutcome. So it's worth working on something that only has a 10%\nchance of succeeding if it would make things more than 10x better.\nWhereas the rewards for attacking new ideas are roughly constant;\nsuch attacks seem roughly equally clever regardless of the target.\n\nPeople will also attack new ideas when they have a vested interest\nin the old ones. It's not surprising, for example, that some of\nDarwin's harshest critics were churchmen. People build whole careers\non some ideas. When someone claims they're false or obsolete, they\nfeel threatened.\n\nThe lowest form of dismissal is mere factionalism: to automatically\ndismiss any idea associated with the opposing faction. The lowest\nform of all is to dismiss an idea because of who proposed it.\n\nBut the main thing that leads reasonable people to dismiss new ideas\nis the same thing that holds people back from proposing them: the\nsheer pervasiveness of the current paradigm. It doesn't just affect\nthe way we think; it is the Lego blocks we build thoughts out of.\nPopping out of the current paradigm is something only a few people\ncan do. And even they usually have to suppress their intuitions at\nfirst, like a pilot flying through cloud who has to trust his\ninstruments over his sense of balance.\n[4]\n\nParadigms don't just define our present thinking. They also vacuum\nup the trail of crumbs that led to them, making our standards for\nnew ideas impossibly high. The current paradigm seems so perfect\nto us, its offspring, that we imagine it must have been accepted\ncompletely as soon as it was discovered \u2014 that whatever the church thought\nof the heliocentric model, astronomers must have been convinced as\nsoon as Copernicus proposed it. Far, in fact, from it. Copernicus\npublished the heliocentric model in 1532, but it wasn't till the\nmid seventeenth century that the balance of scientific opinion\nshifted in its favor.\n[5]\n\nFew understand how feeble new ideas look when they first appear.\nSo if you want to have new ideas yourself, one of the most valuable\nthings you can do is to learn what they look like when they're born.\nRead about how new ideas happened, and try to get yourself into the\nheads of people at the time. How did things look to them, when the\nnew idea was only half-finished, and even the person who had it was\nonly half-convinced it was right?\n\nBut you don't have to stop at history. You can observe big new ideas\nbeing born all around you right now. Just look for a reasonable\ndomain expert proposing something that sounds wrong.\n\nIf you're nice, as well as wise, you won't merely resist attacking\nsuch people, but encourage them. Having new ideas is a lonely\nbusiness. Only those who've tried it know how lonely. These people\nneed your help. And if you help them, you'll probably learn something\nin the process.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nThis domain expertise could be in another field. Indeed,\nsuch crossovers tend to be particularly promising.\n\n[2]\nI'm not claiming this principle extends much beyond math,\nengineering, and the hard sciences. In politics, for example,\ncrazy-sounding ideas generally are as bad as they sound. Though\narguably this is not an exception, because the people who propose\nthem are not in fact domain experts; politicians are domain experts\nin political tactics, like how to get elected and how to get\nlegislation passed, but not in the world that policy acts upon.\nPerhaps no one could be.\n\n[3]\nThis sense of \"paradigm\" was defined by Thomas Kuhn in his\nStructure of Scientific Revolutions, but I also recommend his\nCopernican Revolution, where you can see him at work developing the\nidea.\n\n[4]\nThis is one reason people with a touch of Asperger's may have\nan advantage in discovering new ideas. They're always flying on\ninstruments.\n\n[5]\nHall, Rupert. From Galileo to Newton. Collins, 1963. This\nbook is particularly good at getting into contemporaries' heads.\n\n\n\nThanks to Trevor Blackwell, Patrick Collison, Suhail Doshi, Daniel\nGackle, Jessica Livingston, and Robert Morris for reading drafts of this.\n\n", "May 2021\n\nNoora Health, a nonprofit I've \nsupported for years, just launched\na new NFT. It has a dramatic name, Save Thousands of Lives,\nbecause that's what the proceeds will do.\n\nNoora has been saving lives for 7 years. They run programs in\nhospitals in South Asia to teach new mothers how to take care of\ntheir babies once they get home. They're in 165 hospitals now. And\nbecause they know the numbers before and after they start at a new\nhospital, they can measure the impact they have. It is massive.\nFor every 1000 live births, they save 9 babies.\n\nThis number comes from a study\nof 133,733 families at 28 different\nhospitals that Noora conducted in collaboration with the Better\nBirth team at Ariadne Labs, a joint center for health systems\ninnovation at Brigham and Women\u0092s Hospital and Harvard T.H. Chan\nSchool of Public Health.\n\nNoora is so effective that even if you measure their costs in the\nmost conservative way, by dividing their entire budget by the number\nof lives saved, the cost of saving a life is the lowest I've seen.\n$1,235.\n\nFor this NFT, they're going to issue a public report tracking how\nthis specific tranche of money is spent, and estimating the number\nof lives saved as a result.\n\nNFTs are a new territory, and this way of using them is especially\nnew, but I'm excited about its potential. And I'm excited to see\nwhat happens with this particular auction, because unlike an NFT\nrepresenting something that has already happened,\nthis NFT gets better as the price gets higher.\n\nThe reserve price was about $2.5 million, because that's what it\ntakes for the name to be accurate: that's what it costs to save\n2000 lives. But the higher the price of this NFT goes, the more\nlives will be saved. What a sentence to be able to write.\n\n", "April 2021\n\nWhen intellectuals talk about the death penalty, they talk about\nthings like whether it's permissible for the state to take someone's\nlife, whether the death penalty acts as a deterrent, and whether\nmore death sentences are given to some groups than others. But in\npractice the debate about the death penalty is not about whether\nit's ok to kill murderers. It's about whether it's ok to kill\ninnocent people, because at least 4% of people on death row are\ninnocent.\n\nWhen I was a kid I imagined that it was unusual for people to be\nconvicted of crimes they hadn't committed, and that in murder cases\nespecially this must be very rare. Far from it. Now, thanks to\norganizations like the\nInnocence Project,\nwe see a constant stream\nof stories about murder convictions being overturned after new\nevidence emerges. Sometimes the police and prosecutors were just\nvery sloppy. Sometimes they were crooked, and knew full well they\nwere convicting an innocent person.\n\nKenneth Adams and three other men spent 18 years in prison on a\nmurder conviction. They were exonerated after DNA testing implicated\nthree different men, two of whom later confessed. The police had\nbeen told about the other men early in the investigation, but never\nfollowed up the lead.\n\nKeith Harward spent 33 years in prison on a murder conviction. He\nwas convicted because \"experts\" said his teeth matched photos of\nbite marks on one victim. He was exonerated after DNA testing showed\nthe murder had been committed by another man, Jerry Crotty.\n\nRicky Jackson and two other men spent 39 years in prison after being\nconvicted of murder on the testimony of a 12 year old boy, who later\nrecanted and said he'd been coerced by police. Multiple people have\nconfirmed the boy was elsewhere at the time. The three men were\nexonerated after the county prosecutor dropped the charges, saying\n\"The state is conceding the obvious.\"\n\nAlfred Brown spent 12 years in prison on a murder conviction,\nincluding 10 years on death row. He was exonerated after it was\ndiscovered that the assistant district attorney had concealed phone\nrecords proving he could not have committed the crimes.\n\nGlenn Ford spent 29 years on death row after having been convicted\nof murder. He was exonerated after new evidence proved he was not\neven at the scene when the murder occurred. The attorneys assigned\nto represent him had never tried a jury case before.\n\nCameron Willingham was actually executed in 2004 by lethal injection.\nThe \"expert\" who testified that he deliberately set fire to his\nhouse has since been discredited. A re-examination of the case\nordered by the state of Texas in 2009 concluded that \"a finding of\narson could not be sustained.\"\n\nRich Glossip \nhas spent 20 years on death row after being convicted\nof murder on the testimony of the actual killer, who escaped with\na life sentence in return for implicating him. In 2015 he came\nwithin minutes of execution before it emerged that Oklahoma had\nbeen planning to kill him with an illegal combination of drugs.\nThey still plan to go ahead with the execution, perhaps as soon as\nthis summer, despite \nnew \nevidence exonerating him.\n\nI could go on. There are hundreds of similar cases. In Florida\nalone, 29 death row prisoners have been exonerated so far.\n\nFar from being rare, wrongful murder convictions are \nvery common.\nPolice are under pressure to solve a crime that has gotten a lot\nof attention. When they find a suspect, they want to believe he's\nguilty, and ignore or even destroy evidence suggesting otherwise.\nDistrict attorneys want to be seen as effective and tough on crime,\nand in order to win convictions are willing to manipulate witnesses\nand withhold evidence. Court-appointed defense attorneys are\noverworked and often incompetent. There's a ready supply of criminals\nwilling to give false testimony in return for a lighter sentence,\nsuggestible witnesses who can be made to say whatever police want,\nand bogus \"experts\" eager to claim that science proves the defendant\nis guilty. And juries want to believe them, since otherwise some\nterrible crime remains unsolved.\n\nThis circus of incompetence and dishonesty is the real issue with\nthe death penalty. We don't even reach the point where theoretical\nquestions about the moral justification or effectiveness of capital\npunishment start to matter, because so many of the people sentenced\nto death are actually innocent. Whatever it means in theory, in\npractice capital punishment means killing innocent people.\n\n\n\n\n\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, and Don Knight for\nreading drafts of this.\n\n\n\nRelated:\n\n", "April 2021\n\nEvery year since 1982, Forbes magazine has published a list of the\nrichest Americans. If we compare the 100 richest people in 1982 to\nthe 100 richest in 2020, we notice some big differences.\n\nIn 1982 the most common source of wealth was inheritance. Of the\n100 richest people, 60 inherited from an ancestor. There were 10\ndu Pont heirs alone. By 2020 the number of heirs had been cut in\nhalf, accounting for only 27 of the biggest 100 fortunes.\n\nWhy would the percentage of heirs decrease? Not because inheritance\ntaxes increased. In fact, they decreased significantly during this\nperiod. The reason the percentage of heirs has decreased is not\nthat fewer people are inheriting great fortunes, but that more\npeople are making them.\n\nHow are people making these new fortunes? Roughly 3/4 by starting\ncompanies and 1/4 by investing. Of the 73 new fortunes in 2020, 56\nderive from founders' or early employees' equity (52 founders, 2\nearly employees, and 2 wives of founders), and 17 from managing\ninvestment funds.\n\nThere were no fund managers among the 100 richest Americans in 1982.\nHedge funds and private equity firms existed in 1982, but none of\ntheir founders were rich enough yet to make it into the top 100.\nTwo things changed: fund managers discovered new ways to generate\nhigh returns, and more investors were willing to trust them with\ntheir money.\n[1]\n\nBut the main source of new fortunes now is starting companies, and\nwhen you look at the data, you see big changes there too. People\nget richer from starting companies now than they did in 1982, because\nthe companies do different things.\n\nIn 1982, there were two dominant sources of new wealth: oil and\nreal estate. Of the 40 new fortunes in 1982, at least 24 were due\nprimarily to oil or real estate. Now only a small number are: of\nthe 73 new fortunes in 2020, 4 were due to real estate and only 2\nto oil.\n\nBy 2020 the biggest source of new wealth was what are sometimes\ncalled \"tech\" companies. Of the 73 new fortunes, about 30 derive\nfrom such companies. These are particularly common among the richest\nof the rich: 8 of the top 10 fortunes in 2020 were new fortunes of\nthis type.\n\nArguably it's slightly misleading to treat tech as a category.\nIsn't Amazon really a retailer, and Tesla a car maker? Yes and no.\nMaybe in 50 years, when what we call tech is taken for granted, it\nwon't seem right to put these two businesses in the same category.\nBut at the moment at least, there is definitely something they share\nin common that distinguishes them. What retailer starts AWS? What\ncar maker is run by someone who also has a rocket company?\n\nThe tech companies behind the top 100 fortunes also form a\nwell-differentiated group in the sense that they're all companies\nthat venture capitalists would readily invest in, and the others\nmostly not. And there's a reason why: these are mostly companies\nthat win by having better technology, rather than just a CEO who's\nreally driven and good at making deals.\n\nTo that extent, the rise of the tech companies represents a qualitative\nchange. The oil and real estate magnates of the 1982 Forbes 400\ndidn't win by making better technology. They won by being really\ndriven and good at making deals. \n[2]\nAnd indeed, that way of\ngetting rich is so old that it predates the Industrial Revolution.\nThe courtiers who got rich in the (nominal) service of European\nroyal houses in the 16th and 17th centuries were also, as a rule,\nreally driven and good at making deals.\n\nPeople who don't look any deeper than the Gini coefficient look\nback on the world of 1982 as the good old days, because those who\ngot rich then didn't get as rich. But if you dig into how they\ngot rich, the old days don't look so good. In 1982, 84% of the\nrichest 100 people got rich by inheritance, extracting natural\nresources, or doing real estate deals. Is that really better than\na world in which the richest people get rich by starting tech\ncompanies?\n\nWhy are people starting so many more new companies than they used\nto, and why are they getting so rich from it? The answer to the\nfirst question, curiously enough, is that it's misphrased. We\nshouldn't be asking why people are starting companies, but why\nthey're starting companies again.\n[3]\n\nIn 1892, the New York Herald Tribune compiled a list of all the\nmillionaires in America. They found 4047 of them. How many had\ninherited their wealth then? Only about 20%, which is less than the\nproportion of heirs today. And when you investigate the sources of\nthe new fortunes, 1892 looks even more like today. Hugh Rockoff\nfound that \"many of the richest ... gained their initial edge from\nthe new technology of mass production.\"\n[4]\n\nSo it's not 2020 that's the anomaly here, but 1982. The real question\nis why so few people had gotten rich from starting companies in\n1982. And the answer is that even as the Herald Tribune's list was\nbeing compiled, a wave of consolidation \nwas sweeping through the\nAmerican economy. In the late 19th and early 20th centuries,\nfinanciers like J. P. Morgan combined thousands of smaller companies\ninto a few hundred giant ones with commanding economies of scale.\nBy the end of World War II, as Michael Lind writes, \"the major\nsectors of the economy were either organized as government-backed\ncartels or dominated by a few oligopolistic corporations.\"\n[5]\n\nIn 1960, most of the people who start startups today would have\ngone to work for one of them. You could get rich from starting your\nown company in 1890 and in 2020, but in 1960 it was not really a\nviable option. You couldn't break through the oligopolies to get\nat the markets. So the prestigious route in 1960 was not to start\nyour own company, but to work your way up the corporate ladder at\nan existing one.\n[6]\n\nMaking everyone a corporate employee decreased economic inequality\n(and every other kind of variation), but if your model of normal\nis the mid 20th century, you have a very misleading model in that\nrespect. J. P. Morgan's economy turned out to be just a phase, and\nstarting in the 1970s, it began to break up.\n\nWhy did it break up? Partly senescence. The big companies that\nseemed models of scale and efficiency in 1930 had by 1970 become\nslack and bloated. By 1970 the rigid structure of the economy was\nfull of cosy nests that various groups had built to insulate\nthemselves from market forces. During the Carter administration the\nfederal government realized something was amiss and began, in a\nprocess they called \"deregulation,\" to roll back the policies that\npropped up the oligopolies.\n\nBut it wasn't just decay from within that broke up J. P. Morgan's\neconomy. There was also pressure from without, in the form of new\ntechnology, and particularly microelectronics. The best way to\nenvision what happened is to imagine a pond with a crust of ice on\ntop. Initially the only way from the bottom to the surface is around\nthe edges. But as the ice crust weakens, you start to be able to\npunch right through the middle.\n\nThe edges of the pond were pure tech: companies that actually\ndescribed themselves as being in the electronics or software business.\nWhen you used the word \"startup\" in 1990, that was what you meant.\nBut now startups are punching right through the middle of the ice\ncrust and displacing incumbents like retailers and TV networks and\ncar companies.\n[7]\n\nBut though the breakup of J. P. Morgan's economy created a new world\nin the technological sense, it was a reversion to the norm in the\nsocial sense. If you only look back as far as the mid 20th century,\nit seems like people getting rich by starting their own companies\nis a recent phenomenon. But if you look back further, you realize\nit's actually the default. So what we should expect in the future\nis more of the same. Indeed, we should expect both the number and\nwealth of founders to grow, because every decade it gets easier to\nstart a startup.\n\nPart of the reason it's getting easier to start a startup is social.\nSociety is (re)assimilating the concept. If you start one now, your\nparents won't freak out the way they would have a generation ago,\nand knowledge about how to do it is much more widespread. But the\nmain reason it's easier to start a startup now is that it's cheaper.\nTechnology has driven down the cost of both building products and\nacquiring customers.\n\nThe decreasing cost of starting a startup has in turn changed the\nbalance of power between founders and investors. Back when starting\na startup meant building a factory, you needed investors' permission\nto do it at all. But now investors need founders more than founders\nneed investors, and that, combined with the increasing amount of\nventure capital available, has driven up valuations.\n[8]\n\nSo the decreasing cost of starting a startup increases the number\nof rich people in two ways: it means that more people start them,\nand that those who do can raise money on better terms.\n\nBut there's also a third factor at work: the companies themselves\nare more valuable, because newly founded companies grow faster than\nthey used to. Technology hasn't just made it cheaper to build and\ndistribute things, but faster too.\n\nThis trend has been running for a long time. IBM, founded in 1896,\ntook 45 years to reach a billion 2020 dollars in revenue.\nHewlett-Packard, founded in 1939, took 25 years. Microsoft, founded\nin 1975, took 13 years. Now the norm for fast-growing companies is\n7 or 8 years.\n[9]\n\nFast growth has a double effect on the value of founders' stock.\nThe value of a company is a function of its revenue and its growth\nrate. So if a company grows faster, you not only get to a billion\ndollars in revenue sooner, but the company is more valuable when\nit reaches that point than it would be if it were growing slower.\n\nThat's why founders sometimes get so rich so young now. The low\ninitial cost of starting a startup means founders can start young,\nand the fast growth of companies today means that if they succeed\nthey could be surprisingly rich just a few years later.\n\nIt's easier now to start and grow a company than it has ever been.\nThat means more people start them, that those who do get better\nterms from investors, and that the resulting companies become more\nvaluable. Once you understand how these mechanisms work, and that\nstartups were suppressed for most of the 20th century, you don't\nhave to resort to some vague right turn the country took under\nReagan to explain why America's Gini coefficient is increasing. Of\ncourse the Gini coefficient is increasing. With more people starting\nmore valuable companies, how could it not be?\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nInvestment firms grew rapidly after a regulatory change by\nthe Labor Department in 1978 allowed pension funds to invest in\nthem, but the effects of this growth were not yet visible in the\ntop 100 fortunes in 1982.\n\n[2]\nGeorge Mitchell deserves mention as an exception. Though\nreally driven and good at making deals, he was also the first to\nfigure out how to use fracking to get natural gas out of shale.\n\n[3]\nWhen I say people are starting more companies, I mean the\ntype of company meant to grow \nvery big. There has actually been a\ndecrease in the last couple decades in the overall number of new\ncompanies. But the vast majority of companies are small retail and\nservice businesses. So what the statistics about the decreasing\nnumber of new businesses mean is that people are starting fewer\nshoe stores and barber shops.\n\nPeople sometimes get confused when they see a graph labelled\n\"startups\" that's going down, because there are two senses of the\nword \"startup\": (1) the founding of a company, and (2) a particular\ntype of company designed to grow big fast. The statistics mean\nstartup in sense (1), not sense (2).\n\n[4]\nRockoff, Hugh. \"Great Fortunes of the Gilded Age.\" NBER Working\nPaper 14555, 2008.\n\n[5]\nLind, Michael. Land of Promise. HarperCollins, 2012.\n\nIt's also likely that the high tax rates in the mid 20th century\ndeterred people from starting their own companies. Starting one's\nown company is risky, and when risk isn't rewarded, people opt for\nsafety instead.\n\nBut it wasn't simply cause and effect. The oligopolies and high tax\nrates of the mid 20th century were all of a piece. Lower taxes are\nnot just a cause of entrepreneurship, but an effect as well: the\npeople getting rich in the mid 20th century from real estate and\noil exploration lobbied for and got huge tax loopholes that made\ntheir effective tax rate much lower, and presumably if it had been\nmore common to grow big companies by building new technology, the\npeople doing that would have lobbied for their own loopholes as\nwell.\n\n[6]\nThat's why the people who did get rich in the mid 20th century\nso often got rich from oil exploration or real estate. Those were\nthe two big areas of the economy that weren't susceptible to\nconsolidation.\n\n[7]\nThe pure tech companies used to be called \"high technology\" startups.\nBut now that startups can punch through the middle of the ice crust,\nwe don't need a separate name for the edges, and the term \"high-tech\"\nhas a decidedly retro \nsound.\n\n[8]\nHigher valuations mean you either sell less stock to get a\ngiven amount of money, or get more money for a given amount of\nstock. The typical startup does some of each. Obviously you end up\nricher if you keep more stock, but you should also end up richer\nif you raise more money, because (a) it should make the company\nmore successful, and (b) you should be able to last longer before\nthe next round, or not even need one. Notice all those shoulds\nthough. In practice a lot of money slips through them.\n\nIt might seem that the huge rounds raised by startups nowadays\ncontradict the claim that it has become cheaper to start one. But\nthere's no contradiction here; the startups that raise the most are\nthe ones doing it by choice, in order to grow faster, not the ones\ndoing it because they need the money to survive. There's nothing\nlike not needing money to make people offer it to you.\n\nYou would think, after having been on the side of labor in its fight\nwith capital for almost two centuries, that the far left would be\nhappy that labor has finally prevailed. But none of them seem to\nbe. You can almost hear them saying \"No, no, not that way.\"\n\n[9]\nIBM was created in 1911 by merging three companies, the most\nimportant of which was Herman Hollerith's Tabulating Machine Company,\nfounded in 1896. In 1941 its revenues were $60 million.\n\nHewlett-Packard's revenues in 1964 were $125 million.\n\nMicrosoft's revenues in 1988 were $590 million.\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, Bob Lesko, Robert Morris, \nRuss Roberts, and Alex Tabarrok for reading drafts of this, and to Jon Erlichman for growth data.\n\n", "March 2021\n\nI try to write using ordinary words and simple sentences.\n\nThat kind of writing is easier to read, and the easier something\nis to read, the more deeply readers will engage with it. The less\nenergy they expend on your prose, the more they'll have left for\nyour ideas.\n\nAnd the further they'll read. Most readers' energy tends to flag\npart way through an article or essay. If the friction of reading\nis low enough, more keep going till the end.\n\nThere's an Italian dish called saltimbocca, which means \"leap\ninto the mouth.\" My goal when writing might be called saltintesta:\nthe ideas leap into your head and you barely notice the words that\ngot them there.\n\nIt's too much to hope that writing could ever be pure ideas. You\nmight not even want it to be. But for most writers, most of the\ntime, that's the goal to aim for. The gap between most writing and\npure ideas is not filled with poetry.\n\nPlus it's more considerate to write simply. When you write in a\nfancy way to impress people, you're making them do extra work just\nso you can seem cool. It's like trailing a long train behind you\nthat readers have to carry.\n\nAnd remember, if you're writing in English, that a lot of your\nreaders won't be native English speakers. Their understanding of\nideas may be way ahead of their understanding of English. So you\ncan't assume that writing about a difficult topic means you can\nuse difficult words.\n\nOf course, fancy writing doesn't just conceal ideas. It can also\nconceal the lack of them. That's why some people write that way,\nto conceal the fact that they have \n nothing to say. Whereas writing\nsimply keeps you honest. If you say nothing simply, it will be\nobvious to everyone, including you.\n\nSimple writing also lasts better. People reading your stuff in the\nfuture will be in much the same position as people from other\ncountries reading it today. The culture and the language will have\nchanged. It's not vain to care about that, any more than it's vain\nfor a woodworker to build a chair to last.\n\nIndeed, lasting is not merely an accidental quality of chairs, or\nwriting. It's a sign you did a good job.\n\nBut although these are all real advantages of writing simply, none\nof them are why I do it. The main reason I write simply is that it\noffends me not to. When I write a sentence that seems too complicated,\nor that uses unnecessarily intellectual words, it doesn't seem fancy\nto me. It seems clumsy.\n\nThere are of course times when you want to use a complicated sentence\nor fancy word for effect. But you should never do it by accident.\n\nThe other reason my writing ends up being simple is the way I do\nit. I write the first draft fast, then spend days editing it, trying\nto get everything just right. Much of this editing is cutting, and\nthat makes simple writing even simpler.\n\n", "March 2021\n\nThe secret curse of the nonprofit world is restricted donations.\nIf you haven't been involved with nonprofits, you may never have\nheard this phrase before. But if you have been, it probably made\nyou wince.\n\nRestricted donations mean donations where the donor limits what can\nbe done with the money. This is common with big donations, perhaps\nthe default. And yet it's usually a bad idea. Usually the way the\ndonor wants the money spent is not the way the nonprofit would have\nchosen. Otherwise there would have been no need to restrict the\ndonation. But who has a better understanding of where money needs\nto be spent, the nonprofit or the donor?\n\nIf a nonprofit doesn't understand better than its donors where money\nneeds to be spent, then it's incompetent and you shouldn't be\ndonating to it at all.\n\nWhich means a restricted donation is inherently suboptimal. It's\neither a donation to a bad nonprofit, or a donation for the wrong\nthings.\n\nThere are a couple exceptions to this principle. One is when the\nnonprofit is an umbrella organization. It's reasonable to make a\nrestricted donation to a university, for example, because a university\nis only nominally a single nonprofit. Another exception is when the\ndonor actually does know as much as the nonprofit about where money\nneeds to be spent. The Gates Foundation, for example, has specific\ngoals and often makes restricted donations to individual nonprofits\nto accomplish them. But unless you're a domain expert yourself or\ndonating to an umbrella organization, your donation would do more\ngood if it were unrestricted.\n\nIf restricted donations do less good than unrestricted ones, why\ndo donors so often make them? Partly because doing good isn't donors'\nonly motive. They often have other motives as well \u2014 to make a mark,\nor to generate good publicity\n[1],\nor to comply with regulations\nor corporate policies. Many donors may simply never have considered\nthe distinction between restricted and unrestricted donations. They\nmay believe that donating money for some specific purpose is just\nhow donation works. And to be fair, nonprofits don't try very hard\nto discourage such illusions. They can't afford to. People running\nnonprofits are almost always anxious about money. They can't afford\nto talk back to big donors.\n\nYou can't expect candor in a relationship so asymmetric. So I'll\ntell you what nonprofits wish they could tell you. If you want to\ndonate to a nonprofit, donate unrestricted. If you trust them to\nspend your money, trust them to decide how.\n\n\n\n\n\n\nNote\n\n[1]\nUnfortunately restricted donations tend to generate more\npublicity than unrestricted ones. \"X donates money to build a school\nin Africa\" is not only more interesting than \"X donates money to Y\nnonprofit to spend as Y chooses,\" but also focuses more attention\non X.\n\n\nThanks to Chase Adam, Ingrid Bassett, Trevor Blackwell, and Edith\nElliot for reading drafts of this.\n\n", "February 2021\n\nBefore college the two main things I worked on, outside of school,\nwere writing and programming. I didn't write essays. I wrote what\nbeginning writers were supposed to write then, and probably still\nare: short stories. My stories were awful. They had hardly any plot,\njust characters with strong feelings, which I imagined made them\ndeep.\n\nThe first programs I tried writing were on the IBM 1401 that our\nschool district used for what was then called \"data processing.\"\nThis was in 9th grade, so I was 13 or 14. The school district's\n1401 happened to be in the basement of our junior high school, and\nmy friend Rich Draves and I got permission to use it. It was like\na mini Bond villain's lair down there, with all these alien-looking\nmachines \u0097 CPU, disk drives, printer, card reader \u0097 sitting up\non a raised floor under bright fluorescent lights.\n\nThe language we used was an early version of Fortran. You had to\ntype programs on punch cards, then stack them in the card reader\nand press a button to load the program into memory and run it. The\nresult would ordinarily be to print something on the spectacularly\nloud printer.\n\nI was puzzled by the 1401. I couldn't figure out what to do with\nit. And in retrospect there's not much I could have done with it.\nThe only form of input to programs was data stored on punched cards,\nand I didn't have any data stored on punched cards. The only other\noption was to do things that didn't rely on any input, like calculate\napproximations of pi, but I didn't know enough math to do anything\ninteresting of that type. So I'm not surprised I can't remember any\nprograms I wrote, because they can't have done much. My clearest\nmemory is of the moment I learned it was possible for programs not\nto terminate, when one of mine didn't. On a machine without\ntime-sharing, this was a social as well as a technical error, as\nthe data center manager's expression made clear.\n\nWith microcomputers, everything changed. Now you could have a\ncomputer sitting right in front of you, on a desk, that could respond\nto your keystrokes as it was running instead of just churning through\na stack of punch cards and then stopping. \n[1]\n\nThe first of my friends to get a microcomputer built it himself.\nIt was sold as a kit by Heathkit. I remember vividly how impressed\nand envious I felt watching him sitting in front of it, typing\nprograms right into the computer.\n\nComputers were expensive in those days and it took me years of\nnagging before I convinced my father to buy one, a TRS-80, in about\n1980. The gold standard then was the Apple II, but a TRS-80 was\ngood enough. This was when I really started programming. I wrote\nsimple games, a program to predict how high my model rockets would\nfly, and a word processor that my father used to write at least one\nbook. There was only room in memory for about 2 pages of text, so\nhe'd write 2 pages at a time and then print them out, but it was a\nlot better than a typewriter.\n\nThough I liked programming, I didn't plan to study it in college.\nIn college I was going to study philosophy, which sounded much more\npowerful. It seemed, to my naive high school self, to be the study\nof the ultimate truths, compared to which the things studied in\nother fields would be mere domain knowledge. What I discovered when\nI got to college was that the other fields took up so much of the\nspace of ideas that there wasn't much left for these supposed\nultimate truths. All that seemed left for philosophy were edge cases\nthat people in other fields felt could safely be ignored.\n\nI couldn't have put this into words when I was 18. All I knew at\nthe time was that I kept taking philosophy courses and they kept\nbeing boring. So I decided to switch to AI.\n\nAI was in the air in the mid 1980s, but there were two things\nespecially that made me want to work on it: a novel by Heinlein\ncalled The Moon is a Harsh Mistress, which featured an intelligent\ncomputer called Mike, and a PBS documentary that showed Terry\nWinograd using SHRDLU. I haven't tried rereading The Moon is a Harsh\nMistress, so I don't know how well it has aged, but when I read it\nI was drawn entirely into its world. It seemed only a matter of\ntime before we'd have Mike, and when I saw Winograd using SHRDLU,\nit seemed like that time would be a few years at most. All you had\nto do was teach SHRDLU more words.\n\nThere weren't any classes in AI at Cornell then, not even graduate\nclasses, so I started trying to teach myself. Which meant learning\nLisp, since in those days Lisp was regarded as the language of AI.\nThe commonly used programming languages then were pretty primitive,\nand programmers' ideas correspondingly so. The default language at\nCornell was a Pascal-like language called PL/I, and the situation\nwas similar elsewhere. Learning Lisp expanded my concept of a program\nso fast that it was years before I started to have a sense of where\nthe new limits were. This was more like it; this was what I had\nexpected college to do. It wasn't happening in a class, like it was\nsupposed to, but that was ok. For the next couple years I was on a\nroll. I knew what I was going to do.\n\nFor my undergraduate thesis, I reverse-engineered SHRDLU. My God\ndid I love working on that program. It was a pleasing bit of code,\nbut what made it even more exciting was my belief \u0097 hard to imagine\nnow, but not unique in 1985 \u0097 that it was already climbing the\nlower slopes of intelligence.\n\nI had gotten into a program at Cornell that didn't make you choose\na major. You could take whatever classes you liked, and choose\nwhatever you liked to put on your degree. I of course chose \"Artificial\nIntelligence.\" When I got the actual physical diploma, I was dismayed\nto find that the quotes had been included, which made them read as\nscare-quotes. At the time this bothered me, but now it seems amusingly\naccurate, for reasons I was about to discover.\n\nI applied to 3 grad schools: MIT and Yale, which were renowned for\nAI at the time, and Harvard, which I'd visited because Rich Draves\nwent there, and was also home to Bill Woods, who'd invented the\ntype of parser I used in my SHRDLU clone. Only Harvard accepted me,\nso that was where I went.\n\nI don't remember the moment it happened, or if there even was a\nspecific moment, but during the first year of grad school I realized\nthat AI, as practiced at the time, was a hoax. By which I mean the\nsort of AI in which a program that's told \"the dog is sitting on\nthe chair\" translates this into some formal representation and adds\nit to the list of things it knows.\n\nWhat these programs really showed was that there's a subset of\nnatural language that's a formal language. But a very proper subset.\nIt was clear that there was an unbridgeable gap between what they\ncould do and actually understanding natural language. It was not,\nin fact, simply a matter of teaching SHRDLU more words. That whole\nway of doing AI, with explicit data structures representing concepts,\nwas not going to work. Its brokenness did, as so often happens,\ngenerate a lot of opportunities to write papers about various\nband-aids that could be applied to it, but it was never going to\nget us Mike.\n\nSo I looked around to see what I could salvage from the wreckage\nof my plans, and there was Lisp. I knew from experience that Lisp\nwas interesting for its own sake and not just for its association\nwith AI, even though that was the main reason people cared about\nit at the time. So I decided to focus on Lisp. In fact, I decided\nto write a book about Lisp hacking. It's scary to think how little\nI knew about Lisp hacking when I started writing that book. But\nthere's nothing like writing a book about something to help you\nlearn it. The book, On Lisp, wasn't published till 1993, but I wrote\nmuch of it in grad school.\n\nComputer Science is an uneasy alliance between two halves, theory\nand systems. The theory people prove things, and the systems people\nbuild things. I wanted to build things. I had plenty of respect for\ntheory \u0097 indeed, a sneaking suspicion that it was the more admirable\nof the two halves \u0097 but building things seemed so much more exciting.\n\nThe problem with systems work, though, was that it didn't last.\nAny program you wrote today, no matter how good, would be obsolete\nin a couple decades at best. People might mention your software in\nfootnotes, but no one would actually use it. And indeed, it would\nseem very feeble work. Only people with a sense of the history of\nthe field would even realize that, in its time, it had been good.\n\nThere were some surplus Xerox Dandelions floating around the computer\nlab at one point. Anyone who wanted one to play around with could\nhave one. I was briefly tempted, but they were so slow by present\nstandards; what was the point? No one else wanted one either, so\noff they went. That was what happened to systems work.\n\nI wanted not just to build things, but to build things that would\nlast.\n\nIn this dissatisfied state I went in 1988 to visit Rich Draves at\nCMU, where he was in grad school. One day I went to visit the\nCarnegie Institute, where I'd spent a lot of time as a kid. While\nlooking at a painting there I realized something that might seem\nobvious, but was a big surprise to me. There, right on the wall,\nwas something you could make that would last. Paintings didn't\nbecome obsolete. Some of the best ones were hundreds of years old.\n\nAnd moreover this was something you could make a living doing. Not\nas easily as you could by writing software, of course, but I thought\nif you were really industrious and lived really cheaply, it had to\nbe possible to make enough to survive. And as an artist you could\nbe truly independent. You wouldn't have a boss, or even need to get\nresearch funding.\n\nI had always liked looking at paintings. Could I make them? I had\nno idea. I'd never imagined it was even possible. I knew intellectually\nthat people made art \u0097 that it didn't just appear spontaneously\n\u0097 but it was as if the people who made it were a different species.\nThey either lived long ago or were mysterious geniuses doing strange\nthings in profiles in Life magazine. The idea of actually being\nable to make art, to put that verb before that noun, seemed almost\nmiraculous.\n\nThat fall I started taking art classes at Harvard. Grad students\ncould take classes in any department, and my advisor, Tom Cheatham,\nwas very easy going. If he even knew about the strange classes I\nwas taking, he never said anything.\n\nSo now I was in a PhD program in computer science, yet planning to\nbe an artist, yet also genuinely in love with Lisp hacking and\nworking away at On Lisp. In other words, like many a grad student,\nI was working energetically on multiple projects that were not my\nthesis.\n\nI didn't see a way out of this situation. I didn't want to drop out\nof grad school, but how else was I going to get out? I remember\nwhen my friend Robert Morris got kicked out of Cornell for writing\nthe internet worm of 1988, I was envious that he'd found such a\nspectacular way to get out of grad school.\n\nThen one day in April 1990 a crack appeared in the wall. I ran into\nprofessor Cheatham and he asked if I was far enough along to graduate\nthat June. I didn't have a word of my dissertation written, but in\nwhat must have been the quickest bit of thinking in my life, I\ndecided to take a shot at writing one in the 5 weeks or so that\nremained before the deadline, reusing parts of On Lisp where I\ncould, and I was able to respond, with no perceptible delay \"Yes,\nI think so. I'll give you something to read in a few days.\"\n\nI picked applications of continuations as the topic. In retrospect\nI should have written about macros and embedded languages. There's\na whole world there that's barely been explored. But all I wanted\nwas to get out of grad school, and my rapidly written dissertation\nsufficed, just barely.\n\nMeanwhile I was applying to art schools. I applied to two: RISD in\nthe US, and the Accademia di Belli Arti in Florence, which, because\nit was the oldest art school, I imagined would be good. RISD accepted\nme, and I never heard back from the Accademia, so off to Providence\nI went.\n\nI'd applied for the BFA program at RISD, which meant in effect that\nI had to go to college again. This was not as strange as it sounds,\nbecause I was only 25, and art schools are full of people of different\nages. RISD counted me as a transfer sophomore and said I had to do\nthe foundation that summer. The foundation means the classes that\neveryone has to take in fundamental subjects like drawing, color,\nand design.\n\nToward the end of the summer I got a big surprise: a letter from\nthe Accademia, which had been delayed because they'd sent it to\nCambridge England instead of Cambridge Massachusetts, inviting me\nto take the entrance exam in Florence that fall. This was now only\nweeks away. My nice landlady let me leave my stuff in her attic. I\nhad some money saved from consulting work I'd done in grad school;\nthere was probably enough to last a year if I lived cheaply. Now\nall I had to do was learn Italian.\n\nOnly stranieri (foreigners) had to take this entrance exam. In\nretrospect it may well have been a way of excluding them, because\nthere were so many stranieri attracted by the idea of studying\nart in Florence that the Italian students would otherwise have been\noutnumbered. I was in decent shape at painting and drawing from the\nRISD foundation that summer, but I still don't know how I managed\nto pass the written exam. I remember that I answered the essay\nquestion by writing about Cezanne, and that I cranked up the\nintellectual level as high as I could to make the most of my limited\nvocabulary. \n[2]\n\nI'm only up to age 25 and already there are such conspicuous patterns.\nHere I was, yet again about to attend some august institution in\nthe hopes of learning about some prestigious subject, and yet again\nabout to be disappointed. The students and faculty in the painting\ndepartment at the Accademia were the nicest people you could imagine,\nbut they had long since arrived at an arrangement whereby the\nstudents wouldn't require the faculty to teach anything, and in\nreturn the faculty wouldn't require the students to learn anything.\nAnd at the same time all involved would adhere outwardly to the\nconventions of a 19th century atelier. We actually had one of those\nlittle stoves, fed with kindling, that you see in 19th century\nstudio paintings, and a nude model sitting as close to it as possible\nwithout getting burned. Except hardly anyone else painted her besides\nme. The rest of the students spent their time chatting or occasionally\ntrying to imitate things they'd seen in American art magazines.\n\nOur model turned out to live just down the street from me. She made\na living from a combination of modelling and making fakes for a\nlocal antique dealer. She'd copy an obscure old painting out of a\nbook, and then he'd take the copy and maltreat it to make it look\nold. \n[3]\n\nWhile I was a student at the Accademia I started painting still\nlives in my bedroom at night. These paintings were tiny, because\nthe room was, and because I painted them on leftover scraps of\ncanvas, which was all I could afford at the time. Painting still\nlives is different from painting people, because the subject, as\nits name suggests, can't move. People can't sit for more than about\n15 minutes at a time, and when they do they don't sit very still.\nSo the traditional m.o. for painting people is to know how to paint\na generic person, which you then modify to match the specific person\nyou're painting. Whereas a still life you can, if you want, copy\npixel by pixel from what you're seeing. You don't want to stop\nthere, of course, or you get merely photographic accuracy, and what\nmakes a still life interesting is that it's been through a head.\nYou want to emphasize the visual cues that tell you, for example,\nthat the reason the color changes suddenly at a certain point is\nthat it's the edge of an object. By subtly emphasizing such things\nyou can make paintings that are more realistic than photographs not\njust in some metaphorical sense, but in the strict information-theoretic\nsense. \n[4]\n\nI liked painting still lives because I was curious about what I was\nseeing. In everyday life, we aren't consciously aware of much we're\nseeing. Most visual perception is handled by low-level processes\nthat merely tell your brain \"that's a water droplet\" without telling\nyou details like where the lightest and darkest points are, or\n\"that's a bush\" without telling you the shape and position of every\nleaf. This is a feature of brains, not a bug. In everyday life it\nwould be distracting to notice every leaf on every bush. But when\nyou have to paint something, you have to look more closely, and\nwhen you do there's a lot to see. You can still be noticing new\nthings after days of trying to paint something people usually take\nfor granted, just as you can  after\ndays of trying to write an essay about something people usually\ntake for granted.\n\nThis is not the only way to paint. I'm not 100% sure it's even a\ngood way to paint. But it seemed a good enough bet to be worth\ntrying.\n\nOur teacher, professor Ulivi, was a nice guy. He could see I worked\nhard, and gave me a good grade, which he wrote down in a sort of\npassport each student had. But the Accademia wasn't teaching me\nanything except Italian, and my money was running out, so at the\nend of the first year I went back to the US.\n\nI wanted to go back to RISD, but I was now broke and RISD was very\nexpensive, so I decided to get a job for a year and then return to\nRISD the next fall. I got one at a company called Interleaf, which\nmade software for creating documents. You mean like Microsoft Word?\nExactly. That was how I learned that low end software tends to eat\nhigh end software. But Interleaf still had a few years to live yet.\n[5]\n\nInterleaf had done something pretty bold. Inspired by Emacs, they'd\nadded a scripting language, and even made the scripting language a\ndialect of Lisp. Now they wanted a Lisp hacker to write things in\nit. This was the closest thing I've had to a normal job, and I\nhereby apologize to my boss and coworkers, because I was a bad\nemployee. Their Lisp was the thinnest icing on a giant C cake, and\nsince I didn't know C and didn't want to learn it, I never understood\nmost of the software. Plus I was terribly irresponsible. This was\nback when a programming job meant showing up every day during certain\nworking hours. That seemed unnatural to me, and on this point the\nrest of the world is coming around to my way of thinking, but at\nthe time it caused a lot of friction. Toward the end of the year I\nspent much of my time surreptitiously working on On Lisp, which I\nhad by this time gotten a contract to publish.\n\nThe good part was that I got paid huge amounts of money, especially\nby art student standards. In Florence, after paying my part of the\nrent, my budget for everything else had been $7 a day. Now I was\ngetting paid more than 4 times that every hour, even when I was\njust sitting in a meeting. By living cheaply I not only managed to\nsave enough to go back to RISD, but also paid off my college loans.\n\nI learned some useful things at Interleaf, though they were mostly\nabout what not to do. I learned that it's better for technology\ncompanies to be run by product people than sales people (though\nsales is a real skill and people who are good at it are really good\nat it), that it leads to bugs when code is edited by too many people,\nthat cheap office space is no bargain if it's depressing, that\nplanned meetings are inferior to corridor conversations, that big,\nbureaucratic customers are a dangerous source of money, and that\nthere's not much overlap between conventional office hours and the\noptimal time for hacking, or conventional offices and the optimal\nplace for it.\n\nBut the most important thing I learned, and which I used in both\nViaweb and Y Combinator, is that the low end eats the high end:\nthat it's good to be the \"entry level\" option, even though that\nwill be less prestigious, because if you're not, someone else will\nbe, and will squash you against the ceiling. Which in turn means\nthat prestige is a danger sign.\n\nWhen I left to go back to RISD the next fall, I arranged to do\nfreelance work for the group that did projects for customers, and\nthis was how I survived for the next several years. When I came\nback to visit for a project later on, someone told me about a new\nthing called HTML, which was, as he described it, a derivative of\nSGML. Markup language enthusiasts were an occupational hazard at\nInterleaf and I ignored him, but this HTML thing later became a big\npart of my life.\n\nIn the fall of 1992 I moved back to Providence to continue at RISD.\nThe foundation had merely been intro stuff, and the Accademia had\nbeen a (very civilized) joke. Now I was going to see what real art\nschool was like. But alas it was more like the Accademia than not.\nBetter organized, certainly, and a lot more expensive, but it was\nnow becoming clear that art school did not bear the same relationship\nto art that medical school bore to medicine. At least not the\npainting department. The textile department, which my next door\nneighbor belonged to, seemed to be pretty rigorous. No doubt\nillustration and architecture were too. But painting was post-rigorous.\nPainting students were supposed to express themselves, which to the\nmore worldly ones meant to try to cook up some sort of distinctive\nsignature style.\n\nA signature style is the visual equivalent of what in show business\nis known as a \"schtick\": something that immediately identifies the\nwork as yours and no one else's. For example, when you see a painting\nthat looks like a certain kind of cartoon, you know it's by Roy\nLichtenstein. So if you see a big painting of this type hanging in\nthe apartment of a hedge fund manager, you know he paid millions\nof dollars for it. That's not always why artists have a signature\nstyle, but it's usually why buyers pay a lot for such work.\n[6]\n\nThere were plenty of earnest students too: kids who \"could draw\"\nin high school, and now had come to what was supposed to be the\nbest art school in the country, to learn to draw even better. They\ntended to be confused and demoralized by what they found at RISD,\nbut they kept going, because painting was what they did. I was not\none of the kids who could draw in high school, but at RISD I was\ndefinitely closer to their tribe than the tribe of signature style\nseekers.\n\nI learned a lot in the color class I took at RISD, but otherwise I\nwas basically teaching myself to paint, and I could do that for\nfree. So in 1993 I dropped out. I hung around Providence for a bit,\nand then my college friend Nancy Parmet did me a big favor. A\nrent-controlled apartment in a building her mother owned in New\nYork was becoming vacant. Did I want it? It wasn't much more than\nmy current place, and New York was supposed to be where the artists\nwere. So yes, I wanted it!\n[7]\n\nAsterix comics begin by zooming in on a tiny corner of Roman Gaul\nthat turns out not to be controlled by the Romans. You can do\nsomething similar on a map of New York City: if you zoom in on the\nUpper East Side, there's a tiny corner that's not rich, or at least\nwasn't in 1993. It's called Yorkville, and that was my new home.\nNow I was a New York artist \u0097 in the strictly technical sense of\nmaking paintings and living in New York.\n\nI was nervous about money, because I could sense that Interleaf was\non the way down. Freelance Lisp hacking work was very rare, and I\ndidn't want to have to program in another language, which in those\ndays would have meant C++ if I was lucky. So with my unerring nose\nfor financial opportunity, I decided to write another book on Lisp.\nThis would be a popular book, the sort of book that could be used\nas a textbook. I imagined myself living frugally off the royalties\nand spending all my time painting. (The painting on the cover of\nthis book, ANSI Common Lisp, is one that I painted around this\ntime.)\n\nThe best thing about New York for me was the presence of Idelle and\nJulian Weber. Idelle Weber was a painter, one of the early\nphotorealists, and I'd taken her painting class at Harvard. I've\nnever known a teacher more beloved by her students. Large numbers\nof former students kept in touch with her, including me. After I\nmoved to New York I became her de facto studio assistant.\n\nShe liked to paint on big, square canvases, 4 to 5 feet on a side.\nOne day in late 1994 as I was stretching one of these monsters there\nwas something on the radio about a famous fund manager. He wasn't\nthat much older than me, and was super rich. The thought suddenly\noccurred to me: why don't I become rich? Then I'll be able to work\non whatever I want.\n\nMeanwhile I'd been hearing more and more about this new thing called\nthe World Wide Web. Robert Morris showed it to me when I visited\nhim in Cambridge, where he was now in grad school at Harvard. It\nseemed to me that the web would be a big deal. I'd seen what graphical\nuser interfaces had done for the popularity of microcomputers. It\nseemed like the web would do the same for the internet.\n\nIf I wanted to get rich, here was the next train leaving the station.\nI was right about that part. What I got wrong was the idea. I decided\nwe should start a company to put art galleries online. I can't\nhonestly say, after reading so many Y Combinator applications, that\nthis was the worst startup idea ever, but it was up there. Art\ngalleries didn't want to be online, and still don't, not the fancy\nones. That's not how they sell. I wrote some software to generate\nweb sites for galleries, and Robert wrote some to resize images and\nset up an http server to serve the pages. Then we tried to sign up\ngalleries. To call this a difficult sale would be an understatement.\nIt was difficult to give away. A few galleries let us make sites\nfor them for free, but none paid us.\n\nThen some online stores started to appear, and I realized that\nexcept for the order buttons they were identical to the sites we'd\nbeen generating for galleries. This impressive-sounding thing called\nan \"internet storefront\" was something we already knew how to build.\n\nSo in the summer of 1995, after I submitted the camera-ready copy\nof ANSI Common Lisp to the publishers, we started trying to write\nsoftware to build online stores. At first this was going to be\nnormal desktop software, which in those days meant Windows software.\nThat was an alarming prospect, because neither of us knew how to\nwrite Windows software or wanted to learn. We lived in the Unix\nworld. But we decided we'd at least try writing a prototype store\nbuilder on Unix. Robert wrote a shopping cart, and I wrote a new\nsite generator for stores \u0097 in Lisp, of course.\n\nWe were working out of Robert's apartment in Cambridge. His roommate\nwas away for big chunks of time, during which I got to sleep in his\nroom. For some reason there was no bed frame or sheets, just a\nmattress on the floor. One morning as I was lying on this mattress\nI had an idea that made me sit up like a capital L. What if we ran\nthe software on the server, and let users control it by clicking\non links? Then we'd never have to write anything to run on users'\ncomputers. We could generate the sites on the same server we'd serve\nthem from. Users wouldn't need anything more than a browser.\n\nThis kind of software, known as a web app, is common now, but at\nthe time it wasn't clear that it was even possible. To find out,\nwe decided to try making a version of our store builder that you\ncould control through the browser. A couple days later, on August\n12, we had one that worked. The UI was horrible, but it proved you\ncould build a whole store through the browser, without any client\nsoftware or typing anything into the command line on the server.\n\nNow we felt like we were really onto something. I had visions of a\nwhole new generation of software working this way. You wouldn't\nneed versions, or ports, or any of that crap. At Interleaf there\nhad been a whole group called Release Engineering that seemed to\nbe at least as big as the group that actually wrote the software.\nNow you could just update the software right on the server.\n\nWe started a new company we called Viaweb, after the fact that our\nsoftware worked via the web, and we got $10,000 in seed funding\nfrom Idelle's husband Julian. In return for that and doing the\ninitial legal work and giving us business advice, we gave him 10%\nof the company. Ten years later this deal became the model for Y\nCombinator's. We knew founders needed something like this, because\nwe'd needed it ourselves.\n\nAt this stage I had a negative net worth, because the thousand\ndollars or so I had in the bank was more than counterbalanced by\nwhat I owed the government in taxes. (Had I diligently set aside\nthe proper proportion of the money I'd made consulting for Interleaf?\nNo, I had not.) So although Robert had his graduate student stipend,\nI needed that seed funding to live on.\n\nWe originally hoped to launch in September, but we got more ambitious\nabout the software as we worked on it. Eventually we managed to\nbuild a WYSIWYG site builder, in the sense that as you were creating\npages, they looked exactly like the static ones that would be\ngenerated later, except that instead of leading to static pages,\nthe links all referred to closures stored in a hash table on the\nserver.\n\nIt helped to have studied art, because the main goal of an online\nstore builder is to make users look legit, and the key to looking\nlegit is high production values. If you get page layouts and fonts\nand colors right, you can make a guy running a store out of his\nbedroom look more legit than a big company.\n\n(If you're curious why my site looks so old-fashioned, it's because\nit's still made with this software. It may look clunky today, but\nin 1996 it was the last word in slick.)\n\nIn September, Robert rebelled. \"We've been working on this for a\nmonth,\" he said, \"and it's still not done.\" This is funny in\nretrospect, because he would still be working on it almost 3 years\nlater. But I decided it might be prudent to recruit more programmers,\nand I asked Robert who else in grad school with him was really good.\nHe recommended Trevor Blackwell, which surprised me at first, because\nat that point I knew Trevor mainly for his plan to reduce everything\nin his life to a stack of notecards, which he carried around with\nhim. But Rtm was right, as usual. Trevor turned out to be a\nfrighteningly effective hacker.\n\nIt was a lot of fun working with Robert and Trevor. They're the two\nmost independent-minded people \nI know, and in completely different\nways. If you could see inside Rtm's brain it would look like a\ncolonial New England church, and if you could see inside Trevor's\nit would look like the worst excesses of Austrian Rococo.\n\nWe opened for business, with 6 stores, in January 1996. It was just\nas well we waited a few months, because although we worried we were\nlate, we were actually almost fatally early. There was a lot of\ntalk in the press then about ecommerce, but not many people actually\nwanted online stores.\n[8]\n\nThere were three main parts to the software: the editor, which\npeople used to build sites and which I wrote, the shopping cart,\nwhich Robert wrote, and the manager, which kept track of orders and\nstatistics, and which Trevor wrote. In its time, the editor was one\nof the best general-purpose site builders. I kept the code tight\nand didn't have to integrate with any other software except Robert's\nand Trevor's, so it was quite fun to work on. If all I'd had to do\nwas work on this software, the next 3 years would have been the\neasiest of my life. Unfortunately I had to do a lot more, all of\nit stuff I was worse at than programming, and the next 3 years were\ninstead the most stressful.\n\nThere were a lot of startups making ecommerce software in the second\nhalf of the 90s. We were determined to be the Microsoft Word, not\nthe Interleaf. Which meant being easy to use and inexpensive. It\nwas lucky for us that we were poor, because that caused us to make\nViaweb even more inexpensive than we realized. We charged $100 a\nmonth for a small store and $300 a month for a big one. This low\nprice was a big attraction, and a constant thorn in the sides of\ncompetitors, but it wasn't because of some clever insight that we\nset the price low. We had no idea what businesses paid for things.\n$300 a month seemed like a lot of money to us.\n\nWe did a lot of things right by accident like that. For example,\nwe did what's now called \"doing things that \ndon't scale,\" although\nat the time we would have described it as \"being so lame that we're\ndriven to the most desperate measures to get users.\" The most common\nof which was building stores for them. This seemed particularly\nhumiliating, since the whole raison d'etre of our software was that\npeople could use it to make their own stores. But anything to get\nusers.\n\nWe learned a lot more about retail than we wanted to know. For\nexample, that if you could only have a small image of a man's shirt\n(and all images were small then by present standards), it was better\nto have a closeup of the collar than a picture of the whole shirt.\nThe reason I remember learning this was that it meant I had to\nrescan about 30 images of men's shirts. My first set of scans were\nso beautiful too.\n\nThough this felt wrong, it was exactly the right thing to be doing.\nBuilding stores for users taught us about retail, and about how it\nfelt to use our software. I was initially both mystified and repelled\nby \"business\" and thought we needed a \"business person\" to be in\ncharge of it, but once we started to get users, I was converted,\nin much the same way I was converted to \nfatherhood once I had kids.\nWhatever users wanted, I was all theirs. Maybe one day we'd have\nso many users that I couldn't scan their images for them, but in\nthe meantime there was nothing more important to do.\n\nAnother thing I didn't get at the time is that \ngrowth rate is the\nultimate test of a startup. Our growth rate was fine. We had about\n70 stores at the end of 1996 and about 500 at the end of 1997. I\nmistakenly thought the thing that mattered was the absolute number\nof users. And that is the thing that matters in the sense that\nthat's how much money you're making, and if you're not making enough,\nyou might go out of business. But in the long term the growth rate\ntakes care of the absolute number. If we'd been a startup I was\nadvising at Y Combinator, I would have said: Stop being so stressed\nout, because you're doing fine. You're growing 7x a year. Just don't\nhire too many more people and you'll soon be profitable, and then\nyou'll control your own destiny.\n\nAlas I hired lots more people, partly because our investors wanted\nme to, and partly because that's what startups did during the\nInternet Bubble. A company with just a handful of employees would\nhave seemed amateurish. So we didn't reach breakeven until about\nwhen Yahoo bought us in the summer of 1998. Which in turn meant we\nwere at the mercy of investors for the entire life of the company.\nAnd since both we and our investors were noobs at startups, the\nresult was a mess even by startup standards.\n\nIt was a huge relief when Yahoo bought us. In principle our Viaweb\nstock was valuable. It was a share in a business that was profitable\nand growing rapidly. But it didn't feel very valuable to me; I had\nno idea how to value a business, but I was all too keenly aware of\nthe near-death experiences we seemed to have every few months. Nor\nhad I changed my grad student lifestyle significantly since we\nstarted. So when Yahoo bought us it felt like going from rags to\nriches. Since we were going to California, I bought a car, a yellow\n1998 VW GTI. I remember thinking that its leather seats alone were\nby far the most luxurious thing I owned.\n\nThe next year, from the summer of 1998 to the summer of 1999, must\nhave been the least productive of my life. I didn't realize it at\nthe time, but I was worn out from the effort and stress of running\nViaweb. For a while after I got to California I tried to continue\nmy usual m.o. of programming till 3 in the morning, but fatigue\ncombined with Yahoo's prematurely aged\nculture and grim cube farm\nin Santa Clara gradually dragged me down. After a few months it\nfelt disconcertingly like working at Interleaf.\n\nYahoo had given us a lot of options when they bought us. At the\ntime I thought Yahoo was so overvalued that they'd never be worth\nanything, but to my astonishment the stock went up 5x in the next\nyear. I hung on till the first chunk of options vested, then in the\nsummer of 1999 I left. It had been so long since I'd painted anything\nthat I'd half forgotten why I was doing this. My brain had been\nentirely full of software and men's shirts for 4 years. But I had\ndone this to get rich so I could paint, I reminded myself, and now\nI was rich, so I should go paint.\n\nWhen I said I was leaving, my boss at Yahoo had a long conversation\nwith me about my plans. I told him all about the kinds of pictures\nI wanted to paint. At the time I was touched that he took such an\ninterest in me. Now I realize it was because he thought I was lying.\nMy options at that point were worth about $2 million a month. If I\nwas leaving that kind of money on the table, it could only be to\ngo and start some new startup, and if I did, I might take people\nwith me. This was the height of the Internet Bubble, and Yahoo was\nground zero of it. My boss was at that moment a billionaire. Leaving\nthen to start a new startup must have seemed to him an insanely,\nand yet also plausibly, ambitious plan.\n\nBut I really was quitting to paint, and I started immediately.\nThere was no time to lose. I'd already burned 4 years getting rich.\nNow when I talk to founders who are leaving after selling their\ncompanies, my advice is always the same: take a vacation. That's\nwhat I should have done, just gone off somewhere and done nothing\nfor a month or two, but the idea never occurred to me.\n\nSo I tried to paint, but I just didn't seem to have any energy or\nambition. Part of the problem was that I didn't know many people\nin California. I'd compounded this problem by buying a house up in\nthe Santa Cruz Mountains, with a beautiful view but miles from\nanywhere. I stuck it out for a few more months, then in desperation\nI went back to New York, where unless you understand about rent\ncontrol you'll be surprised to hear I still had my apartment, sealed\nup like a tomb of my old life. Idelle was in New York at least, and\nthere were other people trying to paint there, even though I didn't\nknow any of them.\n\nWhen I got back to New York I resumed my old life, except now I was\nrich. It was as weird as it sounds. I resumed all my old patterns,\nexcept now there were doors where there hadn't been. Now when I was\ntired of walking, all I had to do was raise my hand, and (unless\nit was raining) a taxi would stop to pick me up. Now when I walked\npast charming little restaurants I could go in and order lunch. It\nwas exciting for a while. Painting started to go better. I experimented\nwith a new kind of still life where I'd paint one painting in the\nold way, then photograph it and print it, blown up, on canvas, and\nthen use that as the underpainting for a second still life, painted\nfrom the same objects (which hopefully hadn't rotted yet).\n\nMeanwhile I looked for an apartment to buy. Now I could actually\nchoose what neighborhood to live in. Where, I asked myself and\nvarious real estate agents, is the Cambridge of New York? Aided by\noccasional visits to actual Cambridge, I gradually realized there\nwasn't one. Huh.\n\nAround this time, in the spring of 2000, I had an idea. It was clear\nfrom our experience with Viaweb that web apps were the future. Why\nnot build a web app for making web apps? Why not let people edit\ncode on our server through the browser, and then host the resulting\napplications for them?\n[9]\nYou could run all sorts of services\non the servers that these applications could use just by making an\nAPI call: making and receiving phone calls, manipulating images,\ntaking credit card payments, etc.\n\nI got so excited about this idea that I couldn't think about anything\nelse. It seemed obvious that this was the future. I didn't particularly\nwant to start another company, but it was clear that this idea would\nhave to be embodied as one, so I decided to move to Cambridge and\nstart it. I hoped to lure Robert into working on it with me, but\nthere I ran into a hitch. Robert was now a postdoc at MIT, and\nthough he'd made a lot of money the last time I'd lured him into\nworking on one of my schemes, it had also been a huge time sink.\nSo while he agreed that it sounded like a plausible idea, he firmly\nrefused to work on it.\n\nHmph. Well, I'd do it myself then. I recruited Dan Giffin, who had\nworked for Viaweb, and two undergrads who wanted summer jobs, and\nwe got to work trying to build what it's now clear is about twenty\ncompanies and several open source projects worth of software. The\nlanguage for defining applications would of course be a dialect of\nLisp. But I wasn't so naive as to assume I could spring an overt\nLisp on a general audience; we'd hide the parentheses, like Dylan\ndid.\n\nBy then there was a name for the kind of company Viaweb was, an\n\"application service provider,\" or ASP. This name didn't last long\nbefore it was replaced by \"software as a service,\" but it was current\nfor long enough that I named this new company after it: it was going\nto be called Aspra.\n\nI started working on the application builder, Dan worked on network\ninfrastructure, and the two undergrads worked on the first two\nservices (images and phone calls). But about halfway through the\nsummer I realized I really didn't want to run a company \u0097 especially\nnot a big one, which it was looking like this would have to be. I'd\nonly started Viaweb because I needed the money. Now that I didn't\nneed money anymore, why was I doing this? If this vision had to be\nrealized as a company, then screw the vision. I'd build a subset\nthat could be done as an open source project.\n\nMuch to my surprise, the time I spent working on this stuff was not\nwasted after all. After we started Y Combinator, I would often\nencounter startups working on parts of this new architecture, and\nit was very useful to have spent so much time thinking about it and\neven trying to write some of it.\n\nThe subset I would build as an open source project was the new Lisp,\nwhose parentheses I now wouldn't even have to hide. A lot of Lisp\nhackers dream of building a new Lisp, partly because one of the\ndistinctive features of the language is that it has dialects, and\npartly, I think, because we have in our minds a Platonic form of\nLisp that all existing dialects fall short of. I certainly did. So\nat the end of the summer Dan and I switched to working on this new\ndialect of Lisp, which I called Arc, in a house I bought in Cambridge.\n\nThe following spring, lightning struck. I was invited to give a\ntalk at a Lisp conference, so I gave one about how we'd used Lisp\nat Viaweb. Afterward I put a postscript file of this talk online,\non paulgraham.com, which I'd created years before using Viaweb but\nhad never used for anything. In one day it got 30,000 page views.\nWhat on earth had happened? The referring urls showed that someone\nhad posted it on Slashdot.\n[10]\n\nWow, I thought, there's an audience. If I write something and put\nit on the web, anyone can read it. That may seem obvious now, but\nit was surprising then. In the print era there was a narrow channel\nto readers, guarded by fierce monsters known as editors. The only\nway to get an audience for anything you wrote was to get it published\nas a book, or in a newspaper or magazine. Now anyone could publish\nanything.\n\nThis had been possible in principle since 1993, but not many people\nhad realized it yet. I had been intimately involved with building\nthe infrastructure of the web for most of that time, and a writer\nas well, and it had taken me 8 years to realize it. Even then it\ntook me several years to understand the implications. It meant there\nwould be a whole new generation of \nessays.\n[11]\n\nIn the print era, the channel for publishing essays had been\nvanishingly small. Except for a few officially anointed thinkers\nwho went to the right parties in New York, the only people allowed\nto publish essays were specialists writing about their specialties.\nThere were so many essays that had never been written, because there\nhad been no way to publish them. Now they could be, and I was going\nto write them.\n[12]\n\nI've worked on several different things, but to the extent there\nwas a turning point where I figured out what to work on, it was\nwhen I started publishing essays online. From then on I knew that\nwhatever else I did, I'd always write essays too.\n\nI knew that online essays would be a \nmarginal medium at first.\nSocially they'd seem more like rants posted by nutjobs on their\nGeoCities sites than the genteel and beautifully typeset compositions\npublished in The New Yorker. But by this point I knew enough to\nfind that encouraging instead of discouraging.\n\nOne of the most conspicuous patterns I've noticed in my life is how\nwell it has worked, for me at least, to work on things that weren't\nprestigious. Still life has always been the least prestigious form\nof painting. Viaweb and Y Combinator both seemed lame when we started\nthem. I still get the glassy eye from strangers when they ask what\nI'm writing, and I explain that it's an essay I'm going to publish\non my web site. Even Lisp, though prestigious intellectually in\nsomething like the way Latin is, also seems about as hip.\n\nIt's not that unprestigious types of work are good per se. But when\nyou find yourself drawn to some kind of work despite its current\nlack of prestige, it's a sign both that there's something real to\nbe discovered there, and that you have the right kind of motives.\nImpure motives are a big danger for the ambitious. If anything is\ngoing to lead you astray, it will be the desire to impress people.\nSo while working on things that aren't prestigious doesn't guarantee\nyou're on the right track, it at least guarantees you're not on the\nmost common type of wrong one.\n\nOver the next several years I wrote lots of essays about all kinds\nof different topics. O'Reilly reprinted a collection of them as a\nbook, called Hackers & Painters after one of the essays in it. I\nalso worked on spam filters, and did some more painting. I used to\nhave dinners for a group of friends every thursday night, which\ntaught me how to cook for groups. And I bought another building in\nCambridge, a former candy factory (and later, twas said, porn\nstudio), to use as an office.\n\nOne night in October 2003 there was a big party at my house. It was\na clever idea of my friend Maria Daniels, who was one of the thursday\ndiners. Three separate hosts would all invite their friends to one\nparty. So for every guest, two thirds of the other guests would be\npeople they didn't know but would probably like. One of the guests\nwas someone I didn't know but would turn out to like a lot: a woman\ncalled Jessica Livingston. A couple days later I asked her out.\n\nJessica was in charge of marketing at a Boston investment bank.\nThis bank thought it understood startups, but over the next year,\nas she met friends of mine from the startup world, she was surprised\nhow different reality was. And how colorful their stories were. So\nshe decided to compile a book of \ninterviews with startup founders.\n\nWhen the bank had financial problems and she had to fire half her\nstaff, she started looking for a new job. In early 2005 she interviewed\nfor a marketing job at a Boston VC firm. It took them weeks to make\nup their minds, and during this time I started telling her about\nall the things that needed to be fixed about venture capital. They\nshould make a larger number of smaller investments instead of a\nhandful of giant ones, they should be funding younger, more technical\nfounders instead of MBAs, they should let the founders remain as\nCEO, and so on.\n\nOne of my tricks for writing essays had always been to give talks.\nThe prospect of having to stand up in front of a group of people\nand tell them something that won't waste their time is a great\nspur to the imagination. When the Harvard Computer Society, the\nundergrad computer club, asked me to give a talk, I decided I would\ntell them how to start a startup. Maybe they'd be able to avoid the\nworst of the mistakes we'd made.\n\nSo I gave this talk, in the course of which I told them that the\nbest sources of seed funding were successful startup founders,\nbecause then they'd be sources of advice too. Whereupon it seemed\nthey were all looking expectantly at me. Horrified at the prospect\nof having my inbox flooded by business plans (if I'd only known),\nI blurted out \"But not me!\" and went on with the talk. But afterward\nit occurred to me that I should really stop procrastinating about\nangel investing. I'd been meaning to since Yahoo bought us, and now\nit was 7 years later and I still hadn't done one angel investment.\n\nMeanwhile I had been scheming with Robert and Trevor about projects\nwe could work on together. I missed working with them, and it seemed\nlike there had to be something we could collaborate on.\n\nAs Jessica and I were walking home from dinner on March 11, at the\ncorner of Garden and Walker streets, these three threads converged.\nScrew the VCs who were taking so long to make up their minds. We'd\nstart our own investment firm and actually implement the ideas we'd\nbeen talking about. I'd fund it, and Jessica could quit her job and\nwork for it, and we'd get Robert and Trevor as partners too.\n[13]\n\nOnce again, ignorance worked in our favor. We had no idea how to\nbe angel investors, and in Boston in 2005 there were no Ron Conways\nto learn from. So we just made what seemed like the obvious choices,\nand some of the things we did turned out to be novel.\n\nThere are multiple components to Y Combinator, and we didn't figure\nthem all out at once. The part we got first was to be an angel firm.\nIn those days, those two words didn't go together. There were VC\nfirms, which were organized companies with people whose job it was\nto make investments, but they only did big, million dollar investments.\nAnd there were angels, who did smaller investments, but these were\nindividuals who were usually focused on other things and made\ninvestments on the side. And neither of them helped founders enough\nin the beginning. We knew how helpless founders were in some respects,\nbecause we remembered how helpless we'd been. For example, one thing\nJulian had done for us that seemed to us like magic was to get us\nset up as a company. We were fine writing fairly difficult software,\nbut actually getting incorporated, with bylaws and stock and all\nthat stuff, how on earth did you do that? Our plan was not only to\nmake seed investments, but to do for startups everything Julian had\ndone for us.\n\nYC was not organized as a fund. It was cheap enough to run that we\nfunded it with our own money. That went right by 99% of readers,\nbut professional investors are thinking \"Wow, that means they got\nall the returns.\" But once again, this was not due to any particular\ninsight on our part. We didn't know how VC firms were organized.\nIt never occurred to us to try to raise a fund, and if it had, we\nwouldn't have known where to start.\n[14]\n\nThe most distinctive thing about YC is the batch model: to fund a\nbunch of startups all at once, twice a year, and then to spend three\nmonths focusing intensively on trying to help them. That part we\ndiscovered by accident, not merely implicitly but explicitly due\nto our ignorance about investing. We needed to get experience as\ninvestors. What better way, we thought, than to fund a whole bunch\nof startups at once? We knew undergrads got temporary jobs at tech\ncompanies during the summer. Why not organize a summer program where\nthey'd start startups instead? We wouldn't feel guilty for being\nin a sense fake investors, because they would in a similar sense\nbe fake founders. So while we probably wouldn't make much money out\nof it, we'd at least get to practice being investors on them, and\nthey for their part would probably have a more interesting summer\nthan they would working at Microsoft.\n\nWe'd use the building I owned in Cambridge as our headquarters.\nWe'd all have dinner there once a week \u0097 on tuesdays, since I was\nalready cooking for the thursday diners on thursdays \u0097 and after\ndinner we'd bring in experts on startups to give talks.\n\nWe knew undergrads were deciding then about summer jobs, so in a\nmatter of days we cooked up something we called the Summer Founders\nProgram, and I posted an \nannouncement \non my site, inviting undergrads\nto apply. I had never imagined that writing essays would be a way\nto get \"deal flow,\" as investors call it, but it turned out to be\nthe perfect source.\n[15]\nWe got 225 applications for the Summer\nFounders Program, and we were surprised to find that a lot of them\nwere from people who'd already graduated, or were about to that\nspring. Already this SFP thing was starting to feel more serious\nthan we'd intended.\n\nWe invited about 20 of the 225 groups to interview in person, and\nfrom those we picked 8 to fund. They were an impressive group. That\nfirst batch included reddit, Justin Kan and Emmett Shear, who went\non to found Twitch, Aaron Swartz, who had already helped write the\nRSS spec and would a few years later become a martyr for open access,\nand Sam Altman, who would later become the second president of YC.\nI don't think it was entirely luck that the first batch was so good.\nYou had to be pretty bold to sign up for a weird thing like the\nSummer Founders Program instead of a summer job at a legit place\nlike Microsoft or Goldman Sachs.\n\nThe deal for startups was based on a combination of the deal we did\nwith Julian ($10k for 10%) and what Robert said MIT grad students\ngot for the summer ($6k). We invested $6k per founder, which in the\ntypical two-founder case was $12k, in return for 6%. That had to\nbe fair, because it was twice as good as the deal we ourselves had\ntaken. Plus that first summer, which was really hot, Jessica brought\nthe founders free air conditioners.\n[16]\n\nFairly quickly I realized that we had stumbled upon the way to scale\nstartup funding. Funding startups in batches was more convenient\nfor us, because it meant we could do things for a lot of startups\nat once, but being part of a batch was better for the startups too.\nIt solved one of the biggest problems faced by founders: the\nisolation. Now you not only had colleagues, but colleagues who\nunderstood the problems you were facing and could tell you how they\nwere solving them.\n\nAs YC grew, we started to notice other advantages of scale. The\nalumni became a tight community, dedicated to helping one another,\nand especially the current batch, whose shoes they remembered being\nin. We also noticed that the startups were becoming one another's\ncustomers. We used to refer jokingly to the \"YC GDP,\" but as YC\ngrows this becomes less and less of a joke. Now lots of startups\nget their initial set of customers almost entirely from among their\nbatchmates.\n\nI had not originally intended YC to be a full-time job. I was going\nto do three things: hack, write essays, and work on YC. As YC grew,\nand I grew more excited about it, it started to take up a lot more\nthan a third of my attention. But for the first few years I was\nstill able to work on other things.\n\nIn the summer of 2006, Robert and I started working on a new version\nof Arc. This one was reasonably fast, because it was compiled into\nScheme. To test this new Arc, I wrote Hacker News in it. It was\noriginally meant to be a news aggregator for startup founders and\nwas called Startup News, but after a few months I got tired of\nreading about nothing but startups. Plus it wasn't startup founders\nwe wanted to reach. It was future startup founders. So I changed\nthe name to Hacker News and the topic to whatever engaged one's\nintellectual curiosity.\n\nHN was no doubt good for YC, but it was also by far the biggest\nsource of stress for me. If all I'd had to do was select and help\nfounders, life would have been so easy. And that implies that HN\nwas a mistake. Surely the biggest source of stress in one's work\nshould at least be something close to the core of the work. Whereas\nI was like someone who was in pain while running a marathon not\nfrom the exertion of running, but because I had a blister from an\nill-fitting shoe. When I was dealing with some urgent problem during\nYC, there was about a 60% chance it had to do with HN, and a 40%\nchance it had do with everything else combined.\n[17]\n\nAs well as HN, I wrote all of YC's internal software in Arc. But\nwhile I continued to work a good deal in Arc, I gradually stopped\nworking on Arc, partly because I didn't have time to, and partly\nbecause it was a lot less attractive to mess around with the language\nnow that we had all this infrastructure depending on it. So now my\nthree projects were reduced to two: writing essays and working on\nYC.\n\nYC was different from other kinds of work I've done. Instead of\ndeciding for myself what to work on, the problems came to me. Every\n6 months there was a new batch of startups, and their problems,\nwhatever they were, became our problems. It was very engaging work,\nbecause their problems were quite varied, and the good founders\nwere very effective. If you were trying to learn the most you could\nabout startups in the shortest possible time, you couldn't have\npicked a better way to do it.\n\nThere were parts of the job I didn't like. Disputes between cofounders,\nfiguring out when people were lying to us, fighting with people who\nmaltreated the startups, and so on. But I worked hard even at the\nparts I didn't like. I was haunted by something Kevin Hale once\nsaid about companies: \"No one works harder than the boss.\" He meant\nit both descriptively and prescriptively, and it was the second\npart that scared me. I wanted YC to be good, so if how hard I worked\nset the upper bound on how hard everyone else worked, I'd better\nwork very hard.\n\nOne day in 2010, when he was visiting California for interviews,\nRobert Morris did something astonishing: he offered me unsolicited\nadvice. I can only remember him doing that once before. One day at\nViaweb, when I was bent over double from a kidney stone, he suggested\nthat it would be a good idea for him to take me to the hospital.\nThat was what it took for Rtm to offer unsolicited advice. So I\nremember his exact words very clearly. \"You know,\" he said, \"you\nshould make sure Y Combinator isn't the last cool thing you do.\"\n\nAt the time I didn't understand what he meant, but gradually it\ndawned on me that he was saying I should quit. This seemed strange\nadvice, because YC was doing great. But if there was one thing rarer\nthan Rtm offering advice, it was Rtm being wrong. So this set me\nthinking. It was true that on my current trajectory, YC would be\nthe last thing I did, because it was only taking up more of my\nattention. It had already eaten Arc, and was in the process of\neating essays too. Either YC was my life's work or I'd have to leave\neventually. And it wasn't, so I would.\n\nIn the summer of 2012 my mother had a stroke, and the cause turned\nout to be a blood clot caused by colon cancer. The stroke destroyed\nher balance, and she was put in a nursing home, but she really\nwanted to get out of it and back to her house, and my sister and I\nwere determined to help her do it. I used to fly up to Oregon to\nvisit her regularly, and I had a lot of time to think on those\nflights. On one of them I realized I was ready to hand YC over to\nsomeone else.\n\nI asked Jessica if she wanted to be president, but she didn't, so\nwe decided we'd try to recruit Sam Altman. We talked to Robert and\nTrevor and we agreed to make it a complete changing of the guard.\nUp till that point YC had been controlled by the original LLC we\nfour had started. But we wanted YC to last for a long time, and to\ndo that it couldn't be controlled by the founders. So if Sam said\nyes, we'd let him reorganize YC. Robert and I would retire, and\nJessica and Trevor would become ordinary partners.\n\nWhen we asked Sam if he wanted to be president of YC, initially he\nsaid no. He wanted to start a startup to make nuclear reactors.\nBut I kept at it, and in October 2013 he finally agreed. We decided\nhe'd take over starting with the winter 2014 batch. For the rest\nof 2013 I left running YC more and more to Sam, partly so he could\nlearn the job, and partly because I was focused on my mother, whose\ncancer had returned.\n\nShe died on January 15, 2014. We knew this was coming, but it was\nstill hard when it did.\n\nI kept working on YC till March, to help get that batch of startups\nthrough Demo Day, then I checked out pretty completely. (I still\ntalk to alumni and to new startups working on things I'm interested\nin, but that only takes a few hours a week.)\n\nWhat should I do next? Rtm's advice hadn't included anything about\nthat. I wanted to do something completely different, so I decided\nI'd paint. I wanted to see how good I could get if I really focused\non it. So the day after I stopped working on YC, I started painting.\nI was rusty and it took a while to get back into shape, but it was\nat least completely engaging.\n[18]\n\nI spent most of the rest of 2014 painting. I'd never been able to\nwork so uninterruptedly before, and I got to be better than I had\nbeen. Not good enough, but better. Then in November, right in the\nmiddle of a painting, I ran out of steam. Up till that point I'd\nalways been curious to see how the painting I was working on would\nturn out, but suddenly finishing this one seemed like a chore. So\nI stopped working on it and cleaned my brushes and haven't painted\nsince. So far anyway.\n\nI realize that sounds rather wimpy. But attention is a zero sum\ngame. If you can choose what to work on, and you choose a project\nthat's not the best one (or at least a good one) for you, then it's\ngetting in the way of another project that is. And at 50 there was\nsome opportunity cost to screwing around.\n\nI started writing essays again, and wrote a bunch of new ones over\nthe next few months. I even wrote a couple that \nweren't about\nstartups. Then in March 2015 I started working on Lisp again.\n\nThe distinctive thing about Lisp is that its core is a language\ndefined by writing an interpreter in itself. It wasn't originally\nintended as a programming language in the ordinary sense. It was\nmeant to be a formal model of computation, an alternative to the\nTuring machine. If you want to write an interpreter for a language\nin itself, what's the minimum set of predefined operators you need?\nThe Lisp that John McCarthy invented, or more accurately discovered,\nis an answer to that question.\n[19]\n\nMcCarthy didn't realize this Lisp could even be used to program\ncomputers till his grad student Steve Russell suggested it. Russell\ntranslated McCarthy's interpreter into IBM 704 machine language,\nand from that point Lisp started also to be a programming language\nin the ordinary sense. But its origins as a model of computation\ngave it a power and elegance that other languages couldn't match.\nIt was this that attracted me in college, though I didn't understand\nwhy at the time.\n\nMcCarthy's 1960 Lisp did nothing more than interpret Lisp expressions.\nIt was missing a lot of things you'd want in a programming language.\nSo these had to be added, and when they were, they weren't defined\nusing McCarthy's original axiomatic approach. That wouldn't have\nbeen feasible at the time. McCarthy tested his interpreter by\nhand-simulating the execution of programs. But it was already getting\nclose to the limit of interpreters you could test that way \u0097 indeed,\nthere was a bug in it that McCarthy had overlooked. To test a more\ncomplicated interpreter, you'd have had to run it, and computers\nthen weren't powerful enough.\n\nNow they are, though. Now you could continue using McCarthy's\naxiomatic approach till you'd defined a complete programming language.\nAnd as long as every change you made to McCarthy's Lisp was a\ndiscoveredness-preserving transformation, you could, in principle,\nend up with a complete language that had this quality. Harder to\ndo than to talk about, of course, but if it was possible in principle,\nwhy not try? So I decided to take a shot at it. It took 4 years,\nfrom March 26, 2015 to October 12, 2019. It was fortunate that I\nhad a precisely defined goal, or it would have been hard to keep\nat it for so long.\n\nI wrote this new Lisp, called Bel, \nin itself in Arc. That may sound\nlike a contradiction, but it's an indication of the sort of trickery\nI had to engage in to make this work. By means of an egregious\ncollection of hacks I managed to make something close enough to an\ninterpreter written in itself that could actually run. Not fast,\nbut fast enough to test.\n\nI had to ban myself from writing essays during most of this time,\nor I'd never have finished. In late 2015 I spent 3 months writing\nessays, and when I went back to working on Bel I could barely\nunderstand the code. Not so much because it was badly written as\nbecause the problem is so convoluted. When you're working on an\ninterpreter written in itself, it's hard to keep track of what's\nhappening at what level, and errors can be practically encrypted\nby the time you get them.\n\nSo I said no more essays till Bel was done. But I told few people\nabout Bel while I was working on it. So for years it must have\nseemed that I was doing nothing, when in fact I was working harder\nthan I'd ever worked on anything. Occasionally after wrestling for\nhours with some gruesome bug I'd check Twitter or HN and see someone\nasking \"Does Paul Graham still code?\"\n\nWorking on Bel was hard but satisfying. I worked on it so intensively\nthat at any given time I had a decent chunk of the code in my head\nand could write more there. I remember taking the boys to the\ncoast on a sunny day in 2015 and figuring out how to deal with some\nproblem involving continuations while I watched them play in the\ntide pools. It felt like I was doing life right. I remember that\nbecause I was slightly dismayed at how novel it felt. The good news\nis that I had more moments like this over the next few years.\n\nIn the summer of 2016 we moved to England. We wanted our kids to\nsee what it was like living in another country, and since I was a\nBritish citizen by birth, that seemed the obvious choice. We only\nmeant to stay for a year, but we liked it so much that we still\nlive there. So most of Bel was written in England.\n\nIn the fall of 2019, Bel was finally finished. Like McCarthy's\noriginal Lisp, it's a spec rather than an implementation, although\nlike McCarthy's Lisp it's a spec expressed as code.\n\nNow that I could write essays again, I wrote a bunch about topics\nI'd had stacked up. I kept writing essays through 2020, but I also\nstarted to think about other things I could work on. How should I\nchoose what to do? Well, how had I chosen what to work on in the\npast? I wrote an essay for myself to answer that question, and I\nwas surprised how long and messy the answer turned out to be. If\nthis surprised me, who'd lived it, then I thought perhaps it would\nbe interesting to other people, and encouraging to those with\nsimilarly messy lives. So I wrote a more detailed version for others\nto read, and this is the last sentence of it.\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nMy experience skipped a step in the evolution of computers:\ntime-sharing machines with interactive OSes. I went straight from\nbatch processing to microcomputers, which made microcomputers seem\nall the more exciting.\n\n[2]\nItalian words for abstract concepts can nearly always be\npredicted from their English cognates (except for occasional traps\nlike polluzione). It's the everyday words that differ. So if you\nstring together a lot of abstract concepts with a few simple verbs,\nyou can make a little Italian go a long way.\n\n[3]\nI lived at Piazza San Felice 4, so my walk to the Accademia\nwent straight down the spine of old Florence: past the Pitti, across\nthe bridge, past Orsanmichele, between the Duomo and the Baptistery,\nand then up Via Ricasoli to Piazza San Marco. I saw Florence at\nstreet level in every possible condition, from empty dark winter\nevenings to sweltering summer days when the streets were packed with\ntourists.\n\n[4]\nYou can of course paint people like still lives if you want\nto, and they're willing. That sort of portrait is arguably the apex\nof still life painting, though the long sitting does tend to produce\npained expressions in the sitters.\n\n[5]\nInterleaf was one of many companies that had smart people and\nbuilt impressive technology, and yet got crushed by Moore's Law.\nIn the 1990s the exponential growth in the power of commodity (i.e.\nIntel) processors rolled up high-end, special-purpose hardware and\nsoftware companies like a bulldozer.\n\n[6]\nThe signature style seekers at RISD weren't specifically\nmercenary. In the art world, money and coolness are tightly coupled.\nAnything expensive comes to be seen as cool, and anything seen as\ncool will soon become equally expensive.\n\n[7]\nTechnically the apartment wasn't rent-controlled but\nrent-stabilized, but this is a refinement only New Yorkers would\nknow or care about. The point is that it was really cheap, less\nthan half market price.\n\n[8]\nMost software you can launch as soon as it's done. But when\nthe software is an online store builder and you're hosting the\nstores, if you don't have any users yet, that fact will be painfully\nobvious. So before we could launch publicly we had to launch\nprivately, in the sense of recruiting an initial set of users and\nmaking sure they had decent-looking stores.\n\n[9]\nWe'd had a code editor in Viaweb for users to define their\nown page styles. They didn't know it, but they were editing Lisp\nexpressions underneath. But this wasn't an app editor, because the\ncode ran when the merchants' sites were generated, not when shoppers\nvisited them.\n\n[10]\nThis was the first instance of what is now a familiar experience,\nand so was what happened next, when I read the comments and found\nthey were full of angry people. How could I claim that Lisp was\nbetter than other languages? Weren't they all Turing complete?\nPeople who see the responses to essays I write sometimes tell me\nhow sorry they feel for me, but I'm not exaggerating when I reply\nthat it has always been like this, since the very beginning. It\ncomes with the territory. An essay must tell readers things they\ndon't already know, and some \npeople dislike being told such things.\n\n[11]\nPeople put plenty of stuff on the internet in the 90s of\ncourse, but putting something online is not the same as publishing\nit online. Publishing online means you treat the online version as\nthe (or at least a) primary version.\n\n[12]\nThere is a general lesson here that our experience with Y\nCombinator also teaches: Customs continue to constrain you long\nafter the restrictions that caused them have disappeared. Customary\nVC practice had once, like the customs about publishing essays,\nbeen based on real constraints. Startups had once been much more\nexpensive to start, and proportionally rare. Now they could be cheap\nand common, but the VCs' customs still reflected the old world,\njust as customs about writing essays still reflected the constraints\nof the print era.\n\nWhich in turn implies that people who are independent-minded (i.e.\nless influenced by custom) will have an advantage in fields affected\nby rapid change (where customs are more likely to be obsolete).\n\nHere's an interesting point, though: you can't always predict which\nfields will be affected by rapid change. Obviously software and\nventure capital will be, but who would have predicted that essay\nwriting would be?\n\n[13]\nY Combinator was not the original name. At first we were\ncalled Cambridge Seed. But we didn't want a regional name, in case\nsomeone copied us in Silicon Valley, so we renamed ourselves after\none of the coolest tricks in the lambda calculus, the Y combinator.\n\nI picked orange as our color partly because it's the warmest, and\npartly because no VC used it. In 2005 all the VCs used staid colors\nlike maroon, navy blue, and forest green, because they were trying\nto appeal to LPs, not founders. The YC logo itself is an inside\njoke: the Viaweb logo had been a white V on a red circle, so I made\nthe YC logo a white Y on an orange square.\n\n[14]\nYC did become a fund for a couple years starting in 2009,\nbecause it was getting so big I could no longer afford to fund it\npersonally. But after Heroku got bought we had enough money to go\nback to being self-funded.\n\n[15]\nI've never liked the term \"deal flow,\" because it implies\nthat the number of new startups at any given time is fixed. This\nis not only false, but it's the purpose of YC to falsify it, by\ncausing startups to be founded that would not otherwise have existed.\n\n[16]\nShe reports that they were all different shapes and sizes,\nbecause there was a run on air conditioners and she had to get\nwhatever she could, but that they were all heavier than she could\ncarry now.\n\n[17]\nAnother problem with HN was a bizarre edge case that occurs\nwhen you both write essays and run a forum. When you run a forum,\nyou're assumed to see if not every conversation, at least every\nconversation involving you. And when you write essays, people post\nhighly imaginative misinterpretations of them on forums. Individually\nthese two phenomena are tedious but bearable, but the combination\nis disastrous. You actually have to respond to the misinterpretations,\nbecause the assumption that you're present in the conversation means\nthat not responding to any sufficiently upvoted misinterpretation\nreads as a tacit admission that it's correct. But that in turn\nencourages more; anyone who wants to pick a fight with you senses\nthat now is their chance.\n\n[18]\nThe worst thing about leaving YC was not working with Jessica\nanymore. We'd been working on YC almost the whole time we'd known\neach other, and we'd neither tried nor wanted to separate it from\nour personal lives, so leaving was like pulling up a deeply rooted\ntree.\n\n[19]\nOne way to get more precise about the concept of invented vs\ndiscovered is to talk about space aliens. Any sufficiently advanced\nalien civilization would certainly know about the Pythagorean\ntheorem, for example. I believe, though with less certainty, that\nthey would also know about the Lisp in McCarthy's 1960 paper.\n\nBut if so there's no reason to suppose that this is the limit of\nthe language that might be known to them. Presumably aliens need\nnumbers and errors and I/O too. So it seems likely there exists at\nleast one path out of McCarthy's Lisp along which discoveredness\nis preserved.\n\n\n\nThanks to Trevor Blackwell, John Collison, Patrick Collison, Daniel\nGackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj\nTaggar for reading drafts of this.\n\n", "December 2020\n\nJessica and I have certain words that have special significance\nwhen we're talking about startups. The highest compliment we can\npay to founders is to describe them as \"earnest.\" This is not by\nitself a guarantee of success. You could be earnest but incapable.\nBut when founders are both formidable (another of our words) and\nearnest, they're as close to unstoppable as you get.\n\nEarnestness sounds like a boring, even Victorian virtue. It seems\na bit of an anachronism that people in Silicon Valley would care\nabout it. Why does this matter so much?\n\nWhen you call someone earnest, you're making a statement about their\nmotives. It means both that they're doing something for the right\nreasons, and that they're trying as hard as they can. If we imagine\nmotives as vectors, it means both the direction and the magnitude\nare right. Though these are of course related: when people are doing\nsomething for the right reasons, they try harder.\n[1]\n\nThe reason motives matter so much in Silicon Valley is that so many\npeople there have the wrong ones. Starting a successful startup\nmakes you rich and famous. So a lot of the people trying to start\nthem are doing it for those reasons. Instead of what? Instead of\ninterest in the problem for its own sake. That is the root of\nearnestness. \n[2]\n\nIt's also the hallmark of a nerd. Indeed, when people describe\nthemselves as \"x nerds,\" what they mean is that they're interested\nin x for its own sake, and not because it's cool to be interested\nin x, or because of what they can get from it. They're saying they\ncare so much about x that they're willing to sacrifice seeming cool\nfor its sake.\n\nA genuine interest \nin something is a very powerful motivator \u0097 for\nsome people, the most powerful motivator of all.\n[3]\nWhich is why\nit's what Jessica and I look for in founders. But as well as being\na source of strength, it's also a source of vulnerability. Caring\nconstrains you. The earnest can't easily reply in kind to mocking\nbanter, or put on a cool facade of nihil admirari. They care too\nmuch. They are doomed to be the straight man. That's a real\ndisadvantage in your \nteenage years, \nwhen mocking banter and nihil\nadmirari often have the upper hand. But it becomes an advantage\nlater.\n\nIt's a commonplace now that the kids who were \nnerds in high school\nbecome the cool kids' bosses later on. But people misunderstand why\nthis happens. It's not just because the nerds are smarter, but also\nbecause they're more earnest. When the problems get harder than the\nfake ones you're given in high school, caring about them starts to\nmatter.\n\nDoes it always matter? Do the earnest always win? Not always. It\nprobably doesn't matter much in politics, or in crime, or in certain\ntypes of business that are similar to crime, like gambling, personal\ninjury law, patent trolling, and so on. Nor does it matter in\nacademic fields at the more \nbogus end of the spectrum. And though\nI don't know enough to say for sure, it may not matter in some kinds\nof humor: it may be possible to be completely cynical and still be\nvery funny.\n[4]\n\nLooking at the list of fields I mentioned, there's an obvious\npattern. Except possibly for humor, these are all types of work I'd\navoid like the plague. So that could be a useful heuristic for\ndeciding which fields to work in: how much does earnestness matter?\nWhich can in turn presumably be inferred from the prevalence of\nnerds at the top.\n\nAlong with \"nerd,\" another word that tends to be associated with\nearnestness is \"naive.\" The earnest often seem naive.  It's not\njust that they don't have the motives other people have. They often\ndon't fully grasp that such motives exist. Or they may know\nintellectually that they do, but because they don't feel them, they\nforget about them.\n[5]\n\nIt works to be slightly naive not just about motives but also,\nbelieve it or not, about the problems you're working on. Naive\noptimism can compensate for the bit rot that \nrapid change causes\nin established beliefs. You plunge into some problem saying \"How\nhard can it be?\", and then after solving it you learn that it was\ntill recently insoluble.\n\nNaivete is an obstacle for anyone who wants to seem sophisticated,\nand this is one reason would-be intellectuals find it so difficult\nto understand Silicon Valley. It hasn't been safe for such people\nto use the word \"earnest\" outside scare quotes since Oscar Wilde\nwrote \"The Importance of Being Earnest\" in 1895. And yet when you\nzoom in on Silicon Valley, right into \nJessica Livingston's brain,\nthat's what her x-ray vision\nis seeking out in founders. Earnestness!\nWho'd have guessed? Reporters literally can't believe it when\nfounders making piles of money say that they started their companies\nto make the world better. The situation seems made for mockery.\nHow can these founders be so naive as not to realize how implausible\nthey sound?\n\nThough those asking this question don't realize it, that's not a\nrhetorical question.\n\nA lot of founders are faking it, of course, particularly the smaller\nfry, and the soon to be smaller fry. But not all of them. There are\na significant number of founders who really are interested in the\nproblem they're solving mainly for its own sake.\n\nWhy shouldn't there be? We have no difficulty believing that people\nwould be interested in history or math or even old bus tickets for\ntheir own sake. Why can't there be people interested in self-driving\ncars or social networks for their own sake? When you look at the\nquestion from this side, it seems obvious there would be. And isn't\nit likely that having a deep interest in something would be a source\nof great energy and resilience? It is in every other field.\n\nThe question really is why we have a blind spot about business.\nAnd the answer to that is obvious if you know enough history. For\nmost of history, making large amounts of money has not been very\nintellectually interesting. In preindustrial times it was never far\nfrom robbery, and some areas of business still retain that character,\nexcept using lawyers instead of soldiers.\n\nBut there are other areas of business where the work is genuinely\ninteresting. Henry Ford got to spend much of his time working on\ninteresting technical problems, and for the last several decades\nthe trend in that direction has been accelerating. It's much easier\nnow to make a lot of money by working on something you're interested\nin than it was 50 years ago. \nAnd that, rather than how fast they\ngrow, may be the most important change that startups represent.\nThough indeed, the fact that the work is genuinely interesting is\na big part of why it gets done so fast.\n[6]\n\nCan you imagine a more important change than one in the relationship\nbetween intellectual curiosity and money? These are two of the most\npowerful forces in the world, and in my lifetime they've become\nsignificantly more aligned. How could you not be fascinated to watch\nsomething like this happening in real time?\n\nI meant this essay to be about earnestness generally, and now I've\ngone and talked about startups again. But I suppose at least it\nserves as an example of an x nerd in the wild.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nIt's interesting how many different ways there are not to\nbe earnest: to be cleverly cynical, to be superficially brilliant,\nto be conspicuously virtuous, to be cool, to be sophisticated, to\nbe orthodox, to be a snob, to bully, to pander, to be on the make.\nThis pattern suggests that earnestness is not one end of a continuum,\nbut a target one can fall short of in multiple dimensions.\n\nAnother thing I notice about this list is that it sounds like a\nlist of the ways people behave on Twitter. Whatever else social\nmedia is, it's a vivid catalogue of ways not to be earnest.\n\n[2]\nPeople's motives are as mixed in Silicon Valley as anywhere\nelse. Even the founders motivated mostly by money tend to be at\nleast somewhat interested in the problem they're solving, and even\nthe founders most interested in the problem they're solving also\nlike the idea of getting rich. But there's great variation in the\nrelative proportions of different founders' motivations.\n\nAnd when I talk about \"wrong\" motives, I don't mean morally wrong.\nThere's nothing morally wrong with starting a startup to make money.\nI just mean that those startups don't do as well.\n\n[3]\nThe most powerful motivator for most people is probably family.\nBut there are some for whom intellectual curiosity comes first. In\nhis (wonderful) autobiography, Paul Halmos says explicitly that for\na mathematician, math must come before anything else, including\nfamily. Which at least implies that it did for him.\n\n[4]\nInterestingly, just as the word \"nerd\" implies earnestness even\nwhen used as a metaphor, the word \"politics\" implies the opposite.\nIt's not only in actual politics that earnestness seems to be a\nhandicap, but also in office politics and academic politics.\n\n[5]\nIt's a bigger social error to seem naive in most European\ncountries than it is in America, and this may be one of subtler\nreasons startups are less common there. Founder culture is completely\nat odds with sophisticated cynicism.\n\nThe most earnest part of Europe is Scandinavia, and not surprisingly\nthis is also the region with the highest number of successful\nstartups per capita.\n\n[6]\nMuch of business is schleps, and probably always will be. But\neven being a professor is largely schleps. It would be interesting\nto collect statistics about the schlep ratios of different jobs,\nbut I suspect they'd rarely be less than 30%.\n\n\n\nThanks to Trevor Blackwell, Patrick Collison, Suhail Doshi, Jessica\nLivingston, Mattias Ljungman, Harj Taggar, and Kyle Vogt for reading\ndrafts of this.\n\n", "December 2020\n\nAs I was deciding what to write about next, I was surprised to find\nthat two separate essays I'd been planning to write were actually\nthe same.\n\nThe first is about how to ace your Y Combinator interview. There\nhas been so much nonsense written about this topic that I've been\nmeaning for years to write something telling founders the truth.\n\nThe second is about something politicians sometimes say \u0097 that the\nonly way to become a billionaire is by exploiting people \u0097 and why\nthis is mistaken.\n\nKeep reading, and you'll learn both simultaneously.\n\nI know the politicians are mistaken because it was my job to predict\nwhich people will become billionaires. I think I can truthfully say\nthat I know as much about how to do this as anyone. If the key to\nbecoming a billionaire \u0097 the defining feature of billionaires \u0097\nwas to exploit people, then I, as a professional billionaire scout,\nwould surely realize this and look for people who would be good at\nit, just as an NFL scout looks for speed in wide receivers.\n\nBut aptitude for exploiting people is not what Y Combinator looks\nfor at all. In fact, it's the opposite of what they look for. I'll\ntell you what they do look for, by explaining how to convince \nY\u00a0Combinator to fund you, and you can see for yourself.\n\nWhat YC looks for, above all, is founders who understand some group\nof users and can make what they want. This is so important that\nit's YC's motto: \"Make something people want.\"\n\nA big company can to some extent force unsuitable products on\nunwilling customers, but a startup doesn't have the power to do\nthat. A startup must sing for its supper, by making things that\ngenuinely delight its customers. Otherwise it will never get off\nthe ground.\n\nHere's where things get difficult, both for you as a founder and\nfor the YC partners trying to decide whether to fund you. In a\nmarket economy, it's hard to make something people want that they\ndon't already have. That's the great thing about market economies.\nIf other people both knew about this need and were able to satisfy\nit, they already would be, and there would be no room for your\nstartup.\n\nWhich means the conversation during your YC interview will have to\nbe about something new: either a new need, or a new way to satisfy\none. And not just new, but uncertain. If it were certain that the\nneed existed and that you could satisfy it, that certainty would\nbe reflected in large and rapidly growing revenues, and you wouldn't\nbe seeking seed funding.\n\nSo the YC partners have to guess both whether you've discovered a\nreal need, and whether you'll be able to satisfy it. That's what they\nare, at least in this part of their job: professional guessers.\nThey have 1001 heuristics for doing this, and I'm not going to tell\nyou all of them, but I'm happy to tell you the most important ones,\nbecause these can't be faked; the only way to \"hack\" them would be\nto do what you should be doing anyway as a founder.\n\nThe first thing the partners will try to figure out, usually, is\nwhether what you're making will ever be something a lot of people\nwant. It doesn't have to be something a lot of people want now.\nThe product and the market will both evolve, and will influence\neach other's evolution. But in the end there has to be something\nwith a huge market. That's what the partners will be trying to\nfigure out: is there a path to a huge market?\n[1]\n\nSometimes it's obvious there will be a huge market. If \nBoom manages\nto ship an airliner at all, international airlines will have to buy\nit. But usually it's not obvious. Usually the path to a huge market\nis by growing a small market. This idea is important enough that\nit's worth coining a phrase for, so let's call one of these small\nbut growable markets a \"larval market.\"\n\nThe perfect example of a larval market might be Apple's market when\nthey were founded in 1976. In 1976, not many people wanted their\nown computer. But more and more started to want one, till now every\n10 year old on the planet wants a computer (but calls it a \"phone\").\n\nThe ideal combination is the group of founders who are \n\"living in\nthe future\" in the sense of being at the leading edge of some kind\nof change, and who are building something they themselves want.\nMost super-successful startups are of this type. Steve Wozniak\nwanted a computer. Mark Zuckerberg wanted to engage online with his\ncollege friends. Larry and Sergey wanted to find things on the web.\nAll these founders were building things they and their peers wanted,\nand the fact that they were at the leading edge of change meant\nthat more people would want these things in the future.\n\nBut although the ideal larval market is oneself and one's peers,\nthat's not the only kind. A larval market might also be regional,\nfor example. You build something to serve one location, and then\nexpand to others.\n\nThe crucial feature of the initial market is that it exist. That\nmay seem like an obvious point, but the lack of it is the biggest\nflaw in most startup ideas. There have to be some people who want\nwhat you're building right now, and want it so urgently that they're\nwilling to use it, bugs and all, even though you're a small company\nthey've never heard of. There don't have to be many, but there have\nto be some. As long as you have some users, there are straightforward\nways to get more: build new features they want, seek out more people\nlike them, get them to refer you to their friends, and so on. But\nthese techniques all require some initial seed group of users.\n\nSo this is one thing the YC partners will almost certainly dig into\nduring your interview. Who are your first users going to be, and\nhow do you know they want this? If I had to decide whether to fund\nstartups based on a single question, it would be \"How do you know\npeople want this?\"\n\nThe most convincing answer is \"Because we and our friends want it.\"\nIt's even better when this is followed by the news that you've\nalready built a prototype, and even though it's very crude, your\nfriends are using it, and it's spreading by word of mouth. If you\ncan say that and you're not lying, the partners will switch from\ndefault no to default yes. Meaning you're in unless there's some\nother disqualifying flaw.\n\nThat is a hard standard to meet, though. Airbnb didn't meet it.\nThey had the first part. They had made something they themselves\nwanted. But it wasn't spreading. So don't feel bad if you don't hit\nthis gold standard of convincingness. If Airbnb didn't hit it, it\nmust be too high.\n\nIn practice, the YC partners will be satisfied if they feel that\nyou have a deep understanding of your users' needs. And the Airbnbs\ndid have that. They were able to tell us all about what motivated\nhosts and guests. They knew from first-hand experience, because\nthey'd been the first hosts. We couldn't ask them a question they\ndidn't know the answer to. We ourselves were not very excited about\nthe idea as users, but we knew this didn't prove anything, because\nthere were lots of successful startups we hadn't been excited about\nas users. We were able to say to ourselves \"They seem to know what\nthey're talking about. Maybe they're onto something. It's not growing\nyet, but maybe they can figure out how to make it grow during YC.\"\nWhich they did, about three weeks into the batch.\n\nThe best thing you can do in a YC interview is to teach the partners\nabout your users. So if you want to prepare for your interview, one of the best \nways to do it is to go talk to your users and find out exactly what\nthey're thinking. Which is what you should be doing anyway.\n\nThis may sound strangely credulous, but the YC partners want to\nrely on the founders to tell them about the market. Think about\nhow VCs typically judge the potential market for an idea. They're\nnot ordinarily domain experts themselves, so they forward the idea\nto someone who is, and ask for their opinion. YC doesn't have time\nto do this, but if the YC partners can convince themselves that the\nfounders both (a) know what they're talking about and (b) aren't\nlying, they don't need outside domain experts. They can use the\nfounders themselves as domain experts when evaluating their own\nidea.\n\nThis is why YC interviews aren't pitches. To give as many founders\nas possible a chance to get funded, we made interviews as short as\nwe could: 10 minutes. That is not enough time for the partners to\nfigure out, through the indirect evidence in a pitch, whether you\nknow what you're talking about and aren't lying. They need to dig\nin and ask you questions. There's not enough time for sequential\naccess. They need random access.\n[2]\n\nThe worst advice I ever heard about how to succeed in a YC interview\nis that you should take control of the interview and make sure to\ndeliver the message you want to. In other words, turn the interview\ninto a pitch. \u27e8elaborate expletive\u27e9. It is so annoying when people\ntry to do that. You ask them a question, and instead of answering\nit, they deliver some obviously prefabricated blob of pitch. It\neats up 10 minutes really fast.\n\nThere is no one who can give you accurate advice about what to do\nin a YC interview except a current or former YC partner. People\nwho've merely been interviewed, even successfully, have no idea of\nthis, but interviews take all sorts of different forms depending\non what the partners want to know about most. Sometimes they're all\nabout the founders, other times they're all about the idea. Sometimes\nsome very narrow aspect of the idea. Founders sometimes walk away\nfrom interviews complaining that they didn't get to explain their\nidea completely. True, but they explained enough.\n\nSince a YC interview consists of questions, the way to do it well\nis to answer them well. Part of that is answering them candidly.\nThe partners don't expect you to know everything. But if you don't\nknow the answer to a question, don't try to bullshit your way out\nof it. The partners, like most experienced investors, are professional\nbullshit detectors, and you are (hopefully) an amateur bullshitter.\nAnd if you try to bullshit them and fail, they may not even tell\nyou that you failed. So it's better to be honest than to try to\nsell them. If you don't know the answer to a question, say you\ndon't, and tell them how you'd go about finding it, or tell them\nthe answer to some related question.\n\nIf you're asked, for example, what could go wrong, the worst possible\nanswer is \"nothing.\" Instead of convincing them that your idea is\nbullet-proof, this will convince them that you're a fool or a liar.\nFar better to go into gruesome detail. That's what experts do when\nyou ask what could go wrong.  The partners know that your idea is\nrisky. That's what a good bet looks like at this stage: a tiny\nprobability of a huge outcome.\n\nDitto if they ask about competitors. Competitors are rarely what\nkills startups. Poor execution does. But you should know who your\ncompetitors are, and tell the YC partners candidly what your relative\nstrengths and weaknesses are. Because the YC partners know that\ncompetitors don't kill startups, they won't hold competitors against\nyou too much. They will, however, hold it against you if you seem\neither to be unaware of competitors, or to be minimizing the threat\nthey pose. They may not be sure whether you're clueless or lying,\nbut they don't need to be.\n\nThe partners don't expect your idea to be perfect. This is seed\ninvesting. At this stage, all they can expect are promising hypotheses.\nBut they do expect you to be thoughtful and honest. So if trying\nto make your idea seem perfect causes you to come off as glib or\nclueless, you've sacrificed something you needed for something you\ndidn't.\n\nIf the partners are sufficiently convinced that there's a path to\na big market, the next question is whether you'll be able to find\nit. That in turn depends on three things: the general qualities of\nthe founders, their specific expertise in this domain, and the\nrelationship between them. How determined are the founders? Are\nthey good at building things? Are they resilient enough to keep\ngoing when things go wrong? How strong is their friendship?\n\nThough the Airbnbs only did ok in the idea department, they did\nspectacularly well in this department. The story of how they'd\nfunded themselves by making Obama- and McCain-themed breakfast\ncereal was the single most important factor in our decision to fund\nthem. They didn't realize it at the time, but what seemed to them\nan irrelevant story was in fact fabulously good evidence of their\nqualities as founders. It showed they were resourceful and determined,\nand could work together.\n\nIt wasn't just the cereal story that showed that, though. The whole\ninterview showed that they cared. They weren't doing this just for\nthe money, or because startups were cool. The reason they were\nworking so hard on this company was because it was their project.\nThey had discovered an interesting new idea, and they just couldn't\nlet it go.\n\nMundane as it sounds, that's the most powerful motivator of all,\nnot just in startups, but in most ambitious undertakings: to be\ngenuinely interested in what \nyou're building. This is what really\ndrives billionaires, or at least the ones who become billionaires\nfrom starting companies. The company is their project.\n\nOne thing few people realize about billionaires is that all of them\ncould have stopped sooner. They could have gotten acquired, or found\nsomeone else to run the company. Many founders do. The ones who\nbecome really rich are the ones who keep working. And what makes\nthem keep working is not just money. What keeps them working is the\nsame thing that keeps anyone else working when they could stop if\nthey wanted to: that there's nothing else they'd rather do.\n\nThat, not exploiting people, is the defining quality of people who\nbecome billionaires from starting companies. So that's what YC looks\nfor in founders: authenticity. People's motives for starting startups\nare usually mixed. They're usually doing it from some combination\nof the desire to make money, the desire to seem cool, genuine\ninterest in the problem, and unwillingness to work for someone else.\nThe last two are more powerful motivators than the first two. It's\nok for founders to want to make money or to seem cool. Most do.\nBut if the founders seem like they're doing it just to make money\nor just to seem cool, they're not likely to succeed on a big\nscale. The founders who are doing it for the money will take the\nfirst sufficiently large acquisition offer, and the ones who are\ndoing it to seem cool will rapidly discover that there are much\nless painful ways of seeming cool.\n[3]\n\nY Combinator certainly sees founders whose m.o. is to exploit people.\nYC is a magnet for them, because they want the YC brand. But when\nthe YC partners detect someone like that, they reject them. If bad\npeople made good founders, the YC partners would face a moral\ndilemma. Fortunately they don't, because bad people make bad founders.\nThis exploitative type of founder is not going to succeed on a large\nscale, and in fact probably won't even succeed on a small one,\nbecause they're always going to be taking shortcuts. They see YC\nitself as a shortcut.\n\nTheir exploitation usually begins with their own cofounders, which\nis disastrous, since the cofounders' relationship is the foundation\nof the company. Then it moves on to the users, which is also\ndisastrous, because the sort of early adopters a successful startup\nwants as its initial users are the hardest to fool. The best this\nkind of founder can hope for is to keep the edifice of deception\ntottering along until some acquirer can be tricked into buying it.\nBut that kind of acquisition is never very big.\n[4]\n\nIf professional billionaire scouts know that exploiting people is\nnot the skill to look for, why do some politicians think this is\nthe defining quality of billionaires?\n\nI think they start from the feeling that it's wrong that one person\ncould have so much more money than another. It's understandable\nwhere that feeling comes from. It's in our DNA, and even in the DNA\nof other species.\n\nIf they limited themselves to saying that it made them feel bad\nwhen one person had so much more money than other people, who would\ndisagree? It makes me feel bad too, and I think people who make a\nlot of money have a moral obligation to use it for the common good.\nThe mistake they make is to jump from feeling bad that some people\nare much richer than others to the conclusion that there's no\nlegitimate way to make a very large amount of money. Now we're\ngetting into statements that are not only falsifiable, but false.\n\nThere are certainly some people who become rich by doing bad things.\nBut there are also plenty of people who behave badly and don't make\nthat much from it. There is no correlation \u0097 in fact, probably an\ninverse correlation \u0097 between how badly you behave and how much\nmoney you make.\n\nThe greatest danger of this nonsense may not even be that it sends\npolicy astray, but that it misleads ambitious people. Can you imagine\na better way to destroy social mobility than by telling poor kids\nthat the way to get rich is by exploiting people, while the rich\nkids know, from having watched the preceding generation do it, how\nit's really done?\n\nI'll tell you how it's really done, so you can at least tell your\nown kids the truth. It's all about users. The most reliable way to\nbecome a billionaire is to start a company that \ngrows fast, and the\nway to grow fast is to make what users want. Newly started startups\nhave no choice but to delight users, or they'll never even get\nrolling. But this never stops being the lodestar, and bigger companies\ntake their eye off it at their peril. Stop delighting users, and\neventually someone else will.\n\nUsers are what the partners want to\nknow about in YC interviews, and what I want to know about when I\ntalk to founders that we funded ten years ago and who are billionaires\nnow. What do users want? What new things could you build for them?\nFounders who've become billionaires are always eager to talk about\nthat topic. That's how they became billionaires.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nThe YC partners have so much practice doing this that they\nsometimes see paths that the founders themselves haven't seen yet.\nThe partners don't try to seem skeptical, as buyers in transactions\noften do to increase their leverage. Although the founders feel\ntheir job is to convince the partners of the potential of their\nidea, these roles are not infrequently reversed, and the founders\nleave the interview feeling their idea has more potential than they\nrealized.\n\n[2]\nIn practice, 7 minutes would be enough. You rarely change your\nmind at minute 8. But 10 minutes is socially convenient.\n\n[3]\nI myself took the first sufficiently large acquisition offer\nin my first startup, so I don't blame founders for doing this.\nThere's nothing wrong with starting a startup to make money. You\nneed to make money somehow, and for some people startups are the\nmost efficient way to do it. I'm just saying that these are not the\nstartups that get really big.\n\n[4]\nNot these days, anyway. There were some big ones during the\nInternet Bubble, and indeed some big IPOs.\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, Robert Morris, Geoff Ralston, and\nHarj Taggar for reading drafts of this.\n\n", "December 2020\n\nTo celebrate Airbnb's IPO and to help future founders, I thought\nit might be useful to explain what was special about Airbnb.\n\nWhat was special about the Airbnbs was how earnest they were. They\ndid nothing half-way, and we could sense this even in the interview.\nSometimes after we interviewed a startup we'd be uncertain what to\ndo, and have to talk it over. Other times we'd just look at one\nanother and smile. The Airbnbs' interview was that kind. We didn't\neven like the idea that much. Nor did users, at that stage; they\nhad no growth. But the founders seemed so full of energy that it\nwas impossible not to like them.\n\nThat first impression was not misleading. During the batch our\nnickname for Brian Chesky was The Tasmanian Devil, because like the\ncartoon\ncharacter he seemed a tornado of energy. All three of them were\nlike that. No one ever worked harder during YC than the Airbnbs\ndid. When you talked to the Airbnbs, they took notes. If you suggested\nan idea to them in office hours, the next time you talked to them\nthey'd not only have implemented it, but also implemented two new\nideas they had in the process. \"They probably have the best attitude\nof any startup we've funded\" I wrote to Mike Arrington during the\nbatch.\n\nThey're still like that. Jessica and I had dinner with Brian in the\nsummer of 2018, just the three of us. By this point the company is\nten years old. He took a page of notes about ideas for new things\nAirbnb could do.\n\nWhat we didn't realize when we first met Brian and Joe and Nate was\nthat Airbnb was on its last legs. After working on the company for\na year and getting no growth, they'd agreed to give it one last\nshot. They'd try this Y Combinator thing, and if the company still\ndidn't take off, they'd give up.\n\nAny normal person would have given up already. They'd been funding\nthe company with credit cards. They had a binder full of\ncredit cards they'd maxed out. Investors didn't think much of the\nidea. One investor they met in a cafe walked out in the middle of\nmeeting with them. They thought he was going to the bathroom, but\nhe never came back. \"He didn't even finish his smoothie,\" Brian\nsaid. And now, in late 2008, it was the worst recession in decades.\nThe stock market was in free fall and wouldn't hit bottom for another\nfour months.\n\nWhy hadn't they given up? This is a useful question to ask. People,\nlike matter, reveal their nature under extreme conditions. One thing\nthat's clear is that they weren't doing this just for the money.\nAs a money-making scheme, this was pretty lousy: a year's work and\nall they had to show for it was a binder full of maxed-out credit\ncards. So why were they still working on this startup? Because of\nthe experience they'd had as the first hosts.\n\nWhen they first tried renting out airbeds on their floor during a\ndesign convention, all they were hoping for was to make enough money\nto pay their rent that month. But something surprising happened:\nthey enjoyed having those first three guests staying with them. And\nthe guests enjoyed it too. Both they and the guests had done it\nbecause they were in a sense forced to, and yet they'd all had a\ngreat experience. Clearly there was something new here: for hosts,\na new way to make money that had literally been right under their\nnoses, and for guests, a new way to travel that was in many ways\nbetter than hotels.\n\nThat experience was why the Airbnbs didn't give up. They knew they'd\ndiscovered something. They'd seen a glimpse of the future, and they\ncouldn't let it go.\n\nThey knew that once people tried staying in what is now called \"an\nairbnb,\" they would also realize that this was the future. But only\nif they tried it, and they weren't. That was the problem during Y\nCombinator: to get growth started.\n\nAirbnb's goal during YC was to reach what we call ramen profitability,\nwhich means making enough money that the company can pay the founders'\nliving expenses, if they live on ramen noodles. Ramen profitability\nis not, obviously, the end goal of any startup, but it's the most\nimportant threshold on the way, because this is the point where\nyou're airborne. This is the point where you no longer need investors'\npermission to continue existing. For the Airbnbs, ramen profitability\nwas $4000 a month: $3500 for rent, and $500 for food. They taped\nthis goal to the mirror in the bathroom of their apartment.\n\nThe way to get growth started in something like Airbnb is to focus\non the hottest subset of the market. If you can get growth started\nthere, it will spread to the rest. When I asked the Airbnbs where\nthere was most demand, they knew from searches: New York City. So\nthey focused on New York. They went there in person to visit their\nhosts and help them make their listings more attractive. A big part\nof that was better pictures. So Joe and Brian rented a professional\ncamera and took pictures of the hosts' places themselves.\n\nThis didn't just make the listings better. It also taught them about\ntheir hosts. When they came back from their first trip to New York,\nI asked what they'd noticed about hosts that surprised them, and\nthey said the biggest surprise was how many of the hosts were in\nthe same position they'd been in: they needed this money to pay\ntheir rent. This was, remember, the worst recession in decades, and\nit had hit New York first. It definitely added to the Airbnbs' sense\nof mission to feel that people needed them.\n\nIn late January 2009, about three weeks into Y Combinator, their\nefforts started to show results, and their numbers crept upward.\nBut it was hard to say for sure whether it was growth or just random\nfluctuation. By February it was clear that it was real growth. They\nmade $460 in fees in the first week of February, $897 in the second,\nand $1428 in the third. That was it: they were airborne. Brian sent\nme an email on February 22 announcing that they were ramen profitable\nand giving the last three weeks' numbers.\n\n\"I assume you know what you've now set yourself up for next week,\"\nI responded.\n\nBrian's reply was seven words: \"We are not going to slow down.\"\n\n", "November 2020\n\nThere are some kinds of work that you can't do well without thinking\ndifferently from your peers. To be a successful scientist, for\nexample, it's not enough just to be correct. Your ideas have to be\nboth correct and novel. You can't publish papers saying things other\npeople already know. You need to say things no one else has realized\nyet.\n\nThe same is true for investors. It's not enough for a public market\ninvestor to predict correctly how a company will do. If a lot of\nother people make the same prediction, the stock price will already\nreflect it, and there's no room to make money. The only valuable\ninsights are the ones most other investors don't share.\n\nYou see this pattern with startup founders too. You don't want to\nstart a startup to do something that everyone agrees is a good idea,\nor there will already be other companies doing it. You have to do\nsomething that sounds to most other people like a bad idea, but\nthat you know isn't \u0097 like writing software for a tiny computer\nused by a few thousand hobbyists, or starting a site to let people\nrent airbeds on strangers' floors.\n\nDitto for essayists. An essay that told people things they already\nknew would be boring. You have to tell them something new.\n\nBut this pattern isn't universal. In fact, it doesn't hold for most\nkinds of work. In most kinds of work \u0097 to be an administrator, for\nexample \u0097 all you need is the first half. All you need is to be\nright. It's not essential that everyone else be wrong.\n\nThere's room for a little novelty in most kinds of work, but in\npractice there's a fairly sharp distinction between the kinds of\nwork where it's essential to be independent-minded, and the kinds\nwhere it's not.\n\nI wish someone had told me about this distinction when I was a kid,\nbecause it's one of the most important things to think about when\nyou're deciding what kind of work you want to do. Do you want to\ndo the kind of work where you can only win by thinking differently\nfrom everyone else? I suspect most people's unconscious mind will\nanswer that question before their conscious mind has a chance to.\nI know mine does.\n\nIndependent-mindedness seems to be more a matter of nature than\nnurture. Which means if you pick the wrong type of work, you're\ngoing to be unhappy. If you're naturally independent-minded, you're\ngoing to find it frustrating to be a middle manager. And if you're\nnaturally conventional-minded, you're going to be sailing into a\nheadwind if you try to do original research.\n\nOne difficulty here, though, is that people are often mistaken about\nwhere they fall on the spectrum from conventional- to independent-minded.\nConventional-minded people don't like to think of themselves as\nconventional-minded. And in any case, it genuinely feels to them\nas if they make up their own minds about everything. It's just a\ncoincidence that their beliefs are identical to their peers'. And\nthe independent-minded, meanwhile, are often unaware how different\ntheir ideas are from conventional ones, at least till they state\nthem publicly.\n[1]\n\nBy the time they reach adulthood, most people know roughly how smart\nthey are (in the narrow sense of ability to solve pre-set problems),\nbecause they're constantly being tested and ranked according to it.\nBut schools generally ignore independent-mindedness, except to the\nextent they try to suppress it. So we don't get anything like the\nsame kind of feedback about how independent-minded we are.\n\nThere may even be a phenomenon like Dunning-Kruger at work, where\nthe most conventional-minded people are confident that they're\nindependent-minded, while the genuinely independent-minded worry\nthey might not be independent-minded enough.\n\n\n___________\n\n\nCan you make yourself more independent-minded? I think so. This\nquality may be largely inborn, but there seem to be ways to magnify\nit, or at least not to suppress it.\n\nOne of the most effective techniques is one practiced unintentionally\nby most nerds: simply to be less aware what conventional beliefs\nare. It's hard to be a conformist if you don't know what you're\nsupposed to conform to. Though again, it may be that such people\nalready are independent-minded. A conventional-minded person would\nprobably feel anxious not knowing what other people thought, and\nmake more effort to find out.\n\nIt matters a lot who you surround yourself with. If you're surrounded\nby conventional-minded people, it will constrain which ideas you\ncan express, and that in turn will constrain which ideas you have.\nBut if you surround yourself with independent-minded people, you'll\nhave the opposite experience: hearing other people say surprising\nthings will encourage you to, and to think of more.\n\nBecause the independent-minded find it uncomfortable to be surrounded\nby conventional-minded people, they tend to self-segregate once\nthey have a chance to. The problem with high school is that they\nhaven't yet had a chance to. Plus high school tends to be an\ninward-looking little world whose inhabitants lack confidence, both\nof which magnify the forces of conformism.  So high school is\noften a bad time for the\nindependent-minded. But there is some advantage even here: it\nteaches you what to avoid. If you later find yourself in a situation\nthat makes you think \"this is like high school,\" you know you should\nget out.\n[2]\n\nAnother place where the independent- and conventional-minded are\nthrown together is in successful startups. The founders and early\nemployees are almost always independent-minded; otherwise the startup\nwouldn't be successful. But conventional-minded people greatly\noutnumber independent-minded ones, so as the company grows, the\noriginal spirit of independent-mindedness is inevitably diluted.\nThis causes all kinds of problems besides the obvious one that the\ncompany starts to suck. One of the strangest is that the founders\nfind themselves able to speak more freely with founders of other\ncompanies than with their own employees.\n[3]\n\nFortunately you don't have to spend all your time with independent-minded\npeople. It's enough to have one or two you can talk to regularly.\nAnd once you find them, they're usually as eager to talk as you\nare; they need you too. Although universities no longer have the\nkind of monopoly they used to have on education, good universities\nare still an excellent way to meet independent-minded people. Most\nstudents will still be conventional-minded, but you'll at least\nfind clumps of independent-minded ones, rather than the near zero\nyou may have found in high school.\n\nIt also works to go in the other direction: as well as cultivating\na small collection of independent-minded friends, to try to meet\nas many different types of people as you can. It will decrease the\ninfluence of your immediate peers if you have several other groups\nof peers. Plus if you're part of several different worlds, you can\noften import ideas from one to another.\n\nBut by different types of people, I don't mean demographically\ndifferent. For this technique to work, they have to think differently.\nSo while it's an excellent idea to go and visit other countries,\nyou can probably find people who think differently right around the\ncorner. When I meet someone who knows a lot about something unusual\n(which includes practically everyone, if you dig deep enough), I\ntry to learn what they know that other people don't. There are\nalmost always surprises here. It's a good way to make conversation\nwhen you meet strangers, but I don't do it to make conversation.\nI really want to know.\n\nYou can expand the source of influences in time as well as space,\nby reading history. When I read history I do it not just to learn\nwhat happened, but to try to get inside the heads of people who\nlived in the past. How did things look to them? This is hard to do,\nbut worth the effort for the same reason it's worth travelling far\nto triangulate a point.\n\nYou can also take more explicit measures to prevent yourself from\nautomatically adopting conventional opinions. The most general is\nto cultivate an attitude of skepticism. When you hear someone say\nsomething, stop and ask yourself \"Is that true?\" Don't say it out\nloud. I'm not suggesting that you impose on everyone who talks to\nyou the burden of proving what they say, but rather that you take\nupon yourself the burden of evaluating what they say.\n\nTreat it as a puzzle. You know that some accepted ideas will later\nturn out to be wrong. See if you can guess which. The end goal is\nnot to find flaws in the things you're told, but to find the new\nideas that had been concealed by the broken ones. So this game\nshould be an exciting quest for novelty, not a boring protocol for\nintellectual hygiene. And you'll be surprised, when you start asking\n\"Is this true?\", how often the answer is not an immediate yes. If\nyou have any imagination, you're more likely to have too many leads\nto follow than too few.\n\nMore generally your goal should be not to let anything into your\nhead unexamined, and things don't always enter your head in the\nform of statements. Some of the most powerful influences are implicit.\nHow do you even notice these? By standing back and watching how\nother people get their ideas.\n\nWhen you stand back at a sufficient distance, you can see ideas\nspreading through groups of people like waves. The most obvious are\nin fashion: you notice a few people wearing a certain kind of shirt,\nand then more and more, until half the people around you are wearing\nthe same shirt. You may not care much what you wear, but there are\nintellectual fashions too, and you definitely don't want to participate\nin those. Not just because you want sovereignty over your own\nthoughts, but because unfashionable\nideas are disproportionately likely to lead somewhere interesting.\nThe best place to find undiscovered ideas is where no one else is\nlooking.\n[4]\n\n\n___________\n\n\nTo go beyond this general advice, we need to look at the internal\nstructure of independent-mindedness \u0097 at the individual muscles\nwe need to exercise, as it were. It seems to me that it has three\ncomponents: fastidiousness about truth, resistance to being told\nwhat to think, and curiosity.\n\nFastidiousness about truth means more than just not believing things\nthat are false. It means being careful about degree of belief. For\nmost people, degree of belief rushes unexamined toward the extremes:\nthe unlikely becomes impossible, and the probable becomes certain.\n[5]\nTo the independent-minded, this seems unpardonably sloppy.\nThey're willing to have anything in their heads, from highly\nspeculative hypotheses to (apparent) tautologies, but on subjects\nthey care about, everything has to be labelled with a carefully\nconsidered degree of belief.\n[6]\n\nThe independent-minded thus have a horror of ideologies, which\nrequire one to accept a whole collection of beliefs at once, and\nto treat them as articles of faith. To an independent-minded person\nthat would seem revolting, just as it would seem to someone fastidious\nabout food to take a bite of a submarine sandwich filled with a\nlarge variety of ingredients of indeterminate age and provenance.\n\nWithout this fastidiousness about truth, you can't be truly\nindependent-minded. It's not enough just to have resistance to being\ntold what to think. Those kind of people reject conventional ideas\nonly to replace them with the most random conspiracy theories. And\nsince these conspiracy theories have often been manufactured to\ncapture them, they end up being less independent-minded than ordinary\npeople, because they're subject to a much more exacting master than\nmere convention.\n[7]\n\nCan you increase your fastidiousness about truth? I would think so.\nIn my experience, merely thinking about something you're fastidious\nabout causes that fastidiousness to grow. If so, this is one of\nthose rare virtues we can have more of merely by wanting it. And\nif it's like other forms of fastidiousness, it should also be\npossible to encourage in children. I certainly got a strong dose\nof it from my father.\n[8]\n\nThe second component of independent-mindedness, resistance to being\ntold what to think, is the most visible of the three. But even this\nis often misunderstood. The big mistake people make about it is to\nthink of it as a merely negative quality. The language we use\nreinforces that idea. You're unconventional. You don't care\nwhat other people think. But it's not just a kind of immunity. In\nthe most independent-minded people, the desire not to be told what\nto think is a positive force. It's not mere skepticism, but an\nactive delight in ideas that subvert\nthe conventional wisdom, the more counterintuitive the better.\n\nSome of the most novel ideas seemed at the time almost like practical\njokes. Think how often your reaction to a novel idea is to laugh.\nI don't think it's because novel ideas are funny per se, but because\nnovelty and humor share a certain kind of surprisingness. But while\nnot identical, the two are close enough that there is a definite\ncorrelation between having a sense of humor and being independent-minded\n\u0097 just as there is between being humorless and being conventional-minded.\n[9]\n\nI don't think we can significantly increase our resistance to being\ntold what to think. It seems the most innate of the three components\nof independent-mindedness; people who have this quality as adults\nusually showed all too visible signs of it as children. But if we\ncan't increase our resistance to being told what to think, we can\nat least shore it up, by surrounding ourselves with other\nindependent-minded people.\n\nThe third component of independent-mindedness, curiosity, may be\nthe most interesting. To the extent that we can give a brief answer\nto the question of where novel ideas come from, it's curiosity. That's\nwhat people are usually feeling before having them.\n\nIn my experience, independent-mindedness and curiosity predict one\nanother perfectly. Everyone I know who's independent-minded is\ndeeply curious, and everyone I know who's conventional-minded isn't.\nExcept, curiously, children. All small children are curious. Perhaps\nthe reason is that even the conventional-minded have to be curious\nin the beginning, in order to learn what the conventions are. Whereas\nthe independent-minded are the gluttons of curiosity, who keep\neating even after they're full.\n[10]\n\nThe three components of independent-mindedness work in concert:\nfastidiousness about truth and resistance to being told what to\nthink leave space in your brain, and curiosity finds new ideas to\nfill it.\n\nInterestingly, the three components can substitute for one another\nin much the same way muscles can. If you're sufficiently fastidious\nabout truth, you don't need to be as resistant to being told what\nto think, because fastidiousness alone will create sufficient gaps\nin your knowledge. And either one can compensate for curiosity,\nbecause if you create enough space in your brain, your discomfort\nat the resulting vacuum will add force to your curiosity. Or curiosity\ncan compensate for them: if you're sufficiently curious, you don't\nneed to clear space in your brain, because the new ideas you discover\nwill push out the conventional ones you acquired by default.\n\nBecause the components of independent-mindedness are so interchangeable,\nyou can have them to varying degrees and still get the same result.\nSo there is not just a single model of independent-mindedness. Some\nindependent-minded people are openly subversive, and others are\nquietly curious. They all know the secret handshake though.\n\nIs there a way to cultivate curiosity? To start with, you want to\navoid situations that suppress it. How much does the work you're\ncurrently doing engage your curiosity? If the answer is \"not much,\"\nmaybe you should change something.\n\nThe most important active step you can take to cultivate your\ncuriosity is probably to seek out the topics that engage it. Few\nadults are equally curious about everything, and it doesn't seem\nas if you can choose which topics interest you. So it's up to you\nto find them. Or invent them, if\nnecessary.\n\nAnother way to increase your curiosity is to indulge it, by\ninvestigating things you're interested in. Curiosity is unlike\nmost other appetites in this respect: indulging it tends to increase\nrather than to sate it. Questions lead to more questions.\n\nCuriosity seems to be more individual than fastidiousness about\ntruth or resistance to being told what to think. To the degree\npeople have the latter two, they're usually pretty general, whereas\ndifferent people can be curious about very different things. So\nperhaps curiosity is the compass here. Perhaps, if your goal is to\ndiscover novel ideas, your motto should not be \"do what you love\"\nso much as \"do what you're curious about.\"\n\n\n\n\n\n\n\nNotes\n\n[1]\nOne convenient consequence of the fact that no one identifies\nas conventional-minded is that you can say what you like about\nconventional-minded people without getting in too much trouble.\nWhen I wrote \"The Four Quadrants of\nConformism\" I expected a firestorm of rage from the\naggressively conventional-minded, but in fact it was quite muted.\nThey sensed that there was something about the essay that they\ndisliked intensely, but they had a hard time finding a specific\npassage to pin it on.\n\n[2]\nWhen I ask myself what in my life is like high school, the\nanswer is Twitter. It's not just full of conventional-minded people,\nas anything its size will inevitably be, but subject to violent\nstorms of conventional-mindedness that remind me of descriptions\nof Jupiter. But while it probably is a net loss to spend time there,\nit has at least made me think more about the distinction between\nindependent- and conventional-mindedness, which I probably wouldn't\nhave done otherwise.\n\n[3]\nThe decrease in independent-mindedness in growing startups is\nstill an open problem, but there may be solutions.\n\nFounders can delay the problem by making a conscious effort only\nto hire independent-minded people. Which of course also has the\nancillary benefit that they have better ideas.\n\nAnother possible solution is to create policies that somehow disrupt\nthe force of conformism, much as control rods slow chain reactions,\nso that the conventional-minded aren't as dangerous. The physical\nseparation of Lockheed's Skunk Works may have had this as a side\nbenefit. Recent examples suggest employee forums like Slack may not\nbe an unmitigated good.\n\nThe most radical solution would be to grow revenues without growing\nthe company. You think hiring that junior PR person will be cheap,\ncompared to a programmer, but what will be the effect on the average\nlevel of independent-mindedness in your company? (The growth in\nstaff relative to faculty seems to have had a similar effect on\nuniversities.) Perhaps the rule about outsourcing work that's not\nyour \"core competency\" should be augmented by one about outsourcing\nwork done by people who'd ruin your culture as employees.\n\nSome investment firms already seem to be able to grow revenues\nwithout growing the number of employees. Automation plus the ever\nincreasing articulation of the \"tech stack\" suggest this may one\nday be possible for product companies.\n\n[4]\nThere are intellectual fashions in every field, but their\ninfluence varies. One of the reasons politics, for example, tends\nto be boring is that it's so extremely subject to them. The threshold\nfor having opinions about politics is much lower than the one for having\nopinions about set theory. So while there are some ideas in politics,\nin practice they tend to be swamped by waves of intellectual fashion.\n\n[5]\nThe conventional-minded are often fooled by the strength of\ntheir opinions into believing that they're independent-minded. But\nstrong convictions are not a sign of independent-mindedness. Rather\nthe opposite.\n\n[6]\nFastidiousness about truth doesn't imply that an independent-minded\nperson won't be dishonest, but that he won't be deluded. It's sort\nof like the definition of a gentleman as someone who is never\nunintentionally rude.\n\n[7]\nYou see this especially among political extremists. They think\nthemselves nonconformists, but actually they're niche conformists.\nTheir opinions may be different from the average person's, but they\nare often more influenced by their peers' opinions than the average\nperson's are.\n\n[8]\nIf we broaden the concept of fastidiousness about truth so that\nit excludes pandering, bogusness, and pomposity as well as falsehood\nin the strict sense, our model of independent-mindedness can expand\nfurther into the arts.\n\n[9]\nThis correlation is far from perfect, though. G\u00f6del and Dirac\ndon't seem to have been very strong in the humor department. But\nsomeone who is both \"neurotypical\" and humorless is very likely to\nbe conventional-minded.\n\n[10]\nException: gossip. Almost everyone is curious about gossip.\n\n\n\n\nThanks to Trevor Blackwell, Paul Buchheit, Patrick Collison, Jessica\nLivingston, Robert Morris, Harj Taggar, and Peter Thiel for reading\ndrafts of this.\n\n", "October 2020\n\nOne of the biggest things holding people back from doing great work\nis the fear of making something lame. And this fear is not an\nirrational one. Many great projects go through a stage early on\nwhere they don't seem very impressive, even to their creators. You\nhave to push through this stage to reach the great work that lies\nbeyond. But many people don't. Most people don't even reach the\nstage of making something they're embarrassed by, let alone continue\npast it. They're too frightened even to start.\n\nImagine if we could turn off the fear of making something lame.\nImagine how much more we'd do.\n\nIs there any hope of turning it off? I think so. I think the habits\nat work here are not very deeply rooted.\n\nMaking new things is itself a new thing for us as a species. It has\nalways happened, but till the last few centuries it happened so\nslowly as to be invisible to individual humans. And since we didn't\nneed customs for dealing with new ideas, we didn't develop any.\n\nWe just don't have enough experience with early versions of ambitious\nprojects to know how to respond to them. We judge them as we would\njudge more finished work, or less ambitious projects. We don't\nrealize they're a special case.\n\nOr at least, most of us don't. One reason I'm confident we can do\nbetter is that it's already starting to happen. There are already\na few places that are living in the future in this respect. Silicon\nValley is one of them: an unknown person working on a strange-sounding\nidea won't automatically be dismissed the way they would back home.\nIn Silicon Valley, people have learned how dangerous that is.\n\nThe right way to deal with new ideas is to treat them as a challenge\nto your imagination \u0097 not just to have lower standards, but to\nswitch polarity entirely, from listing \nthe reasons an idea won't\nwork to trying to think of ways it could. That's what I do when I\nmeet people with new ideas. I've become quite good at it, but I've\nhad a lot of practice. Being a partner at Y Combinator means being\npractically immersed in strange-sounding ideas proposed by unknown\npeople. Every six months you get thousands of new ones thrown at\nyou and have to sort through them, knowing that in a world with a\npower-law distribution of outcomes, it will be painfully obvious\nif you miss the needle in this haystack. Optimism becomes\nurgent.\n\nBut I'm hopeful that, with time, this kind of optimism can become\nwidespread enough that it becomes a social custom, not just a trick\nused by a few specialists. It is after all an extremely lucrative\ntrick, and those tend to spread quickly.\n\nOf course, inexperience is not the only reason people are too harsh\non early versions of ambitious projects. They also do it to seem\nclever. And in a field where the new ideas are risky, like startups,\nthose who dismiss them are in fact more likely to be right. Just\nnot when their predictions are \nweighted by outcome.\n\nBut there is another more sinister reason people dismiss new ideas.\nIf you try something ambitious, many of those around you will hope,\nconsciously or unconsciously, that you'll fail. They worry that if\nyou try something ambitious and succeed, it will put you above them.\nIn some countries this is not just an individual failing but part\nof the national culture.\n\nI wouldn't claim that people in Silicon Valley overcome these\nimpulses because they're morally better. \n[1]\nThe reason many hope\nyou'll succeed is that they hope to rise with you. For investors\nthis incentive is particularly explicit. They want you to succeed\nbecause they hope you'll make them rich in the process. But many\nother people you meet can hope to benefit in some way from your\nsuccess. At the very least they'll be able to say, when you're\nfamous, that they've known you since way back.\n\nBut even if Silicon Valley's encouraging attitude\nis rooted in self-interest, it has over time actually grown into a\nsort of benevolence. Encouraging startups has been practiced for\nso long that it has become a custom. Now it just seems that that's\nwhat one does with startups.\n\nMaybe Silicon Valley is too optimistic. Maybe it's too easily fooled\nby impostors. Many less optimistic journalists want to believe that.\nBut the lists of impostors they cite are suspiciously short, and\nplagued with asterisks. \n[2] If you use revenue as the test, Silicon\nValley's optimism seems better tuned than the rest of the world's.\nAnd because it works, it will spread.\n\nThere's a lot more to new ideas than new startup ideas, of course.\nThe fear of making something lame holds people back in every field.\nBut Silicon Valley shows how quickly customs can evolve to support\nnew ideas. And that in turn proves that dismissing new ideas is not\nso deeply rooted in human nature that it can't be unlearnt.\n\n\n___________\n\n\nUnfortunately, if you want to do new things, you'll face a force\nmore powerful than other people's skepticism: your own skepticism.\nYou too will judge your early work too harshly. How do you avoid\nthat?\n\nThis is a difficult problem, because you don't want to completely\neliminate your horror of making something lame. That's what steers\nyou toward doing good work. You just want to turn it off temporarily,\nthe way a painkiller temporarily turns off pain.\n\nPeople have already discovered several techniques that work. Hardy\nmentions two in A Mathematician's Apology:\n\n  Good work is not done by \"humble\" men. It is one of the first\n  duties of a professor, for example, in any subject, to exaggerate\n  a little both the importance of his subject and his importance\n  in it.\n\nIf you overestimate the importance of what you're working on, that\nwill compensate for your mistakenly harsh judgment of your initial\nresults. If you look at something that's 20% of the way to a goal\nworth 100 and conclude that it's 10% of the way to a goal worth\n200, your estimate of its expected value is correct even though\nboth components are wrong.\n\nIt also helps, as Hardy suggests, to be slightly overconfident.\nI've noticed in many fields that the most successful people are\nslightly overconfident. On the face of it this seems implausible.\nSurely it would be optimal to have exactly the right estimate of\none's abilities. How could it be an advantage to be mistaken?\nBecause this error compensates for other sources of error in the\nopposite direction: being slightly overconfident armors you against\nboth other people's skepticism and your own.\n\nIgnorance has a similar effect. It's safe to make the mistake of\njudging early work as finished work if you're a sufficiently lax\njudge of finished work. I doubt it's possible to cultivate this\nkind of ignorance, but empirically it's a real advantage, especially\nfor the young.\n\nAnother way to get through the lame phase of ambitious projects is\nto surround yourself with the right people \u0097 to create an eddy in\nthe social headwind. But it's not enough to collect people who are\nalways encouraging. You'd learn to discount that. You need colleagues\nwho can actually tell an ugly duckling from a baby swan. The people\nbest able to do this are those working on similar projects of their\nown, which is why university departments and research labs work so\nwell. You don't need institutions to collect colleagues. They\nnaturally coalesce, given the chance. But it's very much worth\naccelerating this process by seeking out other people trying to do\nnew things.\n\nTeachers are in effect a special case of colleagues. It's a teacher's\njob both to see the promise of early work and to encourage you to\ncontinue. But teachers who are good at this are unfortunately quite\nrare, so if you have the opportunity to learn from one, take it.\n[3]\n\nFor some it might work to rely on sheer discipline: to tell yourself\nthat you just have to press on through the initial crap phase and\nnot get discouraged. But like a lot of \"just tell yourself\" advice,\nthis is harder than it sounds. And it gets still harder as you get\nolder, because your standards rise. The old do have one compensating\nadvantage though: they've been through this before.\n\nIt can help if you focus less on where you are and more on the rate\nof change. You won't worry so much about doing bad work if you can\nsee it improving. Obviously the faster it improves, the easier this\nis. So when you start something new, it's good if you can spend a\nlot of time on it. That's another advantage of being young: you\ntend to have bigger blocks of time.\n\nAnother common trick is to start by considering new work to be of\na different, less exacting type. To start a painting saying that\nit's just a sketch, or a new piece of software saying that it's\njust a quick hack. Then you judge your initial results by a lower\nstandard. Once the project is rolling you can sneakily convert it\nto something more.\n[4]\n\nThis will be easier if you use a medium that lets you work fast and\ndoesn't require too much commitment up front. It's easier to convince\nyourself that something is just a sketch when you're drawing in a\nnotebook than when you're carving stone. Plus you get initial results\nfaster. \n[5]\n[6]\n\nIt will be easier to try out a risky project if you think of it as\na way to learn and not just as a way to make something. Then even\nif the project truly is a failure, you'll still have gained by it.\nIf the problem is sharply enough defined, failure itself is\nknowledge: if the theorem you're trying to prove turns out to\nbe false, or you use a structural member of a certain size and\nit fails under stress, you've learned something, even if it\nisn't what you wanted to learn.\n[7]\n\nOne motivation that works particularly well for me is curiosity.\nI like to try new things just to see how they'll turn out. We started\nY Combinator in this spirit, and it was one of main things that\nkept me going while I was working on \nBel. Having worked for so long\nwith various dialects of Lisp, I was very curious to see what its\ninherent shape was: what you'd end up with if you followed the\naxiomatic approach all the way.\n\nBut it's a bit strange that you have to play mind games with yourself\nto avoid being discouraged by lame-looking early efforts. The thing\nyou're trying to trick yourself into believing is in fact the truth.\nA lame-looking early version of an ambitious project truly is more\nvaluable than it seems. So the ultimate solution may be to teach\nyourself that.\n\nOne way to do it is to study the histories of people who've\ndone great work. What were they thinking early on? What was the\nvery first thing they did? It can sometimes be hard to get an\naccurate answer to this question, because people are often embarrassed\nby their earliest work and make little effort to publish it. (They\ntoo misjudge it.) But when you can get an accurate picture of the\nfirst steps someone made on the path to some great work, they're\noften pretty feeble.\n[8]\n\nPerhaps if you study enough such cases, you can teach yourself to\nbe a better judge of early work. Then you'll be immune both to other\npeople's skepticism and your own fear of making something lame.\nYou'll see early work for what it is.\n\nCuriously enough, the solution to the problem of judging early work\ntoo harshly is to realize that our attitudes toward it are themselves\nearly work. Holding everything to the same standard is a crude\nversion 1. We're already evolving better customs, and we can already\nsee signs of how big the payoff will be.\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nThis assumption may be too conservative. There is some evidence\nthat historically the Bay Area has attracted a \ndifferent sort of person than, \nsay, New York City.\n\n[2]\nOne of their great favorites is Theranos. But the most conspicuous\nfeature of Theranos's cap table is the absence of Silicon Valley\nfirms. Journalists were fooled by Theranos, but Silicon Valley\ninvestors weren't.\n\n[3]\nI made two mistakes about teachers when I was younger.  I\ncared more about professors' research than their reputations as\nteachers, and I was also wrong about what it meant to be a good\nteacher. I thought it simply meant to be good at explaining things.\n\n[4]\nPatrick Collison points out that you can go past treating\nsomething as a hack in the sense of a prototype and onward to the\nsense of the word that means something closer to a practical joke:\n\n  I think there may be something related to being a hack that can\n  be powerful \u0097 the idea of making the tenuousness and implausibility\n  a feature. \"Yes, it's a bit ridiculous, right?  I'm just trying\n  to see how far such a naive approach can get.\" YC seemed to me\n  to have this characteristic.\n\n[5]\nMuch of the advantage of switching from physical to digital\nmedia is not the software per se but that it lets you start something\nnew with little upfront commitment.\n\n[6]\nJohn Carmack adds:\n\n  The value of a medium without a vast gulf between the early work\n  and the final work is exemplified in game mods. The original\n  Quake game was a golden age for mods, because everything was very\n  flexible, but so crude due to technical limitations, that quick\n  hacks to try out a gameplay idea weren't all that far from the\n  official game. Many careers were born from that, but as the\n  commercial game quality improved over the years, it became almost\n  a full time job to make a successful mod that would be appreciated\n  by the community. This was dramatically reversed with Minecraft\n  and later Roblox, where the entire esthetic of the experience was\n  so explicitly crude that innovative gameplay concepts became the\n  overriding value. These \"crude\" game mods by single authors are\n  now often bigger deals than massive professional teams' work.\n\n[7]\nLisa Randall suggests that we\n\n  treat new things as experiments. That way there's no such thing\n  as failing, since you learn something no matter what. You treat\n  it like an experiment in the sense that if it really rules something\n  out, you give up and move on, but if there's some way to vary it\n  to make it work better, go ahead and do that\n\n[8]\nMichael Nielsen points out that the internet has made this\neasier, because you can see programmers' first commits, musicians'\nfirst videos, and so on.\n\n\n\nThanks to Trevor Blackwell, John Carmack, Patrick Collison, Jessica\nLivingston, Michael Nielsen, and Lisa Randall for reading drafts\nof this.\n\n", "August 2020\n\nSome politicians are proposing to introduce wealth taxes in addition\nto income and capital gains taxes. Let's try modeling the effects of various levels\nof wealth tax to see what they would mean in practice for a startup\nfounder.\n\nSuppose you start a successful startup in your twenties, and then\nlive for another 60 years. How much of your stock will a wealth tax\nconsume?\n\nIf the wealth tax applies to all your assets, it's easy to\ncalculate its effect. A wealth tax of 1% means you get to keep\n99% of your stock each year. After 60 years the proportion\nof stock you'll have left will be .99^60, or .547. So a\nstraight 1% wealth tax means the government will over the\ncourse of your life take 45% of your stock.\n\n(Losing shares does not, obviously, mean becoming net\npoorer unless the value per share is increasing by less than the \nwealth tax rate.)\n\nHere's how much stock the government would take over 60\nyears at various levels of wealth tax:\n\n\nwealth taxgovernment takes\n0.1%6%0.5%26%\n1.0%45%\n2.0%70%\n3.0%84%\n4.0%91%5.0%95%\n\n\n\nA wealth tax will usually have a threshold at which it starts.\nHow much difference would a high threshold make? To model that,\nwe need to make some assumptions about the initial value of\nyour stock and the growth rate.\n\nSuppose your stock is initially\nworth $2 million, and the company's trajectory is as follows:\nthe value of your stock grows 3x for 2 years, then 2x for 2 years,\nthen 50% for 2 years, after\nwhich you just get a typical public company growth rate,\nwhich we'll call 8%. \n[1]\nSuppose the wealth tax threshold is\n$50 million. How much stock does the government take now?\n\nwealth taxgovernment takes\n0.1%5%0.5%23%\n1.0%41%\n2.0%65%\n3.0%79%\n4.0%88%5.0%93%\n\n\n\nIt may at first seem surprising that such apparently small tax rates\nproduce such dramatic effects. A 2% wealth tax with a $50\u00a0million\nthreshold takes about two thirds of a successful founder's stock.\n\nThe reason wealth taxes have such dramatic effects is that they're\napplied over and over to the same money. Income tax\nhappens every year, but only to that year's income. Whereas if you\nlive for 60 years after acquiring some asset, a wealth tax will tax\nthat same asset 60 times. A wealth tax compounds.\n\n\n\n\n\n\n\nNote\n\n[1]\nIn practice, eventually some of this 8% would come in the form of \ndividends, which are taxed as income at issue, so this model actually\nrepresents the most optimistic case for the founder.\n\n", "July 2020\n\nOne of the most revealing ways to classify people is by the degree\nand aggressiveness of their conformism. Imagine a Cartesian coordinate\nsystem whose horizontal axis runs from conventional-minded on the\nleft to independent-minded on the right, and whose vertical axis\nruns from passive at the bottom to aggressive at the top. The\nresulting four quadrants define four types of people. Starting in\nthe upper left and going counter-clockwise: aggressively\nconventional-minded, passively conventional-minded, passively\nindependent-minded, and aggressively independent-minded.\n\nI think that you'll find all four types in most societies, and that\nwhich quadrant people fall into depends more on their own personality\nthan the beliefs prevalent in their society.\n[1]\n\nYoung children offer some of the best evidence for both points.\nAnyone who's been to primary school has seen the four types, and\nthe fact that school rules are so arbitrary is strong evidence that\nwhich quadrant people fall into depends more on them than the rules.\n\nThe kids in the upper left quadrant, the aggressively conventional-minded\nones, are the tattletales. They believe not only that rules must\nbe obeyed, but that those who disobey them must be punished.\n\nThe kids in the lower left quadrant, the passively conventional-minded,\nare the sheep. They're careful to obey the rules, but when other\nkids break them, their impulse is to worry that those kids will be\npunished, not to ensure that they will.\n\nThe kids in the lower right quadrant, the passively independent-minded,\nare the dreamy ones. They don't care much about rules and probably\naren't 100% sure what the rules even are.\n\nAnd the kids in the upper right quadrant, the aggressively\nindependent-minded, are the naughty ones. When they see a rule,\ntheir first impulse is to question it. Merely being told what to\ndo makes them inclined to do the opposite.\n\nWhen measuring conformism, of course, you have to say with respect\nto what, and this changes as kids get older. For younger kids it's\nthe rules set by adults. But as kids get older, the source of rules\nbecomes their peers. So a pack of teenagers who all flout school\nrules in the same way are not independent-minded; rather the opposite.\n\nIn adulthood we can recognize the four types by their distinctive\ncalls, much as you could recognize four species of birds. The call\nof the aggressively conventional-minded is \"Crush <outgroup>!\" (It's\nrather alarming to see an exclamation point after a variable, but\nthat's the whole problem with the aggressively conventional-minded.)\nThe call of the passively conventional-minded is \"What will the\nneighbors think?\" The call of the passively independent-minded is\n\"To each his own.\" And the call of the aggressively independent-minded\nis \"Eppur si muove.\"\n\nThe four types are not equally common. There are more passive people\nthan aggressive ones, and far more conventional-minded people than\nindependent-minded ones. So the passively conventional-minded are\nthe largest group, and the aggressively independent-minded the\nsmallest.\n\nSince one's quadrant depends more on one's personality than the\nnature of the rules, most people would occupy the same quadrant\neven if they'd grown up in a quite different society.\n\nPrinceton professor Robert George recently wrote:\n\n   I sometimes ask students what their position on slavery would\n   have been had they been white and living in the South before\n   abolition. Guess what? They all would have been abolitionists!\n   They all would have bravely spoken out against slavery, and\n   worked tirelessly against it.\n\nHe's too polite to say so, but of course they wouldn't. And indeed,\nour default assumption should not merely be that his students would,\non average, have behaved the same way people did at the time, but\nthat the ones who are aggressively conventional-minded today would\nhave been aggressively conventional-minded then too. In other words,\nthat they'd not only not have fought against slavery, but that\nthey'd have been among its staunchest defenders.\n\nI'm biased, I admit, but it seems to me that aggressively\nconventional-minded people are responsible for a disproportionate\namount of the trouble in the world, and that a lot of the customs\nwe've evolved since the Enlightenment have been designed to protect\nthe rest of us from them. In particular, the retirement of the\nconcept of heresy and its replacement by the principle of freely\ndebating all sorts of different ideas, even ones that are currently\nconsidered unacceptable, without any punishment for those who try\nthem out to see if they work.\n[2]\n\nWhy do the independent-minded need to be protected, though? Because\nthey have all the new ideas. To be a successful scientist, for\nexample, it's not enough just to be right. You have to be right\nwhen everyone else is wrong. Conventional-minded people can't do\nthat. For similar reasons, all successful startup CEOs are not\nmerely independent-minded, but aggressively so. So it's no coincidence\nthat societies prosper only to the extent that they have customs\nfor keeping the conventional-minded at bay.\n[3]\n\nIn the last few years, many of us have noticed that the customs\nprotecting free inquiry have been weakened. Some say we're overreacting\n\u0097 that they haven't been weakened very much, or that they've been\nweakened in the service of a greater good. The latter I'll dispose\nof immediately. When the conventional-minded get the upper hand,\nthey always say it's in the service of a greater good.  It just\nhappens to be a different, incompatible greater good each time.\n\nAs for the former worry, that the independent-minded are being\noversensitive, and that free inquiry hasn't been shut down that\nmuch, you can't judge that unless you are yourself independent-minded.\nYou can't know how much of the space of ideas is being lopped off\nunless you have them, and only the independent-minded have the ones\nat the edges. Precisely because of this, they tend to be very\nsensitive to changes in how freely one can explore ideas. They're\nthe canaries in this coalmine.\n\nThe conventional-minded say, as they always do, that they don't\nwant to shut down the discussion of all ideas, just the bad ones.\n\nYou'd think it would be obvious just from that sentence what a\ndangerous game they're playing. But I'll spell it out. There are\ntwo reasons why we need to be able to discuss even \"bad\" ideas.\n\nThe first is that any process for deciding which ideas to ban is\nbound to make mistakes. All the more so because no one intelligent\nwants to undertake that kind of work, so it ends up being done by\nthe stupid. And when a process makes a lot of mistakes, you need\nto leave a margin for error. Which in this case means you need to\nban fewer ideas than you'd like to. But that's hard for the\naggressively conventional-minded to do, partly because they enjoy\nseeing people punished, as they have since they were children, and\npartly because they compete with one another. Enforcers of orthodoxy\ncan't allow a borderline idea to exist, because that gives other\nenforcers an opportunity to one-up them in the moral purity department,\nand perhaps even to turn enforcer upon them. So instead of getting\nthe margin for error we need, we get the opposite: a race to the\nbottom in which any idea that seems at all bannable ends up being\nbanned. \n[4]\n\nThe second reason it's dangerous to ban the discussion of ideas is\nthat ideas are more closely related than they look. Which means if\nyou restrict the discussion of some topics, it doesn't only affect\nthose topics. The restrictions propagate back into any topic that\nyields implications in the forbidden ones. And that is not an edge\ncase. The best ideas do exactly that: they have consequences\nin fields far removed from their origins. Having ideas in a world\nwhere some ideas are banned is like playing soccer on a pitch that\nhas a minefield in one corner. You don't just play the same game\nyou would have, but on a different shaped pitch. You play a much\nmore subdued game even on the ground that's safe.\n\nIn the past, the way the independent-minded protected themselves\nwas to congregate in a handful of places \u0097  first in courts, and\nlater in universities \u0097 where they could to some extent make their\nown rules. Places where people work with ideas tend to have customs\nprotecting free inquiry, for the same reason wafer fabs have powerful\nair filters, or recording studios good sound insulation. For the\nlast couple centuries at least, when the aggressively conventional-minded\nwere on the rampage for whatever reason, universities were the\nsafest places to be.\n\nThat may not work this time though, due to the unfortunate fact\nthat the latest wave of intolerance began in universities. It began\nin the mid 1980s, and by 2000 seemed to have died down, but it has\nrecently flared up again with the arrival of social media. This\nseems, unfortunately, to have been an own goal by Silicon Valley.\nThough the people who run Silicon Valley are almost all independent-minded,\nthey've handed the aggressively conventional-minded a tool such as\nthey could only have dreamed of.\n\nOn the other hand, perhaps the decline in the spirit of free inquiry\nwithin universities is as much the symptom of the departure of the\nindependent-minded as the cause. People who would have become\nprofessors 50 years ago have other options now. Now they can become\nquants or start startups. You have to be independent-minded to\nsucceed at either of those. If these people had been professors,\nthey'd have put up a stiffer resistance on behalf of academic\nfreedom. So perhaps the picture of the independent-minded fleeing\ndeclining universities is too gloomy. Perhaps the universities are\ndeclining because so many have already left.\n[5]\n\nThough I've spent a lot of time thinking about this situation, I\ncan't predict how it plays out. Could some universities reverse the\ncurrent trend and remain places where the independent-minded want\nto congregate? Or will the independent-minded gradually abandon\nthem? I worry a lot about what we might lose if that happened.\n\nBut I'm hopeful long term. The independent-minded are good at\nprotecting themselves. If existing institutions are compromised,\nthey'll create new ones. That may require some imagination. But\nimagination is, after all, their specialty.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nI realize of course that if people's personalities vary in any\ntwo ways, you can use them as axes and call the resulting four\nquadrants personality types. So what I'm really claiming is that\nthe axes are orthogonal and that there's significant variation in\nboth.\n\n[2]\nThe aggressively conventional-minded aren't responsible for all\nthe trouble in the world. Another big source of trouble is the sort\nof charismatic leader who gains power by appealing to them. They\nbecome much more dangerous when such leaders emerge.\n\n[3]\nI never worried about writing things that offended the\nconventional-minded when I was running Y Combinator. If YC were a\ncookie company, I'd have faced a difficult moral choice.\nConventional-minded people eat cookies too. But they don't start\nsuccessful startups. So if I deterred them from applying to YC, the\nonly effect was to save us work reading applications.\n\n[4]\nThere has been progress in one area: the punishments for talking\nabout banned ideas are less severe than in the past. There's little\ndanger of being killed, at least in richer countries. The aggressively\nconventional-minded are mostly satisfied with getting people fired.\n\n[5]\nMany professors are independent-minded \u0097 especially in math,\nthe hard sciences, and engineering, where you have to be to succeed.\nBut students are more representative of the general population, and\nthus mostly conventional-minded. So when professors and students\nare in conflict, it's not just a conflict between generations but\nalso between different types of people.\n\n\n\nThanks to Sam Altman, Trevor Blackwell, Nicholas Christakis, Patrick\nCollison, Sam Gichuru, Jessica Livingston, Patrick McKenzie, Geoff\nRalston, and Harj Taggar for reading drafts of this.\n\n", "July 2020\n\n\n\n\n\n\"Few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. Most people are even incapable of forming such opinions.\"\n\n\u0097 Einstein\n\n\n\n\n\nThere has been a lot of talk about privilege lately. Although the\nconcept is overused, there is something to it, and in particular\nto the idea that privilege makes you blind \u0097 that you can't see\nthings that are visible to someone whose life is very different\nfrom yours.\n\nBut one of the most pervasive examples of this kind of blindness\nis one that I haven't seen mentioned explicitly. I'm going to call\nit orthodox privilege: The more conventional-minded someone is, the\nmore it seems to them that it's safe for everyone to express their\nopinions.\n\nIt's safe for them to express their opinions, because the source\nof their opinions is whatever it's currently acceptable to believe.\nSo it seems to them that it must be safe for everyone. They literally\ncan't imagine a true statement that would get them in trouble.\n\nAnd yet at every point in history, there were true things that would\nget you in terrible trouble  to say. \nIs ours the first where this\nisn't so? What an amazing coincidence that would be.\n\nSurely it should at least be the default assumption that our time\nis not unique, and that there are true things you can't say now,\njust as there have always been. You would think. But even in the\nface of such overwhelming historical evidence, most people will go\nwith their gut on this one.\n\nThe spectral signature of orthodox privilege is \"Why don't you just\nsay it?\"  The more extreme will even\naccuse you of specific heresies they imagine you must have in mind,\nthough if there's more than one heresy current in your time, these\naccusations will tend to be nondeterministic: you must either be\nan xist or a yist.\n\nFrustrating as it is to deal with these people, it's important to\nrealize that they're in earnest. They're not pretending they think\nit's impossible for an idea to be both unorthodox and true. The\nworld really looks that way to them.\n\nHow do you respond to orthodox privilege? Merely giving it a name\nmay help somewhat, because it will remind you, when you encounter it,\nwhy the people you're talking to seem so strangely unreasonable.\nBecause this is a uniquely tenacious form of privilege. People can\novercome the blindness induced by most forms of privilege by learning\nmore about whatever they're not. But they can't overcome orthodox\nprivilege just by learning more. They'd have to become more\nindependent-minded. If that happens at all, it doesn't happen on\nthe time scale of one conversation.\n\nIt may be possible to convince some people that orthodox privilege\nmust exist even though they can't sense it, just as one can with,\nsay, dark matter. There may be some who could be convinced, for\nexample, that it's very unlikely that this is the first point in\nhistory at which there's nothing true you can't say, even if they\ncan't imagine specific examples.\n\nBut except with these people, I don't think it will work to say\n\"check your privilege\" about this type of privilege, because those\nin its demographic don't realize they're in it. It doesn't seem to\nconventional-minded people that they're conventional-minded. It\njust seems to them that they're right. Indeed, they tend to be\nparticularly sure of it.\n\nPerhaps the solution is to appeal to politeness. If someone says\nthey can hear a high-pitched noise that you can't, it's only polite\nto take them at their word, instead of demanding evidence that's\nimpossible to produce, or simply denying that they hear anything.\nImagine how rude that would seem. Similarly, if someone says they\ncan think of things that are true but that cannot be said, it's\nonly polite to take them at their word, even if you can't think of\nany yourself.\n\nOnce you realize that orthodox privilege exists, a lot of other\nthings become clearer. For example, how can it be that a large\nnumber of reasonable, intelligent people worry about something they\ncall \"cancel culture,\" while other reasonable, intelligent people\ndeny that it's a problem? Once you understand the concept of orthodox\nprivilege, it's easy to see the source of this disagreement.  If\nyou believe there's nothing true that you can't say, then anyone\nwho gets in trouble for something they say must deserve it.\n\n\n\n\n\n\n\n\n\n\n\nThanks to Sam Altman, Trevor Blackwell, Patrick Collison, Antonio Garcia-Martinez,\nJessica Livingston, Robert Morris, Michael Nielsen, Geoff Ralston, Max Roser, and\nHarj Taggar for reading drafts of this.\n\n", "April 2020\n\nI recently saw a \nvideo \nof TV journalists and politicians confidently\nsaying that the coronavirus would be no worse than the flu. What\nstruck me about it was not just how mistaken they seemed, but how\ndaring. How could they feel safe saying such things?\n\nThe answer, I realized, is that they didn't think they could get\ncaught. They didn't realize there was any danger in making false\npredictions. These people constantly make false predictions, and\nget away with it, because the things they make predictions about\neither have mushy enough outcomes that they can bluster their way\nout of trouble, or happen so far in the future that few remember\nwhat they said.\n\nAn epidemic is different. It falsifies your predictions rapidly and\nunequivocally.\n\nBut epidemics are rare enough that these people clearly\ndidn't realize this was even a possibility. Instead they just\ncontinued to use their ordinary m.o., which, as the epidemic has\nmade clear, is to talk confidently about things they don't\nunderstand.\n\nAn event like this is thus a uniquely powerful way of taking people's\nmeasure. As Warren Buffett said, \"It's only when the tide goes out\nthat you learn who's been swimming naked.\" And the tide has just\ngone out like never before.\n\nNow that we've seen the results, let's remember what we saw, because\nthis is the most accurate test of credibility we're ever likely to have. I hope.\n\n\n\n", "February 2020\n\nWhat should an essay be? Many people would say persuasive. That's\nwhat a lot of us were taught essays should be. But I think we can\naim for something more ambitious: that an essay should be useful.\n\nTo start with, that means it should be correct. But it's not enough\nmerely to be correct. It's easy to make a statement correct by\nmaking it vague. That's a common flaw in academic writing, for\nexample. If you know nothing at all about an issue, you can't go\nwrong by saying that the issue is a complex one, that there are\nmany factors to be considered, that it's a mistake to take too\nsimplistic a view of it, and so on.\n\nThough no doubt correct, such statements tell the reader nothing.\nUseful writing makes claims that are as strong as they can be made\nwithout becoming false.\n\nFor example, it's more useful to say that Pike's Peak is near the\nmiddle of Colorado than merely somewhere in Colorado. But if I say\nit's in the exact middle of Colorado, I've now gone too far, because\nit's a bit east of the middle.\n\nPrecision and correctness are like opposing forces. It's easy to\nsatisfy one if you ignore the other. The converse of vaporous\nacademic writing is the bold, but false, rhetoric of demagogues.\nUseful writing is bold, but true.\n\nIt's also two other things: it tells people something important,\nand that at least some of them didn't already know.\n\nTelling people something they didn't know doesn't always mean\nsurprising them. Sometimes it means telling them something they\nknew unconsciously but had never put into words. In fact those may\nbe the more valuable insights, because they tend to be more\nfundamental.\n\nLet's put them all together. Useful writing tells people something\ntrue and important that they didn't already know, and tells them\nas unequivocally as possible.\n\nNotice these are all a matter of degree. For example, you can't\nexpect an idea to be novel to everyone. Any insight that you have\nwill probably have already been had by at least one of the world's\n7 billion people. But it's sufficient if an idea is novel to a lot\nof readers.\n\nDitto for correctness, importance, and strength. In effect the four\ncomponents are like numbers you can multiply together to get a score\nfor usefulness. Which I realize is almost awkwardly reductive, but\nnonetheless true.\n\n_____\n\n\nHow can you ensure that the things you say are true and novel and\nimportant? Believe it or not, there is a trick for doing this. I\nlearned it from my friend Robert Morris, who has a horror of saying\nanything dumb. His trick is not to say anything unless he's sure\nit's worth hearing. This makes it hard to get opinions out of him,\nbut when you do, they're usually right.\n\nTranslated into essay writing, what this means is that if you write\na bad sentence, you don't publish it. You delete it and try again.\nOften you abandon whole branches of four or five paragraphs. Sometimes\na whole essay.\n\nYou can't ensure that every idea you have is good, but you can\nensure that every one you publish is, by simply not publishing the\nones that aren't.\n\nIn the sciences, this is called publication bias, and is considered\nbad. When some hypothesis you're exploring gets inconclusive results,\nyou're supposed to tell people about that too. But with essay\nwriting, publication bias is the way to go.\n\nMy strategy is loose, then tight. I write the first draft of an\nessay fast, trying out all kinds of ideas. Then I spend days rewriting\nit very carefully.\n\nI've never tried to count how many times I proofread essays, but\nI'm sure there are sentences I've read 100 times before publishing\nthem. When I proofread an essay, there are usually passages that\nstick out in an annoying way, sometimes because they're clumsily\nwritten, and sometimes because I'm not sure they're true. The\nannoyance starts out unconscious, but after the tenth reading or\nso I'm saying \"Ugh, that part\" each time I hit it. They become like\nbriars that catch your sleeve as you walk past. Usually I won't\npublish an essay till they're all gone \u0097 till I can read through\nthe whole thing without the feeling of anything catching.\n\nI'll sometimes let through a sentence that seems clumsy, if I can't\nthink of a way to rephrase it, but I will never knowingly let through\none that doesn't seem correct. You never have to. If a sentence\ndoesn't seem right, all you have to do is ask why it doesn't, and\nyou've usually got the replacement right there in your head.\n\nThis is where essayists have an advantage over journalists. You\ndon't have a deadline. You can work for as long on an essay as you\nneed to get it right. You don't have to publish the essay at all,\nif you can't get it right. Mistakes seem to lose courage in the\nface of an enemy with unlimited resources. Or that's what it feels\nlike. What's really going on is that you have different expectations\nfor yourself. You're like a parent saying to a child \"we can sit\nhere all night till you eat your vegetables.\" Except you're the\nchild too.\n\nI'm not saying no mistake gets through. For example, I added condition\n(c) in \"A Way to Detect Bias\" \nafter readers pointed out that I'd\nomitted it. But in practice you can catch nearly all of them.\n\nThere's a trick for getting importance too. It's like the trick I\nsuggest to young founders for getting startup ideas: to make something\nyou yourself want. You can use yourself as a proxy for the reader.\nThe reader is not completely unlike you, so if you write about\ntopics that seem important to you, they'll probably seem important\nto a significant number of readers as well.\n\nImportance has two factors. It's the number of people something\nmatters to, times how much it matters to them. Which means of course\nthat it's not a rectangle, but a sort of ragged comb, like a Riemann\nsum.\n\nThe way to get novelty is to write about topics you've thought about\na lot. Then you can use yourself as a proxy for the reader in this\ndepartment too. Anything you notice that surprises you, who've\nthought about the topic a lot, will probably also surprise a\nsignificant number of readers. And here, as with correctness and\nimportance, you can use the Morris technique to ensure that you\nwill. If you don't learn anything from writing an essay, don't\npublish it.\n\nYou need humility to measure novelty, because acknowledging the\nnovelty of an idea means acknowledging your previous ignorance of\nit. Confidence and humility are often seen as opposites, but in\nthis case, as in many others, confidence helps you to be humble.\nIf you know you're an expert on some topic, you can freely admit\nwhen you learn something you didn't know, because you can be confident\nthat most other people wouldn't know it either.\n\nThe fourth component of useful writing, strength, comes from two\nthings: thinking well, and the skillful use of qualification. These\ntwo counterbalance each other, like the accelerator and clutch in\na car with a manual transmission. As you try to refine the expression\nof an idea, you adjust the qualification accordingly. Something\nyou're sure of, you can state baldly with no qualification at all,\nas I did the four components of useful writing. Whereas points that\nseem dubious have to be held at arm's length with perhapses.\n\nAs you refine an idea, you're pushing in the direction of less\nqualification. But you can rarely get it down to zero. Sometimes\nyou don't even want to, if it's a side point and a fully refined\nversion would be too long.\n\nSome say that qualifications weaken writing. For example, that you\nshould never begin a sentence in an essay with \"I think,\" because\nif you're saying it, then of course you think it. And it's true\nthat \"I think x\" is a weaker statement than simply \"x.\" Which is\nexactly why you need \"I think.\" You need it to express your degree\nof certainty.\n\nBut qualifications are not scalars. They're not just experimental\nerror. There must be 50 things they can express: how broadly something\napplies, how you know it, how happy you are it's so, even how it\ncould be falsified. I'm not going to try to explore the structure\nof qualification here. It's probably more complex than the whole\ntopic of writing usefully. Instead I'll just give you a practical\ntip: Don't underestimate qualification. It's an important skill in\nits own right, not just a sort of tax you have to pay in order to\navoid saying things that are false. So learn and use its full range.\nIt may not be fully half of having good ideas, but it's part of\nhaving them.\n\nThere's one other quality I aim for in essays: to say things as\nsimply as possible. But I don't think this is a component of\nusefulness. It's more a matter of consideration for the reader. And\nit's a practical aid in getting things right; a mistake is more\nobvious when expressed in simple language. But I'll admit that the\nmain reason I write simply is not for the reader's sake or because\nit helps get things right, but because it bothers me to use more\nor fancier words than I need to. It seems inelegant, like a program\nthat's too long.\n\nI realize florid writing works for some people. But unless you're\nsure you're one of them, the best advice is to write as simply as\nyou can.\n\n_____\n\n\nI believe the formula I've given you, importance + novelty +\ncorrectness + strength, is the recipe for a good essay. But I should\nwarn you that it's also a recipe for making people mad.\n\nThe root of the problem is novelty. When you tell people something\nthey didn't know, they don't always thank you for it. Sometimes the\nreason people don't know something is because they don't want to\nknow it. Usually because it contradicts some cherished belief. And\nindeed, if you're looking for novel ideas, popular but mistaken\nbeliefs are a good place to find them. Every popular mistaken belief\ncreates a dead zone of ideas around \nit that are relatively unexplored because they contradict it.\n\nThe strength component just makes things worse. If there's anything\nthat annoys people more than having their cherished assumptions\ncontradicted, it's having them flatly contradicted.\n\nPlus if you've used the Morris technique, your writing will seem\nquite confident. Perhaps offensively confident, to people who\ndisagree with you. The reason you'll seem confident is that you are\nconfident: you've cheated, by only publishing the things you're\nsure of.  It will seem to people who try to disagree with you that\nyou never admit you're wrong. In fact you constantly admit you're\nwrong. You just do it before publishing instead of after.\n\nAnd if your writing is as simple as possible, that just makes things\nworse. Brevity is the diction of command. If you watch someone\ndelivering unwelcome news from a position of inferiority, you'll\nnotice they tend to use lots of words, to soften the blow. Whereas\nto be short with someone is more or less to be rude to them.\n\nIt can sometimes work to deliberately phrase statements more weakly\nthan you mean. To put \"perhaps\" in front of something you're actually\nquite sure of. But you'll notice that when writers do this, they\nusually do it with a wink.\n\nI don't like to do this too much. It's cheesy to adopt an ironic\ntone for a whole essay. I think we just have to face the fact that\nelegance and curtness are two names for the same thing.\n\nYou might think that if you work sufficiently hard to ensure that\nan essay is correct, it will be invulnerable to attack. That's sort\nof true. It will be invulnerable to valid attacks. But in practice\nthat's little consolation.\n\nIn fact, the strength component of useful writing will make you\nparticularly vulnerable to misrepresentation. If you've stated an\nidea as strongly as you could without making it false, all anyone\nhas to do is to exaggerate slightly what you said, and now it is\nfalse.\n\nMuch of the time they're not even doing it deliberately. One of the\nmost surprising things you'll discover, if you start writing essays,\nis that people who disagree with you rarely disagree with what\nyou've actually written. Instead they make up something you said\nand disagree with that.\n\nFor what it's worth, the countermove is to ask someone who does\nthis to quote a specific sentence or passage you wrote that they\nbelieve is false, and explain why. I say \"for what it's worth\"\nbecause they never do. So although it might seem that this could\nget a broken discussion back on track, the truth is that it was\nnever on track in the first place.\n\nShould you explicitly forestall likely misinterpretations? Yes, if\nthey're misinterpretations a reasonably smart and well-intentioned\nperson might make. In fact it's sometimes better to say something\nslightly misleading and then add the correction than to try to get\nan idea right in one shot. That can be more efficient, and can also\nmodel the way such an idea would be discovered.\n\nBut I don't think you should explicitly forestall intentional\nmisinterpretations in the body of an essay. An essay is a place to\nmeet honest readers. You don't want to spoil your house by putting\nbars on the windows to protect against dishonest ones. The place\nto protect against intentional misinterpretations is in end-notes.\nBut don't think you can predict them all. People are as ingenious\nat misrepresenting you when you say something they don't want to\nhear as they are at coming up with rationalizations for things they\nwant to do but know they shouldn't. I suspect it's the same skill.\n\n_____\n\n\nAs with most other things, the way to get better at writing essays\nis to practice. But how do you start? Now that we've examined the\nstructure of useful writing, we can rephrase that question more\nprecisely. Which constraint do you relax initially? The answer is,\nthe first component of importance: the number of people who care\nabout what you write.\n\nIf you narrow the topic sufficiently, you can probably find something\nyou're an expert on. Write about that to start with. If you only\nhave ten readers who care, that's fine. You're helping them, and\nyou're writing. Later you can expand the breadth of topics you write\nabout.\n\nThe other constraint you can relax is a little surprising: publication.\nWriting essays doesn't have to mean publishing them. That may seem\nstrange now that the trend is to publish every random thought, but\nit worked for me. I wrote what amounted to essays in notebooks for\nabout 15 years. I never published any of them and never expected\nto. I wrote them as a way of figuring things out. But when the web\ncame along I'd had a lot of practice.\n\nIncidentally, \nSteve \nWozniak did the same thing. In high school he\ndesigned computers on paper for fun. He couldn't build them because\nhe couldn't afford the components. But when Intel launched 4K DRAMs\nin 1975, he was ready.\n\n_____\n\n\nHow many essays are there left to write though? The answer to that\nquestion is probably the most exciting thing I've learned about\nessay writing. Nearly all of them are left to write.\n\nAlthough the essay \nis an old form, it hasn't been assiduously\ncultivated. In the print era, publication was expensive, and there\nwasn't enough demand for essays to publish that many. You could\npublish essays if you were already well known for writing something\nelse, like novels. Or you could write book reviews that you took\nover to express your own ideas. But there was not really a direct\npath to becoming an essayist. Which meant few essays got written,\nand those that did tended to be about a narrow range of subjects.\n\nNow, thanks to the internet, there's a path. Anyone can publish\nessays online. You start in obscurity, perhaps, but at least you\ncan start. You don't need anyone's permission.\n\nIt sometimes happens that an area of knowledge sits quietly for\nyears, till some change makes it explode. Cryptography did this to\nnumber theory. The internet is doing it to the essay.\n\nThe exciting thing is not that there's a lot left to write, but\nthat there's a lot left to discover. There's a certain kind of idea\nthat's best discovered by writing essays. If most essays are still\nunwritten, most such ideas are still undiscovered.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] Put railings on the balconies, but don't put bars on the windows.\n\n[2] Even now I sometimes write essays that are not meant for\npublication. I wrote several to figure out what Y Combinator should\ndo, and they were really helpful.\n\n\n\nThanks to Trevor Blackwell, Daniel Gackle, Jessica Livingston, and\nRobert Morris for reading drafts of this.\n\n", "January 2020\n\nWhen I was young, I thought old people had everything figured out.\nNow that I'm old, I know this isn't true.\n\nI constantly feel like a noob. It seems like I'm always talking to\nsome startup working in a new field I know nothing about, or reading\na book about a topic I don't understand well enough, or visiting some new\ncountry where I don't know how things work.\n\nIt's not pleasant to feel like a noob. And the word \"noob\" is\ncertainly not a compliment. And yet today I realized something\nencouraging about being a noob: the more of a noob you are locally,\nthe less of a noob you are globally.\n\nFor example, if you stay in your home country, you'll feel less\nof a noob than if you move to Farawavia, where everything works\ndifferently. And yet you'll know more if you move.\nSo the feeling of being a noob is inversely correlated with actual\nignorance.\n\nBut if the feeling of being a noob is good for us, why do we dislike\nit? What evolutionary purpose could such an aversion serve?\n\nI think the answer is that there are two sources of feeling like a\nnoob: being stupid, and doing something novel. Our dislike of feeling\nlike a noob is our brain telling us \"Come on, come on, figure this\nout.\" Which was the right thing to be thinking for most of human\nhistory. The life of hunter-gatherers was complex, but it didn't\nchange as much as life does now. They didn't suddenly have to figure\nout what to do about cryptocurrency. So it made sense to be biased\ntoward competence at existing problems over the discovery of new\nones. It made sense for humans to dislike the feeling of being a\nnoob, just as, in a world where food was scarce, it made sense for\nthem to dislike the feeling of being hungry.\n\nNow that too much food is more of a problem than too little, our\ndislike of feeling hungry leads us astray. And I think our dislike\nof feeling like a noob does too.\n\nThough it feels unpleasant, and people will sometimes ridicule you\nfor it, the more you feel like a noob, the better.\n\n\n\n\n\n", "January 2020\n\n(I originally intended this for startup founders, who are often\nsurprised by the attention they get as their companies grow, but\nit applies equally to anyone who becomes famous.)\n\nIf you become sufficiently famous, you'll acquire some fans who\nlike you too much. These people are sometimes called \"fanboys,\" and\nthough I dislike that term, I'm going to have to use it here.  We\nneed some word for them, because this is a distinct phenomenon from\nsomeone simply liking your work.\n\nA fanboy is obsessive and uncritical. Liking you becomes part of\ntheir identity, and they create an image of you in their own head\nthat is much better than reality. Everything you do is good, because\nyou do it. If you do something bad, they find a way to see it as\ngood. And their love for you is not, usually, a quiet, private one.\nThey want everyone to know how great you are.\n\nWell, you may be thinking, I could do without this kind of obsessive\nfan, but I know there are all kinds of people in the world, and if\nthis is the worst consequence of fame, that's not so bad.\n\nUnfortunately this is not the worst consequence of fame. As well\nas fanboys, you'll have haters.\n\nA hater is obsessive and uncritical. Disliking you becomes part of\ntheir identity, and they create an image of you in their own head\nthat is much worse than reality. Everything you do is bad, because\nyou do it. If you do something good, they find a way to see it as\nbad. And their dislike for you is not, usually, a quiet, private\none. They want everyone to know how awful you are.\n\nIf you're thinking of checking, I'll save you the trouble. The\nsecond and fifth paragraphs are identical except for \"good\" being\nswitched to \"bad\" and so on.\n\nI spent years puzzling about haters.  What are they, and where do\nthey come from? Then one day it dawned on me. Haters are just fanboys\nwith the sign switched.\n\nNote that by haters, I don't simply mean trolls. I'm not talking about \npeople who say bad things about you and then move on. I'm talking\nabout the much smaller group of people for whom this becomes a \nkind of obsession and who do it repeatedly over a long period.\n\nLike fans, haters seem to be an automatic consequence of fame.\nAnyone sufficiently famous will have them. And like fans, haters\nare energized by the fame of whoever they hate. They hear a song\nby some pop singer. They don't like it much. If the singer were an\nobscure one, they'd just forget about it. But instead they keep\nhearing her name, and this seems to drive some people crazy.\nEveryone's always going on about this singer, but she's no good!\nShe's a fraud!\n\nThat word \"fraud\" is an important one. It's the spectral signature\nof a hater to regard the object of their hatred as a \nfraud. They\ncan't deny their fame. Indeed, their fame is if anything exaggerated\nin the hater's mind. They notice every mention of the singer's name,\nbecause every mention makes them angrier. In their own minds they\nexaggerate both the singer's fame and her lack of talent, and the\nonly way to reconcile those two ideas is to conclude that she has\ntricked everyone.\n\nWhat sort of people become haters? Can anyone become one? I'm not\nsure about this, but I've noticed some patterns. Haters are generally\nlosers in a very specific sense: although they are occasionally\ntalented, they have never achieved much. And indeed, anyone\nsuccessful enough to have achieved significant fame would be unlikely\nto regard another famous person as a fraud on that account, because\nanyone famous knows how random fame is.\n\nBut haters are not always complete losers. They are not always the\nproverbial guy living in his mom's basement. Many are, but some\nhave some amount of talent. In fact I suspect that a sense of\nfrustrated talent is what drives some people to become haters.\nThey're not just saying \"It's unfair that so-and-so is famous,\" but\n\"It's unfair that so-and-so is famous, and not me.\"\n\nCould a hater be cured if they achieved something impressive? My\nguess is that's a moot point, because they \nnever will. I've been\nable to observe for long enough that I'm fairly confident the pattern\nworks both ways: not only do people who do great work never become\nhaters, haters never do great work. Although I dislike the word\n\"fanboy,\" it's evocative of something important about both haters\nand fanboys. It implies that the fanboy is so slavishly predictable in his admiration\nthat he's diminished as a result, that he's less than a man.\n\nHaters seem even more diminished. I can imagine being a fanboy.\nI can think of people whose work I admire so much that I could abase\nmyself before them out of sheer gratitude. If P. G.  Wodehouse were\nstill alive, I could see myself being a Wodehouse fanboy. But I\ncould not imagine being a hater.\n\nKnowing that haters are just fanboys with the sign bit flipped makes\nit much easier to deal with them. We don't need a separate theory\nof haters. We can just use existing techniques for dealing with\nobsessive fans.\n\nThe most important of which is simply not to think much about them.\nIf you're like most people who become famous enough to acquire\nhaters, your initial reaction will be one of mystification. Why\ndoes this guy seem to have it in for me? Where does his obsessive\nenergy come from, and what makes him so appallingly nasty? What did\nI do to set him off? Is it something I can fix?\n\nThe mistake here is to think of the hater as someone you have a\ndispute with. When you have a dispute with someone, it's usually a\ngood idea to try to understand why they're upset and then fix things\nif you can. Disputes are distracting. But it's a false analogy to\nthink of a hater as someone you have a dispute with.  It's an\nunderstandable mistake, if you've never encountered haters before.\nBut when you realize that you're dealing with a hater, and what a\nhater is, it's clear that it's a waste of time even to think about\nthem. If you have obsessive fans, do you spend any time wondering\nwhat makes them love you so much? No, you just think \"some\npeople are kind of crazy,\" and that's the end of it.\n\nSince haters are equivalent to fanboys, that's the way to deal with\nthem too. There may have been something that set them off. But it's\nnot something that would have set off a normal person, so there's\nno reason to spend any time thinking about it. It's not you, it's\nthem.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] There are of course some people who are genuine frauds. How can\nyou distinguish between x calling y a fraud because x is a hater,\nand because y is a fraud? Look at neutral opinion. Actual frauds\nare usually pretty conspicuous. Thoughtful people are rarely taken\nin by them. So if there are some thoughtful people who like y, you\ncan usually assume y is not a fraud.\n\n[2] I would make an exception for teenagers, who sometimes act in\nsuch extreme ways that they are literally not themselves. I can\nimagine a teenage kid being a hater and then growing out of it. But\nnot anyone over 25.\n\n[3] I have a much worse memory for misdeeds than my wife Jessica,\nwho is a connoisseur of character, but I don't wish it were better.\nMost disputes are a waste of time even if you're in the right, and\nit's easy to bury the hatchet with someone if you can't remember\nwhy you were mad at them.\n\n[4] A competent hater will not merely attack you individually but\nwill try to get mobs after you. In some cases you may want to refute\nwhatever bogus claim they made in order to do so. But err on the\nside of not, because ultimately it probably won't matter.\n\n\n\nThanks to Austen Allred, Trevor Blackwell, Patrick Collison,\nChristine Ford, Daniel Gackle, Jessica Livingston, Robert Morris, \nElon Musk, Harj Taggar, and Peter Thiel for reading drafts of this.\n\n", "December 2019\n\nThere are two distinct ways to be politically moderate: on purpose\nand by accident. Intentional moderates are trimmers, deliberately\nchoosing a position mid-way between the extremes of right and left.\nAccidental moderates end up in the middle, on average, because they\nmake up their own minds about each question, and the far right and\nfar left are roughly equally wrong.\n\nYou can distinguish intentional from accidental moderates by the\ndistribution of their opinions. If the far left opinion on some\nmatter is 0 and the far right opinion 100, an intentional moderate's\nopinion on every question will be near 50. Whereas an accidental\nmoderate's opinions will be scattered over a broad range, but will,\nlike those of the intentional moderate, average to about 50.\n\nIntentional moderates are similar to those on the far left and the\nfar right in that their opinions are, in a sense, not their own.\nThe defining quality of an ideologue, whether on the left or the\nright, is to acquire one's opinions in bulk. You don't get to pick\nand choose. Your opinions about taxation can be predicted from your\nopinions about sex. And although intentional moderates\nmight seem to be the opposite of ideologues, their beliefs (though\nin their case the word \"positions\" might be more accurate) are also\nacquired in bulk. If the median opinion shifts to the right or left,\nthe intentional moderate must shift with it. Otherwise they stop\nbeing moderate.\n\nAccidental moderates, on the other hand, not only choose their own\nanswers, but choose their own questions. They may not care at all\nabout questions that the left and right both think are terribly\nimportant. So you can only even measure the politics of an accidental\nmoderate from the intersection of the questions they care about and\nthose the left and right care about, and this can\nsometimes be vanishingly small.\n\nIt is not merely a manipulative rhetorical trick to say \"if you're\nnot with us, you're against us,\" but often simply false.\n\nModerates are sometimes derided as cowards, particularly by \nthe extreme left. But while it may be accurate to call intentional\nmoderates cowards, openly being an accidental moderate requires the\nmost courage of all, because you get attacked from both right and\nleft, and you don't have the comfort of being an orthodox member\nof a large group to sustain you.\n\nNearly all the most impressive people I know are accidental moderates.\nIf I knew a lot of professional athletes, or people in the entertainment\nbusiness, that might be different. Being on the far left or far\nright doesn't affect how fast you run or how well you sing. But\nsomeone who works with ideas has to be independent-minded to do it\nwell.\n\nOr more precisely, you have to be independent-minded about the ideas\nyou work with. You could be mindlessly doctrinaire in your politics\nand still be a good mathematician. In the 20th century, a lot of\nvery smart people were Marxists \u0097 just no one who was smart about\nthe subjects Marxism involves. But if the ideas you use in your\nwork intersect with the politics of your time, you have two choices:\nbe an accidental moderate, or be mediocre.\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] It's possible in theory for one side to be entirely right and\nthe other to be entirely wrong. Indeed, ideologues must always\nbelieve this is the case. But historically it rarely has been.\n\n[2] For some reason the far right tend to ignore moderates rather\nthan despise them as backsliders. I'm not sure why. Perhaps it\nmeans that the far right is less ideological than the far left. Or\nperhaps that they are more confident, or more resigned, or simply\nmore disorganized. I just don't know.\n\n[3] Having heretical opinions doesn't mean you have to express\nthem openly. It may be\neasier to have them if you don't.\n\n\nThanks to Austen Allred, Trevor Blackwell, Patrick Collison, Jessica Livingston,\nAmjad Masad, Ryan Petersen, and Harj Taggar for reading drafts of this.\n\n", "December 2019\n\nI've seen the same pattern in many different fields: even though\nlots of people have worked hard in the field, only a small fraction\nof the space of possibilities has been explored, because they've\nall worked on similar things.\n\nEven the smartest, most imaginative people are surprisingly\nconservative when deciding what to work on. People who would never\ndream of being fashionable in any other way get sucked into working\non fashionable problems.\n\nIf you want to try working on unfashionable problems, one of the\nbest places to look is in fields that people think have already been\nfully explored: essays, Lisp, venture funding \u0097 you may notice a\npattern here. If you can find a new approach into a big but apparently\nplayed out field, the value of whatever you discover will be\nmultiplied by its enormous surface area.\n\nThe best protection against getting drawn into working on the same\nthings as everyone else may be to genuinely \nlove what you're doing.\nThen you'll continue to work on it even if you make the same mistake\nas other people and think that it's too marginal to matter.\n\n", "December 2019\n\nBefore I had kids, I was afraid of having kids. Up to that point I\nfelt about kids the way the young Augustine felt about living\nvirtuously. I'd have been sad to think I'd never have children.\nBut did I want them now? No.\n\nIf I had kids, I'd become a parent, and parents, as I'd known since\nI was a kid, were uncool. They were dull and responsible and had\nno fun.  And while it's not surprising that kids would believe that,\nto be honest I hadn't seen much as an adult to change my mind.\nWhenever I'd noticed parents with kids, the kids seemed to be\nterrors, and the parents pathetic harried creatures, even when they\nprevailed.\n\nWhen people had babies, I congratulated them enthusiastically,\nbecause that seemed to be what one did. But I didn't feel it at\nall.  \"Better you than me,\" I was thinking.\n\nNow when people have babies I congratulate them enthusiastically and\nI mean it. Especially the first one. I feel like they just got the best gift in the world.\n\nWhat changed, of course, is that I had kids. Something I dreaded\nturned out to be wonderful.\n\nPartly, and I won't deny it, this is because of serious chemical\nchanges that happened almost instantly when our first child was\nborn.  It was like someone flipped a switch. I suddenly felt\nprotective not just toward our child, but toward all children. As I was\ndriving my wife and new son home from the hospital, I approached a\ncrosswalk full of pedestrians, and I found myself thinking \"I have\nto be really careful of all these people. Every one of them is\nsomeone's child!\"\n\nSo to some extent you can't trust me when I say having kids is\ngreat.  To some extent I'm like a religious cultist telling you\nthat you'll be happy if you join the cult too \u0097 but only because\njoining the cult will alter your mind in a way that will make you\nhappy to be a cult member.\n\nBut not entirely. There were some things\nabout having kids that I clearly got wrong before I had them.\n\nFor example, there was a huge amount of selection bias in my\nobservations of parents and children. Some parents may have noticed\nthat I wrote \"Whenever I'd noticed parents with kids.\" Of course\nthe times I noticed kids were when things were going wrong. I only\nnoticed them when they made noise. And where was I when I noticed\nthem?  Ordinarily I never went to places with kids, so the only\ntimes I encountered them were in shared bottlenecks like airplanes.\nWhich is not exactly a representative sample. Flying with a toddler\nis something very few parents enjoy.\n\nWhat I didn't notice, because they tend to be much quieter, were\nall the great moments parents had with kids. People don't talk about\nthese much \u0097 the magic is hard to put into words, and all other\nparents know about them anyway \u0097 but one of the great things about\nhaving kids is that there are so many times when you feel there is\nnowhere else you'd rather be, and nothing else you'd rather be\ndoing.  You don't have to be doing anything special. You could just\nbe going somewhere together, or putting them to bed, or pushing\nthem on the swings at the park. But you wouldn't trade these moments\nfor anything. One doesn't tend to associate kids with peace, but\nthat's what you feel.  You don't need to look any\nfurther than where you are right now.\n\nBefore I had kids, I had moments of this kind of peace, but they\nwere rarer. With kids it can happen several times a day.\n\nMy other source of data about kids was my own childhood, and that\nwas similarly misleading. I was pretty bad, and was always in trouble\nfor something or other. So it seemed to me that parenthood was\nessentially law enforcement.  I didn't realize there were good times\ntoo.\n\nI remember my mother telling me once when I was about 30 that she'd\nreally enjoyed having me and my sister. My god, I thought, this\nwoman is a saint. She not only endured all the pain we subjected\nher to, but actually enjoyed it? Now I realize she was simply telling\nthe truth.\n\nShe said that one reason she liked having us was that we'd been\ninteresting to talk to. That took me by surprise when I had kids.\nYou don't just love them. They become your friends too. They're\nreally interesting. And while I admit small children are disastrously\nfond of repetition (anything worth doing once is worth doing fifty\ntimes) it's often genuinely fun to play with them.  That surprised\nme too. Playing with a 2 year old was fun when I was 2 and definitely\nnot fun when I was 6. Why would it become fun again later? But it\ndoes.\n\nThere are of course times that are pure drudgery. Or worse still,\nterror. Having kids is one of those intense types of experience\nthat are hard to imagine unless you've had them. But it is not, as I\nimplicitly believed before having kids, simply your DNA heading for\nthe lifeboats.\n\nSome of my worries about having kids were right, though. They\ndefinitely make you less productive. I know having kids makes some\npeople get their act together, but if your act was already together,\nyou're going to have less time to do it in. In particular, you're\ngoing to have to work to a schedule. Kids have schedules.  I'm not\nsure if it's because that's how kids are, or because it's the only\nway to integrate their lives with adults', but once you have kids,\nyou tend to have to work on their schedule.\n\nYou will have chunks of time to work. But you can't let work spill\npromiscuously through your whole life, like I used to before I had\nkids. You're going to have to work at the same time every day,\nwhether inspiration is flowing or not, and there are going to be\ntimes when you have to stop, even if it is.\n\nI've been able to adapt to working this way. Work, like love, finds\na way. If there are only certain times it can happen, it happens\nat those times. So while I don't get as much done as before I had\nkids, I get enough done.\n\nI hate to say this, because being ambitious has always been a part\nof my identity, but having kids may make one less ambitious. It\nhurts to see that sentence written down. I squirm to avoid it. But\nif there weren't something real there, why would I squirm?  The\nfact is, once you have kids, you're probably going to care more\nabout them than you do about yourself. And attention is a zero-sum\ngame. Only one idea at a time can be the \ntop idea in your mind.\nOnce you have kids, it will often be your kids, and that means it\nwill less often be some project you're working on.\n\nI have some hacks for sailing close to this wind. For example, when\nI write essays, I think about what I'd want my kids to know. That\ndrives me to get things right. And when I was writing \nBel, I told\nmy kids that once I finished it I'd take them to Africa. When you\nsay that sort of thing to a little kid, they treat it as a promise.\nWhich meant I had to finish or I'd be taking away their trip to\nAfrica.  Maybe if I'm really lucky such tricks could put me net\nahead. But the wind is there, no question.\n\nOn the other hand, what kind of wimpy ambition do you have if it\nwon't survive having kids? Do you have so little to spare?\n\nAnd while having kids may be warping my present judgement, it hasn't\noverwritten my memory. I remember perfectly well what life was like\nbefore. Well enough to miss some things a lot, like the\nability to take off for some other country at a moment's notice.\nThat was so great. Why did I never do that?\n\nSee what I did there? The fact is, most of the freedom I had before\nkids, I never used. I paid for it in loneliness, but I never used\nit.\n\nI had plenty of happy times before I had kids. But if I count up\nhappy moments, not just potential happiness but actual happy moments,\nthere are more after kids than before. Now I practically have it\non tap, almost any bedtime.\n\nPeople's experiences as parents\nvary a lot, and I know I've been lucky. But I think the worries I\nhad before having kids must be pretty common, and judging by other\nparents' faces when they see their kids, so must the happiness that\nkids bring.\n\n\n\n\n\n\n\n\n\n\nNote\n\n[1] Adults are sophisticated enough to see 2 year olds for the\nfascinatingly complex characters they are, whereas to most 6 year\nolds, 2 year olds are just defective 6 year olds.\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, and Robert Morris\nfor reading drafts of this.\n\n", "December 2019\n\n\nThe most damaging thing you learned in school wasn't something you\nlearned in any specific class. It was learning to get good grades.\n\nWhen I was in college, a particularly earnest philosophy grad student\nonce told me that he never cared what grade he got in a class, only\nwhat he learned in it. This stuck in my mind because it was the\nonly time I ever heard anyone say such a thing.\n\nFor me, as for most students, the measurement of what I was learning\ncompletely dominated actual learning in college.  I was fairly\nearnest; I was genuinely interested in most of the classes I took,\nand I worked hard. And yet I worked by far the hardest when I was\nstudying for a test.\n\nIn theory, tests are merely what their name implies: tests of what\nyou've learned in the class. In theory you shouldn't have to prepare\nfor a test in a class any more than you have to prepare for a blood\ntest. In theory you learn from taking the class, from going to the\nlectures and doing the reading and/or assignments, and the test\nthat comes afterward merely measures how well you learned.\n\nIn practice, as almost everyone reading this will know, things are\nso different that hearing this explanation of how classes and tests\nare meant to work is like hearing the etymology of a word whose\nmeaning has changed completely. In practice, the phrase \"studying\nfor a test\" was almost redundant, because that was when one really\nstudied.  The difference between diligent and slack students was\nthat the former studied hard for tests and the latter didn't.  No\none was pulling all-nighters two weeks into the semester.\n\nEven though I was a diligent student, almost all the work I did in\nschool was aimed at getting a good grade on something.\n\nTo many people, it would seem strange that the preceding sentence\nhas a \"though\" in it. Aren't I merely stating a tautology? Isn't\nthat what a diligent student is, a straight-A student? That's how\ndeeply the conflation of learning with grades has infused our\nculture.\n\nIs it so bad if learning is conflated with grades?  Yes, it is bad.\nAnd it wasn't till decades after college, when I was running Y\u00a0Combinator, that I realized how bad it is.\n\nI knew of course when I was a student that studying for a test is\nfar from identical with actual learning. At the very least, you\ndon't retain knowledge you cram into your head the night before an\nexam. But the problem is worse than that. The real problem is that\nmost tests don't come close to measuring what they're supposed to.\n\nIf tests truly were tests of learning, things wouldn't be so bad.\nGetting good grades and learning would converge, just a little late.\nThe problem is that nearly all tests given to students are terribly\nhackable. Most people who've gotten good grades know this, and know\nit so well they've ceased even to question it.  You'll see when you\nrealize how naive it sounds to act otherwise.\n\nSuppose you're taking a class on medieval history and the final\nexam is coming up. The final exam is supposed to be a test of your\nknowledge of medieval history, right? So if you have a couple days\nbetween now and the exam, surely the best way to spend the time,\nif you want to do well on the exam, is to read the best books you\ncan find about medieval history. Then you'll know a lot about it,\nand do well on the exam.\n\nNo, no, no, experienced students are saying to themselves.  If you\nmerely read good books on medieval history, most of the stuff you\nlearned wouldn't be on the test.  It's not good books you want to\nread, but the lecture notes and assigned reading in this class.\nAnd even most of that you can ignore, because you only have to worry\nabout the sort of thing that could turn up as a test question.\nYou're looking for sharply-defined chunks of information. If one\nof the assigned readings has an interesting digression on some\nsubtle point, you can safely ignore that, because it's not the sort\nof thing that could be turned into a test question.  But if the\nprofessor tells you that there were three underlying causes of the\nSchism of 1378, or three main consequences of the Black Death, you'd\nbetter know them. And whether they were in fact the causes or\nconsequences is beside the point.  For the purposes of this class\nthey are.\n\nAt a university there are often copies of old exams floating around,\nand these narrow still further what you have to learn. As well as\nlearning what kind of questions this professor asks, you'll often\nget actual exam questions. Many professors re-use them.  After\nteaching a class for 10 years, it would be hard not to, at least\ninadvertently.\n\nIn some classes, your professor will have had some sort of political\naxe to grind, and if so you'll have to grind it too. The need for\nthis varies. In classes in math or the hard sciences or engineering\nit's rarely necessary, but at the other end of the spectrum there\nare classes where you couldn't get a good grade without it.\n\nGetting a good grade in a class on x is so different from learning\na lot about x that you have to choose one or the other, and you\ncan't blame students if they choose grades.  Everyone judges them\nby their grades \u0097 graduate programs, employers, scholarships, even\ntheir own parents.\n\nI liked learning, and I really enjoyed some of the papers and\nprograms I wrote in college. But did I ever, after turning in a\npaper in some class, sit down and write another just for fun? Of\ncourse not. I had things due in other classes. If it ever came to\na choice of learning or grades, I chose grades. I hadn't come to\ncollege to do badly.\n\nAnyone who cares about getting good grades has to play this game,\nor they'll be surpassed by those who do. And at elite universities,\nthat means nearly everyone, since someone who didn't care about\ngetting good grades probably wouldn't be there in the first place.\nThe result is that students compete to maximize the difference\nbetween learning and getting good grades.\n\nWhy are tests so bad? More precisely, why are they so hackable?\nAny experienced programmer could answer that. How hackable is\nsoftware whose author hasn't paid any attention to preventing it\nfrom being hacked? Usually it's as porous as a colander.\n\nHackable is the default for any test imposed by an authority. The\nreason the tests you're given are so consistently bad \u0097 so consistently\nfar from measuring what they're supposed to measure \u0097 is simply\nthat the people creating them haven't made much effort to prevent\nthem from being hacked.\n\nBut you can't blame teachers if their tests are hackable. Their job\nis to teach, not to create unhackable tests. The real problem is\ngrades, or more precisely, that grades have been overloaded. If\ngrades were merely a way for teachers to tell students what they\nwere doing right and wrong, like a coach giving advice to an athlete,\nstudents wouldn't be tempted to hack tests. But unfortunately after\na certain age grades become more than advice. After a certain age,\nwhenever you're being taught, you're usually also being judged.\n\nI've used college tests as an example, but those are actually the\nleast hackable. All the tests most students take their whole lives\nare at least as bad, including, most spectacularly of all, the test\nthat gets them into college. If getting into college were merely a\nmatter of having the quality of one's mind measured by admissions\nofficers the way scientists measure the mass of an object, we could\ntell teenage kids \"learn a lot\" and leave it at that.  You can tell\nhow bad college admissions are, as a test, from how unlike high\nschool that sounds. In practice, the freakishly specific nature of\nthe stuff ambitious kids have to do in high school is directly\nproportionate to the hackability of college admissions.  The classes\nyou don't care about that are mostly memorization, the random\n\"extracurricular activities\" you have to participate in to show\nyou're \"well-rounded,\" the standardized tests as artificial as\nchess, the \"essay\" you have to write that's presumably meant to hit\nsome very specific target, but you're not told what.\n\nAs well as being bad in what it does to kids, this test is also bad\nin the sense of being very hackable. So hackable that whole industries\nhave grown up to hack it. This is the explicit purpose of test-prep\ncompanies and admissions counsellors, but it's also a significant\npart of the function of private schools.\n\nWhy is this particular test so hackable? I think because of what\nit's measuring. Although the popular story is that the way to get\ninto a good college is to be really smart, admissions officers at\nelite colleges neither are, nor claim to be, looking only for that.\nWhat are they looking for?  They're looking for people who are not\nsimply smart, but admirable in some more general sense.  And how\nis this more general admirableness measured?  The admissions officers\nfeel it. In other words, they accept who they like.\n\nSo what college admissions is a test of is whether you suit the\ntaste of some group of people. Well, of course a test like that is\ngoing to be hackable. And because it's both very hackable and there's\n(thought to be) a lot at stake, it's hacked like nothing else.\nThat's why it distorts your life so much for so long.\n\nIt's no wonder high school students often feel alienated. The shape\nof their lives is completely artificial.\n\nBut wasting your time is not the worst thing the educational system\ndoes to you. The worst thing it does is to train you that the way\nto win is by hacking bad tests.  This is a much subtler problem\nthat I didn't recognize until I saw it happening to other people.\n\nWhen I started advising startup founders at Y Combinator, especially\nyoung ones, I was puzzled by the way they always seemed to make\nthings overcomplicated. How, they would ask, do you raise money?\nWhat's the trick for making venture capitalists want to invest in\nyou? The best way to make VCs want to invest in you, I would explain,\nis to actually be a good investment. Even if you could trick VCs\ninto investing in a bad startup, you'd be tricking yourselves too.\nYou're investing time in the same company you're asking them to\ninvest money in. If it's not a good investment, why are you even\ndoing it?\n\nOh, they'd say, and then after a pause to digest this revelation,\nthey'd ask: What makes a startup a good investment?\n\nSo I would explain that what makes a startup promising, not just\nin the eyes of investors but in fact, is \ngrowth.  \nIdeally in revenue,\nbut failing that in usage. What they needed to do was get lots of\nusers.\n\nHow does one get lots of users? They had all kinds of ideas about\nthat. They needed to do a big launch that would get them \"exposure.\"\nThey needed influential people to talk about them. They even knew\nthey needed to launch on a tuesday, because that's when one gets\nthe most attention.\n\nNo, I would explain, that is not how to get lots of users. The way\nyou get lots of users is to make the product really great. Then\npeople will not only use it but recommend it to their friends, so\nyour growth will be exponential once you \nget it started.\n\nAt this point I've told the founders something you'd think would\nbe completely obvious: that they should make a good company by\nmaking a good product. And yet their reaction would be something\nlike the reaction many physicists must have had when they first\nheard about the theory of relativity: a mixture of astonishment at\nits apparent genius, combined with a suspicion that anything so\nweird couldn't possibly be right. Ok, they would say, dutifully.\nAnd could you introduce us to such-and-such influential person? And\nremember, we want to launch on Tuesday.\n\nIt would sometimes take founders years to grasp these simple lessons.\nAnd not because they were lazy or stupid. They just seemed blind\nto what was right in front of them.\n\nWhy, I would ask myself, do they always make things so complicated?\nAnd then one day I realized this was not a rhetorical question.\n\nWhy did founders tie themselves in knots doing the wrong things\nwhen the answer was right in front of them? Because that was what\nthey'd been trained to do. Their education had taught them that the\nway to win was to hack the test. And without even telling them they\nwere being trained to do this. The younger ones, the recent graduates,\nhad never faced a non-artificial test. They thought this was just\nhow the world worked: that the first thing you did, when facing any\nkind of challenge, was to figure out what the trick was for hacking\nthe test. That's why the conversation would always start with how\nto raise money, because that read as the test. It came at the end\nof YC. It had numbers attached to it, and higher numbers seemed to\nbe better. It must be the test.\n\nThere are certainly big chunks of the world where the way to win\nis to hack the test. This phenomenon isn't limited to schools.  And\nsome people, either due to ideology or ignorance, claim that this\nis true of startups too. But it isn't. In fact, one of the most\nstriking things about startups is the degree to which you win by\nsimply doing good work. There are edge cases, as there are in\nanything, but in general you win by getting users, and what users\ncare about is whether the product does what they want.\n\nWhy did it take me so long to understand why founders made startups\novercomplicated? Because I hadn't realized explicitly that schools\ntrain us to win by hacking bad tests. And not just them, but me!\nI'd been trained to hack bad tests too, and hadn't realized it till\ndecades later.\n\nI had lived as if I realized it, but without knowing why. For\nexample, I had avoided working for big companies. But if you'd asked\nwhy, I'd have said it was because they were bogus, or bureaucratic.\nOr just yuck. I never understood how much of my dislike of big\ncompanies was due to the fact that you win by hacking bad tests.\n\nSimilarly, the fact that the tests were unhackable was a lot of\nwhat attracted me to startups. But again, I hadn't realized that\nexplicitly.\n\nI had in effect achieved by successive approximations something\nthat may have a closed-form solution.  I had gradually undone my\ntraining in hacking bad tests without knowing I was doing it.  Could\nsomeone coming out of school banish this demon just by knowing its\nname, and saying begone? It seems worth trying.\n\nMerely talking explicitly about this phenomenon is likely to make\nthings better, because much of its power comes from the fact that\nwe take it for granted. After you've noticed it, it seems the\nelephant in the room, but it's a pretty well camouflaged elephant.\nThe phenomenon is so old, and so pervasive. And it's simply the\nresult of neglect. No one meant things to be this way. This is just\nwhat happens when you combine learning with grades, competition,\nand the naive assumption of unhackability.\n\nIt was mind-blowing to realize that two of the things I'd puzzled\nabout the most \u0097 the bogusness of high school, and the difficulty\nof getting founders to see the obvious \u0097 both had the same cause.\nIt's rare for such a big block to slide into place so late.\n\nUsually when that happens it has implications in a lot of different\nareas, and this case seems no exception. For example, it suggests\nboth that education could be done better, and how you might fix it.\nBut it also suggests a potential answer to the question all big\ncompanies seem to have: how can we be more like a startup? I'm not\ngoing to chase down all the implications now. What I want to focus\non here is what it means for individuals.\n\nTo start with, it means that most ambitious kids graduating from\ncollege have something they may want to unlearn.  But it also changes\nhow you look at the world. Instead of looking at all the different\nkinds of work people do and thinking of them vaguely as more or\nless appealing, you can now ask a very specific question that will\nsort them in an interesting way: to what extent do you win at this\nkind of work by hacking bad tests?\n\nIt would help if there was a way to recognize bad tests quickly.\nIs there a pattern here? It turns out there is.\n\nTests can be divided into two kinds: those that are imposed by\nauthorities, and those that aren't.  Tests that aren't imposed by\nauthorities are inherently unhackable, in the sense that no one is\nclaiming they're tests of anything more than they actually test. A\nfootball match, for example, is simply a test of who wins, not which\nteam is better. You can tell that from the fact that commentators\nsometimes say afterward that the better team won. Whereas tests\nimposed by authorities are usually proxies for something else. A\ntest in a class is supposed to measure not just how well you did\non that particular test, but how much you learned in the class.\nWhile tests that aren't imposed by authorities are inherently\nunhackable, those imposed by authorities have to be made unhackable.\nUsually they aren't.  So as a first approximation, bad tests are\nroughly equivalent to tests imposed by authorities.\n\nYou might actually like to win by hacking bad tests. Presumably\nsome people do. But I bet most people who find themselves doing\nthis kind of work don't like it. They just take it for granted that\nthis is how the world works, unless you want to drop out and be\nsome kind of hippie artisan.\n\nI suspect many people implicitly assume that working in a\nfield with bad tests is the price of making lots of money. But that,\nI can tell you, is false. It used to be true. In the mid-twentieth\ncentury, when the economy was \ncomposed of oligopolies, \nthe only way\nto the top was by playing their game. But it's not true now.  There\nare now ways to get rich by doing good work, and that's part of the\nreason people are so much more excited about getting rich than they\nused to be. When I was a kid, you could either become an engineer\nand make cool things, or make lots of money by becoming an \"executive.\"\nNow you can make lots of money by making cool things.\n\nHacking bad tests is becoming less important as the link between\nwork and authority erodes. The erosion of that link is one of the\nmost important trends happening now, and we see its effects in\nalmost every kind of work people do. Startups are one of the most\nvisible examples, but we see much the same thing in writing. Writers\nno longer have to submit to publishers and editors to reach readers;\nnow they can go direct.\n\nThe more I think about this question, the more optimistic I get.\nThis seems one of those situations where we don't realize how much\nsomething was holding us back until it's eliminated. And I can\nforesee the whole bogus edifice crumbling. Imagine what happens as\nmore and more people start to ask themselves if they want to win\nby hacking bad tests, and decide that they don't.  The kinds of\nwork where you win by hacking bad tests will be starved of talent,\nand the kinds where you win by doing good work will see an influx\nof the most ambitious people. And as hacking bad tests shrinks in\nimportance, education will evolve to stop training us to do it.\nImagine what the world could look like if that happened.\n\nThis is not just a lesson for individuals to unlearn, but one for\nsociety to unlearn, and we'll be amazed at the energy that's liberated\nwhen we do.\n\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] If using tests only to measure learning sounds impossibly\nutopian, that is already the way things work at Lambda School.\nLambda School doesn't have grades. You either graduate or you don't.\nThe only purpose of tests is to decide at each stage of the curriculum\nwhether you can continue to the next. So in effect the whole school\nis pass/fail.\n\n[2] If the final exam consisted of a long conversation with the\nprofessor, you could prepare for it by reading good books on medieval\nhistory. A lot of the hackability of tests in schools is due to the\nfact that the same test has to be given to large numbers of students.\n\n[3] Learning is the naive algorithm for getting good grades.\n\n[4] Hacking has \nmultiple senses. There's a narrow sense in which\nit means to compromise something. That's the sense in which one\nhacks a bad test. But there's another, more general sense, meaning\nto find a surprising solution to a problem, often by thinking\ndifferently about it. Hacking in this sense is a wonderful thing.\nAnd indeed, some of the hacks people use on bad tests are impressively\ningenious; the problem is not so much the hacking as that, because\nthe tests are hackable, they don't test what they're meant to.\n\n[5] The people who pick startups at Y Combinator are similar to\nadmissions officers, except that instead of being arbitrary, their\nacceptance criteria are trained by a very tight feedback loop. If\nyou accept a bad startup or reject a good one, you will usually know it\nwithin a year or two at the latest, and often within a month.\n\n[6] I'm sure admissions officers are tired of reading applications\nfrom kids who seem to have no personality beyond being willing to\nseem however they're supposed to seem to get accepted.  What they\ndon't realize is that they are, in a sense, looking in a mirror.\nThe lack of authenticity in the applicants is a reflection of the\narbitrariness of the application process. A dictator might just as\nwell complain about the lack of authenticity in the people around\nhim.\n\n[7] By good work, I don't mean morally good, but good in the sense\nin which a good craftsman does good work.\n\n[8] There are borderline cases where it's hard to say which category\na test falls in. For example, is raising venture capital like college\nadmissions, or is it like selling to a customer?\n\n[9] Note that a good test is merely one that's unhackable. Good\nhere doesn't mean morally good, but good in the sense of working\nwell. The difference between fields with bad tests and good ones\nis not that the former are bad and the latter are good, but that\nthe former are bogus and the latter aren't. But those two measures\nare not unrelated.  As Tara Ploughman said, the path from good to\nevil goes through bogus.\n\n[10] People who think the recent increase in \neconomic inequality is\ndue to changes in tax policy seem very naive to anyone with experience\nin startups. Different people are getting rich now than used to,\nand they're getting much richer than mere tax savings could make\nthem.\n\n[11] Note to tiger parents: you may think you're training your kids\nto win, but if you're training them to win by hacking bad tests,\nyou are, as parents so often do, training them to fight the last\nwar.\n\n\n\nThanks to Austen Allred, Trevor Blackwell, Patrick Collison,\nJessica Livingston, Robert Morris, and Harj Taggar for reading\ndrafts of this.\n\n", "November 2019\n\nIf you discover something new, there's a significant chance you'll be\naccused of some form of heresy.\n\nTo discover new things, you have\nto work on ideas that are good but non-obvious; if an idea is\nobviously good, other people are probably already working on it.\nOne common way for a good idea to be non-obvious is for it to be hidden in the\nshadow of some mistaken assumption that people are very attached to.\nBut anything you discover from working on such an idea will tend to\ncontradict the mistaken assumption that was concealing it.  And you\nwill thus get a lot of heat from people attached to the mistaken\nassumption. Galileo and Darwin are famous examples of this phenomenon,\nbut it's probably always an ingredient in the resistance to new\nideas.\n\nSo it's particularly dangerous for an organization or society to\nhave a culture of pouncing on heresy.  When you suppress heresies,\nyou don't just prevent people from contradicting the mistaken\nassumption you're trying to protect. You also suppress any idea\nthat implies indirectly that it's false.\n\n\nEvery cherished mistaken assumption has\na dead zone of unexplored ideas around it.  And the more preposterous\nthe assumption, the bigger the dead zone it creates.\n\nThere is a positive side to this phenomenon though.  If you're\nlooking for new ideas, one way to find them is by looking for\nheresies.  When you look at the question this way, the depressingly\nlarge dead zones around mistaken assumptions become excitingly large\nmines of new ideas.\n\n\n\n\n\n", "November 2019\n\nEveryone knows that to do great work you need both natural ability\nand determination. But there's a third ingredient that's not as\nwell understood: an obsessive interest in a particular topic.\n\nTo explain this point I need to burn my reputation with some group\nof people, and I'm going to choose bus ticket collectors.  There\nare people who collect old bus tickets. Like many collectors, they\nhave an obsessive interest in the minutiae of what they collect.\nThey can keep track of distinctions between different types of bus\ntickets that would be hard for the rest of us to remember.  Because\nwe don't care enough. What's the point of spending so much time\nthinking about old bus tickets?\n\nWhich leads us to the second feature of this kind of obsession:\nthere is no point. A bus ticket collector's love is disinterested.\nThey're not doing it to impress us or to make themselves rich, but\nfor its own sake.\n\nWhen you look at the lives of people who've done great work, you\nsee a consistent pattern. They often begin with a bus ticket\ncollector's obsessive interest in something that would have seemed\npointless to most of their contemporaries. One of the most striking\nfeatures of Darwin's book about his voyage on the Beagle is the\nsheer depth of his interest in natural history. His curiosity seems\ninfinite. Ditto for Ramanujan, sitting by the hour working out on\nhis slate what happens to series.\n\nIt's a mistake to think they were \"laying the groundwork\" for the\ndiscoveries they made later. There's too much intention in that\nmetaphor. Like bus ticket collectors, they were doing it\nbecause they liked it.\n\nBut there is a difference between Ramanujan and a bus ticket\ncollector. Series matter, and bus tickets don't.\n\nIf I had to put the recipe for genius into one sentence, that might\nbe it: to have a disinterested obsession with something that matters.\n\nAren't I forgetting about the other two ingredients? Less than you\nmight think. An obsessive interest in a topic is both a proxy for\nability and a substitute for determination.  Unless you have\nsufficient mathematical aptitude, you won't find series interesting.\nAnd when you're obsessively interested in something, you don't need\nas much determination: you don't need to push yourself as hard when\ncuriosity is pulling you.\n\nAn obsessive interest will even bring you luck, to the extent\nanything can. Chance, as Pasteur said, favors the prepared mind,\nand if there's one thing an obsessed mind is, it's prepared.\n\nThe disinterestedness of this kind of obsession is its most important\nfeature. Not just because it's a filter for earnestness, but because\nit helps you discover new ideas.\n\nThe paths that lead to new ideas tend to look unpromising. If they\nlooked promising, other people would already have explored them.\nHow do the people who do great work discover these paths that others\noverlook?  The popular story is that they simply have better vision:\nbecause they're so talented, they see paths that others miss.  But\nif you look at the way great discoveries are made, that's not what\nhappens. Darwin didn't pay closer attention to individual species\nthan other people because he saw that this would lead to great\ndiscoveries, and they didn't. He was just really, really interested\nin such things.\n\nDarwin couldn't turn it off. Neither could Ramanujan.  They didn't\ndiscover the hidden paths that they did because they seemed promising,\nbut because they couldn't help it. That's what allowed them to\nfollow paths that someone who was merely ambitious would have\nignored.\n\nWhat rational person would decide that the way to write great novels\nwas to begin by spending several years creating an imaginary elvish\nlanguage, like Tolkien, or visiting every household in southwestern\nBritain, like Trollope? No one, including Tolkien and Trollope.\n\nThe bus ticket theory is similar to Carlyle's famous definition of\ngenius as an infinite capacity for taking pains. But there are two\ndifferences. The bus ticket theory makes it clear that the source\nof this infinite capacity for taking pains is not infinite diligence,\nas Carlyle seems to have meant, but the sort of infinite interest\nthat collectors have. It also adds an important qualification: an\ninfinite capacity for taking pains about something that matters.\n\nSo what  matters? You can never be sure. It's precisely because no\none can tell in advance which paths are promising that you can\ndiscover new ideas by working on what you're interested in.\n\nBut there are some heuristics you can use to guess whether an\nobsession might be one that matters. For example, it's more promising\nif you're creating something, rather than just consuming something\nsomeone else creates. It's more promising if something you're\ninterested in is difficult, especially if it's more difficult for\nother people than it is for you. And the obsessions of talented\npeople are more likely to be promising. When talented people become\ninterested in random things, they're not truly random.\n\nBut you can never be sure. In fact, here's an interesting idea\nthat's also rather alarming if it's true: it may be that to do great\nwork, you also have to waste a lot of time.\n\nIn many different areas, reward is proportionate to risk. If that\nrule holds here, then the way to find paths that lead to truly great\nwork is to be willing to expend a lot of effort on things that turn\nout to be every bit as unpromising as they seem.\n\nI'm not sure if this is true. On one hand, it seems surprisingly\ndifficult to waste your time so long as you're working hard on\nsomething interesting. So much of what you do ends up being useful.\nBut on the other hand, the rule about the relationship between risk\nand reward is so powerful that it seems to hold wherever risk occurs.\nNewton's case, at least, suggests that the risk/reward rule holds\nhere. He's famous for one particular obsession of his that turned\nout to be unprecedentedly fruitful: using math to describe the\nworld. But he had two other obsessions, alchemy and theology, that\nseem to have been complete wastes of time. He ended up net ahead.\nHis bet on what we now call physics paid off so well that it more\nthan compensated for the other two. But were the other two necessary,\nin the sense that he had to take big risks to make such big\ndiscoveries? I don't know.\n\nHere's an even more alarming idea: might one make all bad bets?  It\nprobably happens quite often. But we don't know how often, because\nthese people don't become famous.\n\nIt's not merely that the returns from following a path are hard to\npredict. They change dramatically over time. 1830 was a really good\ntime to be obsessively interested in natural history. If Darwin had\nbeen born in 1709 instead of 1809, we might never have heard of\nhim.\n\nWhat can one do in the face of such uncertainty?  One solution is\nto hedge your bets, which in this case means to follow the obviously\npromising paths instead of your own private obsessions. But as with\nany hedge, you're decreasing reward when you decrease risk.  If you\nforgo working on what you like in order to follow some more\nconventionally ambitious path, you might miss something wonderful\nthat you'd otherwise have discovered. That too must happen all the\ntime, perhaps even more often than the genius whose bets all fail.\n\nThe other solution is to let yourself be interested in lots of\ndifferent things. You don't decrease your upside if you switch\nbetween equally genuine interests based on which seems to be working\nso far. But there is a danger here too: if you work on too many\ndifferent projects, you might not get deeply enough into any of\nthem.\n\nOne interesting thing about the bus ticket theory is that it may\nhelp explain why different types of people excel at different kinds\nof work. Interest is much more unevenly distributed than ability.\nIf natural ability is all you need to do great work, and natural\nability is evenly distributed, you have to invent elaborate theories\nto explain the skewed distributions we see among those who actually\ndo great work in various fields. But it may be that much of the\nskew has a simpler explanation: different people are interested in\ndifferent things.\n\nThe bus ticket theory also explains why people are less likely to\ndo great work after they have children. Here interest has to compete\nnot just with external obstacles, but with another interest, and\none that for most people is extremely powerful. It's harder to find\ntime for work after you have kids, but that's the easy part. The\nreal change is that you don't want to.\n\nBut the most exciting implication of the bus ticket theory is that\nit suggests ways to encourage great work. If the recipe for genius\nis simply natural ability plus hard work, all we can do is hope we\nhave a lot of ability, and work as hard as we can. But if interest\nis a critical ingredient in genius, we may be able, by cultivating\ninterest, to cultivate genius.\n\nFor example, for the very ambitious, the bus ticket theory suggests\nthat the way to do great work is to relax a little. Instead of\ngritting your teeth and diligently pursuing what all your peers\nagree is the most promising line of research, maybe you should try\ndoing something just for fun. And if you're stuck, that may be the\nvector along which to break out.\n\nI've always liked Hamming's famous double-barrelled question: what\nare the most important problems in your field, and why aren't you\nworking on one of them? It's a great way to shake yourself up. But\nit may be overfitting a bit. It might be at least as useful to ask\nyourself: if you could take a year off to work on something that\nprobably wouldn't be important but would be really interesting,\nwhat would it be?\n\nThe bus ticket theory also suggests a way to avoid slowing down as\nyou get older. Perhaps the reason people have fewer new ideas as\nthey get older is not simply that they're losing their edge. It may\nalso be because once you become established, you can no longer mess\nabout with irresponsible side projects the way you could when you\nwere young and no one cared what you did.\n\nThe solution to that is obvious: remain irresponsible. It will be\nhard, though, because the apparently random projects you take up\nto stave off decline will read to outsiders as evidence of it.  And\nyou yourself won't know for sure that they're wrong. But it will\nat least be more fun to work on what you want.\n\nIt may even be that we can cultivate a habit of intellectual bus\nticket collecting in kids. The usual plan in education is to start\nwith a broad, shallow focus, then gradually become more specialized.\nBut I've done the opposite with my kids. I know I can count on their\nschool to handle the broad, shallow part, so I take them deep.\n\nWhen they get interested in something, however random, I encourage\nthem to go preposterously, bus ticket collectorly, deep.  I don't\ndo this because of the bus ticket theory. I do it because I want\nthem to feel the joy of learning, and they're never going to feel\nthat about something I'm making them learn. It has to be something\nthey're interested in. I'm just following the path of least resistance;\ndepth is a byproduct. But if in trying to show them the joy of\nlearning I also end up training them to go deep, so much the better.\n\nWill it have any effect? I have no idea. But that uncertainty may\nbe the most interesting point of all. There is so much more to learn\nabout how to do great work. As old as human civilization feels,\nit's really still very young if we haven't nailed something so\nbasic. It's exciting to think there are still discoveries to make\nabout discovery. If that's the sort of thing you're interested in.\n\n\n\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] There are other types of collecting that illustrate this point\nbetter than bus tickets, but they're also more popular. It seemed\njust as well to use an inferior example rather than offend more\npeople by telling them their hobby doesn't matter.\n\n[2] I worried a little about using the word \"disinterested,\" since\nsome people mistakenly believe it means not interested. But anyone\nwho expects to be a genius will have to know the meaning of such a\nbasic word, so I figure they may as well start now.\n\n[3] Think how often genius must have been nipped in the bud by\npeople being told, or telling themselves, to stop messing about and\nbe responsible. Ramanujan's mother was a huge enabler. Imagine if\nshe hadn't been. Imagine if his parents had made him go out and get\na job instead of sitting around at home doing math.\n\nOn the other hand, anyone quoting the preceding paragraph to justify\nnot getting a job is probably mistaken.\n\n[4] 1709 Darwin is to time what the Milanese Leonardo is to space.\n\n[5] \"An infinite capacity for taking pains\" is a paraphrase of what\nCarlyle wrote. What he wrote, in his History of Frederick the Great,\nwas \"... it is the fruit of 'genius' (which means transcendent\ncapacity of taking trouble, first of all)....\" Since the paraphrase\nseems the name of the idea at this point, I kept it.\n\nCarlyle's History was published in 1858. In 1785 H\u00e9rault de S\u00e9chelles\nquoted Buffon as saying \"Le g\u00e9nie n'est qu'une plus grande aptitude\n\u00e0 la patience.\" (Genius is only a greater aptitude for patience.)\n\n[6] Trollope was establishing the system of postal routes. He himself\nsensed the obsessiveness with which he pursued this goal.\n\n   It is amusing to watch how a passion will grow upon a man. During\n   those two years it was the ambition of my life to cover the\n   country with rural letter-carriers.\n\nEven Newton occasionally sensed the degree of his obsessiveness.\nAfter computing pi to 15 digits, he wrote in a letter to a friend:\n\n   I am ashamed to tell you to how many figures I carried these\n   computations, having no other business at the time.\n\nIncidentally, Ramanujan was also a compulsive calculator. As Kanigel\nwrites in his excellent biography:\n\n  One Ramanujan scholar, B. M. Wilson, later told how Ramanujan's\n  research into number theory was often \"preceded by a table of\n  numerical results, carried usually to a length from which most\n  of us would shrink.\"\n\n[7] Working to understand the natural world counts as creating\nrather than consuming.\n\nNewton tripped over this distinction when he chose\nto work on theology. His beliefs did not allow him to see it, but\nchasing down paradoxes in nature is fruitful in a way that chasing\ndown paradoxes in sacred texts is not.\n\n[8] How much of people's propensity to become interested in a topic\nis inborn?  My experience so far suggests the answer is: most of\nit. Different kids get interested in different things, and it's\nhard to make a child interested in something they wouldn't otherwise\nbe. Not in a way that sticks.  The most you can do on behalf of a\ntopic is to make sure it gets a fair showing \u0097 to make it clear to\nthem, for example, that there's more to math than the dull drills\nthey do in school. After that it's up to the child.\n\n\n\nThanks to Marc Andreessen, Trevor Blackwell, Patrick Collison, Kevin\nLacker, Jessica Livingston, Jackie McDonough, Robert Morris, Lisa\nRandall, Zak Stone, and my 7 year old for reading drafts of this.\n\n", "September 2017\n\nThe most valuable insights are both general and surprising. \nF\u00a0=\u00a0ma for example. But general and surprising is a hard\ncombination to achieve. That territory tends to be picked\nclean, precisely because those insights are so valuable.\n\nOrdinarily, the best that people can do is one without the\nother: either surprising without being general (e.g.\ngossip), or general without being surprising (e.g.\nplatitudes).\n\nWhere things get interesting is the moderately valuable\ninsights.  You get those from small additions of whichever\nquality was missing.  The more common case is a small\naddition of generality: a piece of gossip that's more than\njust gossip, because it teaches something interesting about\nthe world. But another less common approach is to focus on\nthe most general ideas and see if you can find something new\nto say about them. Because these start out so general, you\nonly need a small delta of novelty to produce a useful\ninsight.\n\nA small delta of novelty is all you'll be able to get most\nof the time. Which means if you take this route, your ideas\nwill seem a lot like ones that already exist. Sometimes\nyou'll find you've merely rediscovered an idea that did\nalready exist.  But don't be discouraged.  Remember the huge\nmultiplier that kicks in when you do manage to think of\nsomething even a little new.\n\nCorollary: the more general the ideas you're talking about,\nthe less you should worry about repeating yourself.  If you\nwrite enough, it's inevitable you will.  Your brain is much\nthe same from year to year and so are the stimuli that hit\nit. I feel slightly bad when I find I've said something\nclose to what I've said before, as if I were plagiarizing\nmyself. But rationally one shouldn't.  You won't say\nsomething exactly the same way the second time, and that\nvariation increases the chance you'll get that tiny but\ncritical delta of novelty.\n\nAnd of course, ideas beget ideas.  (That sounds \nfamiliar.)\nAn idea with a small amount of novelty could lead to one\nwith more. But only if you keep going. So it's doubly\nimportant not to let yourself be discouraged by people who\nsay there's not much new about something you've discovered.\n\"Not much new\" is a real achievement when you're talking\nabout the most general ideas. \n\nIt's not true that there's nothing new under the sun.  There\nare some domains where there's almost nothing new.  But\nthere's a big difference between nothing and almost nothing,\nwhen it's multiplied by the area under the sun.\n\n\n\n\n\n\nThanks to Sam Altman, Patrick Collison, and Jessica\nLivingston for reading drafts of this.\n\n", "January 2017\n\nPeople who are powerful but uncharismatic will tend to be disliked.\nTheir power makes them a target for criticism that they don't have\nthe charisma to disarm. That was Hillary Clinton's problem. It also\ntends to be a problem for any CEO who is more of a builder than a\nschmoozer. And yet the builder-type CEO is (like Hillary) probably\nthe best person for the job.\n\nI don't think there is any solution to this problem. It's human\nnature. The best we can do is to recognize that it's happening, and\nto understand that being a magnet for criticism is sometimes a sign\nnot that someone is the wrong person for a job, but that they're\nthe right one.\n\n", "January 2017\n\nBecause biographies of famous scientists tend to \nedit out their mistakes, we underestimate the \ndegree of risk they were willing to take.\nAnd because anything a famous scientist did that\nwasn't a mistake has probably now become the\nconventional wisdom, those choices don't\nseem risky either.\n\nBiographies of Newton, for example, understandably focus\nmore on physics than alchemy or theology.\nThe impression we get is that his unerring judgment\nled him straight to truths no one else had noticed.\nHow to explain all the time he spent on alchemy\nand theology?  Well, smart people are often kind of\ncrazy.\n\nBut maybe there is a simpler explanation. Maybe\nthe smartness and the craziness were not as separate\nas we think. Physics seems to us a promising thing\nto work on, and alchemy and theology obvious wastes\nof time. But that's because we know how things\nturned out. In Newton's day the three problems \nseemed roughly equally promising. No one knew yet\nwhat the payoff would be for inventing what we\nnow call physics; if they had, more people would \nhave been working on it. And alchemy and theology\nwere still then in the category Marc Andreessen would \ndescribe as \"huge, if true.\"\n\nNewton made three bets. One of them worked. But \nthey were all risky.\n\n\n\n\n\n", "April 2016\n\n(This is a talk I gave at an event called Opt412 in Pittsburgh.\nMuch of it will apply to other towns.  But not all, because\nas I say in the talk, Pittsburgh has some important advantages over\nmost would-be startup hubs.)\n\nWhat would it take to make Pittsburgh into a startup hub, like\nSilicon Valley?  I understand Pittsburgh pretty well,\nbecause I grew up here, in Monroeville. And I understand Silicon\nValley pretty well because that's where I live now.  Could you get\nthat kind of startup ecosystem going here?\n\nWhen I agreed to speak here, I didn't think I'd be able to give a\nvery optimistic talk.  I thought I'd be talking about what Pittsburgh\ncould do to become a startup hub, very much in the subjunctive.\nInstead I'm going to talk about what Pittsburgh can do.\n\nWhat changed my mind was an article I read in, of all places, the New\nYork Times food section.  The title was \"Pittsburgh's Youth-Driven\nFood Boom.\"  To most people that might not even sound interesting,\nlet alone something related to startups.  But it was electrifying\nto me to read that title.  I don't think I could pick a more promising\none if I tried.  And when I read the article I got even more excited.\nIt said \"people ages 25 to 29 now make up 7.6 percent of all\nresidents, up from 7 percent about a decade ago.\"  Wow, I thought,\nPittsburgh could be the next Portland.  It could become the cool\nplace all the people in their twenties want to go live.\n\nWhen I got here a couple days ago, I could feel the difference.  I\nlived here from 1968 to 1984.  I didn't realize it at the time, but\nduring that whole period the city was in free fall. On top of the\nflight to the suburbs that happened everywhere, the steel and nuclear\nbusinesses were both dying. Boy are things different now.  It's not\njust that downtown seems a lot more prosperous. There is an energy\nhere that was not here when I was a kid.\n\nWhen I was a kid, this was a place young people left. Now it's a\nplace that attracts them.\n\nWhat does that have to do with startups?  Startups are made\nof people, and the average age of the people in a typical startup\nis right in that 25 to 29 bracket.\n\nI've seen how powerful it is for a city to have those people.  Five\nyears ago they shifted the center of gravity of Silicon Valley from\nthe peninsula to San Francisco.  Google and Facebook are on the\npeninsula, but the next generation of big winners are all in SF.\nThe reason the center of gravity shifted was the talent war, for\nprogrammers especially.  Most 25 to 29 year olds want to live in\nthe city, not down in the boring suburbs.  So whether they like it\nor not, founders know they have to be in the city.  I know multiple\nfounders who would have preferred to live down in the Valley proper,\nbut who made themselves move to SF because they knew otherwise\nthey'd lose the talent war.\n\nSo being a magnet for people in their twenties is a very promising\nthing to be.  It's hard to imagine a place becoming a startup hub\nwithout also being that.  When I read that statistic about the\nincreasing percentage of 25 to 29 year olds, I had exactly the same\nfeeling of excitement I get when I see a startup's graphs start to\ncreep upward off the x axis.\n\nNationally the percentage of 25 to 29 year olds is 6.8%.  That means\nyou're .8% ahead.  The population is 306,000, so we're talking about\na surplus of about 2500 people.  That's the population of a small\ntown, and that's just the surplus. So you have a toehold.  Now you\njust have to expand it.\n\nAnd though \"youth-driven food boom\" may sound frivolous, it is\nanything but.  Restaurants and cafes are a big part of the personality\nof a city.  Imagine walking down a street in Paris. What are you\nwalking past?  Little restaurants and cafes.  Imagine driving through\nsome depressing random exurb.  What are you driving past?  Starbucks\nand McDonalds and Pizza Hut.   As Gertrude Stein said, there is no\nthere there. You could be anywhere.\n\nThese independent restaurants and cafes are not just feeding people.\nThey're making there be a there here.\n\nSo here is my first concrete recommendation for turning Pittsburgh\ninto the next Silicon Valley: do everything you can to encourage\nthis youth-driven food boom.  What could the city do?  Treat the\npeople starting these little restaurants and cafes as your users,\nand go ask them what they want.  I can guess at least one thing\nthey might want: a fast permit process.  San Francisco has left you\na huge amount of room to beat them in that department.\n\nI know restaurants aren't the prime mover though.  The prime mover,\nas the Times article said, is cheap housing.  That's a big advantage.\nBut that phrase \"cheap housing\" is a bit misleading.  There are\nplenty of places that are cheaper.  What's special about Pittsburgh\nis not that it's cheap, but that it's a cheap place you'd actually\nwant to live.\n\nPart of that is the buildings themselves. I realized a long time\nago, back when I was a poor twenty-something myself, that the best\ndeals were places that had once been rich, and then became poor.\nIf a place has always been rich, it's nice but too expensive.  If\na place has always been poor, it's cheap but grim.  But if a place\nwas once rich and then got poor, you can find palaces for cheap.\nAnd that's what's bringing people here.  When Pittsburgh was rich,\na hundred years ago, the people who lived here built big solid\nbuildings.  Not always in the best taste, but definitely solid.  So\nhere is another piece of advice for becoming a startup hub: don't\ndestroy the buildings that are bringing people here.  When cities\nare on the way back up, like Pittsburgh is now, developers race to\ntear down the old buildings.  Don't let that happen.  Focus on\nhistoric preservation.  Big real estate development projects are\nnot what's bringing the twenty-somethings here.  They're the opposite\nof the new restaurants and cafes; they subtract personality from\nthe city.\n\nThe empirical evidence suggests you cannot be too strict about\nhistoric preservation.  The tougher cities are about it, the better\nthey seem to do.\n\nBut the appeal of Pittsburgh is not just the buildings themselves.\nIt's the neighborhoods they're in. Like San Francisco and New York,\nPittsburgh is fortunate in being a pre-car city.  It's not too\nspread out. Because those 25 to 29 year olds do not like driving.\nThey prefer walking, or bicycling, or taking public transport.  If\nyou've been to San Francisco recently you can't help noticing the\nhuge number of bicyclists.  And this is not just a fad that the\ntwenty-somethings have adopted.  In this respect they have discovered\na better way to live.  The beards will go, but not the bikes.  Cities\nwhere you can get around without driving are just better period.\nSo I would suggest you do everything you can to capitalize on this.\nAs with historic preservation, it seems impossible to go too far.\n\nWhy not make Pittsburgh the most bicycle and pedestrian friendly\ncity in the country?  See if you can go so far that you make San\nFrancisco seem backward by comparison.  If you do, it's very unlikely\nyou'll regret it.  The city will seem like a paradise to the young\npeople you want to attract.  If they do leave to get jobs elsewhere,\nit will be with regret at leaving behind such a place.  And what's\nthe downside?  Can you imagine a headline \"City ruined by becoming\ntoo bicycle-friendly?\"  It just doesn't happen.\n\nSo suppose cool old neighborhoods and cool little restaurants make\nthis the next Portland.  Will that be enough?  It will put you in\na way better position than Portland itself, because Pittsburgh has\nsomething Portland lacks: a first-rate research university.  CMU\nplus little cafes means you have more than hipsters drinking lattes.\nIt means you have hipsters drinking lattes while talking about\ndistributed systems.  Now you're getting really close to San\nFrancisco.\n\nIn fact you're better off than San Francisco in one way, because\nCMU is downtown, but Stanford and Berkeley are out in the suburbs.\n\nWhat can CMU do to help Pittsburgh become a startup hub?  Be an\neven better research university.  CMU is one of the best universities\nin the world, but imagine what things would be like if it were the\nvery best, and everyone knew it.  There are a lot of ambitious\npeople who must go to the best place, wherever it is.  If CMU were it, they would all come here. There would be\nkids in Kazakhstan dreaming of one day living in Pittsburgh.\n\nBeing that kind of talent magnet is the most important contribution\nuniversities can make toward making their city a startup hub.  In\nfact it is practically the only contribution they can make.\n\nBut wait, shouldn't universities be setting up programs with words\nlike \"innovation\" and \"entrepreneurship\" in their names?  No, they\nshould not.  These kind of things almost always turn out to be\ndisappointments.  They're pursuing the wrong targets.  The way to\nget innovation is not to aim for innovation but to aim for something\nmore specific, like better batteries or better 3D printing.  And\nthe way to learn about entrepreneurship is to do it, which you \ncan't\nin school.\n\nI know it may disappoint some administrators to hear that the best\nthing a university can do to encourage startups is to be a great\nuniversity.  It's like telling people who want to lose weight that\nthe way to do it is to eat less.\n\nBut if you want to know where startups come from, look at the\nempirical evidence.  Look at the histories of the most successful\nstartups, and you'll find they grow organically out of a couple of\nfounders building something that starts as an interesting side\nproject.  Universities are great at bringing together founders, but\nbeyond that the best thing they can do is get out of the way.  For\nexample, by not claiming ownership of \"intellectual property\" that\nstudents and faculty develop, and by having liberal rules about\ndeferred admission and leaves of absence.\n\nIn fact, one of the most effective things a university could do to\nencourage startups is an elaborate form of getting out of the way\ninvented by Harvard.  Harvard used to have exams for the fall\nsemester after Christmas.  At the beginning of January they had\nsomething called \"Reading Period\" when you were supposed to be\nstudying for exams.  And Microsoft and Facebook have something in\ncommon that few people realize: they were both started during Reading\nPeriod.  It's the perfect situation for producing the sort of side\nprojects that turn into startups. The students are all on campus,\nbut they don't have to do anything because they're supposed to be\nstudying for exams.\n\nHarvard may have closed this window, because a few years ago they\nmoved exams before Christmas and shortened reading period from 11\ndays to 7.  But if a university really wanted to help its students\nstart startups, the empirical evidence, weighted by market cap,\nsuggests the best thing they can do is literally nothing.\n\nThe culture of Pittsburgh is another of its strengths.  It seems\nlike a city has to be socially liberal to be a startup hub,\nand it's pretty clear why. A city has to tolerate strangeness to\nbe a home for startups, because startups are so strange.  And you\ncan't choose to allow just the forms of strangeness that will turn\ninto big startups, because they're all intermingled.  You have to\ntolerate all strangeness.\n\nThat immediately rules out big chunks of the US.  I'm optimistic\nit doesn't rule out Pittsburgh.  One of the things I remember from\ngrowing up here, though I didn't realize at the time that there was\nanything unusual about it, is how well people got along.  I'm still\nnot sure why.  Maybe one reason was that everyone felt like an\nimmigrant.  When I was a kid in Monroeville, people didn't call\nthemselves American.  They called themselves Italian or Serbian or\nUkranian.  Just imagine what it must have been like here a hundred\nyears ago, when people were pouring in from twenty different\ncountries.  Tolerance was the only option.\n\nWhat I remember about the culture of Pittsburgh is that it was\nboth tolerant and pragmatic.  That's how I'd describe the culture\nof Silicon Valley too.  And it's not a coincidence, because Pittsburgh\nwas the Silicon Valley of its time.  This was a city where people\nbuilt new things.  And while the things people build have changed,\nthe spirit you need to do that kind of work is the same.\n\nSo although an influx of latte-swilling hipsters may be annoying\nin some ways, I would go out of my way to encourage them.  And more\ngenerally to tolerate strangeness, even unto the degree wacko\nCalifornians do.  For Pittsburgh that is a conservative choice:\nit's a return to the city's roots.\n\nUnfortunately I saved the toughest part for last. There is one more\nthing you need to be a startup hub, and Pittsburgh hasn't got it:\ninvestors.  Silicon Valley has a big investor community because\nit's had 50 years to grow one.  New York has a big investor community\nbecause it's full of people who like money a lot and are quick to\nnotice new ways to get it.  But Pittsburgh has neither of these.\nAnd the cheap housing that draws other people here has no effect\non investors.\n\nIf an investor community grows up here, it will happen the same way\nit did in Silicon Valley: slowly and organically.  So I would not\nbet on having a big investor community in the short term.  But\nfortunately there are three trends that make that less necessary\nthan it used to be.  One is that startups are increasingly cheap\nto start, so you just don't need as much outside money as you used\nto.  The second is that thanks to things like Kickstarter, a startup\ncan get to revenue faster.  You can put something on Kickstarter\nfrom anywhere.  The third is programs like Y Combinator.  A startup\nfrom anywhere in the world can go to YC for 3 months, pick up\nfunding, and then return home if they want.\n\nMy advice is to make Pittsburgh a great place for startups, and\ngradually more of them will stick.  Some of those will succeed;\nsome of their founders will become investors; and still more startups\nwill stick.\n\nThis is not a fast path to becoming a startup hub. But it is at\nleast a path, which is something few other cities have.  And it's\nnot as if you have to make painful sacrifices in the meantime.\nThink about what I've suggested you should do.  Encourage local\nrestaurants, save old buildings, take advantage of density, make\nCMU the best, promote tolerance.  These are the things that make\nPittsburgh good to live in now.  All I'm saying is that you should\ndo even more of them.\n\nAnd that's an encouraging thought.  If Pittsburgh's path to becoming\na startup hub is to be even more itself, then it has a good chance\nof succeeding.  In fact it probably has the best chance of any city\nits size.  It will take some effort, and a lot of time, but if any\ncity can do it, Pittsburgh can.\n\n\n\n\n\n\n\nThanks to Charlie Cheever and Jessica Livingston for reading\ndrafts of this, and to Meg Cheever for organizing Opt412 and inviting\nme to speak.\n\n", "January 2016\n\nLife is short, as everyone knows. When I was a kid I used to wonder\nabout this. Is life actually short, or are we really complaining\nabout its finiteness?  Would we be just as likely to feel life was\nshort if we lived 10 times as long?\n\nSince there didn't seem any way to answer this question, I stopped\nwondering about it.  Then I had kids.  That gave me a way to answer\nthe question, and the answer is that life actually is short.\n\nHaving kids showed me how to convert a continuous quantity, time,\ninto discrete quantities. You only get 52 weekends with your 2 year\nold.  If Christmas-as-magic lasts from say ages 3 to 10, you only\nget to watch your child experience it 8 times.  And while it's\nimpossible to say what is a lot or a little of a continuous quantity\nlike time, 8 is not a lot of something.  If you had a handful of 8\npeanuts, or a shelf of 8 books to choose from, the quantity would\ndefinitely seem limited, no matter what your lifespan was.\n\nOk, so life actually is short.  Does it make any difference to know\nthat?\n\nIt has for me.  It means arguments of the form \"Life is too short\nfor x\" have great force.  It's not just a figure of speech to say\nthat life is too short for something.  It's not just a synonym for\nannoying.  If you find yourself thinking that life is too short for\nsomething, you should try to eliminate it if you can.\n\nWhen I ask myself what I've found life is too short for, the word\nthat pops into my head is \"bullshit.\" I realize that answer is\nsomewhat tautological.  It's almost the definition of bullshit that\nit's the stuff that life is too short for.  And yet bullshit does\nhave a distinctive character.  There's something fake about it.\nIt's the junk food of experience.\n[1]\n\nIf you ask yourself what you spend your time on that's bullshit,\nyou probably already know the answer.  Unnecessary meetings, pointless\ndisputes, bureaucracy, posturing, dealing with other people's\nmistakes, traffic jams, addictive but unrewarding pastimes.\n\nThere are two ways this kind of thing gets into your life: it's\neither forced on you, or it tricks you.  To some extent you have to\nput up with the bullshit forced on you by circumstances.  You need\nto make money, and making money consists mostly of errands.  Indeed,\nthe law of supply and demand ensures that: the more rewarding some\nkind of work is, the cheaper people will do it.  It may be that\nless bullshit is forced on you than you think, though.  There has\nalways been a stream of people who opt out of the default grind and\ngo live somewhere where opportunities are fewer in the conventional\nsense, but life feels more authentic.  This could become more common.\n\nYou can do it on a smaller scale without moving.  The amount of\ntime you have to spend on bullshit varies between employers.  Most\nlarge organizations (and many small ones) are steeped in it.  But\nif you consciously prioritize bullshit avoidance over other factors\nlike money and prestige, you can probably find employers that will\nwaste less of your time.\n\nIf you're a freelancer or a small company, you can do this at the\nlevel of individual customers.  If you fire or avoid toxic customers,\nyou can decrease the amount of bullshit in your life by more than\nyou decrease your income.\n\nBut while some amount of bullshit is inevitably forced on you, the\nbullshit that sneaks into your life by tricking you is no one's\nfault but your own.  And yet the bullshit you choose may be harder\nto eliminate than the bullshit that's forced on you.  Things that\nlure you into wasting your time have to be really good at\ntricking you.  An example that will be familiar to a lot of people\nis arguing online.  When someone\ncontradicts you, they're in a sense attacking you. Sometimes pretty\novertly.  Your instinct when attacked is to defend yourself.  But\nlike a lot of instincts, this one wasn't designed for the world we\nnow live in.  Counterintuitive as it feels, it's better most of\nthe time not to defend yourself.  Otherwise these people are literally\ntaking your life.\n[2]\n\nArguing online is only incidentally addictive. There are more\ndangerous things than that. As I've written before, one byproduct\nof technical progress is that things we like tend to become more\naddictive.  Which means we will increasingly have to make a conscious\neffort to avoid addictions \u0097 to stand outside ourselves and ask \"is\nthis how I want to be spending my time?\"\n\nAs well as avoiding bullshit, one should actively seek out things\nthat matter.  But different things matter to different people, and\nmost have to learn what matters to them.  A few are lucky and realize\nearly on that they love math or taking care of animals or writing,\nand then figure out a way to spend a lot of time doing it.  But\nmost people start out with a life that's a mix of things that\nmatter and things that don't, and only gradually learn to distinguish\nbetween them.\n\nFor the young especially, much of this confusion is induced by the\nartificial situations they find themselves in. In middle school and\nhigh school, what the other kids think of you seems the most important\nthing in the world.  But when you ask adults what they got wrong\nat that age, nearly all say they cared too much what other kids\nthought of them.\n\nOne heuristic for distinguishing stuff that matters is to ask\nyourself whether you'll care about it in the future.  Fake stuff\nthat matters usually has a sharp peak of seeming to matter.  That's\nhow it tricks you.  The area under the curve is small, but its shape\njabs into your consciousness like a pin.\n\nThe things that matter aren't necessarily the ones people would\ncall \"important.\"  Having coffee with a friend matters.  You won't\nfeel later like that was a waste of time.\n\nOne great thing about having small children is that they make you\nspend time on things that matter: them. They grab your sleeve as\nyou're staring at your phone and say \"will you play with me?\" And\nodds are that is in fact the bullshit-minimizing option.\n\nIf life is short, we should expect its shortness to take us by\nsurprise. And that is just what tends to happen.  You take things\nfor granted, and then they're gone.  You think you can always write\nthat book, or climb that mountain, or whatever, and then you realize\nthe window has closed.  The saddest windows close when other people\ndie. Their lives are short too.  After my mother died, I wished I'd\nspent more time with her.  I lived as if she'd always be there.\nAnd in her typical quiet way she encouraged that illusion.  But an\nillusion it was. I think a lot of people make the same mistake I\ndid.\n\nThe usual way to avoid being taken by surprise by something is to\nbe consciously aware of it.  Back when life was more precarious,\npeople used to be aware of death to a degree that would now seem a\nbit morbid.  I'm not sure why, but it doesn't seem the right answer\nto be constantly reminding oneself of the grim reaper hovering at\neveryone's shoulder.  Perhaps a better solution is to look at the\nproblem from the other end. Cultivate a habit of impatience about\nthe things you most want to do. Don't wait before climbing that\nmountain or writing that book or visiting your mother.  You don't\nneed to be constantly reminding yourself why you shouldn't wait.\nJust don't wait.\n\nI can think of two more things one does when one doesn't have much\nof something: try to get more of it, and savor what one has.  Both\nmake sense here.\n\nHow you live affects how long you live.  Most people could do better.\nMe among them.\n\nBut you can probably get even more effect by paying closer attention\nto the time you have.  It's easy to let the days rush by.  The\n\"flow\" that imaginative people love so much has a darker cousin\nthat prevents you from pausing to savor life amid the daily slurry\nof errands and alarms.  One of the most striking things I've read\nwas not in a book, but the title of one: James Salter's Burning\nthe Days.\n\nIt is possible to slow time somewhat. I've gotten better at it.\nKids help.  When you have small children, there are a lot of moments\nso perfect that you can't help noticing.\n\nIt does help too to feel that you've squeezed everything out of\nsome experience.  The reason I'm sad about my mother is not just\nthat I miss her but that I think of all the things we could have\ndone that we didn't.  My oldest son will be 7 soon.  And while I\nmiss the 3 year old version of him, I at least don't have any regrets\nover what might have been.  We had the best time a daddy and a 3\nyear old ever had.\n\nRelentlessly prune bullshit, don't wait to do things that matter,\nand savor the time you have.  That's what you do when life is short.\n\n\n\n\n\n\n\nNotes\n\n[1]\nAt first I didn't like it that the word that came to mind was\none that had other meanings.  But then I realized the other meanings\nare fairly closely related.  Bullshit in the sense of things you\nwaste your time on is a lot like intellectual bullshit.\n\n[2]\nI chose this example deliberately as a note to self.  I get\nattacked a lot online.  People tell the craziest lies about me.\nAnd I have so far done a pretty mediocre job of suppressing the\nnatural human inclination to say \"Hey, that's not true!\"\n\nThanks to Jessica Livingston and Geoff Ralston for reading drafts\nof this.\n\n", "\nJanuary 2016\n\nSince the 1970s, economic inequality in the US has increased\ndramatically. And in particular, the rich have gotten a lot richer.\nNearly everyone who writes about the topic says that economic inequality\nshould be decreased.\n\nI'm interested in this question because I was one of the founders of\na company called Y Combinator that helps people start startups.\nAlmost by definition, if a startup succeeds, its founders become\nrich. Which means by helping startup founders I've been helping to\nincrease economic inequality.  If economic inequality should be \ndecreased, I shouldn't be helping founders. No one should\nbe.\n\nBut that doesn't sound right. What's going on here? What's going\non is that while economic inequality is a single measure (or more\nprecisely, two: variation in income, and variation in wealth), it\nhas multiple causes. Many of these causes are bad, like tax loopholes\nand drug addiction. But some are good, like Larry Page and\nSergey Brin starting the company you use to find things online.\n\nIf you want to understand economic inequality \u2014 and more importantly,\nif you actually want to fix the bad aspects of it \u2014 you have to\ntease apart the components.  And yet the trend in nearly everything\nwritten about the subject is to do the opposite: to squash together\nall the aspects of economic inequality as if it were a single\nphenomenon.\n\nSometimes this is done for ideological reasons.  Sometimes it's\nbecause the writer only has very high-level data and so draws\nconclusions from that, like the proverbial drunk who looks for his\nkeys under the lamppost, instead of where he dropped them, because the\nlight is better there.  Sometimes it's because the writer doesn't\nunderstand critical aspects of inequality, like the role of technology\nin wealth creation.  Much of the time, perhaps most of the time,\nwriting about economic inequality combines all three.\n\n___\n\nThe most common mistake people make about economic inequality is\nto treat it as a single phenomenon.  The most naive version of which\nis the one based on the pie fallacy: that the rich get rich by\ntaking money from the poor.\n\nUsually this is an assumption people start from rather than a\nconclusion they arrive at by examining the evidence.  Sometimes the\npie fallacy is stated explicitly:\n\n  ...those at the top are grabbing an increasing fraction of the\n  nation's income \u2014 so much of a larger share that what's left over\n  for the rest is diminished....\n[1]\n\nOther times it's more unconscious. But the unconscious form is very\nwidespread.  I think because we grow up in a world where the pie\nfallacy is actually true.  To kids, wealth is a fixed pie\nthat's shared out, and if one person gets more, it's at the expense\nof another.  It takes a conscious effort to remind oneself that the\nreal world doesn't work that way.\n\nIn the real world you can create wealth as well as taking it from\nothers.  A woodworker creates wealth.  He makes a chair, and you\nwillingly give him money in return for it.  A high-frequency trader\ndoes not.  He makes a dollar only when someone on the other end of\na trade loses a dollar.\n\nIf the rich people in a society got that way by taking wealth from\nthe poor, then you have the degenerate case of economic inequality,\nwhere the cause of poverty is the same as the cause of wealth.  But\ninstances of inequality don't have to be instances of the degenerate\ncase.  If one woodworker makes 5 chairs and another makes none, the\nsecond woodworker will have less money, but not because anyone took\nanything from him.\n\nEven people sophisticated enough to know about the pie fallacy are\nled toward it by the custom of describing economic inequality as a\nratio of one quantile's income or wealth to another's.  It's so\neasy to slip from talking about income shifting from one quantile\nto another, as a figure of speech, into believing that is literally\nwhat's happening.\n\nExcept in the degenerate case, economic inequality can't be described\nby a ratio or even a curve.  In the general case it consists of\nmultiple ways people become poor, and multiple ways people become\nrich.  Which means to understand economic inequality in a country,\nyou have to go find individual people who are poor or rich and\nfigure out why.\n[2]\n\nIf you want to understand change in economic inequality, you\nshould ask what those people would have done when it was different.\nThis is one way I know the rich aren't all getting richer simply\nfrom some new system for transferring wealth to them from\neveryone else.  When you use the would-have method with startup\nfounders, you find what most would have done \nback in 1960, when\neconomic inequality was lower, was to join big companies or become\nprofessors.  Before Mark Zuckerberg started Facebook, his default\nexpectation was that he'd end up working at Microsoft.  The reason\nhe and most other startup founders are richer than they would have\nbeen in the mid 20th century is not because of some right turn the\ncountry took during the Reagan administration, but because progress\nin technology has made it much easier to start a new company that\ngrows fast.\n\nTraditional economists seem strangely averse to studying individual\nhumans. It seems to be a rule with them that everything has to start\nwith statistics.  So they give you very precise numbers about\nvariation in wealth and income, then follow it with the most naive\nspeculation about the underlying causes.\n\nBut while there are a lot of people who get rich through rent-seeking\nof various forms, and a lot who get rich by playing zero-sum games, \nthere are also a significant number\nwho get rich by creating wealth.  And creating wealth, as a source\nof economic inequality, is different from taking it \u2014 not just\nmorally, but also practically, in the sense that it is harder to\neradicate.  One reason is that variation in productivity is\naccelerating.  The rate at which individuals can create wealth\ndepends on the technology available to them, and that grows\nexponentially. The other reason creating wealth is such a tenacious\nsource of inequality is that it can expand to accommodate a lot of\npeople.\n\n___\n\nI'm all for shutting down the crooked ways to get rich.  But that\nwon't eliminate great variations in wealth, because as long as you leave\nopen the option of getting rich by creating wealth, people who want\nto get rich will do that instead.\n\nMost people who get rich tend to be fairly driven. Whatever their\nother flaws, laziness is usually not one of them.  Suppose new\npolicies make it hard to make a fortune in finance. Does it seem\nplausible that the people who currently go into finance to make\ntheir fortunes will continue to do so, but be content to work for\nordinary salaries? The reason they go into finance is not because\nthey love finance but because they want to get rich. If the only\nway left to get rich is to start startups, they'll start startups.\nThey'll do well at it too, because determination is the main factor\nin the success of a startup. \n[3]\nAnd while it would probably be\na good thing for the world if people who wanted to get rich switched\nfrom playing zero-sum games to creating wealth, that would not only\nnot eliminate great variations in wealth, but might even \nexacerbate them.\nIn a zero-sum game there is at least a limit to the upside.  Plus\na lot of the new startups would create new technology that further\naccelerated variation in productivity.\n\nVariation in productivity is far from the only source of economic\ninequality, but it is the irreducible core of it, in the sense that\nyou'll have that left when you eliminate all other sources. And if\nyou do, that core will be big, because it will have expanded to\ninclude the efforts of all the refugees.  Plus it will have a large\nBaumol penumbra around it: anyone who could get rich by creating\nwealth on their own account will have to be paid enough to prevent\nthem from doing it.\n\nYou can't prevent great variations in wealth without preventing people\nfrom getting rich, and you can't do that without preventing them\nfrom starting startups.\n\nSo let's be clear about that. Eliminating great variations in wealth would\nmean eliminating startups.  And that doesn't seem a wise move.\nEspecially since it would only mean you eliminated\nstartups in your own country.  Ambitious people already move halfway\naround the world to further their careers, and startups can operate\nfrom anywhere nowadays.  So if you made it impossible to get rich\nby creating wealth in your country, people who wanted to do that\nwould just leave and do it somewhere else. Which would\ncertainly get you a lower Gini coefficient, along with a lesson in\nbeing careful what you ask for. \n[4]\n\nI think rising economic inequality is the inevitable fate of countries\nthat don't choose something worse. We had a 40 year stretch in the\nmiddle of the 20th century that convinced some people otherwise.\nBut as I explained in The Refragmentation,\nthat was an anomaly \u2014 a\nunique combination of circumstances that compressed American society\nnot just economically but culturally too.\n[5]\n\nAnd while some of the growth in economic inequality we've seen since\nthen has been due to bad behavior of various kinds, there has\nsimultaneously been a huge increase in individuals' ability to\ncreate wealth.  Startups are almost entirely a product of this\nperiod. And even within the startup world, there has been a qualitative\nchange in the last 10 years.  Technology has decreased the cost of\nstarting a startup so much that founders now have the upper hand\nover investors.  Founders get less diluted, and it is now common\nfor them to retain \nboard control as well.  Both further increase\neconomic inequality, the former because founders own more stock,\nand the latter because, as investors have learned, founders tend\nto be better at running their companies than investors.\n\nWhile the surface manifestations change, the underlying forces are\nvery, very old.  The acceleration of productivity we see in Silicon\nValley has been happening for thousands of years.  If you look at\nthe history of stone tools, technology was already accelerating in\nthe Mesolithic.  The acceleration would have been too slow to\nperceive in one lifetime.  Such is the nature of the leftmost part\nof an exponential curve.  But it was the same curve.\n\nYou do not want to design your society in a way that's incompatible\nwith this curve. The evolution of technology is one of the most\npowerful forces in history.\n\nLouis Brandeis said \"We may have democracy, or we may have wealth\nconcentrated in the hands of a few, but we can't have both.\" That\nsounds plausible.  But if I have to choose between ignoring him and\nignoring an exponential curve that has been operating for thousands\nof years, I'll bet on the curve.  Ignoring any trend that has been\noperating for thousands of years is dangerous.  But exponential\ngrowth, especially, tends to bite you.\n\n___\n\nIf accelerating variation in productivity is always going to produce\nsome baseline growth in economic inequality, it would be a good\nidea to spend some time thinking about that future.  Can you have\na healthy society with great variation in wealth?  What would it\nlook like?\n\nNotice how novel it feels to think about that.  The public conversation\nso far has been exclusively about the need to decrease economic\ninequality.  We've barely given a thought to how to live with it.\n\nI'm hopeful we'll be able to.  Brandeis was a product of the Gilded\nAge, and things have changed since then. It's harder to hide\nwrongdoing now.  And to get rich now you don't have to buy politicians\nthe way railroad or oil magnates did. \n[6]\nThe great concentrations\nof wealth I see around me in Silicon Valley don't seem to be\ndestroying democracy.\n\nThere are lots of things wrong with the US that have economic\ninequality as a symptom. We should fix those things.  In the process\nwe may decrease economic inequality. But we can't start from the\nsymptom and hope to fix the underlying causes.\n[7]\n\nThe most obvious is poverty. I'm sure most of those who want to\ndecrease economic inequality want to do it mainly to help the poor,\nnot to hurt the rich. \n[8]\nIndeed, a good number are merely being\nsloppy by speaking of decreasing economic inequality when what they\nmean is decreasing poverty.  But this is a situation where it would\nbe good to be precise about what we want.  Poverty and economic\ninequality are not identical.  When the city is turning off your\nwater\nbecause you can't pay the bill, it doesn't make any difference\nwhat Larry Page's net worth is compared to yours.  He might only\nbe a few times richer than you, and it would still be just as much\nof a problem that your water was getting turned off.\n\nClosely related to poverty is lack of social mobility.  I've seen\nthis myself: you don't have to grow up rich or even upper middle\nclass to get rich as a startup founder, but few successful founders\ngrew up desperately poor.  But again, the problem here is not simply\neconomic inequality.  There is an enormous difference in wealth\nbetween the household Larry Page grew up in and that of a successful\nstartup founder, but that didn't prevent him from joining their\nranks.  It's not economic inequality per se that's blocking social\nmobility, but some specific combination of things that go wrong\nwhen kids grow up sufficiently poor.\n\nOne of the most important principles in Silicon Valley is that \"you\nmake what you measure.\"  It means that if you pick some number to\nfocus on, it will tend to improve, but that you have to choose the\nright number, because only the one you choose will improve; another\nthat seems conceptually adjacent might not.  For example, if you're\na university president and you decide to focus on graduation rates,\nthen you'll improve graduation rates.  But only graduation rates,\nnot how much students learn.  Students could learn less, if to\nimprove graduation rates you made classes easier.\n\nEconomic inequality is sufficiently far from identical with the\nvarious problems that have it as a symptom that we'll probably only\nhit whichever of the two we aim at.  If we aim at economic inequality,\nwe won't fix these problems.  So I say let's aim at the problems.\n\nFor example, let's attack poverty, and if necessary damage wealth\nin the process. That's much more likely to work than attacking\nwealth in the hope that you will thereby fix poverty.\n[9]\nAnd if\nthere are people getting rich by tricking consumers or lobbying the\ngovernment for anti-competitive regulations or tax loopholes, then\nlet's stop them. Not because it's causing economic inequality, but\nbecause it's stealing.\n[10]\n\nIf all you have is statistics, it seems like that's what you need\nto fix. But behind a broad statistical measure like economic\ninequality there are some things that are good and some that are\nbad, some that are historical trends with immense momentum and\nothers that are random accidents.  If we want to fix the world\nbehind the statistics, we have to understand it, and focus our\nefforts where they'll do the most good.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nStiglitz, Joseph. The Price of Inequality. Norton, 2012. p.\n32.\n\n[2]\nParticularly since economic inequality is a matter of outliers,\nand outliers are disproportionately likely to have gotten where\nthey are by ways that have little do with the sort of things\neconomists usually think about, like wages and productivity, but\nrather by, say, ending up on the wrong side of the \"War on Drugs.\"\n\n[3]\nDetermination is the most important factor in deciding between\nsuccess and failure, which in startups tend to be sharply differentiated.\nBut it takes more than determination to create one of the hugely\nsuccessful startups.  Though most founders start out excited about\nthe idea of getting rich, purely mercenary founders will usually\ntake one of the big acquisition offers most successful startups get\non the way up.  The founders who go on to the next stage tend to\nbe driven by a sense of mission.  They have the same attachment to\ntheir companies that an artist or writer has to their work.  But\nit is very hard to predict at the outset which founders will do\nthat. It's not simply a function of their initial attitude.  Starting\na company changes people.\n\n[4]\nAfter reading a draft of this essay, Richard Florida told me\nhow he had once talked to a group of Europeans \"who said\n they wanted to make Europe more entrepreneurial and more\n  like Silicon Valley. I said by definition this will give you more\n  inequality.  They thought I was insane \u2014 they could not process\n  it.\"\n\n[5]\nEconomic inequality has been decreasing globally.  But this\nis mainly due to the erosion of the kleptocracies that formerly\ndominated all the poorer countries.  Once the playing field is\nleveler politically, we'll see economic inequality start to rise\nagain. The US is the bellwether.  The situation we face here, the\nrest of the world will sooner or later.\n\n[6]\nSome people still get rich by buying politicians.  My point is that\nit's no longer a precondition.\n\n[7]\nAs well as problems that have economic inequality as a symptom,\nthere are those that have it as a cause.  But in most if not all,\neconomic inequality is not the primary cause.  There is usually\nsome injustice that is allowing economic inequality to turn into\nother forms of inequality, and that injustice is what we need to\nfix.  For example, the police in the US treat the poor worse than\nthe rich.  But the solution is not to make people richer. It's to\nmake the police treat people more equitably.  Otherwise they'll\ncontinue to maltreat people who are weak in other ways.\n\n[8]\nSome who read this essay will say that I'm clueless or even\nbeing deliberately misleading by focusing so much on the richer end\nof economic inequality \u2014 that economic inequality is really about\npoverty. But that is exactly the point I'm making, though sloppier\nlanguage than I'd use to make it.  The real problem is poverty, not\neconomic inequality.  And if you conflate them you're aiming at the\nwrong target.\n\nOthers will say I'm clueless or being misleading by focusing on\npeople who get rich by creating wealth \u2014 that startups aren't the\nproblem, but corrupt practices in finance, healthcare, and so on.\nOnce again, that is exactly my point.  The problem is not economic\ninequality, but those specific abuses.\n\nIt's a strange task to write an essay about why something isn't the\nproblem, but that's the situation you find yourself in when so many\npeople mistakenly think it is.\n\n[9]\nParticularly since many causes of poverty are only partially\ndriven by people trying to make money from them. For example,\nAmerica's abnormally high incarceration rate is a major cause of\npoverty.  But although for-profit prison companies and \nprison guard unions both spend \na lot lobbying for harsh sentencing laws, they\nare not the original source of them.\n\n[10]\nIncidentally, tax loopholes are definitely not a product\nof some power shift due to recent increases in economic inequality.\nThe golden age of economic equality in the mid 20th century was\nalso the golden age of tax avoidance. Indeed, it was so widespread\nand so effective that I'm skeptical whether economic inequality was\nreally so low then as we think.  In a period when people are trying\nto hide wealth from the government, it will tend to be hidden from\nstatistics too. One sign of the potential magnitude of the problem\nis the discrepancy between government receipts as a percentage of\nGDP, which have remained more or less constant during the entire\nperiod from the end of World War II to the present, and tax rates,\nwhich have varied dramatically.\n\n\nThanks to Sam Altman, Tiffani Ashley Bell, Patrick Collison, Ron\nConway, Richard Florida, Ben Horowitz, Jessica Livingston, Robert\nMorris, Tim O'Reilly, Max Roser, and Alexia Tsotsis for reading\ndrafts of this.\n\nNote: This is a new version from which I\nremoved a pair of metaphors that made a lot of people mad, \nessentially by macroexpanding them.  If anyone wants to see \nthe old version, I put it here.\n\n\n\nRelated:\n\n", "January 2016\n\nOne advantage of being old is that you can see change happen in\nyour lifetime.  A lot of the change I've seen is fragmentation.  US\npolitics is much more polarized than it used to be.  Culturally we\nhave ever less common ground. The creative class flocks to a handful\nof happy cities, abandoning the rest.  And increasing economic\ninequality means the spread between rich and poor is growing too.\nI'd like to propose a hypothesis: that all these trends are instances\nof the same phenomenon.  And moreover, that the cause is not some\nforce that's pulling us apart, but rather the erosion of forces\nthat had been pushing us together.\n\nWorse still, for those who worry about these trends, the forces\nthat were pushing us together were an anomaly, a one-time combination\nof circumstances that's unlikely to be repeated \u2014 and indeed, that\nwe would not want to repeat.\n\nThe two forces were war (above all World War II), and the rise of\nlarge corporations.\n\nThe effects of World War II were both economic and social.\nEconomically, it decreased variation in income.  Like all modern\narmed forces, America's were socialist economically.  From each\naccording to his ability, to each according to his need.  More or\nless.  Higher ranking members of the military got more (as higher\nranking members of socialist societies always do), but what they\ngot was fixed according to their rank.  And the flattening effect\nwasn't limited to those under arms, because the US economy was\nconscripted too.  Between 1942 and 1945 all wages were set by the\nNational War Labor Board. Like the military, they defaulted to\nflatness.  And this national standardization of wages was so pervasive\nthat its effects could still be seen years after the war ended.\n[1]\n\nBusiness owners weren't supposed to be making money either.  FDR\nsaid \"not a single war millionaire\" would be permitted.  To ensure\nthat, any increase in a company's profits over prewar levels was\ntaxed at 85%.  And when what was left after corporate taxes reached\nindividuals, it was taxed again at a marginal rate of 93%.\n[2]\n\nSocially too the war tended to decrease variation.  Over 16 million\nmen and women from all sorts of different backgrounds were brought\ntogether in a way of life that was literally uniform.  Service rates\nfor men born in the early 1920s approached 80%. And working toward\na common goal, often under stress, brought them still closer together.\n\nThough strictly speaking World War II lasted less than 4 years for\nthe US, its effects lasted longer.  Wars make central governments\nmore powerful, and World War II was an extreme case of this.  In\nthe US, as in all the other Allied countries, the federal government\nwas slow to give up the new powers it had acquired.  Indeed, in\nsome respects the war didn't end in 1945; the enemy just switched\nto the Soviet Union.  In tax rates, federal power, defense spending,\nconscription, and nationalism, the decades after the war looked more\nlike wartime than prewar peacetime.\n[3]\nAnd the social effects\nlasted too.  The kid pulled into the army from behind a mule team\nin West Virginia didn't simply go back to the farm afterward.\nSomething else was waiting for him, something that looked a lot\nlike the army.\n\nIf total war was the big political story of the 20th century, the\nbig economic story was the rise of a new kind of company.  And this\ntoo tended to produce both social and economic cohesion.\n[4]\n\nThe 20th century was the century of the big, national corporation.\nGeneral Electric, General Foods, General Motors.  Developments in\nfinance, communications, transportation, and manufacturing enabled\na new type of company whose goal was above all scale.  Version 1\nof this world was low-res: a Duplo world of a few giant companies\ndominating each big market.\n[5]\n\nThe late 19th and early 20th centuries had been a time of consolidation,\nled especially by J. P. Morgan.  Thousands of companies run by their\nfounders were merged into a couple hundred giant ones run by\nprofessional managers. Economies of scale ruled the day.  It seemed\nto people at the time that this was the final state of things.  John\nD. Rockefeller said in 1880\n\n  The day of combination is here to stay. Individualism has gone,\n  never to return.\n\nHe turned out to be mistaken, but he seemed right for the next\nhundred years.\n\nThe consolidation that began in the late 19th century continued for\nmost of the 20th.  By the end of World War II, as Michael Lind\nwrites, \"the major sectors of the economy were either organized\nas government-backed cartels or dominated by a few oligopolistic\ncorporations.\"\n\nFor consumers this new world meant the same choices everywhere, but\nonly a few of them.  When I grew up there were only 2 or 3 of most\nthings, and since they were all aiming at the middle of the market\nthere wasn't much to differentiate them.\n\nOne of the most important instances of this phenomenon was in TV.\nHere there were 3 choices: NBC, CBS, and ABC. Plus public TV for\neggheads and communists.  The programs that the 3 networks offered were\nindistinguishable.  In fact, here there was a triple pressure toward\nthe center. If one show did try something daring, local affiliates\nin conservative markets would make them stop. Plus since TVs were\nexpensive, whole families watched the same shows together, so they\nhad to be suitable for everyone.\n\nAnd not only did everyone get the same thing, they got it at the\nsame time.  It's difficult to imagine now, but every night tens of\nmillions of families would sit down together in front of their TV\nset watching the same show, at the same time, as their next door\nneighbors.  What happens now with the Super Bowl used to happen\nevery night. We were literally in sync.\n[6]\n\nIn a way mid-century TV culture was good. The view it gave of the\nworld was like you'd find in a children's book, and it probably had\nsomething of the effect that (parents hope) children's books have\nin making people behave better.  But, like children's books, TV was\nalso misleading.  Dangerously misleading, for adults. In his\nautobiography, Robert MacNeil talks of seeing gruesome images that\nhad just come in from Vietnam and thinking, we can't show these to\nfamilies while they're having dinner.\n\nI know how pervasive the common culture was, because I tried to opt\nout of it, and it was practically impossible to find alternatives.\nWhen I was 13 I realized, more from internal evidence than any\noutside source, that the ideas we were being fed on TV were crap,\nand I stopped watching it.\n[7]\nBut it wasn't just TV.  It seemed\nlike everything around me was crap.  The politicians all saying the\nsame things, the consumer brands making almost identical products\nwith different labels stuck on to indicate how prestigious they\nwere meant to be, the balloon-frame houses with fake \"colonial\"\nskins, the cars with several feet of gratuitous metal on each end\nthat started to fall apart after a couple years, the \"red delicious\"\napples that were red but only nominally \napples. And in retrospect, it was crap.\n[8]\n\nBut when I went looking for alternatives to fill this void, I found\npractically nothing.  There was no Internet then.  The only place\nto look was in the chain bookstore in our local shopping mall. \n[9]\nThere I found a copy of The Atlantic.  I wish I could say it became\na gateway into a wider world, but in fact I found it boring and\nincomprehensible.  Like a kid tasting whisky for the first time and\npretending to like it, I preserved that magazine as carefully as\nif it had been a book. I'm sure I still have it somewhere.  But\nthough it was evidence that there was, somewhere, a world that\nwasn't red delicious, I didn't find it till college.\n\nIt wasn't just as consumers that the big companies made us similar.\nThey did as employers too.  Within companies there were powerful\nforces pushing people toward a single model of how to look and act.\nIBM was particularly notorious for this, but they were only a little\nmore extreme than other big companies.  And the models of how to\nlook and act varied little between companies. Meaning everyone\nwithin this world was expected to seem more or less the same.  And\nnot just those in the corporate world, but also everyone who aspired\nto it \u2014 which in the middle of the 20th century meant most people\nwho weren't already in it.  For most of the 20th century, working-class\npeople tried hard to look middle class.  You can see it in old\nphotos.  Few adults aspired to look dangerous in 1950.\n\nBut the rise of national corporations didn't just compress us\nculturally.  It compressed us economically too, and on both ends.\n\nAlong with giant national corporations, we got giant national labor\nunions.  And in the mid 20th century the corporations cut deals\nwith the unions where they paid over market price for labor.  Partly\nbecause the unions were monopolies. \n[10]\nPartly because, as\ncomponents of oligopolies themselves, the corporations knew they\ncould safely pass the cost on to their customers, because their\ncompetitors would have to as well.  And partly because in mid-century\nmost of the giant companies were still focused on finding new ways\nto milk economies of scale.  Just as startups rightly pay AWS a\npremium over the cost of running their own servers so they can focus\non growth, many of the big national corporations were willing to\npay a premium for labor. \n[11]\n\nAs well as pushing incomes up from the bottom, by overpaying unions,\nthe big companies of the 20th century also pushed incomes down at\nthe top, by underpaying their top management. Economist J. K.\nGalbraith wrote in 1967 that \"There are few corporations in which\nit would be suggested that executive salaries are at a maximum.\"\n[12]\n\nTo some extent this was an illusion.  Much of the de facto pay of\nexecutives never showed up on their income tax returns, because it\ntook the form of perks.  The higher the rate of income tax, the\nmore pressure there was to pay employees upstream of it.  (In the\nUK, where taxes were even higher than in the US, companies would\neven pay their kids' private school tuitions.)  One of the most\nvaluable things the big companies of the mid 20th century gave their\nemployees was job security, and this too didn't show up in tax\nreturns or income statistics. So the nature of employment in these\norganizations tended to yield falsely low numbers about economic\ninequality.  But even accounting for that, the big companies paid\ntheir best people less than market price.  There was no market; the\nexpectation was that you'd work for the same company for decades\nif not your whole career. \n[13]\n\nYour work was so illiquid there was little chance of getting market\nprice. But that same illiquidity also encouraged you not to seek\nit.  If the company promised to employ you till you retired and\ngive you a pension afterward, you didn't want to extract as much\nfrom it this year as you could. You needed to take care of the\ncompany so it could take care of you.  Especially when you'd been\nworking with the same group of people for decades.  If you tried\nto squeeze the company for more money, you were squeezing the\norganization that was going to take care of them.  Plus if\nyou didn't put the company first you wouldn't be promoted, and if\nyou couldn't switch ladders, promotion on this one was the only way\nup. \n[14]\n\nTo someone who'd spent several formative years in the armed forces,\nthis situation didn't seem as strange as it does to us now.  From\ntheir point of view, as big company executives, they were high-ranking\nofficers.  They got paid a lot more than privates.  They got to\nhave expense account lunches at the best restaurants and fly around\non the company's Gulfstreams.  It probably didn't occur to most of\nthem to ask if they were being paid market price.\n\nThe ultimate way to get market price is to work for yourself, by\nstarting your own company.  That seems obvious to any ambitious\nperson now.  But in the mid 20th century it was an alien concept.\nNot because starting one's own company seemed too ambitious, but\nbecause it didn't seem ambitious enough. Even as late as the 1970s,\nwhen I grew up, the ambitious plan was to get lots of education at\nprestigious institutions, and then join some other prestigious\ninstitution and work one's way up the hierarchy.  Your prestige was\nthe prestige of the institution you belonged to.  People did start\ntheir own businesses of course, but educated people rarely did,\nbecause in those days there was practically zero concept of starting\nwhat we now call a startup: \na business that starts small and grows\nbig.  That was much harder to do in the mid 20th century.  Starting\none's own business meant starting a business that would start small\nand stay small. Which in those days of big companies often meant\nscurrying around trying to avoid being trampled by elephants.  It\nwas more prestigious to be one of the executive class riding the\nelephant.\n\nBy the 1970s, no one stopped to wonder where the big prestigious\ncompanies had come from in the first place.  It seemed like they'd\nalways been there, like the chemical elements.  And indeed, there\nwas a double wall between ambitious kids in the 20th century and\nthe origins of the big companies.  Many of the big companies were\nroll-ups that didn't have clear founders.  And when they did, the\nfounders didn't seem like us.  Nearly all of them had been uneducated,\nin the sense of not having been to college.  They were what Shakespeare\ncalled rude mechanicals.  College trained one to be a member of the\nprofessional classes.  Its graduates didn't expect to do the sort\nof grubby menial work that Andrew Carnegie or Henry Ford started\nout doing. \n[15]\n\nAnd in the 20th century there were more and more college graduates.\nThey increased from about 2% of the population in 1900 to about 25%\nin 2000. In the middle of the century our two big forces intersect,\nin the form of the GI Bill, which sent 2.2 million World War II\nveterans to college.  Few thought of it in these terms, but the\nresult of making college the canonical path for the ambitious was\na world in which it was socially acceptable to work for Henry Ford,\nbut not to be Henry Ford.\n[16]\n\nI remember this world well. I came of age just as it was starting\nto break up. In my childhood it was still dominant. Not quite so\ndominant as it had been.  We could see from old TV shows and yearbooks\nand the way adults acted that people in the 1950s and 60s had been\neven more conformist than us.  The mid-century model was already\nstarting to get old. But that was not how we saw it at the time.\nWe would at most have said that one could be a bit more daring in\n1975 than 1965.  And indeed, things hadn't changed much yet.\n\nBut change was coming soon. And when the Duplo economy started to\ndisintegrate, it disintegrated in several different ways at once.\nVertically integrated companies literally dis-integrated because\nit was more efficient to.  Incumbents faced new competitors as (a)\nmarkets went global and (b) technical innovation started to trump\neconomies of scale, turning size from an asset into a liability.\nSmaller companies were increasingly able to survive as formerly\nnarrow channels to consumers broadened.  Markets themselves started\nto change faster, as whole new categories of products appeared. And\nlast but not least, the federal government, which had previously\nsmiled upon J. P. Morgan's world as the natural state of things,\nbegan to realize it wasn't the last word after all.\n\nWhat J. P. Morgan was to the horizontal axis, Henry Ford was to the\nvertical.  He wanted to do everything himself. The giant plant he\nbuilt at River Rouge between 1917 and 1928 literally took in iron\nore at one end and sent cars out the other.  100,000 people worked\nthere. At the time it seemed the future. But that is not how car\ncompanies operate today.  Now much of the design and manufacturing\nhappens in a long supply chain, whose products the car companies\nultimately assemble and sell.  The reason car companies operate\nthis way is that it works better.  Each company in the supply chain\nfocuses on what they know best. And they each have to do it well\nor they can be swapped out for another supplier.\n\nWhy didn't Henry Ford realize that networks of cooperating companies\nwork better than a single big company? One reason is that supplier\nnetworks take a while to evolve. In 1917, doing everything himself\nseemed to Ford the only way to get the scale he needed. And the\nsecond reason is that if you want to solve a problem using a network\nof cooperating companies, you have to be able to coordinate their\nefforts, and you can do that much better with computers.  Computers\nreduce the transaction costs that Coase argued are the raison d'etre\nof corporations. That is a fundamental change.\n\nIn the early 20th century, big companies were synonymous with\nefficiency.  In the late 20th century they were synonymous with\ninefficiency.  To some extent this was because the companies\nthemselves had become sclerotic.  But it was also because our\nstandards were higher.\n\nIt wasn't just within existing industries that change occurred.\nThe industries themselves changed.  It became possible to make lots\nof new things, and sometimes the existing companies weren't the\nones who did it best.\n\nMicrocomputers are a classic example. The market was pioneered by\nupstarts like Apple. When it got big enough, IBM decided it was\nworth paying attention to.  At the time IBM completely dominated\nthe computer industry. They assumed that all they had to do, now\nthat this market was ripe, was to reach out and pick it.  Most\npeople at the time would have agreed with them.  But what happened\nnext illustrated how much more complicated the world had become.\nIBM did launch a microcomputer.  Though quite successful, it did\nnot crush Apple.  But even more importantly, IBM itself ended up\nbeing supplanted by a supplier coming in from the side \u2014 from\nsoftware, which didn't even seem to be the same business.  IBM's\nbig mistake was to accept a non-exclusive license for DOS.  It must\nhave seemed a safe move at the time.  No other computer manufacturer\nhad ever been able to outsell them. What difference did it make if\nother manufacturers could offer DOS too?  The result of that\nmiscalculation was an explosion of inexpensive PC clones.  Microsoft\nnow owned the PC standard, and the customer.  And the microcomputer\nbusiness ended up being Apple vs Microsoft.\n\nBasically, Apple bumped IBM and then Microsoft stole its wallet.\nThat sort of thing did not happen to big companies in mid-century.\nBut it was going to happen increasingly often in the future.\n\nChange happened mostly by itself in the computer business.  In other\nindustries, legal obstacles had to be removed first.  Many of the\nmid-century oligopolies had been anointed by the federal government\nwith policies (and in wartime, large orders) that kept out competitors.\nThis didn't seem as dubious to government officials at the time as\nit sounds to us. They felt a two-party system ensured sufficient\ncompetition in politics.  It ought to work for business too.\n\nGradually the government realized that anti-competitive policies\nwere doing more harm than good, and during the Carter administration\nit started to remove them. The word used for this process was\nmisleadingly narrow: deregulation.  What was really happening was\nde-oligopolization.  It happened to one industry after another.\nTwo of the most visible to consumers were air travel and long-distance\nphone service, which both became dramatically cheaper after\nderegulation.\n\nDeregulation also contributed to the wave of hostile takeovers in\nthe 1980s.  In the old days the only limit on the inefficiency of\ncompanies, short of actual bankruptcy, was the inefficiency of their\ncompetitors.  Now companies had to face absolute rather than relative\nstandards.  Any public company that didn't generate sufficient\nreturns on its assets risked having its management replaced with\none that would.  Often the new managers did this by breaking companies\nup into components that were more valuable separately.\n[17]\n\nVersion 1 of the national economy consisted of a few big blocks\nwhose relationships were negotiated in back rooms by a handful of\nexecutives, politicians, regulators, and labor leaders.  Version 2\nwas higher resolution: there were more companies, of more different\nsizes, making more different things, and their relationships changed\nfaster. In this world there were still plenty of back room negotiations,\nbut more was left to market forces.  Which further accelerated the\nfragmentation.\n\nIt's a little misleading to talk of versions when describing a\ngradual process, but not as misleading as it might seem.  There was\na lot of change in a few decades, and what we ended up with was\nqualitatively different.  The companies in the S&P 500 in 1958 had\nbeen there an average of 61 years. By 2012 that number was 18 years.\n[18]\n\nThe breakup of the Duplo economy happened simultaneously with the\nspread of computing power. To what extent were computers a precondition?\nIt would take a book to answer that. Obviously the spread of computing\npower was a precondition for the rise of startups.  I suspect it\nwas for most of what happened in finance too.  But was it a\nprecondition for globalization or the LBO wave?  I don't know, but\nI wouldn't discount the possibility.  It may be that the refragmentation\nwas driven by computers in the way the industrial revolution was\ndriven by steam engines.  Whether or not computers were a precondition,\nthey have certainly accelerated it.\n\nThe new fluidity of companies changed people's relationships with\ntheir employers. Why climb a corporate ladder that might be yanked\nout from under you?  Ambitious people started to think of a career\nless as climbing a single ladder than as a series of jobs that might\nbe at different companies. More movement (or even potential movement)\nbetween companies introduced more competition in salaries.  Plus\nas companies became smaller it became easier to estimate how much\nan employee contributed to the company's revenue.  Both changes\ndrove salaries toward market price. And since people vary dramatically\nin productivity, paying market price meant salaries started to\ndiverge.\n\nBy no coincidence it was in the early 1980s that the term \"yuppie\"\nwas coined.  That word is not much used now, because the phenomenon\nit describes is so taken for granted, but at the time it was a label\nfor something novel. Yuppies were young professionals who made lots\nof money.  To someone in their twenties today, this wouldn't seem\nworth naming.  Why wouldn't young professionals make lots of money?\nBut until the 1980s, being underpaid early in your career was part\nof what it meant to be a professional.  Young professionals were\npaying their dues, working their way up the ladder.  The rewards\nwould come later.  What was novel about yuppies was that they wanted\nmarket price for the work they were doing now.\n\nThe first yuppies did not work for startups. That was still in the\nfuture.  Nor did they work for big companies. They were professionals\nworking in fields like law, finance, and consulting.  But their example \nrapidly inspired their peers.  Once they saw that new BMW 325i, they \nwanted one too.\n\nUnderpaying people at the beginning of their career only works if\neveryone does it. Once some employer breaks ranks, everyone else\nhas to, or they can't get good people.  And once started this process\nspreads through the whole economy, because at the beginnings of\npeople's careers they can easily switch not merely employers but\nindustries.\n\nBut not all young professionals benefitted. You had to produce to\nget paid a lot.  It was no coincidence that the first yuppies worked\nin fields where it was easy to measure that.\n\nMore generally, an idea was returning whose name sounds old-fashioned\nprecisely because it was so rare for so long: that you could make\nyour fortune.  As in the past there were multiple ways to do it.\nSome made their fortunes by creating wealth, and others by playing\nzero-sum games. But once it became possible to make one's fortune,\nthe ambitious had to decide whether or not to.  A physicist who\nchose physics over Wall Street in 1990 was making a sacrifice that\na physicist in 1960 didn't have to think about.\n\nThe idea even flowed back into big companies.  CEOs of big companies\nmake more now than they used to, and I think much of the reason is\nprestige.  In 1960, corporate CEOs had immense prestige.  They were\nthe winners of the only economic game in town. But if they made as\nlittle now as they did then, in real dollar terms, they'd seem like\nsmall fry compared to professional athletes and whiz kids making\nmillions from startups and hedge funds. They don't like that idea,\nso now they try to get as much as they can, which is more than they\nhad been getting. \n[19]\n\nMeanwhile a similar fragmentation was happening at the other end\nof the economic scale.  As big companies' oligopolies became less\nsecure, they were less able to pass costs on to customers and thus\nless willing to overpay for labor.  And as the Duplo world of a few\nbig blocks fragmented into many companies of different sizes \u2014 some\nof them overseas \u2014 it became harder for unions to enforce their\nmonopolies.  As a result workers' wages also tended toward market\nprice. Which (inevitably, if unions had been doing their job) tended\nto be lower.  Perhaps dramatically so, if automation had decreased\nthe need for some kind of work.\n\nAnd just as the mid-century model induced social as well as economic\ncohesion, its breakup brought social as well as economic fragmentation.\nPeople started to dress and act differently.  Those who would later\nbe called the \"creative class\" became more mobile. People who didn't\ncare much for religion felt less pressure to go to church for\nappearances' sake, while those who liked it a lot opted for\nincreasingly colorful forms. Some switched from meat loaf to tofu,\nand others to Hot Pockets. Some switched from driving Ford sedans\nto driving small imported cars, and others to driving SUVs.  Kids\nwho went to private schools or wished they did started to dress\n\"preppy,\" and kids who wanted to seem rebellious made a conscious\neffort to look disreputable.  In a hundred ways people spread apart.\n[20]\n\nAlmost four decades later, fragmentation is still increasing.  Has\nit been net good or bad?  I don't know; the question may be\nunanswerable.  Not entirely bad though.  We take for granted the\nforms of fragmentation we like, and worry only about the ones we\ndon't. But as someone who caught the tail end of mid-century\nconformism, \nI can tell you it was no utopia.\n[21]\n\nMy goal here is not to say whether fragmentation has been good or\nbad, just to explain why it's happening.  With the centripetal\nforces of total war and 20th century oligopoly mostly gone, what\nwill happen next?  And more specifically, is it possible to reverse\nsome of the fragmentation we've seen?\n\nIf it is, it will have to happen piecemeal.  You can't reproduce\nmid-century cohesion the way it was originally produced.  It would\nbe insane to go to war just to induce more national unity.  And\nonce you understand the degree to which the economic history of the\n20th century was a low-res version 1, it's clear you can't reproduce\nthat either.\n\n20th century cohesion was something that happened at least in a\nsense naturally.  The war was due mostly to external forces, and\nthe Duplo economy was an evolutionary phase.  If you want cohesion\nnow, you'd have to induce it deliberately.  And it's not obvious\nhow.  I suspect the best we'll be able to do is address the symptoms\nof fragmentation.  But that may be enough.\n\nThe form of fragmentation people worry most about lately is economic inequality, and if you want to eliminate\nthat you're up against a truly formidable headwind that has\nbeen in operation since the stone age. Technology.\n\nTechnology is\na lever. It magnifies work.  And the lever not only grows increasingly\nlong, but the rate at which it grows is itself increasing.\n\nWhich in turn means the variation in the amount of wealth people\ncan create has not only been increasing, but accelerating.  The\nunusual conditions that prevailed in the mid 20th century masked\nthis underlying trend.  The ambitious had little choice but to join\nlarge organizations that made them march in step with lots of other\npeople \u2014 literally in the case of the armed forces, figuratively\nin the case of big corporations. Even if the big corporations had\nwanted to pay people proportionate to their value, they couldn't\nhave figured out how.  But that constraint has gone now.  Ever since\nit started to erode in the 1970s, we've seen the underlying forces\nat work again.\n[22]\n\nNot everyone who gets rich now does it by creating wealth, certainly.\nBut a significant number do, and the Baumol Effect means all their\npeers get dragged along too.\n[23]\nAnd as long as it's possible to\nget rich by creating wealth, the default tendency will be for\neconomic inequality to increase.  Even if you eliminate all the\nother ways to get rich.  You can mitigate this with subsidies at\nthe bottom and taxes at the top, but unless taxes are high enough\nto discourage people from creating wealth, you're always going to\nbe fighting a losing battle against increasing variation in\nproductivity.\n[24]\n\nThat form of fragmentation, like the others, is here to stay.  Or\nrather, back to stay.  Nothing is forever, but the tendency toward\nfragmentation should be more forever than most things, precisely\nbecause it's not due to any particular cause.  It's simply a reversion\nto the mean. When Rockefeller said individualism was gone, he was\nright for a hundred years.  It's back now, and that's likely to be\ntrue for longer.\n\nI worry that if we don't acknowledge this, we're headed for trouble.\nIf we think 20th century cohesion disappeared because of few policy\ntweaks, we'll be deluded into thinking we can get it back (minus\nthe bad parts, somehow) with a few countertweaks.  And then we'll\nwaste our time trying to eliminate fragmentation, when we'd be\nbetter off thinking about how to mitigate its consequences.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nLester Thurow, writing in 1975, said the wage differentials\nprevailing at the end of World War II had become so embedded that\nthey \"were regarded as 'just' even after the egalitarian pressures\nof World War II had disappeared.  Basically, the same differentials\nexist to this day, thirty years later.\" But Goldin and Margo think\nmarket forces in the postwar period also helped preserve the wartime\ncompression of wages \u2014 specifically increased demand for unskilled\nworkers, and oversupply of educated ones.\n\n(Oddly enough, the American custom of having employers pay for\nhealth insurance derives from efforts by businesses to circumvent\nNWLB wage controls in order to attract workers.)\n\n[2]\nAs always, tax rates don't tell the whole story.  There were\nlots of exemptions, especially for individuals.  And in World War\nII the tax codes were so new that the government had little acquired\nimmunity to tax avoidance.  If the rich paid high taxes during the\nwar it was more because they wanted to than because they had to.\n\nAfter the war, federal tax receipts as a percentage of GDP were\nabout the same as they are now. In fact, for the entire period since\nthe war, tax receipts have stayed close to 18% of GDP, despite\ndramatic changes in tax rates.  The lowest point occurred when\nmarginal income tax rates were highest: 14.1% in 1950.  Looking at\nthe data, it's hard to avoid the conclusion that tax rates have had\nlittle effect on what people actually paid.\n\n[3]\nThough in fact the decade preceding the war had been a time\nof unprecedented federal power, in response to the Depression.\nWhich is not entirely a coincidence, because the Depression was one\nof the causes of the war.  In many ways the New Deal was a sort of\ndress rehearsal for the measures the federal government took during\nwartime.  The wartime versions were much more drastic and more\npervasive though.  As Anthony Badger wrote, \"for many Americans the\ndecisive change in their experiences came not with the New Deal but\nwith World War II.\"\n\n[4]\nI don't know enough about the origins of the world wars to\nsay, but it's not inconceivable they were connected to the rise of\nbig corporations. If that were the case, 20th century cohesion would\nhave a single cause.\n\n[5]\nMore precisely, there was a bimodal economy consisting, in\nGalbraith's words, of \"the world of the technically dynamic, massively\ncapitalized and highly organized corporations on the one hand and\nthe hundreds of thousands of small and traditional proprietors on\nthe other.\" Money, prestige, and power were concentrated in the\nformer, and there was near zero crossover.\n\n[6]\nI wonder how much of the decline in families eating together\nwas due to the decline in families watching TV together afterward.\n\n[7]\nI know when this happened because it was the season Dallas\npremiered.  Everyone else was talking about what was happening on\nDallas, and I had no idea what they meant.\n\n[8]\nI didn't realize it till I started doing research for this\nessay, but the meretriciousness of the products I grew up with is\na well-known byproduct of oligopoly. When companies can't compete\non price, they compete on tailfins.\n\n[9]\nMonroeville Mall was at the time of its completion in 1969\nthe largest in the country. In the late 1970s the movie Dawn of\nthe Dead was shot there. Apparently the mall was not just the\nlocation of the movie, but its inspiration; the crowds of shoppers\ndrifting through this huge mall reminded George Romero of zombies.\nMy first job was scooping ice cream in the Baskin-Robbins.\n\n[10]\nLabor unions were exempted from antitrust laws by the Clayton\nAntitrust Act in 1914 on the grounds that a person's work is not\n\"a commodity or article of commerce.\" I wonder if that means service\ncompanies are also exempt.\n\n[11]\nThe relationships between unions and unionized companies can\neven be symbiotic, because unions will exert political pressure to\nprotect their hosts.  According to Michael Lind, when politicians\ntried to attack the A&P supermarket chain because it was putting\nlocal grocery stores out of business, \"A&P successfully defended\nitself by allowing the unionization of its workforce in 1938, thereby\ngaining organized labor as a constituency.\" I've seen this phenomenon\nmyself: hotel unions are responsible for more of the political\npressure against Airbnb than hotel companies.\n\n[12]\nGalbraith was clearly puzzled that corporate executives would\nwork so hard to make money for other people (the shareholders)\ninstead of themselves.  He devoted much of The New Industrial\nState to trying to figure this out.\n\nHis theory was that professionalism had replaced money as a motive,\nand that modern corporate executives were, like (good) scientists,\nmotivated less by financial rewards than by the desire to do good\nwork and thereby earn the respect of their peers.  There is something\nin this, though I think lack of movement between companies combined\nwith self-interest explains much of observed behavior.\n\n[13]\nGalbraith (p. 94) says a 1952 study of the 800 highest paid\nexecutives at 300 big corporations found that three quarters of\nthem had been with their company for more than 20 years.\n\n[14]\nIt seems likely that in the first third of the 20th century\nexecutive salaries were low partly because companies then were more\ndependent on banks, who would have disapproved if executives got\ntoo much.  This was certainly true in the beginning. The first big\ncompany CEOs were J. P. Morgan's hired hands.\n\nCompanies didn't start to finance themselves with retained earnings\ntill the 1920s.  Till then they had to pay out their earnings in\ndividends, and so depended on banks for capital for expansion.\nBankers continued to sit on corporate boards till the Glass-Steagall\nact in 1933.\n\nBy mid-century big companies funded 3/4 of their growth from earnings.\nBut the early years of bank dependence, reinforced by the financial\ncontrols of World War II, must have had a big effect on social\nconventions about executive salaries.  So it may be that the lack\nof movement between companies was as much the effect of low salaries\nas the cause.\n\nIncidentally, the switch in the 1920s to financing growth with\nretained earnings was one cause of the 1929 crash.  The banks now\nhad to find someone else to lend to, so they made more margin loans.\n\n[15]\nEven now it's hard to get them to. One of the things I find\nhardest to get into the heads of would-be startup founders is how\nimportant it is to do certain kinds of menial work early in the\nlife of a company.  Doing things that don't\nscale is to how Henry Ford got started as a high-fiber diet is\nto the traditional peasant's diet: they had no choice but to do the\nright thing, while we have to make a conscious effort.\n\n[16]\nFounders weren't celebrated in the press when I was a kid.\n\"Our founder\" meant a photograph of a severe-looking man with a\nwalrus mustache and a wing collar who had died decades ago. The\nthing to be when I was a kid was an executive. If you weren't\naround then it's hard to grasp the cachet that term had. The fancy\nversion of everything was called the \"executive\" model.\n\n[17]\nThe wave of hostile takeovers in the 1980s was enabled by a\ncombination of circumstances: court decisions striking down state\nanti-takeover laws, starting with the Supreme Court's 1982 decision\nin Edgar v. MITE Corp.; the Reagan administration's comparatively\nsympathetic attitude toward takeovers; the Depository Institutions\nAct of 1982, which allowed banks and savings and loans to buy\ncorporate bonds; a new SEC rule issued in 1982 (rule 415) that made\nit possible to bring corporate bonds to market faster; the creation\nof the junk bond business by Michael Milken; a vogue for conglomerates\nin the preceding period that caused many companies to be combined\nthat never should have been; a decade of inflation that left many\npublic companies trading below the value of their assets; and not\nleast, the increasing complacency of managements.\n\n[18]\nFoster, Richard. \"Creative Destruction Whips through Corporate\nAmerica.\" Innosight, February 2012.\n\n[19]\nCEOs of big companies may be overpaid. I don't know enough\nabout big companies to say. But it is certainly not impossible for\na CEO to make 200x as much difference to a company's revenues as\nthe average employee.  Look at what Steve Jobs did for Apple when\nhe came back as CEO.  It would have been a good deal for the board\nto give him 95% of the company.  Apple's market cap the day Steve\ncame back in July 1997 was 1.73 billion. 5% of Apple now (January\n2016) would be worth about 30 billion.  And it would not be if Steve\nhadn't come back; Apple probably wouldn't even exist anymore.\n\nMerely including Steve in the sample might be enough to answer the\nquestion of whether public company CEOs in the aggregate are overpaid.\nAnd that is not as facile a trick as it might seem, because the\nbroader your holdings, the more the aggregate is what you care\nabout.\n\n[20]\nThe late 1960s were famous for social upheaval. But that was\nmore rebellion (which can happen in any era if people are provoked\nsufficiently) than fragmentation.  You're not seeing fragmentation\nunless you see people breaking off to both left and right.\n\n[21]\nGlobally the trend has been in the other direction.  While\nthe US is becoming more fragmented, the world as a whole is becoming\nless fragmented, and mostly in good ways.\n\n[22]\nThere were a handful of ways to make a fortune in the mid\n20th century.  The main one was drilling for oil, which was open\nto newcomers because it was not something big companies could\ndominate through economies of scale.  How did individuals accumulate\nlarge fortunes in an era of such high taxes?  Giant tax loopholes\ndefended by two of the most powerful men in Congress, Sam Rayburn\nand Lyndon Johnson.\n\nBut becoming a Texas oilman was not in 1950 something one could\naspire to the way starting a startup or going to work on Wall Street\nwere in 2000, because (a) there was a strong local component and\n(b) success depended so much on luck.\n\n[23]\nThe Baumol Effect induced by startups is very visible in\nSilicon Valley.  Google will pay people millions of dollars a year\nto keep them from leaving to start or join startups.\n\n[24]\nI'm not claiming variation in productivity is the only cause\nof economic inequality in the US. But it's a significant cause, and\nit will become as big a cause as it needs to, in the sense that if\nyou ban other ways to get rich, people who want to get rich will\nuse this route instead.\n\n\n\nThanks to Sam Altman, Trevor Blackwell, Paul Buchheit, Patrick\nCollison, Ron Conway, Chris Dixon, Benedict Evans, Richard Florida,\nBen Horowitz, Jessica Livingston, Robert Morris, Tim O'Reilly, Geoff\nRalston, Max Roser, Alexia Tsotsis, and Qasar Younis for reading\ndrafts of this.  Max also told me about several valuable sources.\n\n\n\nBibliography\n\nAllen, Frederick Lewis. The Big Change. Harper, 1952.\n\nAveritt, Robert. The Dual Economy. Norton, 1968.\n\nBadger, Anthony. The New Deal. Hill and Wang, 1989.\n\nBainbridge, John. The Super-Americans. Doubleday, 1961.\n\nBeatty, Jack. Collossus. Broadway, 2001.\n\nBrinkley, Douglas. Wheels for the World. Viking, 2003.\n\nBrownleee, W. Elliot. Federal Taxation in America. Cambridge, 1996.\n\nChandler, Alfred. The Visible Hand. Harvard, 1977.\n\nChernow, Ron. The House of Morgan. Simon & Schuster, 1990.\n\nChernow, Ron. Titan: The Life of John D. Rockefeller. Random House,\n1998.\n\nGalbraith, John. The New Industrial State. Houghton Mifflin, 1967.\n\nGoldin, Claudia and Robert A. Margo. \"The Great Compression: The\nWage Structure in the United States at Mid-Century.\" NBER Working\nPaper 3817, 1991.\n\nGordon, John. An Empire of Wealth. HarperCollins, 2004.\n\nKlein, Maury. The Genesis of Industrial America, 1870-1920. Cambridge,\n2007.\n\nLind, Michael. Land of Promise. HarperCollins, 2012.\n\nMickelthwaite, John, and Adrian Wooldridge. The Company. Modern\nLibrary, 2003.\n\nNasaw, David. Andrew Carnegie. Penguin, 2006.\n\nSobel, Robert. The Age of Giant Corporations. Praeger, 1993.\n\nThurow, Lester. Generating Inequality: Mechanisms of Distribution.\nBasic Books, 1975.\n\nWitte, John. The Politics and Development of the Federal Income\nTax. Wisconsin, 1985.\n\n\n\nRelated:\n\n", "November 2015\n\nA few months ago an article about Y Combinator said that early on\nit had been a \"one-man show.\"  It's sadly common to read that sort\nof thing.  But the problem with that description is not just that\nit's unfair.  It's also misleading.  Much of what's most novel about\nYC is due to Jessica Livingston.  If you don't understand her, you\ndon't understand YC.  So let me tell you a little about Jessica.\n\nYC had 4 founders.  Jessica and I decided one night to start it,\nand the next day we recruited my friends Robert Morris and Trevor\nBlackwell.  Jessica and I ran YC day to day, and Robert and Trevor\nread applications and did interviews with us.\n\nJessica and I were already dating when we started YC.  At first we\ntried to act \"professional\" about this, meaning we tried to conceal\nit.  In retrospect that seems ridiculous, and we soon dropped the\npretense.  And the fact that Jessica and I were a couple is a big\npart of what made YC what it was.  YC felt like a family.  The\nfounders early on were mostly young.  We all had dinner together\nonce a week, cooked for the first couple years by me. Our first\nbuilding had been a private home.  The overall atmosphere was\nshockingly different from a VC's office on Sand Hill Road, in a way\nthat was entirely for the better.  There was an authenticity that\neveryone who walked in could sense.  And that didn't just mean that\npeople trusted us.  It was the perfect quality to instill in startups.\nAuthenticity is one of the most important things YC looks for in\nfounders, not just because fakers and opportunists are annoying,\nbut because authenticity is one of the main things that separates\nthe most successful startups from the rest.\n\nEarly YC was a family, and Jessica was its mom.  And the culture\nshe defined was one of YC's most important innovations.  Culture\nis important in any organization, but at YC culture wasn't just how\nwe behaved when we built the product. At YC, the culture was the\nproduct.\n\nJessica was also the mom in another sense: she had the last word.\nEverything we did as an organization went through her first \u2014 who\nto fund, what to say to the public, how to deal with other companies,\nwho to hire, everything.\n\nBefore we had kids, YC was more or less our life. There was no real\ndistinction between working hours and not.  We talked about YC all\nthe time.  And while there might be some businesses that it would\nbe tedious to let infect your private life, we liked it. We'd started\nYC because it was something we were interested in.  And some of the\nproblems we were trying to solve were endlessly difficult.  How do\nyou recognize good founders?  You could talk about that for years,\nand we did; we still do.\n\nI'm better at some things than Jessica, and she's better at some\nthings than me.  One of the things she's best at is judging people.\nShe's one of those rare individuals with x-ray vision for character.\nShe can see through any kind of faker almost immediately.  Her\nnickname within YC was the Social Radar, and this special power of\nhers was critical in making YC what it is.  The earlier you pick\nstartups, the more you're picking the founders.  Later stage investors\nget to try products and look at growth numbers.  At the stage where\nYC invests, there is often neither a product nor any numbers.\n\nOthers thought YC had some special insight about the future of\ntechnology.  Mostly we had the same sort of insight Socrates claimed:\nwe at least knew we knew nothing.  What made YC successful was being\nable to pick good founders.  We thought Airbnb was a bad idea.  We\nfunded it because we liked the founders.\n\nDuring interviews, Robert and Trevor and I would pepper the applicants\nwith technical questions.  Jessica would mostly watch.  A lot of\nthe applicants probably read her as some kind of secretary, especially\nearly on, because she was the one who'd go out and get each new\ngroup and she didn't ask many questions. She was ok with that.  It\nwas easier for her to watch people if they didn't notice her. But\nafter the interview, the three of us would turn to Jessica and ask\n\"What does the Social Radar say?\"\n[1]\n\nHaving the Social Radar at interviews wasn't just how we picked\nfounders who'd be successful.  It was also how we picked founders\nwho were good people.  At first we did this because we couldn't\nhelp it.  Imagine what it would feel like to have x-ray vision for\ncharacter.  Being around bad people would be intolerable.  So we'd\nrefuse to fund founders whose characters we had doubts about even\nif we thought they'd be successful.\n\nThough we initially did this out of self-indulgence, it turned out\nto be very valuable to YC.  We didn't realize it in the beginning,\nbut the people we were picking would become the YC alumni network.\nAnd once we picked them, unless they did something really egregious,\nthey were going to be part of it for life. Some now think YC's\nalumni network is its most valuable feature. I personally think\nYC's advice is pretty good too, but the alumni network is certainly\namong the most valuable features.  The level of trust and helpfulness\nis remarkable for a group of such size.  And Jessica is the main\nreason why.\n\n(As we later learned, it probably cost us little to reject people\nwhose characters we had doubts about, because how good founders are\nand how well they do are not orthogonal.  If bad founders succeed\nat all, they tend to sell early.  The most successful founders are\nalmost all good.)\n\nIf Jessica was so important to YC, why don't more people realize\nit?  Partly because I'm a writer, and writers always get disproportionate\nattention.  YC's brand was initially my brand, and our applicants\nwere people who'd read my essays.  But there is another reason:\nJessica hates attention.  Talking to reporters makes her nervous.\nThe thought of giving a talk paralyzes her.  She was even uncomfortable\nat our wedding, because the bride is always the center of attention.\n[2]\n\nIt's not just because she's shy that she hates attention, but because\nit throws off the Social Radar. She can't be herself. You can't\nwatch people when everyone is watching you.\n\nAnother reason attention worries her is that she hates bragging.\nIn anything she does that's publicly visible, her biggest fear\n(after the obvious fear that it will be bad) is that it will seem\nostentatious.  She says being too modest is a common problem for\nwomen.  But in her case it goes beyond that.  She has a horror of\nostentation so visceral it's almost a phobia.\n\nShe also hates fighting. She can't do it; she just shuts down.  And\nunfortunately there is a good deal of fighting in being the public\nface of an organization.\n\nSo although Jessica more than anyone made YC unique, the very\nqualities that enabled her to do it mean she tends to get written\nout of YC's history.  Everyone buys this story that PG started YC\nand his wife just kind of helped.  Even YC's haters buy it.  A\ncouple years ago when people were attacking us for not funding more\nfemale founders (than exist), they all treated YC as identical with\nPG.  It would have spoiled the narrative to acknowledge Jessica's\ncentral role at YC.\n\nJessica was boiling mad that people were accusing her company of\nsexism. I've never seen her angrier about anything.  But she did\nnot contradict them.  Not publicly.  In private there was a great\ndeal of profanity.  And she wrote three separate essays about the\nquestion of female founders.  But she could never bring herself to\npublish any of them.  She'd seen the level of vitriol in this debate,\nand she shrank from engaging.\n[3]\n\nIt wasn't just because she disliked fighting.  She's so sensitive\nto character that it repels her even to fight with dishonest people.\nThe idea of mixing it up with linkbait journalists or Twitter trolls\nwould seem to her not merely frightening, but disgusting.\n\nBut Jessica knew her example as a successful female founder would\nencourage more women to start companies, so last year she did\nsomething YC had never done before and hired a PR firm to get her\nsome interviews.  At one of the first she did, the reporter brushed\naside her insights about startups and turned it into a sensationalistic\nstory about how some guy had tried to chat her up as she was waiting\noutside the bar where they had arranged to meet.  Jessica was\nmortified, partly because the guy had done nothing wrong, but more\nbecause the story treated her as a victim significant only for being\na woman, rather than one of the most knowledgeable investors in the\nValley.\n\nAfter that she told the PR firm to stop.\n\nYou're not going to be hearing in the press about what Jessica has\nachieved. So let me tell you what Jessica has achieved.  Y Combinator\nis fundamentally a nexus of people, like a university. It doesn't\nmake a product. What defines it is the people.  Jessica more than\nanyone curated and nurtured that collection of people.  In that\nsense she literally made YC.\n\nJessica knows more about the qualities of startup founders than\nanyone else ever has. Her immense data set and x-ray vision are the\nperfect storm in that respect.  The qualities of the founders are\nthe best predictor of how a startup will do.  And startups are in\nturn the most important source of growth in mature economies.\n\nThe person who knows the most about the most important factor in\nthe growth of mature economies \u2014 that is who Jessica Livingston is.\nDoesn't that sound like someone who should be better known?\n\n\n\n\n\n\n\nNotes\n\n[1]\nHarj Taggar reminded me that while Jessica didn't ask many\nquestions, they tended to be important ones:\n\n\"She was always good at sniffing out any red flags about the team\nor their determination and disarmingly asking the right question,\nwhich usually revealed more than the founders realized.\"\n\n[2]\nOr more precisely, while she likes getting attention in the\nsense of getting credit for what she has done, she doesn't like\ngetting attention in the sense of being watched in real time.\nUnfortunately, not just for her but for a lot of people, how much\nyou get of the former depends a lot on how much you get of the\nlatter.\n\nIncidentally, if you saw Jessica at a public event, you would never\nguess she\nhates attention, because (a) she is very polite and (b) when she's\nnervous, she expresses it by smiling more.\n\n[3]\nThe existence of people like Jessica is not just something\nthe mainstream media needs to learn to acknowledge, but something\nfeminists need to learn to acknowledge as well.  There are successful\nwomen who don't like to fight.  Which means if the public conversation\nabout women consists of fighting, their voices will be silenced.\n\nThere's a sort of Gresham's Law of conversations. If a conversation\nreaches a certain level of incivility, the more thoughtful people\nstart to leave. No one understands female founders better than\nJessica.  But it's unlikely anyone will ever hear her speak candidly\nabout the topic. She ventured a toe in that water a while ago, and\nthe reaction was so violent that she decided \"never again.\"\n\n\nThanks to Sam Altman, Paul Buchheit, Patrick Collison, \nDaniel Gackle, Carolynn\nLevy, Jon Levy, Kirsty Nathoo, Robert Morris, Geoff Ralston, and\nHarj Taggar for reading drafts of this.  And yes, Jessica Livingston,\nwho made me cut surprisingly little.\n\n\n\n", "October 2015\n\nThis will come as a surprise to a lot of people, but in some cases\nit's possible to detect bias in a selection process without knowing\nanything about the applicant pool.  Which is exciting because among\nother things it means third parties can use this technique to detect\nbias whether those doing the selecting want them to or not.\n\nYou can use this technique whenever (a) you have at least\na random sample of the applicants that were selected, (b) their\nsubsequent performance is measured, and (c) the groups of\napplicants you're comparing have roughly equal distribution of ability.\n\nHow does it work?  Think about what it means to be biased.  What\nit means for a selection process to be biased against applicants\nof type x is that it's harder for them to make it through.  Which\nmeans applicants of type x have to be better to get selected than\napplicants not of type x.\n[1]\nWhich means applicants of type x\nwho do make it through the selection process will outperform other\nsuccessful applicants.  And if the performance of all the successful\napplicants is measured, you'll know if they do.\n\nOf course, the test you use to measure performance must be a valid\none.  And in particular it must not be invalidated by the bias you're\ntrying to measure.\nBut there are some domains where performance can be measured, and\nin those detecting bias is straightforward. Want to know if the\nselection process was biased against some type of applicant?  Check\nwhether they outperform the others.  This is not just a heuristic\nfor detecting bias.  It's what bias means.\n\nFor example, many suspect that venture capital firms are biased\nagainst female founders. This would be easy to detect: among their\nportfolio companies, do startups with female founders outperform\nthose without?  A couple months ago, one VC firm (almost certainly\nunintentionally) published a study showing bias of this type. First\nRound Capital found that among its portfolio companies, startups\nwith female founders outperformed\nthose without by 63%. \n[2]\n\nThe reason I began by saying that this technique would come as a\nsurprise to many people is that we so rarely see analyses of this\ntype.  I'm sure it will come as a surprise to First Round that they\nperformed one. I doubt anyone there realized that by limiting their\nsample to their own portfolio, they were producing a study not of\nstartup trends but of their own biases when selecting companies.\n\nI predict we'll see this technique used more in the future.  The\ninformation needed to conduct such studies is increasingly available.\nData about who applies for things is usually closely guarded by the\norganizations selecting them, but nowadays data about who gets\nselected is often publicly available to anyone who takes the trouble\nto aggregate it.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nThis technique wouldn't work if the selection process looked\nfor different things from different types of applicants\u2014for\nexample, if an employer hired men based on their ability but women\nbased on their appearance.\n\n[2]\nAs Paul Buchheit points out, First Round excluded their most \nsuccessful investment, Uber, from the study.  And while it \nmakes sense to exclude outliers from some types of studies, \nstudies of returns from startup investing, which is all about \nhitting outliers, are not one of them.\n\n\nThanks to Sam Altman, Jessica Livingston, and Geoff Ralston for reading\ndrafts of this.\n\n", "October 2015\n\nHere's a simple trick for getting more people to read what you\nwrite: write in spoken language.\n\nSomething comes over most people when they start writing. They write\nin a different language than they'd use if they were talking to a\nfriend. The sentence structure and even the words are different.\nNo one uses \"pen\" as a verb in spoken English. You'd feel like an\nidiot using \"pen\" instead of \"write\" in a conversation with a friend.\n\nThe last straw for me was a sentence I read a couple days ago:\n\n  The mercurial Spaniard himself declared: \"After Altamira, all is\n  decadence.\"\n\nIt's from Neil Oliver's A History of Ancient Britain. I feel bad\nmaking an example of this book, because it's no worse than lots of\nothers.  But just imagine calling Picasso \"the mercurial Spaniard\" when\ntalking to a friend.  Even one\nsentence of this would raise eyebrows in conversation.  And yet\npeople write whole books of it.\n\nOk, so written and spoken language are different. Does that make\nwritten language worse?\n\nIf you want people to read and understand what you write, yes.\nWritten language is more complex, which makes it more work to read.\nIt's also more formal and distant, which gives the reader's attention\npermission to drift.  But perhaps worst of all, the complex sentences\nand fancy words give you, the writer, the false impression that\nyou're saying more than you actually are.\n\nYou don't need complex sentences to express complex ideas.  When\nspecialists in some abstruse topic talk to one another about ideas\nin their field, they don't use sentences any more complex than they\ndo when talking about what to have for lunch.  They use different\nwords, certainly.  But even those they use no more than necessary.\nAnd in my experience, the harder the subject, the more informally\nexperts speak. Partly, I think, because they have less to prove,\nand partly because the harder the ideas you're talking about, the\nless you can afford to let language get in the way.\n\nInformal language is the athletic clothing of ideas.\n\nI'm not saying spoken language always works best. Poetry is as much\nmusic as text, so you can say things you wouldn't say in conversation.\nAnd there are a handful of writers who can get away with using fancy\nlanguage in prose. And then of course there are cases where writers\ndon't want to make it easy to understand what they're saying\u2014in\ncorporate announcements of bad news, for example, or at the more\nbogus end of the humanities.  But for nearly everyone else, spoken\nlanguage is better.\n\nIt seems to be hard for most people to write in spoken language.\nSo perhaps the best solution is to write your first draft the way\nyou usually would, then afterward look at each sentence and ask \"Is\nthis the way I'd say this if I were talking to a friend?\" If it\nisn't, imagine what you would say, and use that instead.  After a\nwhile this filter will start to operate as you write. When you write\nsomething you wouldn't say, you'll hear the clank as it hits the\npage.\n\nBefore I publish a new essay, I read it out loud and fix everything\nthat doesn't sound like conversation. I even fix bits that are\nphonetically awkward; I don't know if that's necessary, but it\ndoesn't cost much.\n\nThis trick may not always be enough.  I've seen writing so far\nremoved from spoken language that it couldn't be fixed sentence by\nsentence.  For cases like that there's a more drastic solution.\nAfter writing the first draft, try explaining to a friend what you\njust wrote. Then replace the draft with what you said to your friend.\n\nPeople often tell me how much my essays sound like me talking.\nThe fact that this seems worthy of comment shows how rarely people\nmanage to write in spoken language.  Otherwise everyone's writing\nwould sound like them talking.\n\nIf you simply manage to write in spoken language, you'll be ahead\nof 95% of writers.  And it's so easy to do: just don't let a sentence\nthrough unless it's the way you'd say it to a friend.\n\n\n\n\n\n\n\nThanks to Patrick Collison and Jessica Livingston for reading drafts of this.\n\n", "October 2015\n\nWhen I talk to a startup that's been operating for more than 8 or\n9 months, the first thing I want to know is almost always the same.\nAssuming their expenses remain constant and their revenue growth\nis what it has been over the last several months, do they make it to\nprofitability on the money they have left?  Or to put it more\ndramatically, by default do they live or die?\n\nThe startling thing is how often the founders themselves don't know.\nHalf the founders I talk to don't know whether they're default alive\nor default dead.\n\nIf you're among that number, Trevor Blackwell has made a handy\ncalculator you can use to find out.\n\nThe reason I want to know first whether a startup is default alive\nor default dead is that the rest of the conversation depends on the\nanswer.  If the company is default alive, we can talk about ambitious\nnew things they could do.  If it's default dead, we probably need\nto talk about how to save it.  We know the current trajectory ends\nbadly.  How can they get off that trajectory?\n\nWhy do so few founders know whether they're default alive or default\ndead?  Mainly, I think, because they're not used to asking that.\nIt's not a question that makes sense to ask early on, any more than\nit makes sense to ask a 3 year old how he plans to support\nhimself.  But as the company grows older, the question switches from\nmeaningless to critical.  That kind of switch often takes people\nby surprise.\n\nI propose the following solution: instead of starting to ask too\nlate whether you're default alive or default dead, start asking too\nearly.  It's hard to say precisely when the question switches\npolarity.  But it's probably not that dangerous to start worrying\ntoo early that you're default dead, whereas it's very dangerous to\nstart worrying too late.\n\nThe reason is a phenomenon I wrote about earlier: the\nfatal pinch.\nThe fatal pinch is default dead + slow growth + not enough\ntime to fix it.  And the way founders end up in it is by not realizing\nthat's where they're headed.\n\nThere is another reason founders don't ask themselves whether they're\ndefault alive or default dead: they assume it will be easy to raise\nmore money.  But that assumption is often false, and worse still, the\nmore you depend on it, the falser it becomes.\n\nMaybe it will help to separate facts from hopes. Instead of thinking\nof the future with vague optimism, explicitly separate the components.\nSay \"We're default dead, but we're counting on investors to save\nus.\" Maybe as you say that, it will set off the same alarms in your\nhead that it does in mine.  And if you set off the alarms sufficiently\nearly, you may be able to avoid the fatal pinch.\n\nIt would be safe to be default dead if you could count on investors\nsaving you.  As a rule their interest is a function of\ngrowth.  If you have steep revenue growth, say over 5x a year, you\ncan start to count on investors being interested even if you're not\nprofitable.\n[1]\nBut investors are so fickle that you can never\ndo more than start to count on them.  Sometimes something about your\nbusiness will spook investors even if your growth is great.  So no\nmatter how good your growth is, you can never safely treat fundraising\nas more than a plan A. You should always have a plan B as well: you\nshould know (as in write down) precisely what you'll need to do to\nsurvive if you can't raise more money, and precisely when you'll \nhave to switch to plan B if plan A isn't working.\n\nIn any case, growing fast versus operating cheaply is far from the\nsharp dichotomy many founders assume it to be.  In practice there\nis surprisingly little connection between how much a startup spends\nand how fast it grows.  When a startup grows fast, it's usually\nbecause the product hits a nerve, in the sense of hitting some big\nneed straight on.  When a startup spends a lot, it's usually because\nthe product is expensive to develop or sell, or simply because\nthey're wasteful.\n\nIf you're paying attention, you'll be asking at this point not just\nhow to avoid the fatal pinch, but how to avoid being default dead.\nThat one is easy: don't hire too fast.  Hiring too fast is by far\nthe biggest killer of startups that raise money.\n[2]\n\nFounders tell themselves they need to hire in order to grow.  But\nmost err on the side of overestimating this need rather than\nunderestimating it.  Why?  Partly because there's so much work to\ndo.  Naive founders think that if they can just hire enough\npeople, it will all get done.  Partly because successful startups have\nlots of employees, so it seems like that's what one does in order\nto be successful.  In fact the large staffs of successful startups\nare probably more the effect of growth than the cause.  And\npartly because when founders have slow growth they don't want to\nface what is usually the real reason: the product is not appealing\nenough.\n\nPlus founders who've just raised money are often encouraged to\noverhire by the VCs who funded them.  Kill-or-cure strategies are\noptimal for VCs because they're protected by the portfolio effect.\nVCs want to blow you up, in one sense of the phrase or the other.\nBut as a founder your incentives are different.  You want above all\nto survive.\n[3]\n\nHere's a common way startups die.  They make something moderately\nappealing and have decent initial growth. They raise their first\nround fairly easily, because the founders seem smart and the idea\nsounds plausible. But because the product is only moderately\nappealing, growth is ok but not great.  The founders convince\nthemselves that hiring a bunch of people is the way to boost growth.\nTheir investors agree.  But (because the product is only moderately\nappealing) the growth never comes.  Now they're rapidly running out\nof runway.  They hope further investment will save them. But because\nthey have high expenses and slow growth, they're now unappealing\nto investors. They're unable to raise more, and the company dies.\n\nWhat the company should have done is address the fundamental problem:\nthat the product is only moderately appealing.  Hiring people is\nrarely the way to fix that.  More often than not it makes it harder.\nAt this early stage, the product needs to evolve more than to be\n\"built out,\" and that's usually easier with fewer people.\n[4]\n\nAsking whether you're default alive or default dead may save you\nfrom this.  Maybe the alarm bells it sets off will counteract the\nforces that push you to overhire.  Instead you'll be compelled to\nseek growth in other ways. For example, by doing\nthings that don't scale, or by redesigning the product in the\nway only founders can.\nAnd for many if not most startups, these paths to growth will be\nthe ones that actually work.\n\nAirbnb waited 4 months after raising money at the end of Y\u00a0Combinator\nbefore they hired their first employee.  In the meantime the founders\nwere terribly overworked.  But they were overworked evolving Airbnb\ninto the astonishingly successful organism it is now.\n\n\n\n\n\nNotes\n\n[1]\nSteep usage growth will also interest investors.  Revenue\nwill ultimately be a constant multiple of usage, so x% usage growth\npredicts x% revenue growth.  But in practice investors discount\nmerely predicted revenue, so if you're measuring usage you need a\nhigher growth rate to impress investors.\n\n[2]\nStartups that don't raise money are saved from hiring too\nfast because they can't afford to. But that doesn't mean you should\navoid raising money in order to avoid this problem, any more than\nthat total abstinence is the only way to avoid becoming an alcoholic.\n\n[3]\nI would not be surprised if VCs' tendency to push founders\nto overhire is not even in their own interest.  They don't know how\nmany of the companies that get killed by overspending might have\ndone well if they'd survived.  My guess is a significant number.\n\n[4]\nAfter reading a draft, Sam Altman wrote:\n\n\"I think you should make the hiring point more strongly.  I think\nit's roughly correct to say that YC's most successful companies\nhave never been the fastest to hire, and one of the marks of a great\nfounder is being able to resist this urge.\"\n\nPaul Buchheit adds:\n\n\"A related problem that I see a lot is premature scaling\u2014founders\ntake a small business that isn't really working (bad unit economics,\ntypically) and then scale it up because they want impressive growth\nnumbers. This is similar to over-hiring in that it makes the business\nmuch harder to fix once it's big, plus they are bleeding cash really\nfast.\"\n\n\nThanks to Sam Altman, Paul Buchheit, Joe Gebbia, Jessica Livingston,\nand Geoff Ralston for reading drafts of this.\n\n", "August 2015\n\nI recently got an email from a founder that helped me understand\nsomething important: why it's safe for startup founders to be nice\npeople.\n\nI grew up with a cartoon idea of a very successful businessman (in\nthe cartoon it was always a man): a rapacious, cigar-smoking,\ntable-thumping guy in his fifties who wins by exercising power, and\nisn't too fussy about how.  As I've written before, one of\nthe things that has surprised me most about startups is \nhow few of\nthe most successful founders are like that.  Maybe successful people\nin other industries are; I don't know; but not startup founders.\n[1]\n\nI knew this empirically, but I never saw the math of why till I got\nthis founder's email.  In it he said he worried that he was\nfundamentally soft-hearted and tended to give away too much for\nfree. He thought perhaps he needed \"a little dose of sociopath-ness.\"\n\nI told him not to worry about it, because so long as he built\nsomething good enough to spread by word of mouth, he'd have a\nsuperlinear growth curve.  If he was bad at extracting money from\npeople, at worst this curve would be some constant multiple less\nthan 1 of what it might have been.  But a constant multiple of any\ncurve is exactly the same shape.  The numbers on the Y axis are\nsmaller, but the curve is just as steep, and when anything grows\nat the rate of a successful startup, the Y axis will take care of\nitself.\n\nSome examples will make this clear.  Suppose your company is making\n$1000 a month now, and you've made something so great that it's\ngrowing at 5% a week.  Two years from now, you'll be making about\n$160k a month.\n\nNow suppose you're so un-rapacious that you only extract half as\nmuch from your users as you could.  That means two years later\nyou'll be making $80k a month instead of $160k.  How far behind are\nyou? How long will it take to catch up with where you'd have been\nif you were extracting every penny?  A mere 15 weeks.  After two\nyears, the un-rapacious founder is only 3.5 months behind the\nrapacious one. \n[2]\n\nIf you're going to optimize a number, the one to choose is your\ngrowth rate. Suppose as before that you only extract half as much\nfrom users as you could, but that you're able to grow 6% a week\ninstead of 5%.  Now how are you doing compared to the rapacious\nfounder after two years?  You're already ahead\u2014$214k a month\nversus $160k\u2014and pulling away fast.  In another year you'll be\nmaking $4.4 million a month to the rapacious founder's $2 million.\n\nObviously one case where it would help to be rapacious is when\ngrowth depends on that.  What makes startups different is that\nusually it doesn't. Startups usually win by making something so\ngreat that people recommend it to their friends.  And being rapacious\nnot only doesn't help you do that, but probably hurts.  \n[3]\n\nThe reason startup founders can safely be nice is that making great\nthings is compounded, and rapacity isn't.\n\nSo if you're a founder, here's a deal you can make with yourself\nthat will both make you happy and make your company successful.\nTell yourself you can be as nice as you want, so long as you work\nhard on your growth rate to compensate.  Most successful startups\nmake that tradeoff unconsciously. Maybe if you do it consciously\nyou'll do it even better.\n\n\n\n\n\n\n\nNotes\n\n[1]\nMany think successful startup founders are driven by money.\nIn fact the secret weapon of the most successful founders is that\nthey aren't.  If they were, they'd have taken one of the acquisition\noffers that every fast-growing startup gets on the way up.  What\ndrives the most successful founders is the same thing that drives\nmost people who make things: the company is their project.\n\n[2]\nIn fact since 2 \u2248 1.05 ^ 15, the un-rapacious founder is\nalways 15 weeks behind the rapacious one.\n\n[3]\nThe other reason it might help to be good at squeezing money\nout of customers is that startups usually lose money at first, and\nmaking more per customer makes it easier to get to profitability\nbefore your initial funding runs out.  But while it is very common\nfor startups to die\nfrom running through their initial funding and then being unable\nto raise more, the underlying cause is usually slow growth or\nexcessive spending rather than insufficient effort to extract money\nfrom existing customers.\n\n\n\nThanks to Sam Altman, Harj Taggar, Jessica Livingston, and\nGeoff Ralston for reading drafts of this, and to Randall Bennett\nfor being such a nice guy.\n\n", "August 2015\n\nIf you have a US startup called X and you don't have x.com, you\nshould probably change your name.\n\nThe reason is not just that people can't find you.  For companies\nwith mobile apps, especially, having the right domain name is not\nas critical as it used to be for getting users.  The problem with\nnot having the .com of your name is that it signals weakness.  Unless\nyou're so big that your reputation precedes you, a marginal domain\nsuggests you're a marginal company.  Whereas\n(as Stripe shows)\nhaving x.com signals strength even if it has no relation to what you\ndo.\n\nEven good founders can be in denial about this.  Their denial derives\nfrom two very powerful forces: identity, and lack of imagination.\n\nX is what we are, founders think. There's no other name as good.\nBoth of which are false.\n\nYou can fix the first by stepping back from the problem. Imagine\nyou'd called your company something else.  If you had, surely you'd\nbe just as attached to that name as you are to your current one.\nThe idea of switching to your current name would seem repellent.\n[1]\n\nThere's nothing intrinsically great about your current name.  Nearly\nall your attachment to it comes from it being attached to you.\n[2]\n\nThe way to neutralize the second source of denial, your inability\nto think of other potential names, is to acknowledge that you're\nbad at naming.  Naming is a completely separate skill from those\nyou need to be a good founder.  You can be a great startup founder\nbut hopeless at thinking of names for your company.\n\nOnce you acknowledge that, you stop believing there is nothing else\nyou could be called.  There are lots of other potential names that\nare as good or better; you just can't think of them.\n\nHow do you find them? One answer is the default way to solve\nproblems you're bad at: find someone else who can think of names.\nBut with company names there is another possible\napproach.  It turns out almost any word or word pair that is not\nan obviously bad name is a sufficiently good one, and the number\nof such domains is so large that you can find plenty that are cheap\nor even untaken.  So make a list and try to buy some.  That's what\nStripe \ndid.  (Their search also turned up parse.com, which their\nfriends at Parse took.)\n\nThe reason I know that naming companies is a distinct skill orthogonal\nto the others you need in a startup is that I happen to have it.\nBack when I was running YC and did more office hours with startups,\nI would often help them find new names.  80% of the time we could\nfind at least one good name in a 20 minute office hour slot.\n\nNow when I do office hours I have to focus on more important\nquestions, like what the company is doing.  I tell them when they\nneed to change their name.  But I know the power of the forces that\nhave them in their grip, so I know most won't listen. \n[3]\n\nThere are of course examples of startups that have succeeded without\nhaving the .com of their name.  There are startups that have succeeded despite any\nnumber of different mistakes.  But this mistake is less excusable\nthan most.  It's something that can be fixed in a couple days if\nyou have sufficient discipline to acknowledge the problem.\n\n100% of the top 20 YC companies by valuation have the .com of their\nname. 94% of the top 50 do. But only 66% of companies in the current\nbatch have the .com of their name. Which suggests there are lessons\nahead for most of the rest, one way or another.\n\n\n\n\n\n\nNotes\n\n[1]\nIncidentally, this thought experiment works for\nnationality and religion too.\n\n[2]\nThe liking you have for a name that has become part of your\nidentity manifests itself not directly, which would be easy to\ndiscount, but as a collection of specious beliefs about its intrinsic\nqualities.  (This too is true of nationality and religion as well.)\n\n[3]\nSometimes founders know it's a problem that they don't have\nthe .com of their name, but delusion strikes a step later in the belief that they'll\nbe able to buy it despite having no evidence it's for sale.  Don't\nbelieve a domain is for sale unless the owner has already told you\nan asking price.\n\n\nThanks to Sam Altman, Jessica Livingston, and Geoff Ralston\nfor reading drafts of this.\n\n", "February 2015\n\nOne of the most valuable exercises you can try if you want to\nunderstand startups is to look at the most successful companies and\nexplain why they were not as lame as they seemed when they first\nlaunched.  Because they practically all seemed lame at first. Not\njust small, lame.  Not just the first step up a big mountain.  More\nlike the first step into a swamp.\n\nA Basic interpreter for the Altair?  How could that ever grow into\na giant company?  People sleeping on airbeds in strangers' apartments?\nA web site for college students to stalk one another?  A wimpy\nlittle single-board computer for hobbyists that used a TV as a\nmonitor?  A new search engine, when there were already about 10,\nand they were all trying to de-emphasize search?  These ideas didn't\njust seem small.  They seemed wrong.  They were the kind of ideas\nyou could not merely ignore, but ridicule.\n\nOften the founders themselves didn't know why their ideas were\npromising.  They were attracted to these ideas by instinct, because\nthey were living in the future and\nthey sensed that something was missing.  But they could not have\nput into words exactly how their ugly ducklings were going to grow\ninto big, beautiful swans.\n\nMost people's first impulse when they hear about a lame-sounding\nnew startup idea is to make fun of it.  Even a lot of people who\nshould know better.\n\nWhen I encounter a startup with a lame-sounding idea, I ask \"What\nMicrosoft is this the Altair Basic of?\"  Now it's a puzzle, and the\nburden is on me to solve it.  Sometimes I can't think of an answer,\nespecially when the idea is a made-up one.  But it's remarkable how\noften there does turn out to be an answer.  Often it's one the\nfounders themselves hadn't seen yet.\n\nIntriguingly, there are sometimes multiple answers.  I talked to a\nstartup a few days ago that could grow into 3 distinct Microsofts.\nThey'd probably vary in size by orders of magnitude.  But you can\nnever predict how big a Microsoft is going to be, so in cases like\nthat I encourage founders to follow whichever path is most immediately\nexciting to them.  Their instincts got them this far. Why stop now?\n\n", "January 2015\n\nNo one, VC or angel, has invested in more of the top startups than\nRon Conway.  He knows what happened in every deal in the Valley,\nhalf the time because he arranged it.\n\nAnd yet he's a super nice guy.  In fact, nice is not the word.\nRonco is good. I know of zero instances in which he has behaved\nbadly.  It's hard even to imagine.\n\nWhen I first came to Silicon Valley I thought \"How lucky that someone\nso powerful is so benevolent.\"  But gradually I realized it wasn't\nluck.  It was by being benevolent that Ronco became so powerful.\nAll the deals he gets to invest in come to him through referrals.\nGoogle did. Facebook did. Twitter was a referral from Evan Williams\nhimself.  And the reason so many people refer deals to him is that\nhe's proven himself to be a good guy.\n\nGood does not mean being a pushover.  I would not want to face an\nangry Ronco.  But if Ron's angry at you, it's because you did\nsomething wrong.  Ron is so old school he's Old Testament.  He will\nsmite you in his just wrath, but there's no malice in it.\n\nIn almost every domain there are advantages to seeming good.  It\nmakes people trust you.  But actually being good is an expensive\nway to seem good.  To an amoral person it might seem to be overkill.\n\nIn some fields it might be, but apparently not in the startup world.\nThough plenty of investors are jerks, there is a clear trend among\nthem: the most successful investors are also the most upstanding. \n[1]\n\nIt was not always this way.  I would not feel confident saying that\nabout investors twenty years ago.\n\nWhat changed?  The startup world became more transparent and more\nunpredictable.  Both make it harder to seem good without actually\nbeing good.\n\nIt's obvious why transparency has that effect.  When an investor\nmaltreats a founder now, it gets out.  Maybe not all the way to the\npress, but other founders hear about it, and that investor\nstarts to lose deals. \n[2]\n\nThe effect of unpredictability is more subtle.  It increases the\nwork of being inconsistent.  If you're going to be two-faced, you\nhave to know who you should be nice to and who you can get away\nwith being nasty to.  In the startup world, things change so rapidly\nthat you can't tell.  The random college kid you talk to today might\nin a couple years be the CEO of the hottest startup in the Valley.\nIf you can't tell who to be nice to, you have to be nice to everyone.\nAnd probably the only people who can manage that are the people who\nare genuinely good.\n\nIn a sufficiently connected and unpredictable world, you can't seem\ngood without being good.\n\nAs often happens, Ron discovered how to be the investor of the\nfuture by accident.  He didn't foresee the future of startup\ninvesting, realize it would pay to be upstanding, and force himself\nto behave that way. It would feel unnatural to him to behave any\nother way.  He was already \nliving in the future.\n\nFortunately that future is not limited to the startup world.  The\nstartup world is more transparent and unpredictable than most, but\nalmost everywhere the trend is in that direction.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nI'm not saying that if you sort investors by benevolence\nyou've also sorted them by returns, but rather that if you do a\nscatterplot with benevolence on the x axis and returns on the y,\nyou'd see a clear upward trend.\n\n[2]\nY Combinator in particular, because it aggregates data\nfrom so many startups, has a pretty comprehensive view of\ninvestor behavior.\n\n\nThanks to Sam Altman and Jessica Livingston for reading drafts of\nthis.\n\n", "January 2015\n\nMy father is a mathematician. For most of my childhood he worked\nfor Westinghouse, modelling nuclear reactors.\n\nHe was one of those lucky people who know early on what they want to\ndo.  When you talk to him about his childhood, there's a clear\nwatershed at about age 12, when he \"got interested in maths.\"\n\nHe\ngrew up in the small Welsh seacoast town of Pwllheli.  As we retraced\nhis walk to school on Google Street View, he said that it had been\nnice growing up in the country.\n\n\"Didn't it get boring when you got to be about 15?\" I asked.\n\n\"No,\" he said, \"by then I was interested in maths.\"\n\nIn another conversation he told me that what he really liked was\nsolving problems.  To me the exercises at the end of each chapter\nin a math textbook represent work, or at best a way to reinforce\nwhat you learned in that chapter.  To him the problems were the\nreward.  The text of each chapter was just some advice about solving\nthem. He said that as soon as he got a new textbook he'd immediately\nwork out all the problems \u2014 to the slight annoyance of his teacher,\nsince the class was supposed to work through the book gradually.\n\nFew people know so early or so certainly what they want to work on.\nBut talking to my father reminded me of a heuristic the rest of us\ncan use. If something that seems like work to other people doesn't\nseem like work to you, that's something you're well suited for.\nFor example, a lot of programmers I know, including me, actually\nlike debugging.  It's not something people tend to volunteer; one\nlikes it the way one likes popping zits. But you may have to like\ndebugging to like programming, considering the degree to which\nprogramming consists of it.\n\nThe stranger your tastes seem to other people, the stronger evidence\nthey probably are of what you should do. When I was in college I\nused to write papers for my friends.  It was quite interesting to\nwrite a paper for a class I wasn't taking.  Plus they were always\nso relieved.\n\nIt seemed curious that the same task could be painful to one person\nand pleasant to another, but I didn't realize at the time what this\nimbalance implied, because I wasn't looking for it.  I didn't realize\nhow hard it can be to decide what you should work on, and that you\nsometimes have to figure it out from subtle clues, like a detective\nsolving a case in a mystery novel.  So I bet it would help a lot\nof people to ask themselves about this explicitly. What seems like\nwork to other people that doesn't seem like work to you?\n\n\n\n\n\n\nThanks to Sam Altman, Trevor Blackwell, Jessica Livingston,\nRobert Morris, and my father for reading drafts of this.\n\n", "January 2015\n\nCorporate Development, aka corp dev, is the group within companies\nthat buys other companies. If you're talking to someone from corp\ndev, that's why, whether you realize it yet or not.\n\nIt's usually a mistake to talk to corp dev unless (a) you want to\nsell your company right now and (b) you're sufficiently likely to\nget an offer at an acceptable price.  In practice that means startups\nshould only talk to corp dev when they're either doing really well\nor really badly.  If you're doing really badly, meaning the company\nis about to die, you may as well talk to them, because you have\nnothing to lose. And if you're doing really well, you can safely\ntalk to them, because you both know the price will have to be high,\nand if they show the slightest sign of wasting your time, you'll\nbe confident enough to tell them to get lost.\n\nThe danger is to companies in the middle.  Particularly to young\ncompanies that are growing fast, but haven't been doing it for long\nenough to have grown big yet.  It's usually a mistake for a promising\ncompany less than a year old even to talk to corp dev.\n\nBut it's a mistake founders constantly make.  When someone from\ncorp dev wants to meet, the founders tell themselves they should\nat least find out what they want.  Besides, they don't want to\noffend Big Company by refusing to meet.\n\nWell, I'll tell you what they want.  They want to talk about buying\nyou.  That's what the title \"corp dev\" means.   So before agreeing\nto meet with someone from corp dev, ask yourselves, \"Do we want to\nsell the company right now?\"  And if the answer is no, tell them\n\"Sorry, but we're focusing on growing the company.\"  They won't be\noffended.  And certainly the founders of Big Company won't be\noffended. If anything they'll think more highly of you.  You'll\nremind them of themselves.  They didn't sell either; that's why\nthey're in a position now to buy other companies.\n[1]\n\nMost founders who get contacted by corp dev already know what it\nmeans.  And yet even when they know what corp dev does and know\nthey don't want to sell, they take the meeting.  Why do they do it?\nThe same mix of denial and wishful thinking that underlies most\nmistakes founders make. It's flattering to talk to someone who wants\nto buy you.  And who knows, maybe their offer will be surprisingly\nhigh.  You should at least see what it is, right?\n\nNo.  If they were going to send you an offer immediately by email,\nsure, you might as well open it.  But that is not how conversations\nwith corp dev work.  If you get an offer at all, it will be at the\nend of a long and unbelievably distracting process.  And if the\noffer is surprising, it will be surprisingly low.\n\nDistractions are the thing you can least afford in a startup.  And\nconversations with corp dev are the worst sort of distraction,\nbecause as well as consuming your attention they undermine your\nmorale.  One of the tricks to surviving a grueling process is not\nto stop and think how tired you are.  Instead you get into a sort\nof flow. \n[2]\nImagine what it would do to you if at mile 20 of a\nmarathon, someone ran up beside you and said \"You must feel really\ntired.  Would you like to stop and take a rest?\"  Conversations\nwith corp dev are like that but worse, because the suggestion of\nstopping gets combined in your mind with the imaginary high price\nyou think they'll offer.\n\nAnd then you're really in trouble.  If they can, corp dev people\nlike to turn the tables on you. They like to get you to the point\nwhere you're trying to convince them to buy instead of them trying\nto convince you to sell.  And surprisingly often they succeed.\n\nThis is a very slippery slope, greased with some of the most powerful\nforces that can work on founders' minds, and attended by an experienced\nprofessional whose full time job is to push you down it.\n\nTheir tactics in pushing you down that slope are usually fairly\nbrutal. Corp dev people's whole job is to buy companies, and they\ndon't even get to choose which.  The only way their performance is\nmeasured is by how cheaply they can buy you, and the more ambitious\nones will stop at nothing to achieve that. For example, they'll\nalmost always start with a lowball offer, just to see if you'll\ntake it. Even if you don't, a low initial offer will demoralize you\nand make you easier to manipulate.\n\nAnd that is the most innocent of their tactics. Just wait till\nyou've agreed on a price and think you have a done deal, and then\nthey come back and say their boss has vetoed the deal and won't do\nit for more than half the agreed upon price. Happens all the time.\nIf you think investors can behave badly, it's nothing compared to\nwhat corp dev people can do.  Even corp dev people at companies\nthat are otherwise benevolent.\n\nI remember once complaining to a\nfriend at Google about some nasty trick their corp dev people had\npulled on a YC startup.\n\n\"What happened to Don't be Evil?\" I asked.\n\n\"I don't think corp dev got the memo,\" he replied.\n\nThe tactics you encounter in M&A conversations can be like nothing\nyou've experienced in the otherwise comparatively \nupstanding world\nof Silicon Valley.  It's as if a chunk of genetic material from the\nold-fashioned robber baron business world got incorporated into the\nstartup world.\n[3]\n\nThe simplest way to protect yourself is to use the trick that John\nD. Rockefeller, whose grandfather was an alcoholic, used to protect\nhimself from becoming one.  He once told a Sunday school class\n\n  Boys, do you know why I never became a drunkard?  Because I never\n  took the first drink.\n\nDo you want to sell your company right now?  Not eventually, right\nnow.  If not, just don't take the first meeting.  They won't be\noffended.  And you in turn will be guaranteed to be spared one of\nthe worst experiences that can happen to a startup.\n\nIf you do want to sell, there's another set of \ntechniques\n for doing\nthat.  But the biggest mistake founders make in dealing with corp\ndev is not doing a bad job of talking to them when they're ready\nto, but talking to them before they are.  So if you remember only\nthe title of this essay, you already know most of what you need to\nknow about M&A in the first year.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nI'm not saying you should never sell.  I'm saying you should\nbe clear in your own mind about whether you want to sell or not,\nand not be led by manipulation or wishful thinking into trying to\nsell earlier than you otherwise would have.\n\n[2]\nIn a startup, as in most competitive sports, the task at hand\nalmost does this for you; you're too busy to feel tired.  But when\nyou lose that protection, e.g. at the final whistle, the fatigue\nhits you like a wave.  To talk to corp dev is to let yourself feel\nit mid-game.\n\n[3]\nTo be fair, the apparent misdeeds of corp dev people are magnified\nby the fact that they function as the face of a large organization\nthat often doesn't know its own mind.  Acquirers can be surprisingly\nindecisive about acquisitions, and their flakiness is indistinguishable\nfrom dishonesty by the time it filters down to you.\n\nThanks to Marc Andreessen, Jessica Livingston, Geoff\nRalston, and Qasar Younis for reading drafts of this.\n\n", "December 2014\n\nAmerican technology companies want the government to make immigration\neasier because they say they can't find enough programmers in the\nUS.  Anti-immigration people say that instead of letting foreigners\ntake these jobs, we should train more Americans to be programmers.\nWho's right?\n\nThe technology companies are right. What the anti-immigration people\ndon't understand is that there is a huge variation in ability between\ncompetent programmers and exceptional ones, and while you can train\npeople to be competent, you can't train them to be exceptional.\nExceptional programmers have an aptitude for and \ninterest in\nprogramming that is not merely the product of training.\n[1]\n\nThe US has less than 5% of the world's population.  Which means if\nthe qualities that make someone a great programmer are evenly\ndistributed, 95% of great programmers are born outside the US.\n\nThe anti-immigration people have to invent some explanation to\naccount for all the effort technology companies have expended trying\nto make immigration easier.  So they claim it's because they want\nto drive down salaries.  But if you talk to startups, you find\npractically every one over a certain size has gone through legal\ncontortions to get programmers into the US, where they then\npaid them the same as they'd have paid an American.  Why would they\ngo to extra trouble to get programmers for the same price?  The\nonly explanation is that they're telling the truth: there are just\nnot enough great programmers to go around.\n[2]\n\nI asked the CEO of a startup with about 70 programmers how many\nmore he'd hire if he could get all the great programmers he wanted.\nHe said \"We'd hire 30 tomorrow morning.\"  And this is one of the\nhot startups that always win recruiting battles. It's the same all\nover Silicon Valley.  Startups are that constrained for talent.\n\nIt would be great if more Americans were trained as programmers,\nbut no amount of training can flip a ratio as overwhelming as 95\nto 5. Especially since programmers are being trained in other\ncountries too.  Barring some cataclysm, it will always be true that\nmost great programmers are born outside the US.  It will always be\ntrue that most people who are great at anything are born outside\nthe US.\n[3]\n\nExceptional performance implies immigration.  A country with only\na few percent of the world's population will be exceptional in some\nfield only if there are a lot of immigrants working in it.\n\nBut this whole discussion has taken something for granted: that if\nwe let more great programmers into the US, they'll want to come.\nThat's true now, and we don't realize how lucky we are that it is.\nIf we want to keep this option open, the best way to do it is to\ntake advantage of it: the more of the world's great programmers are\nhere, the more the rest will want to come here.\n\nAnd if we don't, the US could be seriously fucked. I realize that's\nstrong language, but the people dithering about this don't seem to\nrealize the power of the forces at work here.  Technology gives the\nbest programmers huge leverage.  The world market in programmers\nseems to be becoming dramatically more liquid.  And since good\npeople like good colleagues, that means the best programmers could\ncollect in just a few hubs.  Maybe mostly in one hub.\n\nWhat if most of the great programmers collected in one hub, and it\nwasn't here?  That scenario may seem unlikely now, but it won't be\nif things change as much in the next 50 years as they did in the\nlast 50.\n\nWe have the potential to ensure that the US remains a technology\nsuperpower just by letting in a few thousand great programmers a\nyear.  What a colossal mistake it would be to let that opportunity\nslip.  It could easily be the defining mistake this generation of\nAmerican politicians later become famous for.  And unlike other\npotential mistakes on that scale, it costs nothing to fix.\n\nSo please, get on with it.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nHow much better is a great programmer than an ordinary one?\nSo much better that you can't even measure the difference directly.\nA great programmer doesn't merely do the same work faster.  A great\nprogrammer will invent things an ordinary programmer would never\neven think of.  This doesn't mean a great programmer is infinitely\nmore valuable, because any invention has a finite market value.\nBut it's easy to imagine cases where a great programmer might invent\nthings worth 100x or even 1000x an average programmer's salary.\n\n[2]\nThere are a handful of consulting firms that rent out big\npools of foreign programmers they bring in on H1-B visas.  By all\nmeans crack down on these.  It should be easy to write legislation\nthat distinguishes them, because they are so different from technology\ncompanies.  But it is dishonest of the anti-immigration people to\nclaim that companies like Google and Facebook are driven by the\nsame motives.  An influx of inexpensive but mediocre programmers\nis the last thing they'd want; it would destroy them.\n\n[3]\nThough this essay talks about programmers, the group of people\nwe need to import is broader, ranging from designers to programmers\nto electrical engineers.  The best one could do as a general term\nmight be \"digital talent.\" It seemed better to make the argument a\nlittle too narrow than to confuse everyone with a neologism.\n\n\nThanks to Sam Altman, John Collison, Patrick Collison, Jessica\nLivingston, Geoff Ralston, Fred Wilson, and Qasar Younis for reading\ndrafts of this.\n\n", "December 2014\n\nIf the world were static, we could have monotonically increasing\nconfidence in our beliefs.  The more (and more varied) experience\na belief survived, the less likely it would be false.  Most people\nimplicitly believe something like this about their opinions.  And\nthey're justified in doing so with opinions about things that don't\nchange much, like human nature.  But you can't trust your opinions\nin the same way about things that change, which could include\npractically everything else.\n\nWhen experts are wrong, it's often because they're experts on an\nearlier version of the world.\n\nIs it possible to avoid that?  Can you protect yourself against\nobsolete beliefs?  To some extent, yes. I spent almost a decade\ninvesting in early stage startups, and curiously enough protecting\nyourself against obsolete beliefs is exactly what you have to do\nto succeed as a startup investor.  Most really good startup ideas\nlook like bad ideas at first, and many of those look bad specifically\nbecause some change in the world just switched them from bad to\ngood.  I spent a lot of time learning to recognize such ideas, and\nthe techniques I used may be applicable to ideas in general.\n\nThe first step is to have an explicit belief in change.  People who\nfall victim to a monotonically increasing confidence in their\nopinions are implicitly concluding the world is static.  If you\nconsciously remind yourself it isn't, you start to look for change.\n\nWhere should one look for it?  Beyond the moderately useful\ngeneralization that human nature doesn't change much, the unfortunate\nfact is that change is hard to predict.  This is largely a tautology\nbut worth remembering all the same: change that matters usually\ncomes from an unforeseen quarter.\n\nSo I don't even try to predict it.  When I get asked in interviews\nto predict the future, I always have to struggle to come up with\nsomething plausible-sounding on the fly, like a student who hasn't\nprepared for an exam.\n[1]\nBut it's not out of laziness that I haven't\nprepared.  It seems to me that beliefs about the future are so\nrarely correct that they usually aren't worth the extra rigidity\nthey impose, and that the best strategy is simply to be aggressively\nopen-minded.  Instead of trying to point yourself in the right\ndirection, admit you have no idea what the right direction is, and\ntry instead to be super sensitive to the winds of change.\n\nIt's ok to have working hypotheses, even though they may constrain\nyou a bit, because they also motivate you.  It's exciting to chase\nthings and exciting to try to guess answers.  But you have to be\ndisciplined about not letting your hypotheses harden into anything\nmore.\n[2]\n\nI believe this passive m.o. works not just for evaluating new ideas\nbut also for having them.  The way to come up with new ideas is not\nto try explicitly to, but to try to solve problems and simply not\ndiscount weird hunches you have in the process.\n\nThe winds of change originate in the unconscious minds of domain\nexperts.  If you're sufficiently expert in a field, any weird idea\nor apparently irrelevant question that occurs to you is ipso facto\nworth exploring. \n[3]\n Within Y Combinator, when an idea is described\nas crazy, it's a compliment\u2014in fact, on average probably a\nhigher compliment than when an idea is described as good.\n\nStartup investors have extraordinary incentives for correcting\nobsolete beliefs.  If they can realize before other investors that\nsome apparently unpromising startup isn't, they can make a huge\namount of money.  But the incentives are more than just financial.\nInvestors' opinions are explicitly tested: startups come to them\nand they have to say yes or no, and then, fairly quickly, they learn\nwhether they guessed right.  The investors who say no to a Google\n(and there were several) will remember it for the rest of their\nlives.\n\nAnyone who must in some sense bet on ideas rather than merely\ncommenting on them has similar incentives.  Which means anyone who\nwants such incentives can have them, by turning their comments into\nbets: if you write about a topic in some fairly durable and public\nform, you'll find you worry much more about getting things right\nthan most people would in a casual conversation.\n[4]\n\nAnother trick I've found to protect myself against obsolete beliefs\nis to focus initially on people rather than ideas. Though the nature\nof future discoveries is hard to predict, I've found I can predict\nquite well what sort of people will make them.  Good new ideas come\nfrom earnest, energetic, independent-minded people.\n\nBetting on people over ideas saved me countless times as an investor.\nWe thought Airbnb was a bad idea, for example. But we could tell\nthe founders were earnest, energetic, and independent-minded.\n(Indeed, almost pathologically so.)  So we suspended disbelief and\nfunded them.\n\nThis too seems a technique that should be generally applicable.\nSurround yourself with the sort of people new ideas come from.  If\nyou want to notice quickly when your beliefs become obsolete, you\ncan't do better than to be friends with the people whose discoveries\nwill make them so.\n\nIt's hard enough already not to become the prisoner of your own\nexpertise, but it will only get harder, because change is accelerating.\nThat's not a recent trend; change has been accelerating since the\npaleolithic era.  Ideas beget ideas.  I don't expect that to change.\nBut I could be wrong.\n\n\n\n\n\n\nNotes\n\n[1]\nMy usual trick is to talk about aspects of the present that\nmost people haven't noticed yet.\n\n[2]\nEspecially if they become well enough known that people start\nto identify them with you.  You have to be extra skeptical about\nthings you want to believe, and once a hypothesis starts to be\nidentified with you, it will almost certainly start to be in that\ncategory.\n\n[3]\nIn practice \"sufficiently expert\" doesn't require one to be\nrecognized as an expert\u2014which is a trailing indicator in any\ncase.  In many fields a year of focused work plus caring a lot would\nbe enough.\n\n[4]\nThough they are public and persist indefinitely, comments on\ne.g. forums and places like Twitter seem empirically to work like\ncasual conversation.  The threshold may be whether what you write\nhas a title.\n\n\nThanks to Sam Altman, Patrick Collison, and Robert Morris\nfor reading drafts of this.\n\n", "December 2014\n\nI've read Villehardouin's chronicle of the Fourth Crusade at least\ntwo times, maybe three.  And yet if I had to write down everything\nI remember from it, I doubt it would amount to much more than a\npage.  Multiply this times several hundred, and I get an uneasy\nfeeling when I look at my bookshelves. What use is it to read all\nthese books if I remember so little from them?\n\nA few months ago, as I was reading Constance Reid's excellent\nbiography of Hilbert, I figured out if not the answer to this\nquestion, at least something that made me feel better about it.\nShe writes:\n\n  Hilbert had no patience with mathematical lectures which filled\n  the students with facts but did not teach them how to frame a\n  problem and solve it. He often used to tell them that \"a perfect\n  formulation of a problem is already half its solution.\"\n\nThat has always seemed to me an important point, and I was even\nmore convinced of it after hearing it confirmed by Hilbert.\n\nBut how had I come to believe in this idea in the first place?  A\ncombination of my own experience and other things I'd read.  None\nof which I could at that moment remember!  And eventually I'd forget\nthat Hilbert had confirmed it too.  But my increased belief in the\nimportance of this idea would remain something I'd learned from\nthis book, even after I'd forgotten I'd learned it.\n\nReading and experience train your model of the world.  And even if\nyou forget the experience or what you read, its effect on your model\nof the world persists.  Your mind is like a compiled program you've\nlost the source of.  It works, but you don't know why.\n\nThe place to look for what I learned from Villehardouin's chronicle\nis not what I remember from it, but my mental models of the crusades,\nVenice, medieval culture, siege warfare, and so on.  Which doesn't\nmean I couldn't have read more attentively, but at least the harvest\nof reading is not so miserably small as it might seem.\n\nThis is one of those things that seem obvious in retrospect.  But\nit was a surprise to me and presumably would be to anyone else who\nfelt uneasy about (apparently) forgetting so much they'd read.\n\nRealizing it does more than make you feel a little better about\nforgetting, though.  There are specific implications.\n\nFor example, reading and experience are usually \"compiled\" at the\ntime they happen, using the state of your brain at that time.  The\nsame book would get compiled differently at different points in\nyour life.  Which means it is very much worth reading important\nbooks multiple times.  I always used to feel some misgivings about\nrereading books.  I unconsciously lumped reading together with work\nlike carpentry, where having to do something again is a sign you\ndid it wrong the first time.  Whereas now the phrase \"already read\"\nseems almost ill-formed.\n\nIntriguingly, this implication isn't limited to books.  Technology\nwill increasingly make it possible to relive our experiences.  When\npeople do that today it's usually to enjoy them again (e.g. when\nlooking at pictures of a trip) or to find the origin of some bug in\ntheir compiled code (e.g. when Stephen Fry succeeded in remembering\nthe childhood trauma that prevented him from singing).  But as\ntechnologies for recording and playing back your life improve, it\nmay become common for people to relive experiences without any goal\nin mind, simply to learn from them again as one might when rereading\na book.\n\nEventually we may be able not just to play back experiences but\nalso to index and even edit them. So although not knowing how you\nknow things may seem part of being human, it may not be.\n\n\n\n\n\n\n\n\nThanks to Sam Altman, Jessica Livingston, and Robert Morris for reading \ndrafts of this.\n\n", "December 2014\n\nMany startups go through a point a few months before they die where\nalthough they have a significant amount of money in the bank, they're\nalso losing a lot each month, and revenue growth is either nonexistent\nor mediocre.  The company has, say, 6 months of runway.  Or to put\nit more brutally, 6 months before they're out of business.  They\nexpect to avoid that by raising more from investors.\n[1]\n\nThat last sentence is the fatal one.\n\nThere may be nothing founders are so prone to delude themselves\nabout as how interested investors will be in giving them additional\nfunding.  It's hard to convince investors the first time too, but\nfounders expect that.  What bites them the second time is a confluence\nof three forces:\n\n The company is spending more now than it did the first time\n  it raised money.\n\n Investors have much higher standards for companies that have\n  already raised money.\n\n The company is now starting to read as a failure. The first\n  time it raised money, it was neither a success nor a failure; it\n  was too early to ask. Now it's possible to ask that question, and\n  the default answer is failure, because at this point that is the\n  default outcome.\n\nI'm going to call the situation I described in the first paragraph \"the fatal pinch.\" I try to resist\ncoining phrases, but making up a name for this situation may snap\nfounders into realizing when they're in it.\n\nOne of the things that makes the fatal pinch so dangerous is\nthat it's self-reinforcing.  Founders overestimate their chances\nof raising more money, and so are slack about reaching\nprofitability, which further decreases their chances of raising\nmoney.\n\nNow that you know about the fatal pinch, how do you avoid it?  Y\u00a0Combinator tells\nfounders who raise money to act as if it's the last they'll ever\nget.  Because the self-reinforcing nature of this situation works\nthe other way too: the less you need further investment, the easier\nit is to get.\n\nWhat do you do if you're already in the fatal pinch?  The\nfirst step is to re-evaluate the probability of raising more money.\nI will now, by an amazing feat of clairvoyance, do this for you:\nthe probability is zero. \n[2]\n\nThree options remain: you can shut down the company, you can increase\nhow much you make, and you can decrease how much you spend.\n\nYou should shut down the company if you're certain it will\nfail no matter what you do.  Then at least you can give back the\nmoney you have left, and save yourself however many months you would\nhave spent riding it down.\n\nCompanies rarely have to fail though.  What I'm really doing\nhere is giving you the option of admitting you've already given up.\n\nIf you don't want to shut down the company, that leaves increasing\nrevenues and decreasing expenses.  In most startups, expenses =\npeople, and decreasing expenses = firing people.\n[3]\nDeciding to\nfire people is usually hard, but there's one case in which it\nshouldn't be: when there are people you already know you should\nfire but you're in denial about it.  If so, now's the time.\n\nIf that makes you profitable, or will enable you to make it to\nprofitability on the money you have left, you've avoided the immediate\ndanger.\n\nOtherwise you have three options: you either have to fire good\npeople, get some or all of the employees to take less salary for a\nwhile, or increase revenues.\n\nGetting people to take less salary is a weak solution that will\nonly work when the problem isn't too bad.  If your current trajectory\nwon't quite get you to profitability but you can get over the threshold\nby cutting salaries a little,\nyou might be able to make the case to everyone for doing it.\nOtherwise you're probably just postponing the problem, and that\nwill be obvious to the people whose salaries you're proposing to\ncut.\n[4]\n\nWhich leaves two options, firing good people and making more money.\nWhile trying to balance them, keep in mind the eventual goal: to be\na successful product company in the sense of having a single thing\nlots of people use.\n\nYou should lean more toward firing people if the source of your\ntrouble is overhiring. If you went out and hired 15 people before\nyou even knew what you were building, you've created a broken\ncompany.  You need to figure out what you're building, and it will\nprobably be easier to do that with a handful of people than 15.\nPlus those 15 people might not even be the ones you need for whatever\nyou end up building.  So the solution may be to shrink and then\nfigure out what direction to grow in.  After all, you're not doing\nthose 15 people any favors if you fly the company into ground with\nthem aboard.  They'll all lose their jobs eventually, along with\nall the time they expended on this doomed company.\n\nWhereas if you only have a handful of people, it may be better to\nfocus on trying to make more money.  It may seem facile to suggest\na startup make more money, as if that could be done for the asking.\nUsually a startup is already trying as hard as it can to sell\nwhatever it sells.  What I'm suggesting here is not so much to try\nharder to make money but to try to make money in a different way.\nFor example, if you have only one person selling while the rest are\nwriting code, consider having everyone work on selling.  What good\nwill more code do you when you're out of business?  \nIf you have to write code to close a certain deal, go ahead;\nthat follows from everyone working on selling.  But only work on\nwhatever will get you the most revenue the soonest.\n\nAnother way to make money differently is to sell different things,\nand in particular to do more consultingish work.  I say consultingish\nbecause there is a long slippery slope from making products to pure\nconsulting, and you don't have to go far down it before you start\nto offer something really attractive to customers. Although your\nproduct may not be very appealing yet, if you're a startup your\nprogrammers will often be way better than the ones your customers\nhave.  Or you may have expertise in some new field they\ndon't understand.  So if you change your sales conversations\njust a little from \"do you want to buy our product?\" to \"what do\nyou need that you'd pay a lot for?\" you may find it's suddenly a\nlot easier to extract money from customers.\n\nBe ruthlessly mercenary when you start doing this, though. You're\ntrying to save your company from death here, so make customers pay\na lot, quickly. And to the extent you can, try to avoid the\nworst pitfalls of consulting.  The ideal thing might be if you built\na precisely defined derivative version of your product for the\ncustomer, and it was otherwise a straight product sale.  You keep\nthe IP and no billing by the hour.\n\nIn the best case, this consultingish work may not be just something\nyou do to survive, but may turn out to be the thing-that-doesn't-scale that defines your\ncompany.  Don't expect it to be, but as you dive into individual\nusers' needs, keep your eyes open for narrow openings that have\nwide vistas beyond.\n\nThere is usually so much demand for custom work that unless you're\nreally incompetent there has to be some point down the slope of\nconsulting at which you can survive.  But I didn't use the term\nslippery slope by accident; customers' insatiable demand for custom\nwork will always be pushing you toward the bottom.  So while you'll\nprobably survive, the problem now becomes to survive with the least\ndamage and distraction.\n\nThe good news is, plenty of successful startups have passed through\nnear-death experiences and gone on to flourish.  You just have to\nrealize in time that you're near death.  And if you're in the fatal pinch,\nyou are.\n\n\n\n\n\n\nNotes\n\n[1]\nThere are a handful of companies that can't reasonably expect\nto make money for the first year or two, because what they're\nbuilding takes so long.  For these companies substitute \"progress\"\nfor \"revenue growth.\"  You're not one of these companies unless\nyour initial investors agreed in advance that you were.  And frankly\neven these companies wish they weren't, because the illiquidity of\n\"progress\" puts them at the mercy of investors.\n\n[2]\nThere's a variant of the fatal pinch where your existing\ninvestors help you along by promising to invest more.  Or rather,\nwhere you read them as promising to invest more, while they think\nthey're just mentioning the possibility.  The way to solve this\nproblem, if you have 8 months of runway or less, is to try to get\nthe money right now.  Then you'll either get the money, in which\ncase (immediate) problem solved, or at least prevent your investors\nfrom helping you to remain in denial about your fundraising prospects.\n\n[3]\nObviously, if you have significant expenses other than salaries\nthat you can eliminate, do it now.\n\n[4]\nUnless of course the source of the problem is that you're paying\nyourselves high salaries.  If by cutting the founders' salaries to\nthe minimum you need, you can make it to profitability, you should.\nBut it's a bad sign if you needed to read this to realize that.\n\n\nThanks to Sam Altman, Paul Buchheit, Jessica Livingston, and\nGeoff Ralston for reading drafts of this.\n\n", "November 2014\n\nIt struck me recently how few of the most successful people I know\nare mean.  There are exceptions, but remarkably few.\n\nMeanness isn't rare.  In fact, one of the things the internet has\nshown us is how mean people can be.  A few decades ago, only famous\npeople and professional writers got to publish their opinions.  Now\neveryone can, and we can all see the long tail of\nmeanness that had previously been hidden.\n\nAnd yet while there are clearly a lot of mean people out there,\nthere are next to none among the most successful people I know.\nWhat's going on here?  Are meanness and success inversely correlated?\n\nPart of what's going on, of course, is selection bias.  I only know\npeople who work in certain fields: startup founders, programmers,\nprofessors. I'm willing to believe that successful people in other\nfields are mean.  Maybe successful hedge fund managers are mean; I\ndon't know enough to say.  It seems quite likely that most successful\ndrug lords are mean.  But there are at least big chunks of the world\nthat mean people don't rule, and that territory seems to be growing.\n\nMy wife and Y Combinator cofounder Jessica is one of those rare\npeople who have x-ray vision for character. Being married to her\nis like standing next to an airport baggage scanner. She came to\nthe startup world from investment banking, and she has always been\nstruck both by how consistently successful startup founders turn\nout to be good people, and how consistently bad people fail as\nstartup founders.\n\nWhy?  I think there are several reasons.  One is that being mean\nmakes you stupid. That's why I hate fights. You never do your best\nwork in a fight, because fights are not sufficiently general.\nWinning is always a function of the situation and the people involved.\nYou don't win fights by thinking of big ideas but by thinking of\ntricks that work in one particular case.  And yet fighting is just\nas much work as thinking about real problems. Which is particularly\npainful to someone who cares how their brain is used: your brain\ngoes fast but you get nowhere, like a car spinning its wheels.\n\nStartups don't win by attacking. They win by transcending. There\nare exceptions of course, but usually the way to win is to race\nahead, not to stop and fight.\n\nAnother reason mean founders lose is that they can't get the best\npeople to work for them. They can hire people who will put up with\nthem because they need a job. But the best people have other options.\nA mean person can't convince the best people to work for him unless\nhe is super convincing. And while having the best people helps any\norganization, it's critical for startups.\n\nThere is also a complementary force at work: if you want to build\ngreat things, it helps to be driven by a spirit of benevolence. The startup founders who end up\nrichest are not the ones driven by money.  The ones driven by money\ntake the big acquisition offer that nearly every successful startup\ngets en route.\n[1]\nThe ones who keep going are driven by something\nelse. They may not say so explicitly, but they're usually trying\nto improve the world.  Which means people with a desire to improve\nthe world have a natural advantage.\n[2]\n\nThe exciting thing is that startups are not just one random type\nof work in which meanness and success are inversely correlated.\nThis kind of work is the future.\n\nFor most of history success meant control of scarce resources.  One\ngot that by fighting, whether literally in the case of pastoral\nnomads driving hunter-gatherers into marginal lands, or metaphorically\nin the case of Gilded Age financiers contending with one another\nto assemble railroad monopolies. For most of history, success meant\nsuccess at zero-sum games. And in most of them meanness was not a\nhandicap but probably an advantage.\n\nThat is changing. Increasingly the games that matter are not zero-sum.\nIncreasingly you win not by fighting to get control of a scarce\nresource, but by having new ideas and building new things.\n[3]\n\nThere have long been games where you won by having new ideas. In\nthe third century BC, Archimedes won by doing that. At least until\nan invading Roman army killed him. Which illustrates why\nthis change is happening: for new ideas to matter, you need a certain\ndegree of civil order.  And not just not being at war.  You also\nneed to prevent the sort of economic violence that nineteenth century\nmagnates practiced against one another and communist countries\npracticed against their citizens.  People need to feel that what\nthey create can't be stolen.\n[4]\n\nThat has always been the case for thinkers, which is why this trend\nbegan with them.  When you think of successful people from history\nwho weren't ruthless, you get mathematicians and writers and artists.\nThe exciting thing is that their m.o. seems to be spreading.  The\ngames played by intellectuals are leaking into the real world, and\nthis is reversing the historical polarity of the relationship between\nmeanness and success.\n\nSo I'm really glad I stopped to think about this. Jessica and I\nhave always worked hard to teach our kids not to be mean.  We\ntolerate noise and mess and junk food, but not meanness.  And now\nI have both an additional reason to crack down on it, and an\nadditional argument to use when I do: that being mean makes you\nfail.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nI'm not saying all founders who take big acquisition offers\nare driven only by money, but rather that those who don't aren't.\nPlus one can have benevolent motives for being driven by money \u2014 for \nexample, to take care of one's family, or to be free to work\non projects that improve the world.\n\n[2]\nIt's unlikely that every successful startup improves the\nworld.  But their founders, like parents, truly believe they do.\nSuccessful founders are in love with their companies.  And while\nthis sort of love is as blind as the love people have for one\nanother, it is genuine.\n\n[3]\nPeter \nThiel would point out that successful founders still\nget rich from controlling monopolies, just monopolies they create\nrather than ones they capture.  And while this is largely true, it\nmeans a big change in the sort of person who wins.\n\n[4]\nTo be fair, the Romans didn't mean to kill Archimedes.  The\nRoman commander specifically ordered that he be spared. But he got\nkilled in the chaos anyway.\n\nIn sufficiently disordered times, even thinking requires\ncontrol of scarce resources, because living at all is a scarce\nresource.\n\n\n\nThanks to Sam Altman, Ron Conway, Daniel Gackle, Jessica Livingston, Robert Morris,\nGeoff Ralston, and Fred Wilson for reading drafts of this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2014\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nSeptember 2013\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nAugust 2013\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nAugust 2013\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJuly 2013\n", "June 2013\n\n(This talk was written for an audience of investors.)\n\nY Combinator has now funded 564 startups including the current\nbatch, which has 53.  The total valuation of the 287 that have\nvaluations (either by raising an equity round, getting acquired,\nor dying) is about $11.7 billion, and the 511 prior to the current\nbatch have collectively raised about $1.7 billion.\n[1]\n\nAs usual those numbers are dominated by a few big winners.  The top\n10 startups account for 8.6 of that 11.7 billion.  But there is a\npeloton of younger startups behind them.  There are about 40 more\nthat have a shot at being really big.\n\nThings got a little out of hand last summer when we had 84 companies\nin the batch, so we tightened up our filter to decrease the batch\nsize. \n[2]\nSeveral journalists have tried to interpret that as\nevidence for some macro story they were telling, but the reason had\nnothing to do with any external trend.  The reason was that we\ndiscovered we were using an n\u00b2 algorithm, and we needed to buy\ntime to fix it.  Fortunately we've come up with several techniques\nfor sharding YC, and the problem now seems to be fixed.  With a new\nmore scaleable model and only 53 companies, the current batch feels\nlike a walk in the park.  I'd guess we can grow another 2 or 3x\nbefore hitting the next bottleneck. \n[3]\n\nOne consequence of funding such a large number of startups is that\nwe see trends early.  And since fundraising is one of the main\nthings we help startups with, we're in a good position to notice\ntrends in investing.\n\nI'm going to take a shot at describing where these trends are\nleading.  Let's start with the most basic question: will the future\nbe better or worse than the past?  Will investors, in the aggregate,\nmake more money or less?\n\nI think more.  There are multiple forces at work, some of which\nwill decrease returns, and some of which will increase them.  I\ncan't predict for sure which forces will prevail, but I'll describe\nthem and you can decide for yourself.\n\nThere are two big forces driving change in startup funding: it's\nbecoming cheaper to start a startup, and startups are becoming a\nmore normal thing to do.\n\nWhen I graduated from college in 1986, there were essentially two\noptions: get a job or go to grad school.  Now there's a third: start\nyour own company.\nThat's a big change.  In principle it was possible to start your\nown company in 1986 too, but it didn't seem like a real possibility.\nIt seemed possible to start a consulting company, or a niche product\ncompany, but it didn't seem possible to start a company that would\nbecome big.\n[4]\n\nThat kind of change, from 2 paths to 3, is the sort of big social\nshift that only happens once every few generations.  I think we're\nstill at the beginning of this one.  It's hard to predict how big\na deal it will be.  As big a deal as the Industrial Revolution?\nMaybe.  Probably not.  But it will be a big enough deal that it\ntakes almost everyone by surprise, because those big social shifts\nalways do.\n\nOne thing we can say for sure is that there will be a lot more\nstartups.  The monolithic, hierarchical companies of the mid 20th\ncentury are being replaced by networks\nof smaller companies.  This process is not just something happening\nnow in Silicon Valley.  It started decades ago, and it's happening\nas far afield as the car industry.  It has a long way to run. \n[5]\n\n\nThe other big driver of change is that startups are becoming cheaper\nto start.  And in fact the two forces are related: the decreasing\ncost of starting a startup is one of the reasons startups are\nbecoming a more normal thing to do.\n\nThe fact that startups need less money means founders will increasingly\nhave the upper hand over investors.  You still need just as much\nof their energy and imagination, but they don't need as much of\nyour money.  Because founders have the upper hand, they'll retain\nan increasingly large share of the stock in, and control of, their\ncompanies.  Which means investors will get less stock and less\ncontrol.\n\nDoes that mean investors will make less money?  Not necessarily,\nbecause there will be more good startups.  The total amount of\ndesirable startup stock available to investors will probably increase,\nbecause the number of desirable startups will probably grow faster\nthan the percentage they sell to investors shrinks.\n\nThere's a rule of thumb in the VC business that there are about 15\ncompanies a year that will be really successful.  Although a lot\nof investors unconsciously treat this number as if it were some\nsort of cosmological constant, I'm certain it isn't.   There are\nprobably limits on the rate at which technology can develop, but\nthat's not the limiting factor now.  If it were, each successful\nstartup would be founded the month it became possible, and that is\nnot the case. Right now the limiting factor on the number of big\nhits is the number of sufficiently good founders starting companies,\nand that number can and will increase.  There are still a lot of\npeople who'd make great founders who never end up starting a company.\nYou can see that from how randomly some of the most successful\nstartups got started.  So many of the biggest startups almost didn't\nhappen that there must be a lot of equally good startups that\nactually didn't happen.\n\nThere might be 10x or even 50x more good founders out there.  As\nmore of them go ahead and start startups, those 15 big hits a year\ncould easily become 50 or even 100.\n[6]\n\nWhat about returns, though?  Are we heading for a world in which\nreturns will be pinched by increasingly high valuations?  I think\nthe top firms will actually make more money than they have in the\npast.  High returns don't come from investing at low valuations.\nThey come from investing in the companies that do really well.  So\nif there are more of those to be had each year, the best pickers\nshould have more hits.\n\nThis means there should be more variability in the VC business.\nThe firms that can recognize and attract the best startups will do\neven better, because there will be more of them to recognize and\nattract.  Whereas the bad firms will get the leftovers, as they do\nnow, and yet pay a higher price for them.\n\nNor do I think it will be a problem that founders keep control of\ntheir companies for longer.  The empirical evidence on that is\nalready clear: investors make more money as founders' bitches than\ntheir bosses.  Though somewhat humiliating, this is actually good\nnews for investors, because it takes less time to serve founders\nthan to micromanage them.\n\nWhat about angels?  I think there is a lot of opportunity there.\nIt used to suck to be an angel investor.  You couldn't get access\nto the best deals, unless you got lucky like Andy Bechtolsheim, and\nwhen you did invest in a startup, VCs might try to strip you of\nyour stock when they arrived later.  Now an angel can go to something\nlike Demo Day or AngelList and have access to the same deals VCs\ndo.  And the days when VCs could wash angels out of the cap table\nare long gone.\n\nI think one of the biggest unexploited opportunities in startup\ninvesting right now is angel-sized investments made quickly.  Few\ninvestors understand the cost that raising money from them imposes\non startups.  When the company consists only of the founders,\neverything grinds to a halt during fundraising, which can easily\ntake 6 weeks.  The current high cost of fundraising means there is\nroom for low-cost investors to undercut the rest.  And in this\ncontext, low-cost means deciding quickly.  If there were a reputable\ninvestor who invested $100k on good terms and promised to decide\nyes or no within 24 hours, they'd get access to almost all the best\ndeals, because every good startup would approach them first.  It\nwould be up to them to pick, because every bad startup would approach\nthem first too, but at least they'd see everything.  Whereas if an\ninvestor is notorious for taking a long time to make up their mind\nor negotiating a lot about valuation, founders will save them for\nlast.  And in the case of the most promising startups, which tend\nto have an easy time raising money, last can easily become never.\n\nWill the number of big hits grow linearly with the total number of\nnew startups?  Probably not, for two reasons.  One is that the\nscariness of starting a startup in the old days was a pretty effective\nfilter.  Now that the cost of failing is becoming lower, we should\nexpect founders to do it more.  That's not a bad thing.  It's common\nin technology for an innovation that decreases the cost of failure\nto increase the number of failures and yet leave you net ahead.\n\nThe other reason the number of big hits won't grow proportionately\nto the number of startups is that there will start to be an increasing\nnumber of idea clashes.  Although the finiteness of the number of\ngood ideas is not the reason there are only 15 big hits a year, the\nnumber has to be finite, and the more startups there are, the more\nwe'll see multiple companies doing the same thing at the same time.\nIt will be interesting, in a bad way, if idea clashes become a lot\nmore common. \n[7]\n\nMostly because of the increasing number of early failures, the startup\nbusiness of the future won't simply be the same shape, scaled up.\nWhat used to be an obelisk will become a pyramid.  It will be a\nlittle wider at the top, but a lot wider at the bottom.\n\nWhat does that mean for investors?  One thing it means is that there\nwill be more opportunities for investors at the earliest stage,\nbecause that's where the volume of our imaginary solid is growing\nfastest.  Imagine the obelisk of investors that corresponds to\nthe obelisk of startups.  As it widens out into a pyramid to match\nthe startup pyramid, all the contents are adhering to the top,\nleaving a vacuum at the bottom.\n\nThat opportunity for investors mostly means an opportunity for new\ninvestors, because the degree of risk an existing investor or firm\nis comfortable taking is one of the hardest things for them to\nchange.  Different types of investors are adapted to different\ndegrees of risk, but each has its specific degree of risk deeply\nimprinted on it, not just in the procedures they follow but in the\npersonalities of the people who work there.\n\nI think the biggest danger for VCs, and also the biggest opportunity,\nis at the series A stage.  Or rather, what used to be the series A\nstage before series As turned into de facto series B rounds.\n\nRight now, VCs often knowingly invest too much money at the series\nA stage.  They do it because they feel they need to get a big chunk\nof each series A company to compensate for the opportunity cost of\nthe board seat it consumes.  Which means when there is a lot of\ncompetition for a deal, the number that moves is the valuation (and\nthus amount invested) rather than the percentage of the company\nbeing sold.  Which means, especially in the case of more promising\nstartups, that series A investors often make companies take more\nmoney than they want.\n\nSome VCs lie and claim the company really needs that much.  Others\nare more candid, and admit their financial models require them to\nown a certain percentage of each company.  But we all know the\namounts being raised in series A rounds are not determined by asking\nwhat would be best for the companies.  They're determined by VCs\nstarting from the amount of the company they want to own, and the\nmarket setting the valuation and thus the amount invested.\n\nLike a lot of bad things, this didn't happen intentionally.  The\nVC business backed into it as their initial assumptions gradually\nbecame obsolete.  The traditions and financial models of the VC\nbusiness were established when founders needed investors more.  In\nthose days it was natural for founders to sell VCs a big chunk of\ntheir company in the series A round.  Now founders would prefer to\nsell less, and VCs are digging in their heels because they're not\nsure if they can make money buying less than 20% of each series A\ncompany.\n\nThe reason I describe this as a danger is that series A investors\nare increasingly at odds with the startups they supposedly serve,\nand that tends to come back to bite you eventually.  The reason I\ndescribe it as an opportunity is that there is now a lot of potential\nenergy built up, as the market has moved away from VCs' traditional\nbusiness model.  Which means the first VC to break ranks and start\nto do series A rounds for as much equity as founders want to sell\n(and with no \"option pool\" that comes only from the founders' shares)\nstands to reap huge benefits.\n\nWhat will happen to the VC business when that happens?  Hell if I\nknow.  But I bet that particular firm will end up ahead.  If one\ntop-tier VC firm started to do series A rounds that started from\nthe amount the company needed to raise and let the percentage\nacquired vary with the market, instead of the other way around,\nthey'd instantly get almost all the best startups.  And that's where\nthe money is.\n\nYou can't fight market forces forever.  Over the last decade we've\nseen the percentage of the company sold in series A rounds creep\ninexorably downward.  40% used to be common.  Now VCs are fighting\nto hold the line at 20%.  But I am daily waiting for the line to\ncollapse.  It's going to happen.  You may as well anticipate it,\nand look bold.\n\nWho knows, maybe VCs will make more money by doing the right thing.\nIt wouldn't be the first time that happened.  Venture capital is a\nbusiness where occasional big successes generate hundredfold returns.\nHow much confidence can you really have in financial models for\nsomething like that anyway?  The\nbig successes only have to get a tiny bit less occasional to\ncompensate for a 2x decrease in the stock sold in series A rounds.\n\nIf you want to find new opportunities for investing, look for things\nfounders complain about.  Founders are your customers, and the\nthings they complain about are unsatisfied demand.  I've given two\nexamples of things founders complain about most\u2014investors who\ntake too long to make up their minds, and excessive dilution in\nseries A rounds\u2014so those are good places to look now.  But\nthe more general recipe is: do something founders want.\n\n\n\n\n\n\nNotes\n\n[1]\nI realize revenue and not fundraising is the proper test of\nsuccess for a startup.  The reason we quote statistics about\nfundraising is because those are the numbers we have.  We couldn't\ntalk meaningfully about revenues without including the numbers from\nthe most successful startups, and we don't have those.  We often\ndiscuss revenue growth with the earlier stage startups, because\nthat's how we gauge their progress, but when companies reach a\ncertain size it gets presumptuous for a seed investor to do that.\n\nIn any case, companies' market caps do eventually become a function\nof revenues, and post-money valuations of funding rounds are at\nleast guesses by pros about where those market caps will end up.\n\nThe reason only 287 have valuations is that the rest have mostly\nraised money on convertible notes, and although convertible notes\noften have valuation caps, a valuation cap is merely an upper bound\non a valuation.\n\n[2]\nWe didn't try to accept a particular number.  We have no way\nof doing that even if we wanted to.  We just tried to be significantly\npickier.\n\n[3]\nThough you never know with bottlenecks, I'm guessing the next\none will be coordinating efforts among partners.\n\n[4]\nI realize starting a company doesn't have to mean starting a\nstartup.  There will be lots of people starting normal companies\ntoo.  But that's not relevant to an audience of investors.\n\nGeoff Ralston reports that in Silicon Valley it seemed thinkable\nto start a startup in the mid 1980s.  It would have started there.\nBut I know it didn't to undergraduates on the East Coast.\n\n[5]\nThis trend is one of the main causes of the increase in\neconomic inequality in the US since the mid twentieth century.  The\nperson who would in 1950 have been the general manager of the x\ndivision of Megacorp is now the founder of the x company, and owns\nsignificant equity in it.\n\n[6]\nIf Congress passes the founder\nvisa in a non-broken form, that alone could in principle get\nus up to 20x, since 95% of the world's population lives outside the\nUS.\n\n[7]\nIf idea clashes got bad enough, it could change what it means\nto be a startup.  We currently advise startups mostly to ignore\ncompetitors.  We tell them startups are competitive like running,\nnot like soccer; you don't have to go and steal the ball away from\nthe other team.  But if idea clashes became common enough, maybe\nyou'd start to have to.  That would be unfortunate.\n\nThanks to Sam Altman, Paul Buchheit, Dalton Caldwell,\nPatrick Collison, Jessica\nLivingston, Andrew Mason, Geoff Ralston, and Garry Tan for reading\ndrafts of this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nNovember 2012\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2012\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nSeptember 2012\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nSeptember 2012\n", "April 2012\n\nA palliative care nurse called Bronnie Ware made a list of the\nbiggest regrets\nof the dying.  Her list seems plausible.  I could see\nmyself \u2014 can see myself \u2014 making at least 4 of these\n5 mistakes.\n\nIf you had to compress them into a single piece of advice, it might\nbe: don't be a cog.  The 5 regrets paint a portrait of post-industrial\nman, who shrinks himself into a shape that fits his circumstances,\nthen turns dutifully till he stops.\n\nThe alarming thing is, the mistakes that produce these regrets are\nall errors of omission.  You forget your dreams, ignore your family,\nsuppress your feelings, neglect your friends, and forget to be\nhappy.  Errors of omission are a particularly dangerous type of\nmistake, because you make them by default.\n\nI would like to avoid making these mistakes.  But how do you avoid\nmistakes you make by default?  Ideally you transform your life so\nit has other defaults.  But it may not be possible to do that\ncompletely. As long as these mistakes happen by default, you probably\nhave to be reminded not to make them.  So I inverted the 5 regrets,\nyielding a list of 5 commands\n\n   Don't ignore your dreams; don't work too much; say what you\n   think; cultivate friendships; be happy.\n\nwhich I then put at the top of the file I use as a todo list.\n\n", "March 2012\n\nI'm not a very good speaker.  I say \"um\" a lot. Sometimes I have\nto pause when I lose my train of thought.  I wish I were a better\nspeaker.  But I don't wish I were a better speaker like I wish I\nwere a better writer.  What I really want is to have good ideas,\nand that's a much bigger part of being a good writer than being a\ngood speaker.\n\nHaving good ideas is most of writing well.  If you know what you're\ntalking about, you can say it in the plainest words and you'll be\nperceived as having a good style.  With speaking it's the opposite:\nhaving good ideas is an alarmingly small component of being a good\nspeaker.\n\nI first noticed this at a conference several years ago.\nThere was another speaker who was much better than me.\nHe had all of us roaring with laughter.  I seemed awkward and\nhalting by comparison.  Afterward I put my talk online like I usually\ndo.  As I was doing it I tried to imagine what a transcript of the\nother guy's talk would be like, and it was only then I realized he\nhadn't said very much.\n\nMaybe this would have been obvious to someone who knew more about\nspeaking, but it was a revelation to me how much less ideas mattered\nin speaking than writing.\n[1]\n\nA few years later I heard a talk by someone who was not merely a\nbetter speaker than me, but a famous speaker.  Boy was he good.  So\nI decided I'd pay close attention to what he said, to learn how he\ndid it.  After about ten sentences I found myself thinking \"I don't\nwant to be a good speaker.\"\n\nBeing a really good speaker is not merely orthogonal to having good ideas,\nbut in many ways pushes you in the opposite direction.  For example,\nwhen I give a talk, I usually write it out beforehand.  I know that's\na mistake; I know delivering a \nprewritten \ntalk makes it harder to\nengage with an audience.  The way to get the attention of an audience\nis to give them your full attention, and when you're delivering\na prewritten talk, your attention is always divided between the\naudience and the talk \u2014 even if you've memorized it.  If you want\nto engage an audience, it's better to start with no more than an outline\nof what you want to say and \nad lib the individual sentences.  But\nif you do that, you might spend no more time thinking about each\nsentence than it takes to say it.\n[2]\nOccasionally the stimulation\nof talking to a live audience makes you think of new things, but\nin general this is not going to generate ideas as well as writing\ndoes, where you can spend as long on each sentence as you want.\n\nIf you rehearse a prewritten speech enough, you can get\nasymptotically close to the sort of engagement you get when speaking\nad lib.  Actors do.  But here again there's a tradeoff between\nsmoothness and ideas.  All the time you spend practicing a talk,\nyou could instead spend making it better.  Actors don't face\nthat temptation, except in the rare cases where they've written the\nscript, but any speaker does.  Before I give a talk I can usually\nbe found sitting in a corner somewhere with a copy printed out on\npaper, trying to rehearse it in my head.  But I always end up\nspending most of the time rewriting it instead.  Every talk I give\nends up being given from a manuscript full of things crossed out\nand rewritten.  Which of course makes me um even more, because I\nhaven't had any time to practice the new bits.\n[3]\n\nDepending on your audience, there are even worse tradeoffs than\nthese.  Audiences like to be flattered; they like jokes; they like\nto be swept off their feet by a vigorous stream of words.  As you\ndecrease the intelligence of the audience, being a good speaker is\nincreasingly a matter of being a good bullshitter.  That's true in\nwriting too of course, but the descent is steeper with talks.  Any\ngiven person is dumber as a member of an audience than as a reader.\nJust as a speaker ad libbing can only spend as long thinking about\neach sentence as it takes to say it, a person hearing a talk can\nonly spend as long thinking about each sentence as it takes to hear\nit.  Plus people in an audience are always affected by the reactions\nof those around them, and the reactions that spread from person to\nperson in an audience are disproportionately the more brutish sort,\njust as low notes travel through walls better than high ones.  Every\naudience is an incipient mob, and a good speaker uses that.  Part\nof the reason I laughed so much at the talk by the good speaker at\nthat conference was that everyone else did.\n[4]\n\nSo are talks useless?  They're certainly inferior to the written\nword as a source of ideas.  But that's not all talks are good for.\nWhen I go to a talk, it's usually because I'm interested in the\nspeaker.  Listening to a talk is the closest most of us can get to\nhaving a conversation with someone like the president, who doesn't\nhave time to meet individually with all the people who want to meet\nhim.\n\nTalks are also good at motivating me to do things.  It's probably\nno coincidence that so many famous speakers are described as\nmotivational speakers.  That may be what public speaking is really\nfor.  It's probably what it was originally for.  The emotional\nreactions you can elicit with a talk can be a powerful force.\nI wish I could say that this force was more often used for good than\nill, but I'm not sure.\n\n\n\n\n\n\n\nNotes\n\n[1]\nI'm not talking here about academic talks, which are a \ndifferent type of thing.  While the\naudience at an academic talk might appreciate a joke, they will (or\nat least should) make a conscious effort to see what new ideas\nyou're presenting.\n\n[2]\nThat's the lower bound.  In practice you can often do better,\nbecause talks are usually about things you've written or talked\nabout before, and when you ad lib, you end up reproducing some of\nthose sentences.  Like early medieval architecture, impromptu talks\nare made of spolia.  Which feels a bit dishonest, incidentally,\nbecause you have to deliver these sentences as if you'd just thought\nof them.\n\n[3]\nRobert Morris points out that there is a way in which practicing\ntalks makes them better: reading a talk out loud can expose awkward\nparts.  I agree and in fact I read most things I write out loud at\nleast once for that reason.\n\n[4]\nFor sufficiently small audiences, it may not be true that being\npart of an audience makes people dumber.  The real decline seems\nto set in when the audience gets too big for the talk to feel like\na conversation \u2014 maybe around 10 people.\n\n\nThanks to Sam Altman and Robert Morris for reading drafts\nof this.\n\n", "March 2012\n\nY Combinator's 7th birthday was March 11.   As usual we were so\nbusy we didn't notice till a few days after.  I don't think we've\never managed to remember our birthday on our birthday.\n\nOn March 11 2005, Jessica and I were walking home from dinner in\nHarvard Square.  Jessica was working at an investment bank at the\ntime, but she didn't like it much, so she had interviewed for a job\nas director of marketing at a Boston VC fund.  The VC fund was doing\nwhat now seems a comically familiar thing for a VC fund to do:\ntaking a long time to make up their mind.  Meanwhile I had been\ntelling Jessica all the things they should change about the VC\nbusiness \u0097 essentially the ideas now underlying Y\u00a0Combinator:\ninvestors\nshould be making more, smaller investments, they should be funding\nhackers instead of suits, they should be willing to fund younger\nfounders, etc.\n\nAt the time I had been thinking about doing some angel investing.  I\nhad just given a talk to the undergraduate computer club at Harvard\nabout\nhow to start a\nstartup, and it\nhit me afterward that although I had always\nmeant to do angel investing, 7 years had now passed since I got\nenough money to do it, and I still hadn't started.  I had also\nbeen thinking about ways to work with Robert Morris and Trevor\nBlackwell again.  A few hours before I had\nsent them an email trying to figure out what we could do together.\n\nBetween Harvard Square and my house the idea gelled.  We'd start\nour own investment firm and Jessica could work for that instead.\nAs we turned onto Walker Street we decided to do it.  I agreed to\nput $100k into the new fund and Jessica agreed to quit her job to\nwork for it.  Over the next couple days I recruited Robert\nand Trevor, who put in another $50k each.  So YC\nstarted with $200k.\n\nJessica was so happy to be able to quit her job and start her own\ncompany that I took her picture\n when we got home.\n\nThe company wasn't called Y Combinator yet. At first we called it\nCambridge Seed.  But that name never saw the light of day, because\nby the time we announced it a few days later, we'd changed the name\nto Y Combinator.  We realized early on that what we were doing could\nbe national in scope and we didn't want a name that tied us to one\nplace.\n\nInitially we only had part of the idea. We were going to do\nseed funding with standardized terms.  Before YC, seed funding was\nvery haphazard. You'd get that first $10k from your friend's rich\nuncle. The deal terms were often a disaster; often neither the\ninvestor nor the founders nor the lawyer knew what the documents\nshould look like.  Facebook's early history as a Florida LLC shows\nhow random things could be in those days.  We were going to be\nsomething there had not been before: a standard source of seed\nfunding.\n\nWe modelled YC on the seed funding we ourselves had taken\nwhen we started Viaweb.  We started Viaweb with $10k we got from\nour friend Julian Weber,\nthe husband of Idelle Weber, whose\npainting class I took as a grad student at Harvard.  Julian knew\nabout business, but you would not describe him as a suit.  Among\nother things he'd been president of the National Lampoon.  He was\nalso a lawyer, and got all our paperwork set up properly.  In return\nfor $10k, getting us set up as a company, teaching us what\nbusiness was about, and remaining calm in times of crisis, Julian\ngot 10% of Viaweb.  I remember thinking once what a good deal\nJulian got.  And then a second later I realized that without\nJulian, Viaweb would never have made it.  So even though it was a\ngood deal for him, it was a good deal for us too.  That's why I\nknew there was room for something like Y Combinator.\n\nInitially we didn't have what turned out to be the most important\nidea: funding startups synchronously, instead of asynchronously as\nit had always been done before.  Or rather we had the idea, but we\ndidn't realize its significance.  We decided very early \nthat the first thing we'd do would\nbe to fund a bunch of startups over the coming summer.  But we\ndidn't realize initially that this would be the way we'd do all our\ninvesting.  The reason we began by funding a bunch of startups at\nonce was not that we thought it would be a better way to fund\nstartups, but simply because we wanted to learn how to be angel\ninvestors, and a summer program for undergrads seemed the fastest\nway to do it.  No one takes summer jobs that seriously.  The\nopportunity cost for a bunch of undergrads to spend a summer working\non startups was low enough that we wouldn't feel guilty encouraging\nthem to do it.\n\nWe knew students would already be making plans for the summer, so\nwe did what we're always telling startups to do: we launched fast.\nHere are the\ninitial announcement\nand description of what\nwas at the time called the Summer Founders Program.\n\nWe got lucky in that the length and structure of a summer program\nturns out to be perfect for what we do.\nThe structure of the YC cycle is still almost identical to what\nit was that first summer.\n\nWe also got lucky in who the first batch of founders were.  We never\nexpected to make any money from that first batch.  We thought of\nthe money we were investing as a combination of an educational expense\nand a charitable donation.  But the\nfounders in the first batch turned out to be surprisingly good.\nAnd great people too.  We're still friends with a lot of them today.\n\nIt's hard for people to realize now how inconsequential YC seemed at the\ntime.  I can't blame people who didn't take us seriously, because\nwe ourselves didn't take that first summer program seriously in the\nvery beginning.  But as the summer progressed we were increasingly\nimpressed by how well the startups were doing.  Other people started\nto be impressed too.  Jessica and I invented a term, \"the Y Combinator\neffect,\" to describe the moment when the realization hit someone\nthat YC was not totally lame.  When people came to YC to speak\nat the dinners that first summer, they came in the spirit of someone\ncoming to address a Boy Scout troop.  By the time they left the\nbuilding they were all saying some variant of \"Wow, these\ncompanies might actually succeed.\"\n\nNow YC is well enough known that people are no longer surprised\nwhen the companies we fund are legit, but it took a\nwhile for reputation to catch up with reality.  That's one of the\nreasons we especially like funding ideas that might be dismissed\nas \"toys\" \u0097 because YC itself was dismissed as one initially.\n\nWhen we saw how well it worked to fund companies synchronously,\nwe decided we'd keep doing that.  We'd fund two batches of\nstartups a year.\n\nWe funded the second batch in Silicon Valley.  That was\na last minute decision.  In retrospect I think what pushed me over\nthe edge was going to Foo Camp that fall.  The density of startup\npeople in the Bay Area was so much greater than in Boston, and the\nweather was so nice.  I remembered that from living there in the\n90s.  Plus I didn't want someone else to copy us and describe it\nas the Y Combinator of Silicon Valley.  I wanted YC to be the Y\u00a0Combinator \nof Silicon Valley.  So doing the winter batch in California\nseemed like one of those rare cases where the self-indulgent choice\nand the ambitious one were the same.\n\nIf we'd had enough time to do what we wanted, Y Combinator would\nhave been in Berkeley.  That was our favorite part of the Bay Area.\nBut we didn't have time to get a building in Berkeley.  We didn't\nhave time to get our own building anywhere. The only way to get\nenough space in time was to convince Trevor to let us take over\npart of his (as it then seemed) giant building in Mountain View.\nYet again we lucked out, because Mountain View turned out to be the\nideal place to put something like YC.  But even then we barely made\nit.  The first dinner in California, we had to warn all the founders\nnot to touch the walls, because the paint was still wet.\n\n", "March 2012\n\nAs a child I read a book of stories about a famous judge in eighteenth\ncentury Japan called Ooka Tadasuke.  One of the cases he decided\nwas brought by the owner of a food shop.  A poor student who could\nafford only rice was eating his rice while enjoying the delicious\ncooking smells coming from the food shop.  The owner wanted the\nstudent to pay for the smells he was enjoying.\n\nThe student was\nstealing his smells!\n\nThis story often comes to mind when I hear the RIAA and MPAA accusing\npeople of stealing music and movies.\n\nIt sounds ridiculous to us to treat smells as property.  But I can\nimagine scenarios in which one could charge for smells.  Imagine\nwe were living on a moon base where we had to buy air by the\nliter.  I could imagine air suppliers adding scents at an extra\ncharge.\n\nThe reason it seems ridiculous to us to treat smells as property\nis that it wouldn't work to.  It would work on a moon base, though.\n\nWhat counts as property depends on what works to treat as property.\nAnd that not only can change, but has changed.  Humans may always\n(for some definition of human and always) have treated small items\ncarried on one's person as property.  But hunter gatherers didn't\ntreat land, for example, as property in the way we do.\n[1]\n\nThe reason so many people think of property as having a single\nunchanging definition is that its definition changes very slowly.\n[2]\nBut we are in the midst of such a change now.  The record\nlabels and movie studios used to distribute what they made like air\nshipped through tubes on a moon base.  But with the arrival of\nnetworks, it's as if we've moved to a planet with a breathable\natmosphere.  Data moves like smells now.  And through a combination\nof wishful thinking and short-term greed, the labels and studios\nhave put themselves in the position of the food shop owner, accusing\nus all of stealing their smells.\n\n(The reason I say short-term greed is that the underlying problem\nwith the labels and studios is that the people who run them are\ndriven by bonuses rather than equity.  If they were driven by equity\nthey'd be looking for ways to take advantage of technological change\ninstead of fighting it.  But building new things takes too long.\nTheir bonuses depend on this year's revenues, and the best way to\nincrease those is to extract more money from stuff they do already.)\n\nSo what does this mean?  Should people not be able to charge for\ncontent?  There's not a single yes or no answer to that question.\nPeople should be able to charge for content when it works to charge\nfor content.\n\nBut by \"works\" I mean something more subtle than \"when they can get\naway with it.\"  I mean when people can charge for content without\nwarping society in order to do it.  After all, the companies selling\nsmells on the moon base could continue to sell them on the Earth,\nif they lobbied successfully for laws requiring us all to continue\nto breathe through tubes down here too, even though we no longer\nneeded to.\n\nThe crazy legal measures that the labels and studios have been\ntaking have a lot of that flavor.  Newspapers and magazines are\njust as screwed, but they are at least declining gracefully.  The\nRIAA and MPAA would make us breathe through tubes if they could.\n\nUltimately it comes down to common sense.  When you're abusing the\nlegal system by trying to use mass lawsuits against randomly chosen\npeople as a form of exemplary punishment, or lobbying for laws\nthat would break the Internet if they passed, that's ipso facto\nevidence you're using a definition of property that doesn't work.\n\nThis is where it's helpful to have working democracies and multiple\nsovereign countries.  If the world had a single, autocratic government,\nthe labels and studios could buy laws making the definition of\nproperty be whatever they wanted.  But fortunately there are still\nsome countries that are not copyright colonies of the US, and even\nin the US, politicians\nstill seem to be afraid of actual voters, in sufficient numbers.\n[3]\n\nThe people running the US may not like it when voters or other\ncountries refuse to bend to their will, but ultimately it's in all\nour interest that there's not a single point of attack for people\ntrying to warp the law to serve their own purposes.  Private property\nis an extremely useful idea \u2014 arguably one of our greatest inventions.\nSo far, each new definition of it has brought us increasing material\nwealth.\n[4]\nIt seems reasonable to suppose the newest one will\ntoo.  It would be a disaster if we all had to keep running an\nobsolete version just because a few powerful people were too lazy\nto upgrade.\n\n\n\n\n\n\n\nNotes\n\n[1]\nIf you want to learn more about hunter gatherers I strongly\nrecommend Elizabeth Marshall Thomas's The\nHarmless People and The\nOld Way.\n\n[2]\nChange in the definition of property is driven mostly by\ntechnological progress, however, and since technological progress\nis accelerating, so presumably will the rate of change in the\ndefinition of property.  Which means it's all the more important\nfor societies to be able to respond gracefully to such changes,\nbecause they will come at an ever increasing rate.\n\n[3]\nAs far as I know, the term \"copyright colony\" was first used\nby Myles\nPeterson.\n\n[4]\nThe state of technology isn't simply a function of\nthe definition of property.  They each constrain the other.  But\nthat being so, you can't mess with the definition of property without\naffecting (and probably harming) the state of technology.  The\nhistory of the USSR offers a vivid illustration of that.\n\nThanks to Sam Altman and Geoff Ralston for reading drafts\nof this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMarch 2012\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJanuary 2012\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJanuary 2012\n", "January 2012\n\nA few hours before the Yahoo acquisition was announced in June 1998\nI took a snapshot of Viaweb's\nsite.  I thought it might be interesting to look at one day.\n\nThe first thing one notices is is how tiny the pages are.  Screens\nwere a lot smaller in 1998.  If I remember correctly, our frontpage\nused to just fit in the size window people typically used then.\n\nBrowsers then (IE 6 was still 3 years in the future) had few fonts\nand they weren't antialiased.  If you wanted to make pages that\nlooked good, you had to render display text as images.\n\nYou may notice a certain similarity between the Viaweb and Y Combinator logos.  We did that\nas an inside joke when we started YC.  Considering how basic a red\ncircle is, it seemed surprising to me when we started Viaweb how\nfew other companies used one as their logo.  A bit later I realized\nwhy.\n\nOn the Company\npage you'll notice a mysterious individual called John McArtyem.\nRobert Morris (aka Rtm) was so publicity averse after the \nWorm that he\ndidn't want his name on the site.  I managed to get him to agree\nto a compromise: we could use his bio but not his name.  He has\nsince relaxed a bit\non that point.\n\nTrevor graduated at about the same time the acquisition closed, so in the\ncourse of 4 days he went from impecunious grad student to millionaire\nPhD.  The culmination of my career as a writer of press releases\nwas one celebrating\nhis graduation, illustrated with a drawing I did of him during\na meeting.\n\n(Trevor also appears as Trevino\nBagwell in our directory of web designers merchants could hire\nto build stores for them.  We inserted him as a ringer in case some\ncompetitor tried to spam our web designers.   We assumed his logo\nwould deter any actual customers, but it did not.)\n\nBack in the 90s, to get users you had to get mentioned in magazines\nand newspapers.  There were not the same ways to get found online\nthat there are today.  So we used to pay a PR\nfirm $16,000 a month to get us mentioned in the press.  Fortunately\nreporters liked\nus.\n\nIn our advice about\ngetting traffic from search engines (I don't think the term SEO\nhad been coined yet), we say there are only 7 that matter: Yahoo,\nAltaVista, Excite, WebCrawler, InfoSeek, Lycos, and HotBot.  Notice\nanything missing?  Google was incorporated that September.\n\nWe supported online transactions via a company called \nCybercash,\nsince if we lacked that feature we'd have gotten beaten up in product\ncomparisons.  But Cybercash was so bad and most stores' order volumes\nwere so low that it was better if merchants processed orders like phone orders.  We had a page in our site trying to talk merchants\nout of doing real time authorizations.\n\nThe whole site was organized like a funnel, directing people to the\ntest drive.\nIt was a novel thing to be able to try out software online.  We put\ncgi-bin in our dynamic urls to fool competitors about how our\nsoftware worked.\n\nWe had some well\nknown users.  Needless to say, Frederick's of Hollywood got the\nmost traffic.  We charged a flat fee of $300/month for big stores,\nso it was a little alarming to have users who got lots of traffic.\nI once calculated how much Frederick's was costing us in bandwidth,\nand it was about $300/month.\n\nSince we hosted all the stores, which together were getting just\nover 10 million page views per month in June 1998, we consumed what\nat the time seemed a lot of bandwidth.  We had 2 T1s (3 Mb/sec)\ncoming into our offices.  In those days there was no AWS.  Even\ncolocating servers seemed too risky, considering how often things\nwent wrong with them.  So we had our servers in our offices.  Or\nmore precisely, in Trevor's office.  In return for the unique\nprivilege of sharing his office with no other humans, he had to\nshare it with 6 shrieking tower servers.  His office was nicknamed\nthe Hot Tub on account of the heat they generated.  Most days his\nstack of window air conditioners could keep up.\n\nFor describing pages, we had a template language called RTML, which\nsupposedly stood for something, but which in fact I named after\nRtm.  RTML was Common Lisp augmented by some macros and libraries,\nand concealed under a structure editor that made it look like it\nhad syntax.\n\nSince we did continuous releases, our software didn't actually have\nversions.  But in those days the trade press expected versions, so\nwe made them up.  If we wanted to get lots of attention, we made\nthe version number an\ninteger.  That \"version 4.0\" icon was generated by our own\nbutton generator, incidentally.  The whole Viaweb site was made\nwith our software, even though it wasn't an online store, because\nwe wanted to experience what our users did.\n\nAt the end of 1997, we released a general purpose shopping search\nengine called Shopfind.  It\nwas pretty advanced for the time.  It had a programmable crawler\nthat could crawl most of the different stores online and pick out\nthe products.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2011\n", "August 2011\n\nI realized recently that we may be able to solve part of the patent\nproblem without waiting for the government.\n\nI've never been 100% sure whether patents help or hinder technological\nprogress.  When I was a kid I thought they helped.  I thought they\nprotected inventors from having their ideas stolen by big companies.\nMaybe that was truer in the past, when more things were physical.\nBut regardless of whether patents are in general a good thing, there\ndo seem to be bad ways of using them.  And since bad uses of patents\nseem to be increasing, there is an increasing call for patent reform.\n\nThe problem with patent reform is that it has to go through the\ngovernment.  That tends to be slow.  But recently I realized we can\nalso attack the problem downstream.  As well as pinching off the\nstream of patents at the point where they're issued, we may in some\ncases be able to pinch it off at the point where they're used.\n\nOne way of using patents that clearly does not encourage innovation\nis when established companies with bad products use patents to\nsuppress small competitors with good products.  This is the type\nof abuse we may be able to decrease without having to go through\nthe government.\n\nThe way to do it is to get the companies that are above pulling\nthis sort of trick to pledge publicly not to.  Then the ones that\nwon't make such a pledge will be very conspicuous.  Potential\nemployees won't want to work for them.  And investors, too, will\nbe able to see that they're the sort of company that competes by\nlitigation rather than by making good products.\n\nHere's the pledge:\n\n    No first use of software patents against companies with less \n    than 25 people.\n\nI've deliberately traded precision for brevity.  The patent pledge\nis not legally binding.  It's like Google's \"Don't be evil.\" They\ndon't define what evil is, but by publicly saying that, they're\nsaying they're willing to be held to a standard that, say, Altria\nis not.  And though constraining, \"Don't be evil\" has been good for\nGoogle. Technology companies win by attracting the most productive\npeople, and the most productive people are attracted to employers\nwho hold themselves to a higher standard than the law requires.\n[1]\n\nThe patent pledge is in effect a narrower but open source \"Don't\nbe evil.\"  I encourage every technology company to adopt it.  If\nyou want to help fix patents, encourage your employer to.\n\nAlready most technology companies wouldn't sink to using patents\non startups.  You don't see Google or Facebook suing startups for\npatent infringement. They don't need to.  So for the better technology\ncompanies, the patent pledge requires no change in behavior.  They're\njust promising to do what they'd do anyway.  And when all the\ncompanies that won't use patents on startups have said so, the\nholdouts will be very conspicuous.\n\nThe patent pledge doesn't fix every problem with patents.  It won't\nstop patent trolls, for example; they're already pariahs.  But the\nproblem the patent pledge does fix may be more serious than the\nproblem of patent trolls.  Patent trolls are just parasites.  A\nclumsy parasite may occasionally kill the host, but that's not its\ngoal.  Whereas companies that sue startups for patent infringement\ngenerally do it with explicit goal of keeping their product off the\nmarket.\n\nCompanies that use patents on startups are attacking innovation at\nthe root.  Now there's something any individual can do about this\nproblem, without waiting for the government: ask companies where\nthey stand.\n\n\n\n\nPatent Pledge Site\n\n\n\n\nNotes:\n\n[1]\nBecause the pledge is deliberately vague, we're going to need\ncommon sense when intepreting it.  And even more vice versa: the\npledge is vague in order to make people use common sense when\ninterpreting it.\n\nSo for example I've deliberately avoided saying whether the 25\npeople have to be employees, or whether contractors count too.  If\na company has to split hairs that fine about whether a suit would\nviolate the patent pledge, it's probably still a dick move.\n\n", "March 2011\n\nYesterday Fred Wilson published a remarkable post about missing\nAirbnb.   VCs miss good startups all the time, but it's extraordinarily\nrare for one to talk about it publicly till long afterward.  So\nthat post is further evidence what a rare bird Fred is.  He's\nprobably the nicest VC I know.\n\nReading Fred's post made me go back and look at the emails I exchanged\nwith him at the time, trying to convince him to invest in Airbnb.\nIt was quite interesting to read.  You can see Fred's mind at work \nas he circles the deal.\n\nFred and the Airbnb founders have generously agreed to let me publish\nthis email exchange (with one sentence redacted about something\nthat's strategically important to Airbnb and not an important part\nof the conversation).  It's an interesting illustration of an element\nof the startup ecosystem that few except the participants ever see:\ninvestors trying to convince one another to invest in their portfolio\ncompanies.  Hundreds if not thousands of conversations of this type\nare happening now, but if one has ever been published, I haven't\nseen it.  The Airbnbs themselves never even saw these emails at the\ntime.\n\nWe do a lot of this behind the scenes stuff at YC, because we invest\nin such a large number of companies, and we invest so early that\ninvestors sometimes need a lot of convincing to see their merits.\nI don't always try as hard as this though.  Fred must \nhave found me quite annoying.\n\n\n\n\n\nfrom: Paul Graham\nto: Fred Wilson, AirBedAndBreakfast Founders\ndate: Fri, Jan 23, 2009 at 11:42 AM\nsubject: meet the airbeds\n\nOne of the startups from the batch that just started, AirbedAndBreakfast,\nis in NYC right now meeting their users.  (NYC is their biggest\nmarket.) I'd recommend meeting them if your schedule allows.\n\nI'd been thinking to myself that though these guys were going to\ndo really well, I should introduce them to angels, because VCs would\nnever go for it.  But then I thought maybe I should give you more\ncredit.  You'll certainly like meeting them.  Be sure to ask about\nhow they funded themselves with breakfast cereal.\n\nThere's no reason this couldn't be as big as Ebay.  And this team\nis the right one to do it.\n\n--pg\n\n\n\nfrom: Brian Chesky\nto: Paul Graham\ncc: Nathan Blecharczyk, Joe Gebbia\ndate: Fri, Jan 23, 2009 at 11:40 AM\nsubject: Re: meet the airbeds\n\nPG,\n\nThanks for the intro!\n\nBrian\n\n\n\nfrom: Paul Graham\nto: Brian Chesky\ncc: Nathan Blecharczyk, Joe Gebbia\ndate: Fri, Jan 23, 2009 at 12:38 PM\nsubject: Re: meet the airbeds\n\nIt's a longshot, at this stage, but if there was any VC who'd get\nyou guys, it would be Fred.  He is the least suburban-golf-playing\nVC I know.\n\nHe likes to observe startups for a while before acting, so don't\nbe bummed if he seems ambivalent.\n\n--pg\n\n\n\nfrom: Fred Wilson\nto: Paul Graham,\ndate: Sun, Jan 25, 2009 at 5:28 PM\nsubject: Re: meet the airbeds\n\nThanks Paul\n\nWe are having a bit of a debate inside our partnership about the\nairbed concept. We'll finish that debate tomorrow in our weekly\nmeeting and get back to you with our thoughts\n\nThanks\n\nFred\n\n\n\nfrom: Paul Graham\nto: Fred Wilson\ndate: Sun, Jan 25, 2009 at 10:48 PM\nsubject: Re: meet the airbeds\n\nI'd recommend having the debate after meeting them instead of before.\nWe had big doubts about this idea, but they vanished on meeting the\nguys.\n\n\n\nfrom: Fred Wilson\nto: Paul Graham\ndate: Mon, Jan 26, 2009 at 11:08 AM\nsubject: RE: meet the airbeds\n\nWe are still very suspect of this idea but will take a meeting as\nyou suggest\n\nThanks\n\nfred\n\n\n\nfrom: Fred Wilson\nto: Paul Graham, AirBedAndBreakfast Founders\ndate: Mon, Jan 26, 2009 at 11:09 AM\nsubject: RE: meet the airbeds\n\nAirbed team -\n\nAre you still in NYC?\n\nWe'd like to meet if you are\n\nThanks\n\nfred\n\n\n\nfrom: Paul Graham\nto: Fred Wilson\ndate: Mon, Jan 26, 2009 at 1:42 PM\nsubject: Re: meet the airbeds\n\nIdeas can morph.  Practically every really big startup could say,\nfive years later, \"believe it or not, we started out doing ___.\"\nIt just seemed a very good sign to me that these guys were actually\non the ground in NYC hunting down (and understanding) their users.\nOn top of several previous good signs.\n\n--pg\n\n\n\nfrom: Fred Wilson\nto: Paul Graham\ndate: Sun, Feb 1, 2009 at 7:15 AM\nsubject: Re: meet the airbeds\n\nIt's interesting\n\nOur two junior team members were enthusiastic\n\nThe three \"old guys\" didn't get it\n\n\n\nfrom: Paul Graham\nto: Fred Wilson\ndate: Mon, Feb 9, 2009 at 5:58 PM\nsubject: airbnb\n\nThe Airbeds just won the first poll among all the YC startups in\ntheir batch by a landslide.  In the past this has not been a 100%\nindicator of success (if only anything were) but much better than\nrandom.\n\n--pg\n\n\n\nfrom: Fred Wilson\nto: Paul Graham\ndate: Fri, Feb 13, 2009 at 5:29 PM\nsubject: Re: airbnb\n\nI met them today\n\nThey have an interesting business\n\nI'm just not sure how big it's going to be\n\nfred\n\n\n\nfrom: Paul Graham\nto: Fred Wilson\ndate: Sat, Feb 14, 2009 at 9:50 AM\nsubject: Re: airbnb\n\nDid they explain the long-term goal of being the market in accommodation\nthe way eBay is in stuff?  That seems like it would be huge.  Hotels\nnow are like airlines in the 1970s before they figured out how to\nincrease their load factors.\n\n\n\nfrom: Fred Wilson\nto: Paul Graham\ndate: Tue, Feb 17, 2009 at 2:05 PM\nsubject: Re: airbnb\n\nThey did but I am not sure I buy that\n\nABNB reminds me of Etsy in that it facilitates real commerce in a\nmarketplace model directly between two people\n\nSo I think it can scale all the way to the bed and breakfast market\n\nBut I am not sure they can take on the hotel market\n\nI could be wrong\n\nBut even so, if you include short term room rental, second home\nrental, bed and breakfast, and other similar classes of accommodations,\nyou get to a pretty big opportunity\n\nfred\n\n\n\nfrom: Paul Graham\nto: Fred Wilson\ndate: Wed, Feb 18, 2009 at 12:21 AM\nsubject: Re: airbnb\n\nSo invest in them!  They're very capital efficient.  They would\nmake an investor's money go a long way.\n\nIt's also counter-cyclical.  They just arrived back from NYC, and\nwhen I asked them what was the most significant thing they'd observed,\nit was how many of their users actually needed to do these rentals\nto pay their rents.\n\n--pg\n\n\n\nfrom: Fred Wilson\nto: Paul Graham\ndate: Wed, Feb 18, 2009 at 2:21 AM\nsubject: Re: airbnb\n\nThere's a lot to like\n\nI've done a few things, like intro it to my friends at Foundry who\nwere investors in Service Metrics and understand this model\n\nI am also talking to my friend Mark Pincus who had an idea like\nthis a few years ago.\n\nSo we are working on it\n\nThanks for the lead\n\nFred\n\n\n\nfrom: Paul Graham\nto: Fred Wilson\ndate: Fri, Feb 20, 2009 at 10:00 PM\nsubject: airbnb already spreading to pros\n\nI know you're skeptical they'll ever get hotels, but there's a\ncontinuum between private sofas and hotel rooms, and they just moved\none step further along it.\n\n[link to an airbnb user]\n\nThis is after only a few months.  I bet you they will get hotels\neventually.  It will start with small ones.  Just wait till all the\n10-room pensiones in Rome discover this site.  And once it spreads\nto hotels, where is the point (in size of chain) at which it stops?\nOnce something becomes a big marketplace, you ignore it at your\nperil.\n\n--pg\n\n\n\nfrom: Fred Wilson\nto: Paul Graham\ndate: Sat, Feb 21, 2009 at 4:26 AM\nsubject: Re: airbnb already spreading to pros\n\nThat's true. It's also true that there are quite a few marketplaces\nout there that serve this same market\n\nIf you look at many of the people who list at ABNB, they list\nelsewhere too\n\nI am not negative on this one, I am interested, but we are still\nin the gathering data phase.\n\nfred\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nDecember 2010\n", "December 2010\n\nI was thinking recently how inconvenient it was not to have a general\nterm for iPhones, iPads, and the corresponding things running\nAndroid.  The closest to a general term seems to be \"mobile devices,\"\nbut that (a) applies to any mobile phone, and (b) doesn't really\ncapture what's distinctive about the iPad.\n\nAfter a few seconds it struck me that what we'll end up calling\nthese things is tablets.  The only reason we even consider calling\nthem \"mobile devices\" is that the iPhone preceded the iPad.  If the\niPad had come first, we wouldn't think of the iPhone as a phone;\nwe'd think of it as a tablet small enough to hold up to your ear.\n\nThe iPhone isn't so much a phone as a replacement for a phone.\nThat's an important distinction, because it's an early instance of\nwhat will become a common pattern.  Many if not most of the\nspecial-purpose objects around us are going to be replaced by apps\nrunning on tablets.\n\nThis is already clear in cases like GPSes, music players, and\ncameras.  But I think it will surprise people how many things are\ngoing to get replaced.  We funded one startup that's \nreplacing keys.\nThe fact that you can change font sizes easily means the iPad\neffectively replaces reading glasses.  I wouldn't be surprised if\nby playing some clever tricks with the accelerometer you could even\nreplace the bathroom scale.\n\nThe advantages of doing things in software on a single device are\nso great that everything that can get turned into software will.\nSo for the next couple years, a good recipe for startups\nwill be to look around you for things that people haven't realized\nyet can be made unnecessary by a tablet app.\n\nIn 1938 Buckminster Fuller coined the term ephemeralization to\ndescribe the increasing tendency of physical machinery to be replaced\nby what we would now call software.  The reason tablets are going\nto take over the world is not (just) that Steve Jobs and Co are\nindustrial design wizards, but because they have this force behind\nthem.  The iPhone and the iPad have effectively drilled a hole that\nwill allow ephemeralization to flow into a lot of new areas.  No one\nwho has studied the history of technology would want to underestimate\nthe power of that force.\n\nI worry about the power Apple could have with this force behind\nthem.  I don't want to see another era of client monoculture like\nthe Microsoft one in the 80s and 90s.  But if ephemeralization is\none of the main forces driving the spread of tablets, that suggests\na way to compete with Apple: be a better platform for it.\n\nIt has turned out to be a great thing that Apple tablets have\naccelerometers in them.  Developers have used the accelerometer in\nways Apple could never have imagined.  That's the nature of platforms.\nThe more versatile the tool, the less you can predict how people\nwill use it.  So tablet makers should be thinking: what else can\nwe put in there?  Not merely hardware, but software too.  What else\ncan we give developers access to?  Give hackers an inch and they'll\ntake you a mile.\n\n\n\n\n\n\n\n\nThanks to Sam Altman, Paul Buchheit, Jessica Livingston, and\nRobert Morris for reading drafts of this.\n\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2010\n\n(I wrote this for Forbes, who asked me to write something\nabout the qualities we look for in founders.  In print they had to cut\nthe last item because they didn't have room.)\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2010\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2010\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nSeptember 2010\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nAugust 2010\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nAugust 2010\n", "July 2010\n\nWhat hard liquor, cigarettes, heroin, and crack have in common is\nthat they're all more concentrated forms of less addictive predecessors.\nMost if not all the things we describe as addictive are.  And the\nscary thing is, the process that created them is accelerating.\n\nWe wouldn't want to stop it.  It's the same process that cures\ndiseases: technological progress.  Technological progress means\nmaking things do more of what we want.  When the thing we want is\nsomething we want to want, we consider technological progress good.\nIf some new technique makes solar cells x% more efficient, that\nseems strictly better.  When progress concentrates something we\ndon't want to want\u2014when it transforms opium into heroin\u2014it seems\nbad.  But it's the same process at work.\n[1]\n\nNo one doubts this process is accelerating, which means increasing\nnumbers of things we like will be transformed into things we like\ntoo much.\n[2]\n\nAs far as I know there's no word for something we like too much.\nThe closest is the colloquial sense of \"addictive.\" That usage has\nbecome increasingly common during my lifetime.  And it's clear why:\nthere are an increasing number of things we need it for.  At the\nextreme end of the spectrum are crack and meth.  Food has been\ntransformed by a combination of factory farming and innovations in\nfood processing into something with way more immediate bang for the\nbuck, and you can see the results in any town in America.  Checkers\nand solitaire have been replaced by World of Warcraft and FarmVille.\nTV has become much more engaging, and even so it can't compete with Facebook.\n\nThe world is more addictive than it was 40 years ago.   And unless\nthe forms of technological progress that produced these things are\nsubject to different laws than technological progress in general,\nthe world will get more addictive in the next 40 years than it did\nin the last 40.\n\nThe next 40 years will bring us some wonderful things.  I don't\nmean to imply they're all to be avoided.  Alcohol is a dangerous\ndrug, but I'd rather live in a world with wine than one without.\nMost people can coexist with alcohol; but you have to be careful.\nMore things we like will mean more things we have to be careful\nabout.\n\nMost people won't, unfortunately.  Which means that as the world\nbecomes more addictive, the two senses in which one can live a\nnormal life will be driven ever further apart.  One sense of \"normal\"\nis statistically normal: what everyone else does.  The other is the\nsense we mean when we talk about the normal operating range of a\npiece of machinery: what works best.\n\nThese two senses are already quite far apart.  Already someone\ntrying to live well would seem eccentrically abstemious in most of\nthe US.  That phenomenon is only going to become more pronounced.\nYou can probably take it as a rule of thumb from now on that if\npeople don't think you're weird, you're living badly.\n\nSocieties eventually develop antibodies to addictive new things.\nI've seen that happen with cigarettes.  When cigarettes first\nappeared, they spread the way an infectious disease spreads through\na previously isolated population.  Smoking rapidly became a\n(statistically) normal thing.  There were ashtrays everywhere.  We\nhad ashtrays in our house when I was a kid, even though neither of\nmy parents smoked.  You had to for guests.\n\nAs knowledge spread about the dangers of smoking, customs changed.\nIn the last 20 years, smoking has been transformed from something\nthat seemed totally normal into a rather seedy habit: from something\nmovie stars did in publicity shots to something small huddles of\naddicts do outside the doors of office buildings.  A lot of the\nchange was due to legislation, of course, but the legislation\ncouldn't have happened if customs hadn't already changed.\n\nIt took a while though\u2014on the order of 100 years.  And unless the\nrate at which social antibodies evolve can increase to match the\naccelerating rate at which technological progress throws off new\naddictions, we'll be increasingly unable to rely on customs to\nprotect us.\n[3]\nUnless we want to be canaries in the coal mine\nof each new addiction\u2014the people whose sad example becomes a\nlesson to future generations\u2014we'll have to figure out for ourselves\nwhat to avoid and how.  It will actually become a reasonable strategy\n(or a more reasonable strategy) to suspect \neverything new.\n\nIn fact, even that won't be enough.  We'll have to worry not just\nabout new things, but also about existing things becoming more\naddictive.  That's what bit me.  I've avoided most addictions, but\nthe Internet got me because it became addictive while I was using\nit.\n[4]\n\nMost people I know have problems with Internet addiction.  We're\nall trying to figure out our own customs for getting free of it.\nThat's why I don't have an iPhone, for example; the last thing I\nwant is for the Internet to follow me out into the world.\n[5]\nMy latest trick is taking long hikes.  I used to think running was a\nbetter form of exercise than hiking because it took less time.  Now\nthe slowness of hiking seems an advantage, because the longer I\nspend on the trail, the longer I have to think without interruption.\n\nSounds pretty eccentric, doesn't it?  It always will when you're\ntrying to solve problems where there are no customs yet to guide\nyou.  Maybe I can't plead Occam's razor; maybe I'm simply eccentric.\nBut if I'm right about the acceleration of addictiveness, then this\nkind of lonely squirming to avoid it will increasingly be the fate\nof anyone who wants to get things done.  We'll increasingly be\ndefined by what we say no to.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nCould you restrict technological progress to areas where you\nwanted it?  Only in a limited way, without becoming a police state.\nAnd even then your restrictions would have undesirable side effects.\n\"Good\" and \"bad\" technological progress aren't sharply differentiated,\nso you'd find you couldn't slow the latter without also slowing the\nformer.  And in any case, as Prohibition and the \"war on drugs\"\nshow, bans often do more harm than good.\n\n[2]\nTechnology has always been accelerating.  By Paleolithic\nstandards, technology evolved at a blistering pace in the Neolithic\nperiod.\n\n[3]\nUnless we mass produce social customs.  I suspect the recent\nresurgence of evangelical Christianity in the US is partly a reaction\nto drugs.  In desperation people reach for the sledgehammer; if\ntheir kids won't listen to them, maybe they'll listen to God.  But\nthat solution has broader consequences than just getting kids to\nsay no to drugs.  You end up saying no to \nscience as well.\n\n\nI worry we may be heading for a future in which only a few people\nplot their own itinerary through no-land, while everyone else books\na package tour.  Or worse still, has one booked for them by the\ngovernment.\n\n[4]\nPeople commonly use the word \"procrastination\" to describe\nwhat they do on the Internet.  It seems to me too mild to describe\nwhat's happening as merely not-doing-work.  We don't call it\nprocrastination when someone gets drunk instead of working.\n\n[5]\nSeveral people have told me they like the iPad because it\nlets them bring the Internet into situations where a laptop would\nbe too conspicuous.  In other words, it's a hip flask.  (This is\ntrue of the iPhone too, of course, but this advantage isn't as\nobvious because it reads as a phone, and everyone's used to those.)\n\nThanks to Sam Altman, Patrick Collison, Jessica Livingston, and\nRobert Morris for reading drafts of this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJuly 2010\n", "July 2010\n\nWhen we sold our startup in 1998 I suddenly got a lot of money.  I\nnow had to think about something I hadn't had to think about before:\nhow not to lose it.   I knew it was possible to go from rich to\npoor, just as it was possible to go from poor to rich.  But while\nI'd spent a lot of the past several years studying the paths from\npoor to rich, \nI knew practically nothing about the paths from rich\nto poor.  Now, in order to avoid them, I had to learn where they\nwere.\n\nSo I started to pay attention to how fortunes are lost.  If you'd\nasked me as a kid how rich people became poor, I'd have said by\nspending all their money.  That's how it happens in books and movies,\nbecause that's the colorful way to do it.  But in fact the way most\nfortunes are lost is not through excessive expenditure, but through\nbad investments.\n\nIt's hard to spend a fortune without noticing.  Someone with ordinary\ntastes would find it hard to blow through more than a few tens of\nthousands of dollars without thinking \"wow, I'm spending a lot of\nmoney.\"  Whereas if you start trading derivatives, you can lose a\nmillion dollars (as much as you want, really) in the blink of an\neye.\n\nIn most people's minds, spending money on luxuries sets off alarms\nthat making investments doesn't.  Luxuries seem self-indulgent.\nAnd unless you got the money by inheriting it or winning a lottery,\nyou've already been thoroughly trained that self-indulgence leads\nto trouble.  Investing bypasses those alarms.  You're not spending\nthe money; you're just moving it from one asset to another.  Which\nis why people trying to sell you expensive things say \"it's an\ninvestment.\"\n\nThe solution is to develop new alarms.  This can be a tricky business,\nbecause while the alarms that prevent you from overspending are so\nbasic that they may even be in our DNA, the ones that prevent you\nfrom making bad investments have to be learned, and are sometimes\nfairly counterintuitive.\n\nA few days ago I realized something surprising: the situation with\ntime is much the same as with money.  The most dangerous way to\nlose time is not to spend it having fun, but to spend it doing fake\nwork.  When you spend time having fun, you know you're being\nself-indulgent.  Alarms start to go off fairly quickly.  If I woke\nup one morning and sat down on the sofa and watched TV all day, I'd\nfeel like something was terribly wrong.  Just thinking about it\nmakes me wince.  I'd start to feel uncomfortable after sitting on\na sofa watching TV for 2 hours, let alone a whole day.\n\nAnd yet I've definitely had days when I might as well have sat in\nfront of a TV all day \u2014 days at the end of which, if I asked myself\nwhat I got done that day, the answer would have been: basically,\nnothing.  I feel bad after these days too, but nothing like as bad\nas I'd feel if I spent the whole day on the sofa watching TV.  If\nI spent a whole day watching TV I'd feel like I was descending into\nperdition.  But the same alarms don't go off on the days when I get\nnothing done, because I'm doing stuff that seems, superficially,\nlike real work.  Dealing with email, for example.  You do it sitting\nat a desk.  It's not fun.  So it must be work.\n\nWith time, as with money, avoiding pleasure is no longer enough to\nprotect you.  It probably was enough to protect hunter-gatherers,\nand perhaps all pre-industrial societies.  So nature and nurture\ncombine to make us avoid self-indulgence. But the world has gotten\nmore complicated: the most dangerous traps now are new behaviors\nthat bypass our alarms about self-indulgence by mimicking more\nvirtuous types.  And the worst thing is, they're not even fun.\n\n\n\n\n\n\nThanks to Sam Altman, Trevor Blackwell, Patrick Collison, Jessica\nLivingston, and Robert Morris for reading drafts of this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nApril 2010\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nNovember 2009\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2009\n", "September 2009\n\nWhen meeting people you don't know very well, the convention is\nto seem extra friendly.  You smile and say \"pleased to meet you,\"\nwhether you are or not.  There's nothing dishonest about this.\nEveryone knows that these little social lies aren't meant\nto be taken literally, just as everyone knows that \n\"Can you pass the salt?\" is only grammatically a question.\n\nI'm perfectly willing to smile and say \"pleased to meet you\"\nwhen meeting new people.  But there is another set of \ncustoms for being ingratiating in print that are not so\nharmless.\n\nThe reason there's a convention of being ingratiating in print\nis that most essays are written to persuade.\nAnd as any politician could tell\nyou, the way to persuade people is not just to baldly state the\nfacts.  You have to add a spoonful of sugar to make the medicine\ngo down.\n\nFor example, a politician announcing the cancellation of \na government program will not merely say \"The\nprogram is canceled.\" That would seem offensively\ncurt.  Instead he'll spend most of his time talking about the\nnoble effort made by the people who worked on it.\n\nThe reason these conventions are more dangerous is that they\ninteract with the ideas.  Saying \"pleased to meet you\" is just\nsomething you prepend to a conversation, but the sort of spin \nadded by politicians is woven through it.  We're starting to\nmove from social lies to real lies.\n\nHere's an example of a paragraph from an essay I wrote about\nlabor unions.  As written,\nit tends to offend people who like unions.\n\n  People who think the labor movement was the creation of heroic\n  union organizers have a problem to explain: why are unions shrinking\n  now?  The best they can do is fall back on the default explanation\n  of people living in fallen civilizations. Our ancestors were\n  giants.  The workers of the early twentieth century must have had\n  a moral courage that's lacking today.\n\nNow here's the same paragraph rewritten to please instead of\noffending them:\n\n  Early union organizers made heroic sacrifices to improve conditions\n  for workers.  But though\n  labor unions are shrinking now, it's not because present union\n  leaders are any less courageous.  An employer couldn't get away\n  with hiring thugs to beat up union leaders today, but if they\n  did, I see no reason to believe today's union leaders would shrink\n  from the challenge.  So I think it would be a mistake to attribute\n  the decline of unions to some kind of decline in the people who\n  run them.  Early union leaders were heroic, certainly, but we\n  should not suppose that if unions have declined, it's because\n  present union leaders are somehow inferior.  The cause must be\n  external.\n[1]\n\nIt makes the same point: that it can't have been the personal\nqualities of early union organizers that made unions successful,\nbut must have been some external factor, or otherwise present-day\nunion leaders would have to be inferior people.  But written this\nway it seems like a defense of present-day union organizers rather\nthan an attack on early ones.  That makes it more persuasive to\npeople who like unions, because it seems sympathetic to their cause.\n\nI believe everything I wrote in the second version.  Early union\nleaders did make heroic sacrifices.   And\npresent union leaders probably would rise to the occasion if\nnecessary.  People tend to; I'm skeptical about the idea of \"the\ngreatest generation.\" \n[2]\n\nIf I believe everything I said in the second version, why didn't I\nwrite it that way?  Why offend people needlessly?\n\nBecause I'd rather offend people than pander to them, \nand if you write about controversial topics you have to choose one or the other.  The degree of\ncourage of past or present union leaders is beside the point; all\nthat matters for the argument is that they're the same.\nBut if you want to please\npeople who are mistaken, you can't simply tell the truth.  You're\nalways going to have to add some sort of padding to protect their\nmisconceptions from bumping against reality.\n\nMost writers do.  Most writers write to persuade, if only out of\nhabit or politeness.  But I don't write to persuade; I write to\nfigure out.  I write to persuade a hypothetical perfectly unbiased\nreader.\n\nSince the custom is to write to persuade the actual reader, someone\nwho doesn't will seem arrogant.  In fact, worse than arrogant: since\nreaders are used to essays that try to please someone, an essay\nthat displeases one side in a dispute reads as an attempt to pander\nto the other.  To a lot of pro-union readers, the first paragraph\nsounds like the sort of thing a right-wing radio talk show host\nwould say to stir up his followers.  But it's not.  Something that\ncurtly contradicts one's beliefs can be hard to distinguish from a\npartisan attack on them, but though they can end up in the same\nplace they come from different sources.\n\nWould it be so bad to add a few extra words, to make people feel\nbetter?  Maybe not.  Maybe I'm excessively attached to conciseness.\nI write code the same way I write essays, \nmaking pass after pass\nlooking for anything I can cut.  But I have a legitimate reason for\ndoing this.  You don't know what the ideas are until you get them\ndown to the fewest words.  \n[3]\n\nThe danger of the second paragraph\nis not merely that it's longer.  It's that you start to lie to\nyourself.  The ideas start to get mixed together with the spin\nyou've added to get them past the readers' misconceptions.\n\nI think the goal of an essay should be to discover \nsurprising things.  That's my goal, at least.\nAnd most surprising means most different from what people currently\nbelieve.  So writing to persuade and writing to discover are\ndiametrically opposed.  The more your conclusions disagree with\nreaders' present beliefs, the more effort you'll have to expend on\nselling your ideas rather than having them.  As you accelerate,\nthis drag increases, till eventually you reach a point where 100%\nof your energy is devoted to overcoming it and you can't go any\nfaster.\n\nIt's hard enough to overcome one's own misconceptions without having\nto think about how to get the resulting ideas past other people's.\nI worry that if I wrote to persuade, I'd start to shy away unconsciously\nfrom ideas I knew would be hard to sell.  When I notice something\nsurprising, it's usually very faint at first.  There's nothing more\nthan a slight stirring of discomfort.  I don't want anything to get\nin the way of noticing it consciously.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nI had a strange feeling of being back in high school writing\nthis.  To get a good grade you had to both write the sort of pious\ncrap you were expected to, but also seem to be writing with conviction.\nThe solution was a kind of method acting.  It was revoltingly\nfamiliar to slip back into it.\n\n[2]\nExercise for the reader:\nrephrase that thought to please the same people the first version\nwould offend.\n\n[3]\nCome to think of it, there is one way in which I deliberately\npander to readers, because it doesn't change the number of words:\nI switch person.  This flattering distinction seems so natural to\nthe average reader that they probably don't notice even when I\nswitch in mid-sentence, though you tend to notice when it's done\nas conspicuously as this.\n\nThanks to Jessica Livingston and Robert Morris\nfor reading drafts of this.\n\nNote: An earlier version of this essay began by talking\nabout why people dislike Michael Arrington.  I now believe that\nwas mistaken, and that most people don't dislike him for the\nsame reason I did when I first met him, but simply because\nhe writes about controversial things.\n\n", "September 2009\n\nPublishers of all types, from news to music, are unhappy that\nconsumers won't pay for content anymore.  At least, that's how they\nsee it.\n\nIn fact consumers never really were paying for content, and publishers\nweren't really selling it either.  If the content was what they\nwere selling, why has the price of books or music or movies always\ndepended mostly on the format?  Why didn't better content cost more?\n[1]\n\nA copy of Time costs $5 for 58 pages, or 8.6 cents a page.  \nThe Economist costs $7 for 86 pages, or 8.1 cents a page.  Better\njournalism is actually slightly cheaper.\n\nAlmost every form of publishing has been organized as if the medium\nwas what they were selling, and the content was irrelevant.  Book\npublishers, for example, set prices based on the cost of producing\nand distributing books.  They treat the words printed in the book\nthe same way a textile manufacturer treats the patterns printed on\nits fabrics.\n\nEconomically, the print media are in the business of marking up\npaper.  We can all imagine an old-style editor getting a scoop and\nsaying \"this will sell a lot of papers!\" Cross out that final S and\nyou're describing their business model.  The reason they make less\nmoney now is that people don't need as much paper.\n\nA few months ago I ran into a friend in a cafe.  I had a copy of\nthe New York Times, which I still occasionally buy on weekends.  As\nI was leaving I offered it to him, as I've done countless times\nbefore in the same situation.  But this time something new happened.\nI felt that sheepish feeling you get when you offer someone something\nworthless.  \"Do you, er, want a printout of yesterday's news?\" I\nasked.  (He didn't.)\n\nNow that the medium is evaporating, publishers have nothing left\nto sell.  Some seem to think they're going to sell content\u2014that\nthey were always in the content business, really.  But they weren't,\nand it's unclear whether anyone could be.\n\nSelling\n\nThere have always been people in the business of selling information,\nbut that has historically been a distinct business from publishing.\nAnd the business of selling information to consumers has always\nbeen a marginal one.  When I was a kid there were people who used\nto sell newsletters containing stock tips, printed on colored paper\nthat made them hard for the copiers of the day to reproduce.  That\nis a different world, both culturally and economically, from the\none publishers currently inhabit.\n\nPeople will pay for information they think they can make money from.\nThat's why they paid for those stock tip newsletters, and why\ncompanies pay now for Bloomberg terminals and Economist Intelligence\nUnit reports.  But will people pay for information otherwise?\nHistory offers little encouragement.\n\nIf audiences were willing to pay more for better content, why wasn't\nanyone already selling it to them?  There was no reason you couldn't\nhave done that in the era of physical media.  So were the print\nmedia and the music labels simply overlooking this opportunity?  Or\nis it, rather, nonexistent?\n\nWhat about iTunes?  Doesn't that show people will pay for content?\nWell, not really. iTunes is more of a tollbooth than a store.  Apple\ncontrols the default path onto the iPod.  They offer a convenient\nlist of songs, and whenever you choose one they ding your credit\ncard for a small amount, just below the threshold of attention.\nBasically, iTunes makes money by taxing people, not selling them\nstuff.  You can only do that if you own the channel, and even then\nyou don't make much from it, because a toll has to be ignorable to\nwork.  Once a toll becomes painful, people start to find ways around\nit, and that's pretty easy with digital content.\n\nThe situation is much the same with digital books.  Whoever controls\nthe device sets the terms.  It's in their interest for content to\nbe as cheap as possible, and since they own the channel, there's a\nlot they can do to drive prices down.  Prices will fall even further\nonce writers realize they don't need publishers.  Getting a book\nprinted and distributed is a daunting prospect for a writer, but\nmost can upload a file.\n\nIs software a counterexample?  People pay a lot for desktop software,\nand that's just information.  True, but I don't think publishers\ncan learn much from software.  Software companies can charge a lot\nbecause (a) many of the customers are businesses, who get in \ntrouble\nif they use pirated versions, and (b) though in form merely\ninformation, software is treated by both maker and purchaser as a\ndifferent type of thing from a song or an article.   A Photoshop\nuser needs Photoshop in a way that no one needs a particular song\nor article.\n\nThat's why there's a separate word, \"content,\" for information\nthat's not software.  Software is a different business.  Software\nand content blur together in some of the most lightweight software,\nlike casual games.  But those are usually free.   To make money the\nway software companies do, publishers would have to become software\ncompanies, and being publishers gives them no particular head start\nin that domain. \n[2]\n\nThe most promising countertrend is the premium cable channel.  People\nstill pay for those.  But broadcasting isn't publishing: you're not\nselling a copy of something.  That's one reason the movie business\nhasn't seen their revenues decline the way the news and music\nbusinesses have.  They only have one foot in publishing.\n\nTo the extent the movie business can avoid becoming publishers,\nthey may avoid publishing's problems.  But there are limits to how\nwell they'll be able to do that.  Once publishing\u2014giving people\ncopies\u2014becomes the most natural way of distributing your content,\nit probably doesn't work to stick to old forms of distribution just\nbecause you make more that way.  If free copies of your content are\navailable online, then you're competing with publishing's form of\ndistribution, and that's just as bad as being a publisher.\n\nApparently some people in the music business hope to retroactively\nconvert it away from publishing, by getting listeners to pay for\nsubscriptions.  It seems unlikely that will work if they're just\nstreaming the same files you can get as mp3s.\n\nNext\n\nWhat happens to publishing if you can't sell content?  You have two\nchoices: give it away and make money from it indirectly, or find\nways to embody it in things people will pay for.\n\nThe first is probably the future of most current media.  \nGive music\naway and make money from concerts and t-shirts.  Publish articles\nfor free and make money from one of a dozen permutations of\nadvertising.  Both publishers and investors are down on advertising\nat the moment, but it has more potential than they realize.\n\nI'm not claiming that potential will be realized by the existing\nplayers.  The optimal\nways to make money from the written word\nprobably require different words written by different people.\n\nIt's harder to say what will happen to movies.  They could evolve\ninto ads.  Or they could return to their roots and make going to\nthe theater a treat.  If they made the experience good enough,\naudiences might start to prefer it to watching pirated movies at\nhome. \n[3]\nOr maybe the movie business will dry up, and the people\nworking in it will go to work for game developers.\n\nI don't know how big embodying information in physical form will\nbe.  It may be surprisingly large; people overvalue \nphysical stuff.\nThere should remain some market for printed books, at least.\n\nI can see the evolution of book publishing in the books on my\nshelves.  Clearly at some point in the 1960s the big publishing\nhouses started to ask: how cheaply can we make books before people\nrefuse to buy them?  The answer turned out to be one step short of\nphonebooks.  As long as it isn't floppy, consumers still perceive\nit as a book.\n\nThat worked as long as buying printed books was the only way to\nread them.  If printed books are optional, publishers will have to\nwork harder to entice people to buy them.  There should be some\nmarket, but it's hard to foresee how big, because its size will\ndepend not on macro trends like the amount people read, but on the\ningenuity of individual publishers. \n[4]\n\nSome magazines may thrive by focusing on the magazine as a physical\nobject.  Fashion magazines could be made lush in a way that would\nbe hard to match digitally, at least for a while.  But this is\nprobably not an option for most magazines.\n\nI don't know exactly what the future will look like, but I'm not\ntoo worried about it.  This sort of change tends to create as many\ngood things as it kills.  Indeed, the really interesting question is not\nwhat will happen to existing forms, but what new forms will appear.\n\nThe reason I've been writing about existing forms is that I don't\nknow what new forms will appear.  But though I can't predict\nspecific winners, I can offer a recipe for recognizing them.  When\nyou see something that's taking advantage of new technology to give\npeople something they want that they couldn't have before, you're\nprobably looking at a winner.  And when you see something that's\nmerely reacting to new technology in an attempt to preserve some\nexisting source of revenue, you're probably looking at a loser.\n\n\n\n\n\n\nNotes\n\n[1]\nI don't like the word \"content\" and tried for a while to avoid\nusing it, but I have to admit there's no other word that means the\nright thing.  \"Information\" is too general.\n\nIronically, the main reason I don't like \"content\" is the thesis\nof this essay.  The word suggests an undifferentiated slurry, but\neconomically that's how both publishers and audiences treat it.\nContent is information you don't need.\n\n[2]\nSome types of publishers would be at a disadvantage trying\nto enter the software business.  Record labels, for example, would\nprobably find it more natural to expand into casinos than software,\nbecause the kind of people who run them would be more at home at\nthe mafia end of the business spectrum than the don't-be-evil end.\n\n[3]\nI never watch movies in theaters anymore.  The tipping point\nfor me was the ads they show first.\n\n[4]\nUnfortunately, making physically nice books will only be a\nniche within a niche.  Publishers are more likely to resort to\nexpedients like selling autographed copies, or editions with the\nbuyer's picture on the cover.\n\nThanks to Michael Arrington, Trevor Blackwell, Steven Levy, Robert\nMorris, and Geoff Ralston for reading drafts of this.\n\n", "September 2009\n\nI bet you the current issue of Cosmopolitan has an article\nwhose title begins with a number. \"7 Things He Won't Tell You about\nSex,\" or something like that.  Some popular magazines\nfeature articles of this type on the cover of every\nissue.  That can't be happening by accident.  Editors must know\nthey attract readers.\n\nWhy do readers like the list of n things so much?   Mainly because\nit's easier to read than a regular article.  \n[1]\nStructurally, the list of n things is a degenerate case of essay.\nAn essay can go anywhere the writer wants.  In a list of n things\nthe writer agrees to constrain himself to a collection of points\nof roughly equal importance, and he tells the reader explicitly\nwhat they are.\n\nSome of the work of reading an article is understanding its\nstructure\u2014figuring out what in high school we'd have called\nits \"outline.\" Not explicitly, of course, but someone who really\nunderstands an article probably has something in his brain afterward\nthat corresponds to such an outline.  In a list of n things, this\nwork is done for you.  Its structure is an exoskeleton.\n\nAs well as being explicit, the structure is guaranteed to be of the\nsimplest possible type: a few main points with few to no subordinate\nones, and no particular connection between them.\n\nBecause the main points are unconnected, the list of n things is\nrandom access.  There's no thread of reasoning you have to follow.  You could\nread the list in any order.  And because the points are independent\nof one another, they work like watertight compartments in an\nunsinkable ship.  If you get bored with, or can't understand, or\ndon't agree with one point, you don't have to give up on the article.\nYou can just abandon that one and skip to the next.  A list of n\nthings is parallel and therefore fault tolerant.\n\nThere are times when this format is what a writer wants.  One, obviously,\nis when what you have to say actually is a list of n\nthings.  I once wrote an essay about the mistakes that kill startups, and a few people made fun of me\nfor writing something whose title began with a number.  But in that\ncase I really was trying to make a complete catalog of a number of\nindependent things.  In fact, one of the questions I was trying to\nanswer was how many there were.\n\nThere are other less legitimate reasons for using this format.  For\nexample, I use it when I get close to a deadline.  If I have to\ngive a talk and I haven't started it a few days beforehand, I'll\nsometimes play it safe and make the talk a list of n things.\n\nThe list of n things is easier for writers as well as readers.  When\nyou're writing a real essay, there's always a chance you'll hit a\ndead end.  A real essay is a train of thought, and some trains of\nthought just peter out.  That's an alarming possibility when you\nhave to give a talk in a few days.  What if you run out of ideas?\nThe compartmentalized structure of the list of n things protects\nthe writer from his own stupidity in much the same way it protects\nthe reader.  If you run out of ideas on one point, no problem: it\nwon't kill the essay.  You can take out the whole point if you need\nto, and the essay will still survive.\n\nWriting a list of n things is so relaxing.  You think of n/2 of\nthem in the first 5 minutes.  So bang, there's the structure, and\nyou just have to fill it in.  As you think of more points, you just\nadd them to the end.  Maybe you take out or rearrange or combine a\nfew, but at every stage you have a valid (though initially low-res)\nlist of n things.  It's like the sort of programming where you write\na version 1 very quickly and then gradually modify it, but at every\npoint have working code\u2014or the style of painting where you begin\nwith a complete but very blurry sketch done in an hour, then spend\na week cranking up the resolution.\n\nBecause the list of n things is easier for writers too, it's not\nalways a damning sign when readers prefer it.  It's not necessarily\nevidence readers are lazy; it could also mean they don't have\nmuch confidence in the writer.  The list of n things is in that\nrespect the cheeseburger of essay forms.  If you're eating at a\nrestaurant you suspect is bad, your best bet is to order the\ncheeseburger.  Even a bad cook can make a decent cheeseburger.  And\nthere are pretty strict conventions about what a cheeseburger should\nlook like.  You can assume the cook isn't going to try something\nweird and artistic.  The list of n things similarly limits the\ndamage that can be done by a bad writer.  You know it's going to\nbe about whatever the title says, and the format prevents the writer\nfrom indulging in any flights of fancy.\n\nBecause the list of n things is the easiest essay form, it should\nbe a good one for beginning writers.  And in fact it is what most\nbeginning writers are taught.  The classic 5 paragraph essay is\nreally a list of n things for n = 3.  But the students writing them\ndon't realize they're using the same structure as the articles they\nread in Cosmopolitan. They're not allowed to include the numbers,\nand they're expected to spackle over the gaps with gratuitous\ntransitions (\"Furthermore...\") and cap the thing at either end with\nintroductory and concluding paragraphs so it will look superficially\nlike a real essay.\n[2]\n\nIt seems a fine plan to start students off with the list of n things.\nIt's the easiest form.  But if we're going to do that, why not do\nit openly?  Let them write lists of n things like the pros, with\nnumbers and no transitions or \"conclusion.\"\n\nThere is one case where the list of n things is a dishonest format:\nwhen you use it to attract attention by falsely claiming the list\nis an exhaustive one.  I.e. if you write an article that purports\nto be about the 7 secrets of success.  That kind of title is the\nsame sort of reflexive challenge as a whodunit. You have to at least\nlook at the article to check whether they're the same 7 you'd list.\nAre you overlooking one of the secrets of success?  Better check.\n\nIt's fine to put \"The\" before the number if you really believe\nyou've made an exhaustive list.  But evidence suggests most things\nwith titles like this are linkbait.\n\nThe greatest weakness of the list of n things is that there's so\nlittle room for new thought.  The main point of essay writing, when\ndone right, is the new ideas you have while doing it.  A real essay,\nas the name implies, is \ndynamic: you don't know what you're going\nto write when you start.  It will be about whatever you discover\nin the course of writing it.\n\nThis can only happen in a very limited way in a list of n things.\nYou make the title first, and that's what it's going to be about.\nYou can't have more new ideas in the writing than will fit in the\nwatertight compartments you set up initially.  And your brain seems\nto know this: because you don't have room for new ideas, you don't\nhave them.\n\nAnother advantage of admitting to beginning writers that the 5\nparagraph essay is really a list of n things is that we can warn\nthem about this.  It only lets you experience the defining\ncharacteristic of essay writing on a small scale: in thoughts of a\nsentence or two.  And it's particularly dangerous that the 5 paragraph\nessay buries the list of n things within something that looks like\na more sophisticated type of essay.  If you don't know you're using\nthis form, you don't know you need to escape it.\n\n\n\n\n\nNotes\n\n[1]\nArticles of this type are also startlingly popular on Delicious,\nbut I think that's because \ndelicious/popular \nis driven by bookmarking,\nnot because Delicious users are stupid.  Delicious users are\ncollectors, and a list of n things seems particularly collectible\nbecause it's a collection itself.\n\n[2]\nMost \"word problems\" in school math textbooks are similarly\nmisleading.  They look superficially like the application of math\nto real problems, but they're not.  So if anything they reinforce\nthe impression that math is merely a complicated but pointless\ncollection of stuff to be memorized.\n\n\n\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nSeptember 2009\n", "August 2009\n\nKate Courteau is the architect who designed Y Combinator's office.\nRecently we managed to recruit her to help us run YC when she's not\nbusy with architectural projects.  Though she'd heard a lot about\nYC since the beginning, the last 9 months have been a total immersion.\n\nI've been around the startup world for so long that it seems normal\nto me, so I was curious to hear what had surprised her most about\nit.  This was her list:\n\n\n\n1. How many startups fail.\n\nKate knew in principle that startups\nwere very risky, but she was surprised to see how constant the\nthreat of failure was \u2014 not just for the minnows, but even for the\nfamous startups whose founders came to speak at YC dinners.\n\n\n2. How much startups' ideas change.\n\nAs usual, by Demo Day about\nhalf the startups were doing something significantly different than\nthey started with.  We encourage that.  Starting a startup is like\nscience in that you have to follow the truth wherever it leads.  In\nthe rest of the world, people don't start things till they're sure\nwhat they want to do, and once started they tend to continue on their\ninitial path even if it's mistaken.\n\n\n3. How little money it can take to start a startup.\n\nIn Kate's\nworld, everything is still physical and expensive.  You can barely\nrenovate a bathroom for the cost of starting a startup.\n\n\n4. How scrappy founders are.\n\nThat was her actual word.  I agree\nwith her, but till she mentioned this it never occurred to me how\nlittle this quality is appreciated in most of the rest of the world.\nIt wouldn't be a compliment in most organizations to call someone\nscrappy.\n\nWhat does it mean, exactly?  It's basically the diminutive form of\nbelligerent.  Someone who's scrappy manages to be both threatening\nand undignified at the same time.   Which seems to me exactly what\none would want to be, in any kind of work.  If you're not threatening,\nyou're probably not doing anything new, and dignity is merely a\nsort of plaque.\n\n\n5. How tech-saturated Silicon Valley is.\n\n\"It seems like everybody\nhere is in the industry.\"  That isn't literally true, but there is\na qualitative difference between Silicon Valley and other places.\nYou tend to keep your voice down, because there's a good chance the\nperson at the next table would know some of the people you're talking\nabout.  I never felt that in Boston.  The good news is, there's\nalso a good chance the person at the next table could help you in\nsome way.\n\n\n6. That the speakers at YC were so consistent in their advice.\n\n\nActually, I've noticed this too.  I always worry the speakers will\nput us in an embarrassing position by contradicting what we tell the\nstartups, but it happens surprisingly rarely.\n\nWhen I asked her what specific things she remembered speakers always\nsaying, she mentioned: that the way to succeed was to launch something\nfast, listen to users, and then iterate; that startups required\nresilience because they were always an emotional rollercoaster; and\nthat most VCs were sheep.\n\nI've been impressed by how consistently the speakers advocate\nlaunching fast and iterating.  That was contrarian advice 10 years\nago, but it's clearly now the established practice.\n\n\n7. How casual successful startup founders are.\n\nMost of the famous\nfounders in Silicon Valley are people you'd overlook on the street.\nIt's not merely that they don't dress up.  They don't project any\nkind of aura of power either.  \"They're not trying to impress\nanyone.\"\n\nInterestingly, while Kate said that she could never pick out\nsuccessful founders, she could recognize VCs, both by the way they\ndressed and the way they carried themselves.\n\n\n8. How important it is for founders to have people to ask for advice.\n\n(I swear I didn't prompt this one.)  Without advice \"they'd just\nbe sort of lost.\"  Fortunately, there are a lot of people to help\nthem.  There's a strong tradition within YC of helping other YC-funded\nstartups.  But we didn't invent that idea: it's just a slightly\nmore concentrated form of existing Valley culture.\n\n\n9. What a solitary task startups are.\n\nArchitects are constantly\ninteracting face to face with other people, whereas doing a technology\nstartup, at least, tends to require long stretches of uninterrupted\ntime to work.  \"You could do it in a box.\"\n\n\n\nBy inverting this list, we can get a portrait of the \"normal\" world.\nIt's populated by people who talk a lot with one another as they\nwork slowly but harmoniously on conservative, expensive projects\nwhose destinations are decided in advance, and who carefully adjust\ntheir manner to reflect their position in the hierarchy.\n\nThat's also a fairly accurate description of the past.  So startup\nculture may not merely be different in the way you'd expect any\nsubculture to be, but a leading indicator.\n\n", "July 2009\n\nThe Segway hasn't delivered on its initial promise, to put it mildly.\nThere are several reasons why, but one is that people don't want\nto be seen riding them. Someone riding a Segway looks like a dork.\n\nMy friend Trevor Blackwell built \nhis own Segway, \nwhich we called\nthe Segwell. He also built a one-wheeled version, \nthe Eunicycle,\nwhich looks exactly like a regular unicycle till you realize the\nrider isn't pedaling.  He has ridden them both to downtown Mountain\nView to get coffee.  When he rides the Eunicycle, people smile at\nhim.  But when he rides the Segwell, they shout abuse from their\ncars: \"Too lazy to walk, ya fuckin homo?\"\n\nWhy do Segways provoke this reaction?  The reason you look like a\ndork riding a Segway is that you look smug.  You don't seem to\nbe working hard enough.\n\nSomeone riding a motorcycle isn't working any harder. But because\nhe's sitting astride it, he seems to be making an effort.  When\nyou're riding a Segway you're just standing there.  And someone who's\nbeing whisked along while seeming to do no work \u2014 someone in a sedan\nchair, for example \u2014 can't help but look smug.\n\nTry this thought experiment and it becomes clear: imagine something\nthat worked like the Segway, but that you rode with one foot in\nfront of the other, like a skateboard.  That wouldn't seem nearly\nas uncool.\n\nSo there may be a way to capture more of the market Segway hoped\nto reach: make a version that doesn't look so easy for the rider.\nIt would also be helpful if the styling was in the tradition of\nskateboards or bicycles rather than medical devices.\n\nCuriously enough, what got Segway into this problem was that the\ncompany was itself a kind of Segway.  It was too easy for them;\nthey were too successful raising money.  If they'd had to grow the\ncompany gradually, by iterating through several versions they sold\nto real users, they'd have learned pretty quickly that people looked\nstupid riding them. Instead they had enough to work in secret.  They\nhad focus groups aplenty, I'm sure, but they didn't have the people\nyelling insults out of cars.  So they never realized they were\nzooming confidently down a blind alley.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJuly 2009\n", "\n\n\n\n\n\"...the mere consciousness of an engagement will sometimes worry a whole day.\"\n\n\u0096 Charles Dickens\n\n\n\n\nJuly 2009\n\nOne reason programmers dislike meetings so much is that they're on\na different type of schedule from other people.  Meetings cost them\nmore.\n\nThere are two types of schedule, which I'll call the manager's\nschedule and the maker's schedule.  The manager's schedule is for\nbosses.  It's embodied in the traditional appointment book, with\neach day cut into one hour intervals.  You can block off several\nhours for a single task if you need to, but by default you change\nwhat you're doing every hour.\n\nWhen you use time that way, it's merely a practical problem to meet\nwith someone.  Find an open slot in your schedule, book them, and\nyou're done.\n\nMost powerful people are on the manager's schedule.  It's the\nschedule of command.  But there's another way of using time that's\ncommon among people who make things, like programmers and writers.\nThey generally prefer to use time in units of half a day at least.\nYou can't write or program well in units of an hour.  That's barely\nenough time to get started.\n\nWhen you're operating on the maker's schedule, meetings are a\ndisaster.  A single meeting can blow a whole afternoon, by breaking\nit into two pieces each too small to do anything hard in.  Plus you\nhave to remember to go to the meeting.  That's no problem for someone\non the manager's schedule.  There's always something coming on the\nnext hour; the only question is what.  But when someone on the\nmaker's schedule has a meeting, they have to think about it.\n\nFor someone on the maker's schedule, having a meeting is like\nthrowing an exception.  It doesn't merely cause you to switch from\none task to another; it changes the mode in which you work.\n\nI find one meeting can sometimes affect a whole day.   A meeting\ncommonly blows at least half a day, by breaking up a morning or\nafternoon.  But in addition there's sometimes a cascading effect.\nIf I know the afternoon is going to be broken up, I'm slightly less\nlikely to start something ambitious in the morning.  I know this\nmay sound oversensitive, but if you're a maker, think of your own\ncase.  Don't your spirits rise at the thought of having an entire\nday free to work, with no appointments at all?  Well, that means\nyour spirits are correspondingly depressed when you don't.  And\nambitious projects are by definition close to the limits of your\ncapacity.  A small decrease in morale is enough to kill them off.\n\nEach type of schedule works fine by itself.  Problems arise when\nthey meet.  Since most powerful people operate on the manager's\nschedule, they're in a position to make everyone resonate at their\nfrequency if they want to.  But the smarter ones restrain themselves,\nif they know that some of the people working for them need long\nchunks of time to work in.\n\nOur case is an unusual one.  Nearly all investors, including all\nVCs I know, operate on the manager's schedule.  But \nY Combinator\nruns on the maker's schedule.  Rtm and Trevor and I do because we\nalways have, and Jessica does too, mostly, because she's gotten\ninto sync with us.\n\nI wouldn't be surprised if there start to be more companies like\nus.  I suspect founders may increasingly be able to resist, or at\nleast postpone, turning into managers, just as a few decades ago\nthey started to be able to resist switching from jeans\nto suits.\n\nHow do we manage to advise so many startups on the maker's schedule?\nBy using the classic device for simulating the manager's schedule\nwithin the maker's: office hours.  Several times a week I set aside\na chunk of time to meet founders we've funded.  These chunks of\ntime are at the end of my working day, and I wrote a signup program\nthat ensures all the appointments within a given set of office hours\nare clustered at the end.  Because they come at the end of my day\nthese meetings are never an interruption.  (Unless their working\nday ends at the same time as mine, the meeting presumably interrupts\ntheirs, but since they made the appointment it must be worth it to\nthem.)  During busy periods, office hours sometimes get long enough\nthat they compress the day, but they never interrupt it.\n\n\nWhen we were working on our own startup, back in the 90s, I evolved\nanother trick for partitioning the day.  I used to program from\ndinner till about 3 am every day, because at night no one could\ninterrupt me.  Then I'd sleep till about 11 am, and come in and\nwork until dinner on what I called \"business stuff.\"  I never thought\nof it in these terms, but in effect I had two workdays each day,\none on the manager's schedule and one on the maker's.\n\nWhen you're operating on the manager's schedule you can do something\nyou'd never want to do on the maker's: you can have speculative\nmeetings.  You can meet someone just to get to know one another.\nIf you have an empty slot in your schedule, why not?  Maybe it will\nturn out you can help one another in some way.\n\nBusiness people in Silicon Valley (and the whole world, for that\nmatter) have speculative meetings all the time.  They're effectively\nfree if you're on the manager's schedule.  They're so common that\nthere's distinctive language for proposing them: saying that you\nwant to \"grab coffee,\" for example.\n\nSpeculative meetings are terribly costly if you're on the maker's\nschedule, though.  Which puts us in something of a bind.  Everyone\nassumes that, like other investors, we run on the manager's schedule.\nSo they introduce us to someone they think we ought to meet, or\nsend us an email proposing we grab coffee.  At this point we have\ntwo options, neither of them good: we can meet with them, and lose\nhalf a day's work; or we can try to avoid meeting them, and probably\noffend them.\n\nTill recently we weren't clear in our own minds about the source\nof the problem.  We just took it for granted that we had to either\nblow our schedules or offend people.  But now that I've realized\nwhat's going on, perhaps there's a third option: to write something\nexplaining the two types of schedule.  Maybe eventually, if the\nconflict between the manager's schedule and the maker's schedule\nstarts to be more widely understood, it will become less of a\nproblem.\n\nThose of us on the maker's schedule are willing to compromise.   We\nknow we have to have some number of meetings.  All we ask from those\non the manager's schedule is that they understand the cost.\n\n\n\n\n\n\nThanks to Sam Altman, Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nand Robert Morris for reading drafts of this.\n\n\n\nRelated:\n\n", "April 2009\n\nRecently I realized I'd been holding two ideas in my head that would explode if combined.\n\nThe first is that startups may represent a new economic phase, on the scale of the Industrial Revolution. I'm not sure of this, but there seems a decent chance it's true.  People are dramatically more \nproductive as founders or early employees of startups\u2014imagine how much less Larry and Sergey would have achieved if they'd gone to work for a big company\u2014and that scale of improvement can change social customs.\n\nThe second idea is that startups are a type of business that flourishes in certain places that specialize in it\u2014that Silicon Valley specializes in startups in the same way Los Angeles specializes in movies, or New York in finance. [1]\n\nWhat if both are true?  What if startups are both a new economic phase and also a type of business that only flourishes in certain centers?\n\nIf so, this revolution is going to be particularly revolutionary. All previous revolutions have spread.  Agriculture, cities, and industrialization all spread widely. If startups end up being like the movie business, with just a handful of centers and one dominant one, that's going to have novel consequences.\n\nThere are already signs that startups may not spread particularly well.  The spread of startups seems to be proceeding slower than the spread of the Industrial Revolution, despite the fact that communication is so much faster now.\n\nWithin a few decades of the founding of Boulton & Watt there were steam engines scattered over northern Europe and North America.  Industrialization didn't spread much beyond those regions for a while. It only spread to places where there was a strong middle class\u2014countries where a private citizen could make a fortune without having it confiscated. Otherwise it wasn't worth investing in factories.  But in a country with a strong middle class it was easy for industrial techniques to take root.  An individual mine or factory owner could decide to install a steam engine, and within a few years he could probably find someone local to make him one.  So steam engines spread fast.  And they spread widely, because the locations of mines and factories were determined by features like rivers, harbors, and sources of raw materials. \n [2]\n\nStartups don't seem to spread so well, partly because they're more a social than a technical phenomenon, and partly because they're not tied to geography.  An individual European manufacturer could import industrial techniques and they'd work fine.  This doesn't seem to work so well with startups: you need a community of expertise, as you do in the movie business.  [3]\n Plus there aren't the same forces driving startups to spread.  Once railroads or electric power grids were invented, every region had to have them.  An area without railroads or power was a rich potential market.  But this isn't true with startups.  There's no need for a Microsoft of France or Google of Germany.\n\nGovernments may decide they want to encourage startups locally, but government policy can't call them into being the way a genuine need could.\n\nHow will this all play out?  If I had to predict now, I'd say that startups will spread, but very slowly, because their spread will be driven not by government policies (which won't work) or by market need (which doesn't exist) but, to the extent that it happens at all, by the same random factors that have caused startup culture to spread thus far.  And such random factors will increasingly be outweighed by the pull of existing startup hubs.\n\nSilicon Valley is where it is because William Shockley wanted to move back to Palo Alto, where he grew up, and the experts he lured west to work with him liked it so much they stayed.  Seattle owes much of its position as a tech center to the same cause: Gates and Allen wanted to move home.  Otherwise Albuquerque might have Seattle's place in the rankings.  Boston is a tech center because it's the intellectual capital of the US and probably the world.  And if Battery Ventures hadn't turned down Facebook, Boston would be significantly bigger now on the startup radar screen.\n\nBut of course it's not a coincidence that Facebook got funded in the Valley and not Boston.  There are more and bolder investors in Silicon Valley than in Boston, and even undergrads know it.\n\nBoston's case illustrates the difficulty you'd have establishing a new startup hub this late in the game.  If you wanted to create a startup hub by reproducing the way existing ones happened, the \nway to do it would be to establish a first-rate research university in a place so nice that rich people wanted to live there.  Then the town would be hospitable to both groups you need: both founders and investors.  That's the combination that yielded Silicon Valley.  But Silicon Valley didn't have Silicon Valley to compete with.  If you tried now to create a startup hub by planting a great university in a nice place, it would have a harder time getting started, because many of the best startups it produced would be sucked away to existing startup hubs.\n\nRecently I suggested a potential shortcut: \npay startups to move.  Once you had enough good startups in one place, it would create a self-sustaining chain reaction.  Founders would start to move there without being paid, because that was where their peers were, and investors would appear too, because that was where the deals were.\n\nIn practice I doubt any government would have the balls to try this, or the brains to do it right.  I didn't mean it as a practical suggestion, but more as an exploration of the lower bound of what it would take to create a startup hub deliberately.\n\nThe most likely scenario is (1) that no government will successfully establish a startup hub, and (2) that the spread of startup culture will thus be driven by the random factors that have driven it so far, but (3) that these factors will be increasingly outweighed by the pull of existing startup hubs.  Result: this revolution, if it is one, will be unusually localized.\n\n\n\n\n\n\nNotes\n\n[1]\nThere are two very different types of startup: one kind that evolves naturally, and one kind that's called into being to \"commercialize\" a scientific discovery.  Most computer/software startups are now the first type, and most pharmaceutical startups the second.  When I talk about startups in this essay, I mean type I startups.  There is no difficulty making type II startups spread: all you have to do is fund medical research labs; commercializing whatever new discoveries the boffins throw off is as straightforward as building a new airport.  Type II startups neither require nor produce startup culture. But that means having type II startups won't get you type I startups.  Philadelphia is a case in point: lots of type II startups, but hardly any type I.\n\nIncidentally, Google may appear to be an instance of a type II startup, but it wasn't.  Google is not pagerank commercialized.  They could have used another algorithm and everything would have turned out the same.  What made Google Google is that they cared about doing search well at a critical point in the evolution of the web.\n\n[2]\n Watt didn't invent the steam engine.  His critical invention was a refinement that made steam engines dramatically more efficient: the separate condenser.  But that oversimplifies his role.  He had such a different attitude to the problem and approached it with such energy that he transformed the field.  Perhaps the most accurate way to put it would be to say that Watt reinvented the steam engine.\n\n[3]\nThe biggest counterexample here is Skype.  If you're doing\nsomething that would get shut down in the US, it becomes an \nadvantage to be located elsewhere.  That's why Kazaa took\nthe place of Napster.  And the expertise and connections the \nfounders gained from running Kazaa helped ensure the success\nof Skype.\n\nThanks to Patrick Collison, Jessica Livingston, and Fred Wilson for reading drafts of this.\n\n", "April 2009\n\nOm Malik is the most recent of many people\nto ask why Twitter is such a big deal.\n\nThe reason is that it's a new messaging \nprotocol, where you don't specify the recipients.\nNew protocols are rare.  Or more precisely, new\nprotocols that take off are.\nThere are only a handful of commonly used ones: TCP/IP \n(the Internet), SMTP (email), HTTP (the web), and so on.  So any\nnew protocol is a big deal.  But Twitter is a protocol owned\nby a private company.  That's even rarer.\n\nCuriously, the fact that the founders of Twitter \nhave been slow to monetize it may in the long run\nprove to be an advantage.  Because they haven't tried\nto control it too much, Twitter feels to everyone like\nprevious protocols.  One forgets it's owned by a\nprivate company.  That must have made it easier for\nTwitter to spread.\n\n", "\n\nApril 2009\n\nI usually avoid politics, but since we now seem to have an administration that's open to suggestions, I'm going to risk making one.  The single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders.\n\nThe biggest constraint on the number of new startups that get created in the US is not tax policy or employment law or even Sarbanes-Oxley.  It's that we won't let the people who want to start them into the country.\n\nLetting just 10,000 startup founders into the country each year could have a visible effect on the economy.  If we assume 4 people per startup, which is probably an overestimate, that's 2500 new companies.  Each year.  They wouldn't all grow as big as Google, but out of 2500 some would come close.\n\nBy definition these 10,000 founders wouldn't be taking jobs from Americans: it could be part of the terms of the visa that they couldn't work for existing companies, only new ones they'd founded.  In fact they'd cause there to be \nmore jobs for Americans, because the companies they started would hire more employees as they grew.\n\nThe tricky part might seem to be how one defined a startup. But that could be solved quite easily: let the market decide.  Startup investors work hard to find the best startups.  The government could not do better than to piggyback on their expertise, and use investment by recognized startup investors as the test of whether a company was a real startup.\n\nHow would the government decide who's a startup investor?  The same way they decide what counts as a university for student visas. We'll establish our own accreditation procedure. We know who one another are.\n\n10,000 people is a drop in the bucket by immigration standards, but would represent a huge increase in the pool of startup founders.  I think this would have such a visible effect on the economy that it would make the legislator who introduced the bill famous.  The only way to know for sure would be to try it, and that would cost practically nothing.\n\n\n\n\n\n\nThanks to Trevor Blackwell, Paul Buchheit, Jeff Clavier, David Hornik, Jessica Livingston, Greg Mcadoo, Aydin Senkut, and Fred Wilson for reading drafts of this.\n\n\n\nRelated:\n\n", "April 2009\n\nInc recently asked me who I thought were the 5 most\ninteresting startup founders of the last 30 years.  How do\nyou decide who's the most interesting?  The best test seemed\nto be influence: who are the 5\nwho've influenced me most?  Who do I use as examples when I'm\ntalking to companies we fund?  Who do I find myself quoting?\n\n1. Steve Jobs\n\nI'd guess Steve is the most influential founder not just for me but\nfor most people you could ask.  A lot of startup culture is Apple\nculture.  He was the original young founder.  And while the concept\nof \"insanely great\" already existed in the arts, it was a novel\nidea to introduce into a company in the 1980s.\n\nMore remarkable still, he's stayed interesting for 30 years.  People\nawait new Apple products the way they'd await new books by a popular\nnovelist.  Steve may not literally design them, but they wouldn't\nhappen if he weren't CEO.\n\nSteve is clever and driven, but so are a lot of people in the Valley.\nWhat makes him unique is his \nsense of \ndesign.  Before him, most\ncompanies treated design as a frivolous extra.  Apple's competitors\nnow know better.\n\n2. TJ Rodgers\n\nTJ Rodgers isn't as famous as Steve Jobs, but he may be the best\nwriter among Silicon Valley CEOs.  I've probably learned more from\nhim about the startup way of thinking than from anyone else.  Not\nso much from specific things he's written as by reconstructing the\nmind that produced them: brutally candid; aggressively garbage-collecting\noutdated ideas; and yet driven by pragmatism rather than ideology.\n\nThe first essay of his that I read was so electrifying that I\nremember exactly where I was at the time.  It was \nHigh\nTechnology Innovation: Free Markets or Government Subsidies? and\nI was downstairs in the Harvard Square T Station.  It felt as if\nsomeone had flipped on a light switch inside my head.\n\n3. Larry & Sergey\n\nI'm sorry to treat Larry and Sergey as one person.  I've always\nthought that was unfair to them.  But it does seem as if Google was a\ncollaboration.\n\nBefore Google, companies in Silicon Valley already knew it was\nimportant to have the best hackers.  So they claimed, at least.\nBut Google pushed this idea further than anyone had before.  Their\nhypothesis seems to have been that, in the initial stages at least,\nall you need is good hackers: if you hire all the smartest people\nand put them to work on a problem where their success can be measured,\nyou win.  All the other stuff\u2014which includes all the stuff that\nbusiness schools think business consists of\u2014you can figure out\nalong the way.  The results won't be perfect, but they'll be optimal.\nIf this was their hypothesis, it's now been verified experimentally.\n\n4. Paul Buchheit\n\nFew know this, but one person, Paul Buchheit, is responsible for\nthree of the best things Google has done.  He was the original\nauthor of GMail, which is the most impressive thing Google has after\nsearch.  He also wrote the first prototype of AdSense, and was the\nauthor of Google's mantra \"Don't be evil.\"\n\nPB made a point in a talk once that I now mention to every startup\nwe fund: that it's better, initially, to make a small number of\nusers really love you than a large number kind of like you.   If I\ncould tell startups only \nten sentences, \nthis would be one of them.\n\nNow he's cofounder of a startup called Friendfeed.  It's only a\nyear old, but already everyone in the Valley is watching them.\nSomeone responsible for three of the biggest ideas at Google is\ngoing to come up with more.\n\n5. Sam Altman\n\nI was told I shouldn't mention founders of YC-funded companies in\nthis list.   But Sam Altman can't be stopped by such flimsy rules.\nIf he wants to be on this list, he's going to be.\n\nHonestly, Sam is, along with Steve Jobs, the founder I refer to\nmost when I'm advising startups.  On questions of design, I ask\n\"What would Steve do?\" but on questions of strategy or ambition I\nask \"What would Sama do?\"\n\nWhat I learned from meeting Sama is that the doctrine of the elect\napplies to startups.  It applies way less than most people think:\nstartup investing does not consist of trying to pick winners the\nway you might in a horse race.  But there are a few people with\nsuch force of will that they're going to get whatever they want.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMarch 2009\n", "March 2009\n\n(This essay is derived from a talk at AngelConf.)\n\nWhen we sold our startup in 1998 I thought one day I'd do some angel\ninvesting.  Seven years later I still hadn't started.  I put it off\nbecause it seemed mysterious and complicated.   It turns out to be \neasier than I expected, and also more interesting.\n\nThe part I thought was hard, the mechanics of investing, really\nisn't. You give a startup money and they give you stock.  You'll\nprobably get either preferred stock, which means stock with extra\nrights like getting your money back first in a sale, or convertible\ndebt, which means (on paper) you're lending the company money, and\nthe debt converts to stock at the next sufficiently big funding\nround. \n[1]\n\nThere are sometimes minor tactical advantages to using one or the\nother.  The paperwork for convertible debt is simpler.  But really\nit doesn't matter much which you use.  Don't spend much time worrying\nabout the details of deal terms, especially when you first start\nangel investing.  That's not how you win at this game.  When you\nhear people talking about a successful angel investor, they're not\nsaying \"He got a 4x liquidation preference.\" They're saying \"He\ninvested in Google.\"\n\nThat's how you win: by investing in the right startups.  That is\nso much more important than anything else that I worry I'm misleading\nyou by even talking about other things.\n\nMechanics\n\nAngel investors often syndicate deals, which means they join together\nto invest on the same terms.  In a syndicate there is usually a\n\"lead\" investor who negotiates the terms with the startup.  But not\nalways: sometimes the startup cobbles together a syndicate of\ninvestors who approach them independently, and the startup's lawyer\nsupplies the paperwork.\n\nThe easiest way to get started in angel investing is to find a\nfriend who already does it, and try to get included in his syndicates.\nThen all you have to do is write checks.\n\nDon't feel like you have to join a syndicate, though.  It's not that\nhard to do it yourself.  You can just use the standard \nseries AA\ndocuments Wilson Sonsini and Y Combinator published online.\nYou should of course have your lawyer review everything.  Both you\nand the startup should have lawyers.  But the lawyers don't have\nto create the agreement from scratch.  \n[2]\n\n\nWhen you negotiate terms with a startup, there are two numbers you\ncare about: how much money you're putting in, and the valuation of\nthe company.  The valuation determines how much stock you get.  If\nyou put $50,000 into a company at a pre-money valuation of $1\nmillion, then the post-money valuation is $1.05 million, and you\nget .05/1.05, or 4.76% of the company's stock.\n\nIf the company raises more money later, the new investor will take\na chunk of the company away from all the existing shareholders just\nas you did.  If in the next round they sell 10% of the company to\na new investor, your 4.76% will be reduced to 4.28%.\n\nThat's ok.  Dilution is normal.  What saves you from being mistreated\nin future rounds, usually, is that you're in the same boat as the\nfounders.  They can't dilute you without diluting themselves just\nas much.  And they won't dilute themselves unless they end up \nnet ahead.  So in theory, each further \nround of investment leaves you\nwith a smaller share of an even more valuable company, till after\nseveral more rounds you end up with .5% of the company at the point\nwhere it IPOs, and you are very happy because your $50,000 has\nbecome $5 million. \n[3]\n\nThe agreement by which you invest should have provisions that \nlet you contribute to\nfuture rounds to maintain your percentage.  So it's your choice\nwhether you get diluted.  \n[4]\nIf the company does really well,\nyou eventually will, because eventually the valuations will get so\nhigh it's not worth it for you.\n\nHow much does an angel invest?  That varies enormously, from $10,000\nto hundreds of thousands or in rare cases even millions.  The upper\nbound is obviously the total amount the founders want to raise.\nThe lower bound is 5-10% of the total or $10,000, whichever\nis greater.  A typical angel round these days might be $150,000\nraised from 5 people.\n\nValuations don't vary as much.  For angel rounds it's rare to see\na valuation lower than half a million or higher than 4 or 5 million.\n4 million is starting to be VC territory.\n\nHow do you decide what valuation to offer?  If you're part of a\nround led by someone else, that problem is solved for you.  But\nwhat if you're investing by yourself?  There's no real answer.\nThere is no rational way to value an early stage startup.  The\nvaluation reflects nothing more than the strength of the company's\nbargaining position.  If they really want you, either because they\ndesperately need money, or you're someone who can help them a lot,\nthey'll let you invest at a low valuation.  If they don't need you,\nit will be higher.  So guess.  The startup may not have any more\nidea what the number should be than you do. \n[5]\n\nUltimately it doesn't matter much.  When angels make a lot of money\nfrom a deal, it's not because they invested at a valuation of $1.5\nmillion instead of $3 million.  It's because the company was really\nsuccessful.\n\nI can't emphasize that too much.  Don't get hung up on mechanics\nor deal terms.  What you should spend your time thinking about is\nwhether the company is good.\n\n(Similarly, founders also should not get hung up on deal\nterms, but should spend their time thinking about how to make the\ncompany good.)\n\nThere's a second less obvious component of an angel investment: how\nmuch you're expected to help the startup.  Like the amount you\ninvest, this can vary a lot.  You don't have to do anything if you\ndon't want to; you could simply be a source of money.  Or you can\nbecome a de facto employee of the company.  Just make sure that you\nand the startup agree in advance about roughly how much you'll do\nfor them.\n\nReally hot companies sometimes have high standards for angels.  The\nones everyone wants to invest in practically audition investors,\nand only take money from people who are famous and/or will work\nhard for them.  But don't feel like you have to put in a lot of\ntime or you won't get to invest in any good startups.  There is a\nsurprising lack of correlation between how hot a deal a startup is\nand how well it ends up doing.  Lots of hot startups will end up\nfailing, and lots of startups no one likes will end up succeeding.\nAnd the latter are so desperate for money that they'll take it from\nanyone at a low valuation. \n[6]\n\nPicking Winners\n\nIt would be nice to be able to pick those out, wouldn't it?  The\npart of angel investing that has most effect on your returns, picking\nthe right companies, is also the hardest.  So you should practically\nignore (or more precisely, archive, in the Gmail sense) everything\nI've told you so far.  You may need to refer to it at some point,\nbut it is not the central issue.\n\nThe central issue is picking the right startups.  What \"Make something\npeople want\" is for startups, \"Pick the right startups\" is for\ninvestors.  Combined they yield \"Pick the startups that will make\nsomething people want.\"\n\nHow do you do that?  It's not as simple as picking startups that\nare already making something wildly popular.  By then it's\ntoo late for angels.  VCs will already be onto them.  As an angel,\nyou have to pick startups before they've got a hit\u2014either\nbecause they've made something great but users don't realize it\nyet, like Google early on, or because they're still an iteration\nor two away from the big hit, like Paypal when they were making\nsoftware for transferring money between PDAs.\n\nTo be a good angel investor, you have to be a good judge of potential.\nThat's what it comes down to.  VCs can be fast followers.  Most of\nthem don't try to predict what will win.  They just try to notice\nquickly when something already is winning.  But angels have to be\nable to predict.  \n[7]\n\nOne interesting consequence of this fact is that there are a lot\nof people out there who have never even made an angel investment\nand yet are already better angel investors than they realize.\nSomeone who doesn't know the first thing about the mechanics of\nventure funding but knows what a successful startup founder looks\nlike is actually far ahead of someone who knows termsheets inside\nout, but thinks \n\"hacker\" means someone who breaks into computers.\nIf you can recognize good startup founders by empathizing with\nthem\u2014if you both resonate at the same frequency\u2014then\nyou may already be a better startup picker than the median professional\nVC.  \n[8]\n\nPaul Buchheit, for example, started angel investing about a year\nafter me, and he was pretty much immediately as good as me at picking\nstartups.  My extra year of experience was rounding error compared\nto our ability to empathize with founders.\n\nWhat makes a good founder?  If there were a word that meant the\nopposite of hapless, that would be the one.  Bad founders seem\nhapless.  They may be smart, or not, but somehow events overwhelm\nthem and they get discouraged and give up.  Good founders make\nthings happen the way they want.  Which is not to say they force\nthings to happen in a predefined way.  Good founders have a healthy\nrespect for reality.  But they are relentlessly resourceful.  That's\nthe closest I can get to the opposite of hapless.  You want to fund\npeople who are relentlessly resourceful.\n\nNotice we started out talking about things, and now we're talking\nabout people.  There is an ongoing debate between investors which\nis more important, the people, or the idea\u2014or more precisely,\nthe market. Some, like Ron Conway, say it's the people\u2014that\nthe idea will change, but the people are the foundation of the\ncompany.  Whereas Marc Andreessen says he'd back ok founders in a\nhot market over great founders in a bad one.  \n[9]\n\nThese two positions are not so far apart as they seem, because good\npeople find good markets.  Bill Gates would probably have ended up\npretty rich even if IBM hadn't happened to drop the PC standard in\nhis lap.\n\nI've thought a lot about the disagreement between the investors who\nprefer to bet on people and those who prefer to bet on markets.\nIt's kind of surprising that it even exists.  You'd expect opinions\nto have converged more.\n\nBut I think I've figured out what's going on.  The three most\nprominent people I know who favor markets are Marc, Jawed Karim,\nand Joe Kraus.  And all three of them, in their own startups,\nbasically flew into a thermal: they hit a market growing so fast\nthat it was all they could do to keep up with it.  That kind of\nexperience is hard to ignore.  Plus I think they underestimate\nthemselves: they think back to how easy it felt to ride that huge\nthermal upward, and they think \"anyone could have done it.\"  But\nthat isn't true; they are not ordinary people.\n\nSo as an angel investor I think you want to go with Ron Conway and\nbet on people.  Thermals happen, yes, but no one can predict\nthem\u2014not even the founders, and certainly not you as an\ninvestor.  And only good people can ride the thermals if they hit\nthem anyway.\n\nDeal Flow\n\nOf course the question of how to choose startups presumes you\nhave startups to choose between.  How do you find them?  This is\nyet another problem that gets solved for you by syndicates.  If you\ntag along on a friend's investments, you don't have to find startups.\n\nThe problem is not finding startups, exactly, but finding a stream\nof reasonably high quality ones.  The traditional way to do this\nis through contacts.  If you're friends with a lot of investors and\nfounders, they'll send deals your way.  The Valley basically runs\non referrals.  And once you start to become known as reliable,\nuseful investor, people will refer lots of deals to you.  I certainly\nwill.\n\nThere's also a newer way to find startups, which is to come to\nevents like Y Combinator's Demo Day, where a batch of newly created\nstartups presents to investors all at once.   We have two Demo Days\na year, one in March and one in August.  These are basically mass\nreferrals.\n\nBut events like Demo Day only account for a fraction of matches\nbetween startups and investors.  The personal referral is still the\nmost common route.  So if you want to hear about new startups, the\nbest way to do it is to get lots of referrals.\n\nThe best way to get lots of referrals is to invest in startups.  No\nmatter how smart and nice you seem, insiders will be reluctant to\nsend you referrals until you've proven yourself by doing a couple\ninvestments.  Some smart, nice guys turn out to be flaky,\nhigh-maintenance investors. But once you prove yourself as a good\ninvestor, the deal flow, as they call it, will increase rapidly in\nboth quality and quantity.  At the extreme, for someone like Ron\nConway, it is basically identical with the deal flow of the whole\nValley.\n\nSo if you want to invest seriously, the way to get started is to\nbootstrap yourself off your existing connections, be a good investor\nin the startups you meet that way, and eventually you'll start a\nchain reaction.  Good investors are rare, even in Silicon Valley.\nThere probably aren't more than a couple hundred serious angels in the whole\nValley, and yet they're probably the single most important ingredient\nin making the Valley what it is.  Angels are the limiting reagent\nin startup formation.\n\nIf there are only a couple hundred serious angels in the Valley, \nthen by deciding to become one you could single-handedly make the pipeline\nfor startups in Silicon Valley significantly wider.  That is kind\nof mind-blowing.\n\nBeing Good\n\nHow do you be a good angel investor?  The first thing you need is\nto be decisive.  When we talk to founders about good and bad\ninvestors, one of the ways we describe the good ones is to say \"he\nwrites checks.\" That doesn't mean the investor says yes to everyone.\nFar from it.  It means he makes up his mind quickly,\nand follows through.  You may be thinking, how hard could that be?\nYou'll see when you try it.  It follows from the nature of angel\ninvesting that the decisions are hard.  You have to guess early,\nat the stage when the most promising ideas still seem counterintuitive,\nbecause if they were obviously good, VCs would already have funded\nthem.\n\nSuppose it's 1998.  You come across a startup founded by a couple\ngrad students.  They say they're going to work on Internet search.\nThere are already a bunch of big public companies doing search.\nHow can these grad students possibly compete with them?  And does\nsearch even matter anyway?  All the search engines are trying to\nget people to start calling them \"portals\" instead.  Why would you\nwant to invest in a startup run by a couple of nobodies who are\ntrying to compete with large, aggressive companies in an area they\nthemselves have declared passe?  And yet the grad students seem\npretty smart.  What do you do?\n\nThere's a hack for being decisive when you're inexperienced: ratchet\ndown the size of your investment till it's an amount you wouldn't\ncare too much about losing.  For every rich person (you probably\nshouldn't try angel investing unless you think of yourself as rich)\nthere's some amount that would be painless, though annoying, to\nlose.  Till you feel comfortable investing, don't invest more than\nthat per startup.\n\nFor example, if you have $5 million in investable assets, it would\nprobably be painless (though annoying) to lose $15,000.  That's\nless than .3% of your net worth.  So start by making 3 or 4 $15,000\ninvestments.  Nothing will teach you about angel investing like\nexperience.  Treat the first few as an educational expense.  $60,000\nis less than a lot of graduate programs.  Plus you get equity.\n\nWhat's really uncool is to be strategically indecisive: to string\nfounders along while trying to gather more information about the\nstartup's trajectory. \n[10]\n There's always a temptation to do that,\nbecause you just have so little to go on, but you have to consciously\nresist it.  In the long term it's to your advantage to be good.\n\nThe other component of being a good angel investor is simply to be\na good person.  Angel investing is not a business where you make\nmoney by screwing people over.  Startups create wealth, and\ncreating wealth is not a zero sum game.  No one has to lose for you\nto win.  In fact, if you mistreat the founders you invest in, they'll\njust get demoralized and the company will do worse.  Plus your\nreferrals will dry up.  So I recommend being good.\n\nThe most successful angel investors I know are all basically good\npeople.  Once they invest in a company, all they want to do is help\nit.  And they'll help people they haven't invested in too.  When\nthey do favors they don't seem to keep track of them.  It's too\nmuch overhead.  They just try to help everyone, and assume good\nthings will flow back to them somehow. Empirically that seems to\nwork.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nConvertible debt can be either capped at a particular valuation,\nor can be done at a discount to whatever the valuation turns out\nto be when it converts.  E.g. convertible debt at a discount of 30%\nmeans when it converts you get stock as if you'd invested at a 30%\nlower valuation.  That can be useful in cases where you can't or\ndon't want to figure out what the valuation should be.  You leave\nit to the next investor.  On the other hand, a lot of investors\nwant to know exactly what they're getting, so they will only do\nconvertible debt with a cap.\n\n[2]\nThe expensive part of creating an agreement from scratch is\nnot writing the agreement, but bickering at several hundred\ndollars an hour over the details.  That's why the series AA paperwork\naims at a middle ground.  You can just start from the compromise\nyou'd have reached after lots of back and forth.\n\nWhen you fund a startup, both your lawyers should be specialists\nin startups.  Do not use ordinary corporate lawyers for this.  Their\ninexperience makes them overbuild: they'll create huge, overcomplicated\nagreements, and spend hours arguing over irrelevant things.\n\nIn the Valley, the top startup law firms are Wilson Sonsini, Orrick,\nFenwick & West, Gunderson Dettmer, and Cooley Godward.  In Boston\nthe best are Goodwin Procter, Wilmer Hale, and Foley Hoag.\n\n[3]\nYour mileage may vary.\n\n[4]\nThese anti-dilution provisions also protect you against\ntricks like a later investor trying to steal the company by doing\nanother round that values the company at $1.  If you have a competent\nstartup lawyer handle the deal for you, you should be protected\nagainst such tricks initially.  But it could become a problem later.\nIf a big VC firm wants to invest in the startup after you, they may\ntry to make you take out your anti-dilution protections.  And if\nthey do the startup will be pressuring you to agree.  They'll tell\nyou that if you don't, you're going to kill their deal with the VC.\nI recommend you solve this problem by having a gentlemen's agreement\nwith the founders: agree with them in advance that you're not going\nto give up your anti-dilution protections.  Then it's up to them\nto tell VCs early on.\n\nThe reason you don't want to give them up is the following scenario.\nThe VCs recapitalize the company, meaning they give it additional\nfunding at a pre-money valuation of zero.  This wipes out the\nexisting shareholders, including both you and the founders.  They\nthen grant the founders lots of options, because they need them to\nstay around, but you get nothing.\n\nObviously this is not a nice thing to do.  It doesn't happen often.\nBrand-name VCs wouldn't recapitalize a company just to steal a few\npercent from an angel.  But there's a continuum here.  A less\nupstanding, lower-tier VC might be tempted to do it to steal a big\nchunk of stock.\n\nI'm not saying you should always absolutely refuse to give up your\nanti-dilution protections.  Everything is a negotiation.  If you're\npart of a powerful syndicate, you might be able to give up legal\nprotections and rely on social ones.  If you invest in a deal led\nby a big angel like Ron Conway, for example, you're pretty well\nprotected against being mistreated, because any VC would think twice\nbefore crossing him.  This kind of protection is one of the reasons\nangels like to invest in syndicates.\n\n[5]\nDon't invest so much, or at such a low valuation, that you\nend up with an excessively large share of a startup, unless you're\nsure your money will be the last they ever need.  Later stage\ninvestors won't invest in a company if the founders don't have\nenough equity left to motivate them.  I talked to a VC recently who\nsaid he'd met with a company he really liked, but he turned\nthem down because investors already owned more than half of it.\nThose investors probably thought they'd been pretty clever by getting\nsuch a large chunk of this desirable company, but in fact they were\nshooting themselves in the foot.\n\n[6]\nAt any given time I know of at least 3 or 4 YC alumni who I\nbelieve will be big successes but who are running on vapor,\nfinancially, because investors don't yet get what they're doing.\n(And no, unfortunately, I can't tell you who they are.  I can't\nrefer a startup to an investor I don't know.)\n\n[7]\nThere are some VCs who can predict instead of reacting.  Not\nsurprisingly, these are the most successful ones.\n\n[8]\nIt's somewhat sneaky of me to put it this way, because the\nmedian VC loses money.  That's one of the most surprising things\nI've learned about VC while working on Y Combinator.  Only a fraction\nof VCs even have positive returns.  The rest exist to satisfy demand\namong fund managers for venture capital as an asset class.  Learning\nthis explained a lot about some of the VCs I encountered when we\nwere working on Viaweb.\n\n[9]\nVCs also generally say they prefer great markets to great\npeople.  But what they're really saying is they want both.  They're\nso selective that they only even consider great people.  So when\nthey say they care above all about big markets, they mean that's\nhow they choose between great people.\n\n[10]\nFounders rightly dislike the sort of investor who says he's\ninterested in investing but doesn't want to lead.  There are\ncircumstances where this is an acceptable excuse, but more often\nthan not what it means is \"No, but if you turn out to be a hot deal,\nI want to be able to claim retroactively I said yes.\"\n\nIf you like a startup enough to invest in it, then invest in it.\nJust use the standard series \nAA terms and write them a check.\n\n\nThanks to Sam Altman, Paul Buchheit, Jessica Livingston,\nRobert Morris, and Fred Wilson for reading drafts of this.\n\n\nComment on this essay.\n\n", "March 2009\n\nAbout twenty years ago people noticed computers and TV were on a\ncollision course and started to speculate about what they'd produce\nwhen they converged.  We now know the answer: computers.  It's clear\nnow that even by using the word \"convergence\" we were giving TV too\nmuch credit.  This won't be convergence so much as replacement.\nPeople may still watch things they call \"TV shows,\" but they'll\nwatch them mostly on computers.\n\nWhat decided the contest for computers?  Four forces, three of which\none could have predicted, and one that would have been harder to.\n\nOne predictable cause of victory is that the Internet is an open\nplatform.  Anyone can build whatever they want on it, and the market\npicks the winners.  So innovation happens at hacker speeds instead\nof big company speeds.\n\nThe second is Moore's Law, which has worked its usual magic on\nInternet bandwidth. \n[1]\n\nThe third reason computers won is piracy. Users prefer it \nnot just because it's free, but because it's\nmore convenient.  Bittorrent and YouTube have already trained a new\ngeneration of viewers that the place to watch shows is on a computer\nscreen.\n[2]\n\nThe somewhat more surprising force was one specific type of innovation:\nsocial applications.  The average teenage kid has a pretty much\ninfinite capacity for talking to their friends.  But they can't\nphysically be with them all the time.  When I was in high school\nthe solution was the telephone.  Now it's social networks, multiplayer\ngames, and various messaging applications.  The way you reach them\nall is through a computer.\n[3]\nWhich means every teenage kid (a)\nwants a computer with an Internet connection, (b) has an incentive\nto figure out how to use it, and (c) spends countless hours in front\nof it.\n\nThis was the most powerful force of all.  This was what made everyone\nwant computers.  Nerds got computers because they liked them.  Then\ngamers got them to play games on.  But it was connecting to other\npeople that got everyone else: that's what made even grandmas and\n14 year old girls want computers.\n\n\nAfter decades of running an IV drip right into their audience,\npeople in the entertainment business had understandably come to\nthink of them as rather passive.  They thought they'd be able to\ndictate the way shows reached audiences.  But they underestimated\nthe force of their desire to connect with one another.\n\nFacebook killed TV.  That is wildly oversimplified, of course, but\nprobably as close to the truth as you can get in three words.\n\n___\n\nThe TV networks already seem, grudgingly, to see where things are\ngoing, and have responded by putting their stuff, grudgingly, online.\nBut they're still dragging their heels.  They still seem to wish\npeople would watch shows on TV instead, just as newspapers that put\ntheir stories online still seem to wish people would wait till the\nnext morning and read them printed on paper.  They should both just\nface the fact that the Internet is the primary medium.\n\nThey'd be in a better position if they'd done that earlier.  When\na new medium arises that's powerful enough to make incumbents\nnervous, then it's probably powerful enough to win, and the best\nthing they can do is jump in immediately.\n\nWhether they like it or not, big changes are coming, because the\nInternet dissolves the two cornerstones of broadcast media:\nsynchronicity and locality.  On the Internet, you don't have to\nsend everyone the same signal, and you don't have to send it to\nthem from a local source.  People will watch what they want when\nthey want it, and group themselves according to whatever shared\ninterest they feel most strongly.  Maybe their strongest shared\ninterest will be their physical location, but I'm guessing not.\nWhich means local TV is probably dead.  It was an artifact of\nlimitations imposed by old technology.  If someone were creating\nan Internet-based TV company from scratch now, they might have some\nplan for shows aimed at specific regions, but it wouldn't be a top\npriority.\n\nSynchronicity and locality are tied together.  TV network affiliates\ncare what's on at 10 because that delivers viewers for local news\nat 11.  This connection adds more brittleness than strength, however:\npeople don't watch what's on at 10 because they want to watch the\nnews afterward.\n\nTV networks will fight these trends, because they don't have\nsufficient flexibility to adapt to them.  They're hemmed in by local\naffiliates in much the same way car companies are hemmed in by\ndealers and unions.  Inevitably, the people running the networks\nwill take the easy route and try to keep the old model running for\na couple more years, just as the record labels have done.\n\nA recent article in the Wall Street Journal described how TV networks\nwere trying to add more live shows, partly as a way to make viewers\nwatch TV synchronously instead of watching recorded shows when it\nsuited them.  Instead of delivering what viewers want, they're\ntrying to force them to change their habits to suit the networks'\nobsolete business model.  That never works unless you have a monopoly\nor cartel to enforce it, and even then it only works temporarily.\n\nThe other reason networks like live shows is that they're cheaper\nto produce.  There they have the right idea, but they haven't\nfollowed it to its conclusion.   Live content can be way cheaper\nthan networks realize, and the way to take advantage of dramatic\ndecreases in cost is to \nincrease volume.  The networks are prevented\nfrom seeing this whole line of reasoning because they still think\nof themselves as being in the broadcast business\u2014as sending one\nsignal to everyone.\n[4]\n\n___\n\nNow would be a good time to start any company that competes with\nTV networks.  That's what a lot of Internet startups are, though\nthey may not have had this as an explicit goal.  People only have\nso many leisure hours a day, and TV is premised on such long sessions\n(unlike Google, which prides itself on sending users on their way\nquickly) that anything that takes up their time is competing with\nit.  But in addition to such indirect competitors, I think TV\ncompanies will increasingly face direct ones.\n\nEven in cable TV, the long tail was lopped off prematurely by the\nthreshold you had to get over to start a new channel.  It will be\nlonger on the Internet, and there will be more mobility within it.\nIn this new world, the existing players will only have the advantages\nany big company has in its market.\n\nThat will change the balance of power between the networks and the\npeople who produce shows.  The networks used to be gatekeepers.\nThey distributed your work, and sold advertising on it.  Now the\npeople who produce a show can distribute it themselves.  The main\nvalue networks supply now is ad sales.  Which will tend to put them\nin the position of service providers rather than publishers.\n\nShows will change even more.  On the Internet there's no reason to\nkeep their current format, or even the fact that they have a single\nformat.  Indeed, the more interesting sort of convergence that's\ncoming is between shows and games.  But on the question of what\nsort of entertainment gets distributed on the Internet in 20 years,\nI wouldn't dare to make any predictions, except that things will\nchange a lot.  We'll get whatever the most imaginative people can\ncook up.  That's why the Internet won.\n\n\n\n\n\n\nNotes\n\n[1]\nThanks to Trevor Blackwell for this point.  He adds: \"I\nremember the eyes of phone companies gleaming in the early 90s when\nthey talked about convergence.  They thought most programming would\nbe on demand, and they would implement it and make a lot of money.\nIt didn't work out. They assumed that their local network infrastructure\nwould be critical to do video on-demand, because you couldn't\npossibly stream it from a few data centers over the internet. At\nthe time (1992) the entire cross-country Internet bandwidth wasn't\nenough for one video stream. But wide-area bandwidth increased more\nthan they expected and they were beaten by iTunes and Hulu.\"\n\n[2]\nCopyright owners tend to focus on the aspect they see of\npiracy, which is the lost revenue.  They therefore think what drives\nusers to do it is the desire to get something for free.  But iTunes\nshows that people will pay for stuff online, if you make it easy.\nA significant component of piracy is simply that it offers a better\nuser experience.\n\n[3]\nOr a phone that is actually a computer.  I'm not making any\npredictions about the size of the device that will replace TV, just\nthat it will have a browser and get data via the Internet.\n\n[4]\nEmmett Shear writes: \"I'd argue the long tail for sports may\nbe even larger than the long tail for other kinds of content. Anyone\ncan broadcast a high school football game that will be interesting\nto 10,000 people or so, even if the quality of production is not\nso good.\"\n\n\nThanks to Sam Altman, Trevor Blackwell, Nancy Cook, Michael Seibel,\nEmmett Shear, and Fred Wilson for reading drafts of this.\n\n", "February 2009\n\nA lot of cities look at Silicon Valley and ask \"How could we make\nsomething like that happen here?\"  The \norganic way to do it is to\nestablish a first-rate university in a place where rich people want\nto live. That's how Silicon Valley happened.  But could you shortcut\nthe process by funding startups?\n\nPossibly. Let's consider what it would take.\n\nThe first thing to understand is that encouraging startups is a\ndifferent problem from encouraging startups in a particular city.\nThe latter is much more expensive.\n\nPeople sometimes think they could improve the startup scene in their\ntown by starting something like Y \nCombinator there, but in fact it\nwill have near zero effect.  I know because Y Combinator itself had\nnear zero effect on Boston when we were based there half the year.\nThe people we funded came from all over the country (indeed, the\nworld) and afterward they went wherever they could get more\nfunding\u2014which generally meant Silicon Valley.\n\nThe seed funding business is not a regional business, because at\nthat stage startups are mobile. They're just a couple founders with\nlaptops. \n[1]\n\nIf you want to encourage startups in a particular city, you have\nto fund startups that won't leave.  There are two ways to do that:\nhave rules preventing them from leaving, or fund them at the point\nin their life when they naturally take root.  The first approach\nis a mistake, because it becomes a filter for selecting bad startups.\nIf your terms force startups to do things they don't want to, only\nthe desperate ones will take your money.\n\nGood startups will move to another city as a condition of funding.\nWhat they won't do is agree not to move the next time they need\nfunding.  So the only way to get them to stay is to give them enough\nthat they never need to leave.\n\n___\n\nHow much would that take?  If you want to keep startups from leaving\nyour town, you have to give them enough that they're not tempted\nby an offer from Silicon Valley VCs that requires them to move.  A\nstartup would be able to refuse such an offer if they had grown to\nthe point where they were (a) rooted in your town and/or (b) so\nsuccessful that VCs would fund them even if they didn't move.\n\nHow much would it cost to grow a startup to that point? A minimum\nof several hundred thousand dollars.  Wufoo \nseem to have rooted\nthemselves in Tampa on $118k, but they're an extreme case.  On\naverage it would take at least half a million.\n\nSo if it seems too good to be true to think you could grow a local\nsilicon valley by giving startups $15-20k each like Y Combinator,\nthat's because it is.  To make them stick around you'd have to give\nthem at least 20 times that much.\n\nHowever, even that is an interesting prospect.  Suppose to be on\nthe safe side it would cost a million dollars per startup. If you\ncould get startups to stick to your town for a million apiece, then\nfor a billion dollars you could bring in a thousand startups. That probably wouldn't push you past Silicon Valley itself, \nbut it might get you second place.\n\nFor the price of a football stadium, any town that was decent to\nlive in could make itself one of the biggest startup hubs in the\nworld.\n\nWhat's more, it wouldn't take very long.   You could probably do\nit in five years.  During the term of one mayor. And it would get\neasier over time, because the more startups you had in town, the\nless it would take to get new ones to move there. By the time you\nhad a thousand startups in town, the VCs wouldn't be trying so hard\nto get them to move to Silicon Valley; instead they'd be opening\nlocal offices.  Then you'd really be in good shape.  You'd have\nstarted a self-sustaining chain reaction like the one that drives\nthe Valley.\n\n___\n\nBut now comes the hard part.  You have to pick the startups.  How\ndo you do that?  Picking startups is a rare and valuable skill, and\nthe handful of people who have it are not readily hireable.  And\nthis skill is so hard to measure that if a government did try to\nhire people with it, they'd almost certainly get the wrong ones.\n\nFor example, a city could give money to a VC fund to establish a\nlocal branch, and let them make the choices.  But only a bad VC\nfund would take that deal.  They wouldn't seem bad to the city\nofficials.  They'd seem very impressive.  But they'd be bad at\npicking startups.  That's the characteristic failure mode of VCs.\nAll VCs look impressive to limited partners.  The difference between\nthe good ones and the bad ones only becomes visible in the other\nhalf of their jobs: choosing and advising startups.\n[2]\n\nWhat you really want is a pool of local angel investors\u2014people\ninvesting money they made from their own startups.  But unfortunately\nyou run into a chicken and egg problem here.  If your city isn't\nalready a startup hub, there won't be people there who got rich\nfrom startups. And there is no way I can think of that a city could\nattract angels from outside. By definition they're rich.  There's\nno incentive that would make them move.\n[3]\n\nHowever, a city could select startups by piggybacking on the expertise\nof investors who weren't local.  It would be pretty straightforward\nto make a list of the most eminent Silicon Valley angels and from\nthat to generate a list of all the startups they'd invested in.  If\na city offered these companies a million dollars each to move, a\nlot of the earlier stage ones would probably take it.\n\nPreposterous as this plan sounds, it's probably the most efficient\nway a city could select good startups.\n\nIt would hurt the startups somewhat to be separated from their\noriginal investors. On the other hand, the extra million dollars\nwould give them a lot more runway.\n\n___\n\nWould the transplanted startups survive?  Quite possibly. The only\nway to find out would be to try it.  It would be a pretty cheap\nexperiment, as civil expenditures go.  Pick 30 startups that eminent\nangels have recently invested in, give them each a million dollars\nif they'll relocate to your city, and see what happens after a year.\nIf they seem to be thriving, you can try importing startups on a\nlarger scale.\n\nDon't be too legalistic about the conditions under which they're\nallowed to leave.  Just have a gentlemen's agreement.\n\nDon't try to do it on the cheap and pick only 10 for the initial\nexperiment.  If you do this on too small a scale you'll just guarantee\nfailure. Startups need to be around other startups.  30 would be\nenough to feel like a community.\n\nDon't try to make them all work in some renovated warehouse you've\nmade into an \"incubator.\"  Real startups prefer to work in their\nown spaces.\n\nIn fact, don't impose any restrictions on the startups at all.\nStartup founders are mostly hackers, \nand hackers are much more\nconstrained by gentlemen's agreements than regulations.  If they\nshake your hand on a promise, they'll keep it.  But show them a\nlock and their first thought is how to pick it.\n\nInterestingly, the 30-startup experiment could be done by any\nsufficiently rich private citizen.  And what pressure it would \nput on the city if it worked.\n[4]\n\n___\n\nShould the city take stock in return for the money?\nIn principle they're entitled to, but how would they choose valuations\nfor the startups?  You couldn't just give them all the same valuation:\nthat would be too low for some (who'd turn you down) and too high\nfor others (because it might make their next round a \"down round\").\nAnd since we're assuming we're doing this without being able to\npick startups, we also have to assume we can't value them, since\nthat's practically the same thing.\n\nAnother reason not to take stock in the startups is that startups\nare often involved in disreputable things.  So are established\ncompanies, but they don't get blamed for it.  If someone gets\nmurdered by someone they met on Facebook, the press will treat the\nstory as if it were about Facebook.  If someone gets murdered by\nsomeone they met at a supermarket, the press will just treat it as\na story about a murder.  So understand that if you invest in startups,\nthey might build things that get used for pornography, or file-sharing,\nor the expression of unfashionable opinions.  You should probably\nsponsor this project jointly with your political opponents, so they\ncan't use whatever the startups do as a club to beat you with.\n\nIt would be too much of a political liability just to give\nthe startups the money, though.  So the best plan would be to \nmake it convertible debt, but which didn't convert except in\na really big round, like $20 million.\n\n___\n\nHow well this scheme worked would depend on the \ncity.  There are\nsome towns, like Portland, that would be easy to turn into startup\nhubs, and others, like Detroit, where it would really be an uphill\nbattle.  So be honest with yourself about the sort of town you have\nbefore you try this.\n\nIt will be easier in proportion to how much your town resembles San\nFrancisco.  Do you have good weather?  Do people live downtown, or\nhave they abandoned the center for the suburbs?  Would the city be\ndescribed as \"hip\" and \"tolerant,\" or as reflecting \"traditional\nvalues?\"  Are there good universities nearby?  Are there walkable\nneighborhoods?  Would nerds feel at home?  If you answered yes to\nall these questions, you might be able not only to pull off this\nscheme, but to do it for less than a million per startup.\n\nI realize the chance of any city having\nthe political will to carry out this plan is microscopically\nsmall.  I just wanted to explore what it would take if one did.\nHow hard would it be to jumpstart a silicon valley?  It's\nfascinating to think this prize might be within\nthe reach of so many cities.  So even though they'll all still\nspend the money on the stadium, at least now someone can ask them:\nwhy did you choose to do that instead of becoming a serious\nrival to Silicon Valley?\n\n\n\n\n\n\nNotes\n\n[1]\nWhat people who start these supposedly local seed firms always\nfind is that (a) their applicants come from all over, not just the\nlocal area, and (b) the local startups also apply to the other seed\nfirms.  So what ends up happening is that the applicant pool gets\npartitioned by quality rather than geography.\n\n[2]\nInterestingly, the bad VCs fail by choosing startups run by\npeople like them\u2014people who are good presenters, but have no\nreal substance.   It's a case of the fake leading the fake.  And\nsince everyone involved is so plausible, the LPs who invest in these\nfunds have no idea what's happening till they measure their returns.\n\n[3]\nNot even being a tax haven, I suspect.  That makes some rich\npeople move, but not the type who would make good angel investors\nin startups.\n\n[4]\nThanks to Michael Keenan for pointing this out.\n\nThanks to Trevor Blackwell, Jessica Livingston, Robert\nMorris, and Fred Wilson for reading drafts of this.\n\n", "February 2009\n\nHacker News was two years\nold last week.  Initially it was supposed to be a side project\u2014an\napplication to sharpen Arc on, and a place for current and future\nY Combinator founders to exchange news.  It's grown bigger and taken\nup more time than I expected, but I don't regret that because I've\nlearned so much from working on it.\n\nGrowth\n\nWhen we launched in February 2007, weekday traffic was around 1600\ndaily uniques.  It's since grown to around 22,000.  This growth\nrate is a bit higher than I'd like.  I'd like the site to grow,\nsince a site that isn't growing at least slowly is probably dead.\nBut I wouldn't want it to grow as large as Digg or Reddit\u2014mainly\nbecause that would dilute the character of the site, but also because\nI don't want to spend all my time dealing with scaling.\n\nI already have problems enough with that.  Remember, the original\nmotivation for HN was to test a new programming language, and\nmoreover one that's focused on experimenting with language design,\nnot performance.  Every time the site gets slow, I fortify myself\nby recalling McIlroy and Bentley's famous quote\n\n  The key to performance is elegance, not battalions of special\n  cases.\n\nand look for the bottleneck I can remove with least code.  So far\nI've been able to keep up, in the sense that performance has remained\nconsistently mediocre despite 14x growth. I don't know what I'll\ndo next, but I'll probably think of something.\n\nThis is my attitude to the site generally.  Hacker News is an\nexperiment, and an experiment in a very young field.  Sites of this\ntype are only a few years old.  Internet conversation generally is\nonly a few decades old.  So we've probably only discovered a fraction\nof what we eventually will.\n\nThat's why I'm so optimistic about HN.  When a technology is this\nyoung, the existing solutions are usually terrible; which means it\nmust be possible to do much better; which means many problems that\nseem insoluble aren't. Including, I hope, the problem that has\nafflicted so many previous communities: being ruined by growth.\n\nDilution\n\nUsers have worried about that since the site was a few months old.\nSo far these alarms have been false, but they may not always be.\nDilution is a hard problem. But probably soluble; it doesn't mean\nmuch that open conversations have \"always\" been destroyed by growth\nwhen \"always\" equals 20 instances.\n\nBut it's important to remember we're trying to solve a new problem,\nbecause that means we're going to have to try new things, most of\nwhich probably won't work.  A couple weeks ago I tried displaying\nthe names of users with the highest average comment scores in orange.\n[1]\nThat was a mistake.  Suddenly a culture that had been more\nor less united was divided into haves and have-nots.  I didn't\nrealize how united the culture had been till I saw it divided.  It\nwas painful to watch.\n[2]\n\nSo orange usernames won't be back.  (Sorry about that.)  But there\nwill be other equally broken-seeming ideas in the future, and the\nones that turn out to work will probably seem just as broken as\nthose that don't.\n\nProbably the most important thing I've learned about dilution is\nthat it's measured more in behavior than users. It's bad behavior\nyou want to keep out more than bad people. User behavior turns out\nto be surprisingly malleable.  If people are \nexpected to behave\nwell, they tend to; and vice versa.\n\nThough of course forbidding bad behavior does tend to keep away bad\npeople, because they feel uncomfortably constrained in a place where\nthey have to behave well.  But this way of keeping them out is\ngentler and probably also more effective than overt barriers.\n\nIt's pretty clear now that the broken windows theory applies to\ncommunity sites as well.  The theory is that minor forms of bad\nbehavior encourage worse ones: that a neighborhood with lots of\ngraffiti and broken windows becomes one where robberies occur.  I\nwas living in New York when Giuliani introduced the reforms that\nmade the broken windows theory famous, and the transformation was\nmiraculous. And I was a Reddit user when the opposite happened\nthere, and the transformation was equally dramatic.\n\nI'm not criticizing Steve and Alexis.  What happened to Reddit\ndidn't happen out of neglect.  From the start they had a policy of\ncensoring nothing except spam.  Plus Reddit had different goals\nfrom Hacker News.  Reddit was a startup, not a side project; its\ngoal was to grow as fast as possible.  Combine rapid growth and\nzero censorship, and the result is a free for all.  But I don't\nthink they'd do much differently if they were doing it again.\nMeasured by traffic, Reddit is much more successful than Hacker\nNews.\n\nBut what happened to Reddit won't inevitably happen to HN. There\nare several local maxima.  There can be places that are free for\nalls and places that are more thoughtful, just as there are in the\nreal world; and people will behave differently depending on which\nthey're in, just as they do in the real world.\n\nI've observed this in the wild.  I've seen people cross-posting on\nReddit and Hacker News who actually took the trouble to write two\nversions, a flame for Reddit and a more subdued version for HN.\n\nSubmissions\n\nThere are two major types of problems a site like Hacker News needs\nto avoid: bad stories and bad comments.  So far the danger of bad\nstories seems smaller.  The stories on the frontpage now are still\nroughly the ones that would have been there when HN started.\n\nI once thought I'd have to weight votes to keep crap off the\nfrontpage, but I haven't had to yet.  I wouldn't have predicted the\nfrontpage would hold up so well, and I'm not sure why it has.\nPerhaps only the more thoughtful users care enough to submit and\nupvote links, so the marginal cost of one random new user approaches\nzero.  Or perhaps the frontpage protects itself, by advertising what type of submission is expected.\n\nThe most dangerous thing for the frontpage is stuff that's too easy\nto upvote.  If someone proves a new theorem, it takes some work by\nthe reader to decide whether or not to upvote it.  An amusing cartoon\ntakes less.  A rant with a rallying cry as the title takes zero,\nbecause people vote it up without even reading it.\n\nHence what I call the Fluff Principle: on a user-voted news site,\nthe links that are easiest to judge will take over unless you take\nspecific measures to prevent it.\n\nHacker News has two kinds of protections against fluff.  The most\ncommon types of fluff links are banned as off-topic.  Pictures of\nkittens, political diatribes, and so on are explicitly banned.  This\nkeeps out most fluff, but not all of it.  Some links are both fluff,\nin the sense of being very short, and also on topic.\n\nThere's no single solution to that.  If a link is just an empty\nrant, editors will sometimes kill it even if it's on topic in the\nsense of being about hacking, because it's not on topic by the real\nstandard, which is to engage one's intellectual curiosity.  If the\nposts on a site are characteristically of this type I sometimes ban\nit, which means new stuff at that url is auto-killed.  If a post\nhas a linkbait title, editors sometimes rephrase it to be more\nmatter-of-fact.  This is especially necessary with links whose\ntitles are rallying cries, because otherwise they become implicit\n\"vote up if you believe such-and-such\" posts, which are the most\nextreme form of fluff.\n\nThe techniques for dealing with links have to evolve, because the\nlinks do. The existence of aggregators has already affected what\nthey aggregate. Writers now deliberately write things to draw traffic\nfrom aggregators\u2014sometimes even specific ones.  (No, the irony\nof this statement is not lost on me.)  Then there are the more\nsinister mutations, like linkjacking\u2014posting a paraphrase of\nsomeone else's article and submitting that instead of the original.\nThese can get a lot of upvotes, because a lot of what's good in an\narticle often survives; indeed, the closer the paraphrase is to\nplagiarism, the more survives.\n[3]\n\nI think it's important that a site that kills submissions provide\na way for users to see what got killed if they want to.  That keeps\neditors honest, and just as importantly, makes users confident\nthey'd know if the editors stopped being honest. HN users can do\nthis by flipping a switch called showdead in their profile.\n[4]\n\nComments\n\nBad comments seem to be a harder problem than bad submissions.\nWhile the quality of links on the frontpage of HN hasn't changed\nmuch, the quality of the median comment may have decreased somewhat.\n\nThere are two main kinds of badness in comments: meanness and\nstupidity.  There is a lot of overlap between the two\u2014mean\ncomments are disproportionately likely also to be dumb\u2014but\nthe strategies for dealing with them are different.  Meanness is\neasier to control.  You can have rules saying one shouldn't be mean,\nand if you enforce them it seems possible to keep a lid on meanness.\n\nKeeping a lid on stupidity is harder, perhaps because stupidity is\nnot so easily distinguishable.  Mean people are more likely to know\nthey're being mean than stupid people are to know they're being\nstupid.\n\nThe most dangerous form of stupid comment is not the long but\nmistaken argument, but the dumb joke.  Long but mistaken arguments\nare actually quite rare.  There is a strong correlation between\ncomment quality and length; if you wanted to compare the quality\nof comments on community sites, average length would be a good\npredictor.  Probably the cause is human nature rather than anything\nspecific to comment threads. Probably it's simply that stupidity\nmore often takes the form of having few ideas than wrong ones.\n\nWhatever the cause, stupid comments tend to be short.  And since\nit's hard to write a short comment that's distinguished for the\namount of information it conveys, people try to distinguish them\ninstead by being funny.  The most tempting format for stupid comments\nis the supposedly witty put-down, probably because put-downs are\nthe easiest form of humor. \n[5]\nSo one advantage of forbidding\nmeanness is that it also cuts down on these.\n\nBad comments are like kudzu: they take over rapidly. Comments have\nmuch more effect on new comments than submissions have on new\nsubmissions.  If someone submits a lame article, the other submissions\ndon't all become lame.  But if someone posts a stupid comment on a\nthread, that sets the tone for the region around it.  People reply\nto dumb jokes with dumb jokes.\n\nMaybe the solution is to add a delay before people can respond to\na comment, and make the length of the delay inversely proportional\nto some prediction of its quality.  Then dumb threads would grow\nslower.\n[6]\n\n\nPeople\n\nI notice most of the techniques I've described are conservative:\nthey're aimed at preserving the character of the site rather than\nenhancing it.  I don't think that's a bias of mine.  It's due to\nthe shape of the problem.  Hacker News had the good fortune to start\nout good, so in this case it's literally a matter of preservation.\nBut I think this principle would also apply to sites with different\norigins.\n\nThe good things in a community site come from people more than\ntechnology; it's mainly in the prevention of bad things that\ntechnology comes into play. Technology certainly can enhance\ndiscussion.  Nested comments do, for example.  But I'd rather use\na site with primitive features and smart, nice users than a more\nadvanced one whose users were idiots or trolls.\n\nSo the most important thing a community site can do is attract the\nkind of people it wants.  A site trying to be as big as possible\nwants to attract everyone.  But a site aiming at a particular subset\nof users has to attract just those\u2014and just as importantly,\nrepel everyone else.  I've made a conscious effort to do this on\nHN.  The graphic design is as plain as possible, and the site rules\ndiscourage dramatic link titles.  The goal is that the only thing\nto interest someone arriving at HN for the first time should be the\nideas expressed there.\n\nThe downside of tuning a site to attract certain people is that,\nto those people, it can be too attractive.  I'm all too aware how\naddictive Hacker News can be.  For me, as for many users, it's a\nkind of virtual town square.  When I want to take a break from\nworking, I walk into the square, just as I might into Harvard Square\nor University Ave in the physical world.\n[7]\nBut an online square is\nmore dangerous than a physical one.  If I spent half the day loitering\non University Ave, I'd notice.  I have to walk a mile to get there,\nand sitting in a cafe feels different from working. But visiting\nan online forum takes just a click, and feels superficially very\nmuch like working.  You may be wasting your time, but you're not\nidle.  Someone is wrong on the Internet, and you're fixing the\nproblem.\n\nHacker News is definitely useful.  I've learned a lot from things\nI've read on HN.  I've written several essays that began as comments\nthere.  So I wouldn't want the site to go away.  But I would like\nto be sure it's not a net drag on productivity.  What a disaster\nthat would be, to attract thousands of smart people to a site that\ncaused them to waste lots of time.  I wish I could be 100% sure\nthat's not a description of HN.\n\nI feel like the addictiveness of games and social applications is\nstill a mostly unsolved problem.  The situation now is like it was\nwith crack in the 1980s: we've invented terribly addictive new\nthings, and we haven't yet evolved ways to protect ourselves from\nthem.  We will eventually, and that's one of the problems I hope\nto focus on next.\n\n\n\n\n\n\nNotes\n\n[1]\nI tried ranking users by both average and median comment\nscore, and average (with the high score thrown out) seemed the more\naccurate predictor of high quality.  Median may be the more accurate\npredictor of low quality though.\n\n[2]\nAnother thing I learned from this experiment is that if you're\ngoing to distinguish between people, you better be sure you do it\nright.  This is one problem where rapid prototyping doesn't work.\n\nIndeed, that's the intellectually honest argument for not discriminating\nbetween various types of people.  The reason not to do it is not\nthat everyone's the same, but that it's bad to do wrong and hard\nto do right.\n\n[3]\nWhen I catch egregiously linkjacked posts I replace the url\nwith that of whatever they copied.  Sites that habitually linkjack\nget banned.\n\n[4]\nDigg is notorious for its lack of transparency.  The root of\nthe problem is not that the guys running Digg are especially sneaky,\nbut that they use the wrong algorithm for generating their frontpage.\nInstead of bubbling up from the bottom as they get more votes, as\non Reddit, stories start at the top and get pushed down by new\narrivals.\n\nThe reason for the difference is that Digg is derived from Slashdot,\nwhile Reddit is derived from Delicious/popular.  Digg is Slashdot\nwith voting instead of editors, and Reddit is Delicious/popular\nwith voting instead of bookmarking.  (You can still see fossils of\ntheir origins in their graphic design.)\n\nDigg's algorithm is very vulnerable to gaming, because any story\nthat makes it onto the frontpage is the new top story.  Which in\nturn forces Digg to respond with extreme countermeasures.  A lot\nof startups have some kind of secret about the subterfuges they had\nto resort to in the early days, and I suspect Digg's is the extent\nto which the top stories were de facto chosen by human editors.\n\n[5]\nThe dialog on Beavis and Butthead was composed largely of\nthese, and when I read comments on really bad sites I can hear them\nin their voices.\n\n[6]\nI suspect most of the techniques for discouraging stupid\ncomments have yet to be discovered.  Xkcd implemented a particularly\nclever one in its IRC channel: don't allow the same thing twice.\nOnce someone has said \"fail,\" no one can ever say it again.  This\nwould penalize short comments especially, because they have less\nroom to avoid collisions in.\n\nAnother promising idea is the stupid \nfilter, which is just like a\nprobabilistic spam filter, but trained on corpora of stupid and\nnon-stupid comments instead.\n\nYou may not have to kill bad comments to solve the problem.  Comments\nat the bottom of a long thread are rarely seen, so it may be enough\nto incorporate a prediction of quality in the comment sorting\nalgorithm.\n\n[7]\nWhat makes most suburbs so demoralizing is that there's no\ncenter to walk to.\n\n\nThanks to Justin Kan, Jessica Livingston, Robert Morris,\nAlexis Ohanian, Emmet Shear, and Fred Wilson for reading drafts of\nthis.\n\n\nComment on this essay.\n\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\n\nWatch how this essay was\nwritten.\n\n\n\n\n\nFebruary 2009\n", "February 2009\n\nI finally realized today why politics and religion yield such\nuniquely useless discussions.\n\nAs a rule, any mention of religion on an online forum degenerates\ninto a religious argument.  Why?  Why does this happen with religion\nand not with Javascript or baking or other topics people talk about\non forums?\n\nWhat's different about religion is that people don't feel they need\nto have any particular expertise to have opinions about\nit.  All they need is strongly held beliefs, and anyone can have\nthose.  No thread about Javascript will grow as fast as one about\nreligion, because people feel they have to be over some threshold\nof expertise to post comments about that.  But on religion everyone's\nan expert.\n\nThen it struck me: this is the problem with politics too.  Politics,\nlike religion, is a topic where there's no threshold of expertise\nfor expressing an opinion.  All you need is strong convictions.\n\nDo religion and politics have something in common that explains\nthis similarity?  One possible explanation is that they deal with\nquestions that have no definite answers, so there's no back pressure\non people's opinions.  Since no one can be proven wrong, every\nopinion is equally valid, and sensing this, everyone lets fly with\ntheirs.\n\nBut this isn't true.  There are certainly some political questions\nthat have definite answers, like how much a new government policy\nwill cost.  But the more precise political questions suffer the\nsame fate as the vaguer ones.\n\nI think what religion and politics have in common is that they\nbecome part of people's identity, and people can never have a\nfruitful argument about something that's part of their identity.\nBy definition they're partisan.\n\nWhich topics engage people's identity depends on the people, not\nthe topic.  For example, a discussion about a battle that included\ncitizens of one or more of the countries involved would probably\ndegenerate into a political argument.  But a discussion today about\na battle that took place in the Bronze Age probably wouldn't.  No\none would know what side to be on.  So it's not politics that's the\nsource of the trouble, but identity.  When people say a discussion\nhas degenerated into a religious war, what they really mean is that\nit has started to be driven mostly by people's identities.\n[1]\n\nBecause the point at which this happens depends on the people rather\nthan the topic, it's a mistake to conclude that because a question\ntends to provoke religious wars, it must have no answer. For example,\nthe question of the relative merits of programming languages often\ndegenerates into a religious war, because so many programmers\nidentify as X programmers or Y programmers.  This sometimes leads\npeople to conclude the question must be unanswerable\u2014that all\nlanguages are equally good.  Obviously that's false: anything else\npeople make can be well or badly designed; why should this be\nuniquely impossible for programming languages?  And indeed, you can\nhave a fruitful discussion about the relative merits of programming\nlanguages, so long as you exclude people who respond from identity.\n\nMore generally, you can have a fruitful discussion about a topic\nonly if it doesn't engage the identities of any of the\nparticipants.  What makes politics and religion such minefields is\nthat they engage so many people's identities.  But you could in\nprinciple have a useful conversation about them with some people.\nAnd there are other topics that might seem harmless, like the\nrelative merits of Ford and Chevy pickup trucks, that you couldn't\nsafely talk about with others.\n\nThe most intriguing thing about this theory, if it's right, is that\nit explains not merely which kinds of discussions to avoid, but how\nto have better ideas.  If people can't think clearly about anything\nthat has become part of their identity, then all other things being\nequal, the best plan is to let as few things into your identity as\npossible. \n[2]\n\nMost people reading this will already be fairly tolerant.  But there\nis a step beyond thinking of yourself as x but tolerating y: not\neven to consider yourself an x.  The more labels you have for\nyourself, the dumber they make you.\n\n\n\n\n\n\n\nNotes\n\n[1]\nWhen that happens, it tends to happen fast, like a core going\ncritical.  The threshold for participating goes down to zero, which\nbrings in more people.  And they tend to say incendiary things,\nwhich draw more and angrier counterarguments.\n\n[2]\nThere may be some things it's a net win to include in your\nidentity.  For example, being a scientist.  But arguably that is\nmore of a placeholder than an actual label\u2014like putting NMI on a\nform that asks for your middle initial\u2014because it doesn't commit\nyou to believing anything in particular.   A scientist isn't committed\nto believing in natural selection in the same way a biblical\nliteralist is committed to rejecting it.  All he's committed to is\nfollowing the evidence wherever it leads.\n\nConsidering yourself a scientist is equivalent to putting a sign\nin a cupboard saying \"this cupboard must be kept empty.\"  Yes,\nstrictly speaking, you're putting something in the cupboard, but\nnot in the ordinary sense.\n\nThanks to Sam Altman, Trevor Blackwell, Paul Buchheit, and Robert\nMorris for reading drafts of this.\n\n", "December 2008\n\nA few months ago I read a New York Times article on South\nKorean cram schools that said \n  Admission to the right university can make or break an ambitious\n  young South Korean.\n A parent added: \n  \"In our country, college entrance exams determine 70 to 80 percent\n  of a person's future.\"\n It was striking how old fashioned this sounded.  And\nyet when I was in high school it wouldn't have seemed too far off\nas a description of the US.  Which means things must have been\nchanging here.\n\nThe course of people's lives in the US now seems to be determined\nless by credentials and more by performance than it was 25 years\nago.  Where you go to college still matters, but not like it used\nto.\n\nWhat happened?\n\n_____\n\nJudging people by their academic credentials was in its time an\nadvance.  The practice seems to have begun in China, where starting\nin 587 candidates for the imperial civil service had to take an\nexam on classical literature.  [1] It was also a test of wealth,\nbecause the knowledge it tested was so specialized that passing\nrequired years of expensive training.  But though wealth was a\nnecessary condition for passing, it was not a sufficient one.  By\nthe standards of the rest of the world in 587, the Chinese system\nwas very enlightened.  Europeans didn't introduce formal civil\nservice exams till the nineteenth century, and even then they seem\nto have been influenced by the Chinese example.\n\nBefore credentials, government positions were obtained mainly by\nfamily influence, if not outright bribery.   It was a great step\nforward to judge people by their performance on a test.  But by no\nmeans a perfect solution.  When you judge people that way, you tend\nto get cram schools\u2014which they did in Ming China and nineteenth\ncentury England just as much as in present day South Korea.\n\nWhat cram schools are, in effect, is leaks in a seal.  The use of\ncredentials\nwas an attempt to seal off the direct transmission of power between\ngenerations, and cram schools represent that power finding holes\nin the seal.  Cram schools turn wealth in one generation into\ncredentials in the next.\n\nIt's hard to beat this phenomenon, because the schools adjust to suit\nwhatever the tests measure.  When the tests are narrow and\npredictable, you get cram schools on the classic model, like those\nthat prepared candidates for Sandhurst (the British West Point) or\nthe classes American students take now to improve their SAT scores.\nBut as the tests get broader, the schools do too.  Preparing a\ncandidate for the Chinese imperial civil service exams took years,\nas prep school does today.  But the raison d'etre of all these\ninstitutions has been the same: to beat the system.  [2]\n\n_____\n\nHistory suggests that, all other things being equal, a society\nprospers in proportion to its ability to prevent parents from\ninfluencing their children's success directly.  It's a fine thing\nfor parents to help their children indirectly\u2014for example,\nby helping them to become smarter or more disciplined, which then\nmakes them more successful.  The problem comes when parents use\ndirect methods: when they are able to use their own wealth or power\nas a substitute for their children's qualities.\n\nParents will tend to do this when they can.  Parents will die for\ntheir kids, so it's not surprising to find they'll also push their\nscruples to the limits for them.  Especially if other parents are\ndoing it.\n\nSealing off this force has a double advantage.  Not only does a\nsociety get \"the best man for the job,\" but\nparents' ambitions are diverted from direct methods to indirect\nones\u2014to actually trying to raise their kids well.\n\nBut we should expect it to be very hard to contain parents' efforts\nto obtain an unfair advantage for their kids.  We're dealing with\none of the most powerful forces in human nature.  We shouldn't expect\nnaive solutions to work, any more than we'd expect naive solutions\nfor keeping heroin out of a prison to work.\n\n_____\n\nThe obvious way to solve the problem is to make credentials better.\nIf the tests a society uses are currently hackable, we can study\nthe way people beat them and try to plug the holes.  You can use\nthe cram schools to show you where most of the holes are.  They\nalso tell you when you're succeeding in fixing them: when cram\nschools become less popular.\n\nA more general solution\nwould be to push for increased transparency, especially at critical\nsocial bottlenecks like college admissions.  In the US this process\nstill shows many outward signs of corruption.  For example, legacy\nadmissions.  The official story is that legacy status doesn't carry\nmuch weight, because all it does is break ties: applicants are\nbucketed by ability, and legacy status is only used to decide between\nthe applicants in the bucket that straddles the cutoff.  But what\nthis means is that a university can make legacy status have as much\nor as little weight as they want, by adjusting the size of the\nbucket that straddles the cutoff.\n\nBy gradually chipping away at the abuse of credentials, you could\nprobably make them more airtight.  But what a long fight it would\nbe.  Especially when the institutions administering the tests don't\nreally want them to be airtight.\n\n_____\n\nFortunately there's a better way to prevent the direct transmission\nof power between generations.  Instead of trying to make credentials\nharder to hack, we can also make them matter less.\n\nLet's think about what credentials are for.  What they are,\nfunctionally, is a way of predicting performance.  If you could\nmeasure actual performance, you wouldn't need them.\n\nSo why did they even evolve?  Why haven't we just been measuring\nactual performance?  Think about where credentialism first appeared:\nin selecting candidates for large organizations.  Individual\nperformance is hard to measure in large organizations, and the\nharder performance is to measure, the more important it is\nto predict it.  If an organization could immediately and cheaply\nmeasure the performance of recruits, they wouldn't need to examine\ntheir credentials.  They could take everyone and keep just the good\nones.\n\nLarge organizations can't do this.  But a bunch of small organizations\nin a market can come close.  A market takes every organization and\nkeeps just the good ones.  As organizations get smaller, this\napproaches taking every person and keeping just the good ones.  So\nall other things being equal, a society consisting of more, smaller\norganizations will care less about credentials.\n\n_____\n\nThat's what's been happening in the US.  That's why those quotes\nfrom Korea sound so old fashioned.  They're talking about an economy\nlike America's a few decades ago, dominated by a few big companies.\nThe route for the ambitious in that sort of environment is to join\none and climb to the top.  Credentials matter a lot then.  In the \nculture of a large organization, an elite pedigree becomes a self-fulfilling\nprophecy.\n\nThis doesn't work in small companies.  Even if your colleagues were\nimpressed by your credentials, they'd soon be parted from you if\nyour performance didn't match, because the company would go out of\nbusiness and the people would be dispersed.\n\nIn a world of small companies, performance is all anyone cares\nabout.  People hiring for a startup don't care whether you've even\ngraduated from college, let alone which one.  All they care about\nis what you can do.  Which is in fact all that should matter, even\nin a large organization.  The reason credentials have such prestige\nis that for so long the large organizations\nin a society tended to be the most powerful.  But in the US at least\nthey don't have the monopoly on power they once did, precisely\nbecause they can't measure (and thus reward) individual performance.\nWhy spend twenty years climbing the corporate ladder when you can\nget rewarded directly by the market?\n\nI realize I see a more exaggerated version of the change than most\nother people.  As a partner at an early stage venture funding firm,\nI'm like a jumpmaster shoving people out of the old world of\ncredentials and into the new one of performance.  I'm an agent of\nthe change I'm seeing.  But I don't think I'm imagining it.  It was\nnot so easy 25 years ago for an ambitious person to choose to be\njudged directly by the market.  You had to go through bosses, and\nthey were influenced by where you'd been to college.\n\n_____\n\nWhat made it possible for small organizations to succeed in America?\nI'm still not entirely sure.  Startups are certainly a large part\nof it.  Small organizations can develop new ideas faster than large\nones, and new ideas are increasingly valuable.\n\nBut I don't think startups account for all the shift from credentials\nto measurement.  My friend Julian Weber told me that when he went\nto work for a New York law firm in the 1950s they paid associates\nfar less than firms do today.  Law firms then made no pretense of\npaying people according to the value of the work they'd done.  Pay\nwas based on seniority.  The younger employees were paying their\ndues.  They'd be rewarded later.\n\nThe same principle prevailed at industrial companies.  When my\nfather was working at Westinghouse in the 1970s, he had people\nworking for him who made more than he did, because they'd been there\nlonger.\n\nNow companies increasingly have to pay employees market price for\nthe work they do.   One reason is that employees no longer trust\ncompanies to deliver \ndeferred rewards: why work to accumulate\ndeferred rewards at a company that might go bankrupt, or be taken\nover and have all its implicit obligations wiped out?  The other\nis that some companies broke ranks and started to pay young employees\nlarge amounts.  This was particularly true in consulting, law, and\nfinance, where it led to the phenomenon of yuppies.  The word is\nrarely used today because it's no longer surprising to see a 25\nyear old with money, but in 1985 the sight of a 25 year old\nprofessional able to afford a new BMW was so novel that it\ncalled forth a new word.\n\nThe classic yuppie worked for a small organization.  He didn't work\nfor General Widget, but for the law firm that handled General\nWidget's acquisitions or the investment bank that floated their\nbond issues.\n\nStartups and yuppies entered the American conceptual vocabulary\nroughly simultaneously in the late 1970s and early 1980s.  I don't\nthink there was a causal connection.  Startups happened because\ntechnology started to change so fast that big companies could no\nlonger keep a lid on the smaller ones.  I don't think the rise of\nyuppies was inspired by it; it seems more as if there was a change\nin the social conventions (and perhaps the laws) governing the way\nbig companies worked.  But the two phenomena rapidly fused to produce\na principle that now seems obvious: paying energetic young people\nmarket rates, and getting correspondingly high performance from\nthem.\n\nAt about the same time the US economy rocketed out of the doldrums\nthat had afflicted it for most of the 1970s.  Was there a connection?\nI don't know enough to say, but it felt like it at the time.  There\nwas a lot of energy released.\n\n_____\n\nCountries worried about their competitiveness are right to be\nconcerned about the number of startups started within them.  But\nthey would do even better to examine the underlying principle.  Do\nthey let energetic young people get paid market rate for the work\nthey do?  The young are the test, because when people aren't rewarded\naccording to performance, they're invariably rewarded according to\nseniority instead.\n\nAll it takes is a few beachheads in your economy that pay for\nperformance.  Measurement spreads like heat.  If one part of a\nsociety is better at measurement than others, it tends to push the\nothers to do better.  If people who are young but smart and driven\ncan make more by starting their own companies than by working for\nexisting ones, the existing companies are forced to pay more to\nkeep them.  So market rates gradually permeate every organization,\neven the government.  [3]\n\nThe measurement of performance will tend to push even the organizations\nissuing credentials into line.  When we were kids I used to annoy\nmy sister by ordering her to do things I knew she was about to do\nanyway.  As credentials are superseded by performance, a similar\nrole is the best former gatekeepers can hope for.  Once credential\ngranting institutions are no longer in the self-fullfilling prophecy\nbusiness, they'll have to work harder to predict the future.\n\n_____\n\nCredentials are a step beyond bribery and influence.  But they're\nnot the final step.  There's an even better way to block the\ntransmission of power between generations: to encourage the trend\ntoward an economy made of more, smaller units.  Then you can measure\nwhat credentials merely predict.\n\nNo one likes the transmission of power between generations\u2014not\nthe left or the right.  But the market forces favored by the right\nturn out to be a better way of preventing it than the credentials\nthe left are forced to fall back on.\n\nThe era of credentials began to end when the power of large\norganizations peaked \nin the late twentieth century.  Now we seem\nto be entering a new era based on measurement.  The reason the new\nmodel has advanced so rapidly is that it works so much better.  It\nshows no sign of slowing.\n\n\n\n\n\n\n\n\n\nNotes\n\n[1] Miyazaki, Ichisada\n(Conrad Schirokauer trans.), China's Examination Hell: The Civil\nService Examinations of Imperial China, Yale University Press,\n1981.\n\nScribes in ancient Egypt took exams, but they were more the type\nof proficiency test any apprentice might have to pass.\n\n[2] When I say the\nraison d'etre of prep schools is to get kids into better colleges,\nI mean this in the narrowest sense.  I'm not saying that's all prep\nschools do, just that if they had zero effect on college admissions\nthere would be far less demand for them.\n\n[3] Progressive tax\nrates will tend to damp this effect, however, by decreasing the\ndifference between good and bad measurers.\n\nThanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and David\nSloo for reading drafts of this.\n\n\n", "December 2008\n\n(I originally wrote this at the request of a company producing\na report about entrepreneurship.  Unfortunately after reading it\nthey decided  it was too controversial to include.)\n\n\nVC funding will probably dry up somewhat during the present recession,\nlike it usually does in bad times.  But this time the result may\nbe different.  This time the number of new startups may not decrease.\nAnd that could be dangerous for VCs.\n\nWhen VC funding dried up after the Internet Bubble, startups dried\nup too.   There were not a lot of new startups being founded in\n2003.  But startups aren't tied to VC the way they were 10 years\nago.  It's now possible for VCs and startups to diverge.  And if\nthey do, they may not reconverge once the economy gets better.\n\nThe reason startups no longer depend so much on VCs is one that\neveryone in the startup business knows by now: it has gotten much\ncheaper to start a startup.  There are four main reasons: Moore's\nlaw has made hardware cheap; open source has made software free;\nthe web has made marketing and distribution free; and more powerful\nprogramming languages mean development teams can be smaller.  These\nchanges have pushed the cost of starting a startup down into the\nnoise.  In a lot of startups\u2014probaby most startups funded by\nY Combinator\u2014the biggest expense is simply the founders'\nliving expenses.  We've had startups that were profitable on revenues\nof $3000 a month.\n\n$3000 is insignificant as revenues go.  Why should anyone care about\na startup making $3000 a month?  Because, although insignificant\nas revenue, this amount of money can change a startup's\nfunding situation completely.\n\nSomeone running a startup is always calculating in the back of their\nmind how much \"runway\" they have\u2014how long they have till the\nmoney in the bank runs out and they either have to be profitable,\nraise more money, or go out of business.  Once you cross the threshold\nof profitability, however low, your runway becomes infinite.  It's\na qualitative change, like the stars turning into lines and\ndisappearing when the Enterprise accelerates to warp speed.  Once\nyou're profitable you don't need investors' money.  And because\nInternet startups have become so cheap to run, the threshold of\nprofitability can be trivially low.  Which means many Internet\nstartups don't need VC-scale investments anymore.  For many startups,\nVC funding has, in the language of VCs, gone from a must-have to a\nnice-to-have.\n\nThis change happened while no one was looking, and its effects have\nbeen largely masked so far.  It was during the trough after the\nInternet Bubble that it became trivially cheap to start a startup,\nbut few realized it because startups were so out of fashion.   When\nstartups came back into fashion, around 2005, investors were starting\nto write checks again.  And while founders may not have needed VC\nmoney the way they used to, they were willing to take it if\noffered\u2014partly because there was a tradition of startups\ntaking VC money, and partly because startups, like dogs, tend to\neat when given the opportunity.  As long as VCs were writing checks,\nfounders were never forced to explore the limits of how little they\nneeded them.  There were a few startups who hit these limits\naccidentally because of their unusual circumstances\u2014most\nfamously 37signals, which hit the limit because they crossed into\nstartup land from the other direction: they started as a consulting\nfirm, so they had revenue before they had a product.\n\nVCs and founders are like two components that used to be bolted\ntogether.  Around 2000 the bolt was removed.  Because the components\nhave so far been subjected to the same forces, they still seem to\nbe joined together, but really one is just resting on the other.\nA sharp impact would make them fly apart.  And the present recession\ncould be that impact.\n\nBecause of Y Combinator's position at the extreme end of the spectrum,\nwe'd be the first to see signs of a separation between founders and\ninvestors, and we are in fact seeing it.  For example, though the\nstock market crash does seem to have made investors more cautious,\nit doesn't seem to have had any effect on the number of people who\nwant to start startups.  We take applications for funding every 6\nmonths.  Applications for the current funding cycle closed on October\n17, well after the markets tanked, and even so we got a record\nnumber, up 40% from the same cycle a year before.\n\nMaybe things will be different a year from now, if the economy\ncontinues to get worse, but so far there is zero slackening of\ninterest among potential founders.  That's different from the way\nthings felt in 2001.  Then there was a widespread feeling among\npotential founders that startups were over, and that one should\njust go to grad school.   That isn't happening this time, and part\nof the reason is that even in a bad economy it's not that hard to\nbuild something that makes $3000 a month.  If investors stop writing\nchecks, who cares?\n\nWe also see signs of a divergence between founders and investors\nin the attitudes of existing startups we've funded.  I was talking\nto one recently that had a round fall through at the last minute\nover the sort of trifle that breaks deals when investors feel they\nhave the upper hand\u2014over an uncertainty about whether the\nfounders had correctly filed their 83(b) forms, if you can believe\nthat.  And yet this startup is obviously going to succeed: their\ntraffic and revenue graphs look like a jet taking off.  So I asked\nthem if they wanted me to introduce them to more investors.  To my\nsurprise, they said no\u2014that they'd just spent four months\ndealing with investors, and they were actually a lot happier now\nthat they didn't have to.  There was a friend they wanted to hire\nwith the investor money, and now they'd have to postpone that.  But\notherwise they felt they had enough in the bank to make it to\nprofitability.  To make sure, they were moving to a cheaper apartment.\nAnd in this economy I bet they got a good deal on it.\n\nI've detected this \"investors aren't worth the trouble\" vibe from\nseveral YC founders I've talked to recently.  At least one startup\nfrom the most recent (summer) cycle may not even raise angel money,\nlet alone VC.  Ticketstumbler\nmade it to profitability on Y Combinator's $15,000 investment and\nthey hope not to need more.  This surprised even us.  Although YC\nis based on the idea of it being cheap to start a startup, we never\nanticipated that founders would grow successful startups on nothing\nmore than YC funding.\n\nIf founders decide VCs aren't worth the trouble, that could be bad\nfor VCs.  When the economy bounces back in a few years and they're\nready to write checks again, they may find that founders have moved\non.\n\nThere is a founder community just as there's a VC community.  They\nall know one another, and techniques spread rapidly between them.\nIf one tries a new programming language or a new hosting provider\nand gets good results, 6 months later half of them are using it.\nAnd the same is true for funding.  The current generation of founders\nwant to raise money from VCs, and Sequoia specifically, because\nLarry and Sergey took money from VCs, and Sequoia specifically.\nImagine what it would do to the VC business if the next hot company\ndidn't take VC at all.\n\nVCs think they're playing a zero sum game.  In fact, it's not even\nthat.  If you lose a deal to Benchmark, you lose that deal, but VC\nas an industry still wins.  If you lose a deal to None, all VCs\nlose.\n\nThis recession may be different from the one after the Internet\nBubble.  This time founders may keep starting startups.  And if\nthey do, VCs will have to keep writing checks, or they could become\nirrelevant.\n\n\n\n\n\n\n\nThanks to Sam Altman, Trevor Blackwell, David Hornik, Jessica\nLivingston, Robert Morris, and Fred Wilson for reading drafts of\nthis.\n\n", "December 2008\n\nFor nearly all of history the success of a society was proportionate\nto its ability to assemble large and disciplined organizations.\nThose who bet on economies of scale generally won, which meant the\nlargest organizations were the most successful ones.\n\nThings have already changed so much that this is hard for us to\nbelieve, but till just a few decades ago the largest organizations\ntended to be the most progressive.  An ambitious kid graduating\nfrom college in 1960 wanted to work in the huge, gleaming offices\nof Ford, or General Electric, or NASA.  Small meant small-time.\nSmall in 1960 didn't mean a cool little startup.  It meant uncle\nSid's shoe store.\n\nWhen I grew up in the 1970s, the idea of the \"corporate ladder\" was\nstill very much alive.  The standard plan was to try to get into a\ngood college, from which one would be drafted into some organization\nand then rise to positions of gradually increasing responsibility.\nThe more ambitious merely hoped to climb the same ladder faster.\n[1]\n\nBut in the late twentieth century something changed.  It turned out\nthat economies of scale were not the only force at work.  Particularly\nin technology, the increase in speed one could get from smaller\ngroups started to trump the advantages of size.\n\nThe future turned out to be different from the one we were expecting\nin 1970.  The domed cities and flying cars we expected have failed\nto materialize.  But fortunately so have the jumpsuits with badges\nindicating our specialty and rank.  Instead of being dominated by\na few, giant tree-structured organizations, it's now looking like\nthe economy of the future will be a fluid network of smaller,\nindependent units.\n\nIt's not so much that large organizations stopped working.  There's\nno evidence that famously successful organizations like the Roman\narmy or the British East India Company were any less afflicted by\nprotocol and politics than organizations of the same size today.\nBut they were competing against opponents who couldn't change the\nrules on the fly by discovering new technology.  Now it turns out\nthe rule \"large and disciplined organizations win\" needs to have a\nqualification appended: \"at games that change slowly.\" No one knew\ntill change reached a sufficient speed.\n\nLarge organizations will start to do worse now, though,\nbecause for the first time in history they're no longer getting the\nbest people.  An ambitious kid graduating from college now doesn't\nwant to work for a big company.  They want to work for the hot\nstartup that's rapidly growing into one.  If they're really ambitious,\nthey want to start it. \n[2]\n\nThis doesn't mean big companies will disappear.  To say that\nstartups will succeed implies that big companies will exist, because\nstartups that succeed either become big companies or are acquired\nby them. \n[3]\nBut large organizations will probably never again\nplay the leading role they did up till the last quarter of the\ntwentieth century.\n\nIt's kind of surprising that a trend that lasted so long would ever\nrun out.  How often does it happen that a rule works for thousands\nof years, then switches polarity?\n\nThe millennia-long run of bigger-is-better left us with a lot of\ntraditions that are now obsolete, \nbut extremely deeply rooted.\nWhich means the ambitious can now do arbitrage on them.  It will\nbe very valuable to understand precisely which ideas to keep and\nwhich can now be discarded.\n\nThe place to look is where the spread of smallness began: in the\nworld of startups.\n\nThere have always been occasional cases, particularly in the US,\nof ambitious people who grew the ladder under them instead of\nclimbing it.  But till recently this was an anomalous route that\ntended to be followed only by outsiders.  It was no coincidence\nthat the great industrialists of the nineteenth century had so\nlittle formal education.  As huge as their companies eventually\nbecame, they were all essentially mechanics and shopkeepers at\nfirst.  That was a social step no one with a college education would\ntake if they could avoid it.  Till the rise of technology startups,\nand in particular, Internet startups, it was very unusual for\neducated people to start their own businesses.\n\nThe eight men who left Shockley Semiconductor to found Fairchild\nSemiconductor, the original Silicon Valley startup, weren't even\ntrying to start a company at first.  They were just looking for a\ncompany willing to hire them as a group.  Then one of their parents\nintroduced them to a small investment bank that offered to find\nfunding for them to start their own, so they did.  But starting a\ncompany was an alien idea to them; it was something they backed\ninto.\n[4]\n\nNow I would guess that practically every Stanford or Berkeley\nundergrad who knows how to program has at least considered the idea\nof starting a startup.  East Coast universities are not far behind,\nand British universities only a little behind them.  This pattern\nsuggests that attitudes at Stanford and Berkeley are not an anomaly,\nbut a leading indicator.  This is the way the world is going.\n\nOf course, Internet startups are still only a fraction of the world's\neconomy.  Could a trend based on them be that powerful?\n\nI think so.  There's no reason to suppose there's any limit to the\namount of work that could be done in this area.  Like science,\nwealth seems to expand fractally.  Steam power was a sliver of the\nBritish economy when Watt started working on it.  But his work led\nto more work till that sliver had expanded into something bigger\nthan the whole economy of which it had initially been a part.\n\nThe same thing could happen with the Internet.  If Internet startups\noffer the best opportunity for ambitious people, then a lot of\nambitious people will start them, and this bit of the economy will\nballoon in the usual fractal way.\n\nEven if Internet-related applications only become a tenth of the\nworld's economy, this component will set the tone for the rest.\nThe most dynamic part of the economy always does, in everything\nfrom salaries to standards of dress.  Not just because of its\nprestige, but because the principles underlying the most dynamic\npart of the economy tend to be ones that work.\n\nFor the future, the trend to bet on seems to be networks of small,\nautonomous groups whose performance is measured individually.  And\nthe societies that win will be the ones with the least impedance.\n\nAs with the original industrial revolution, some societies are going\nto be better at this than others.  Within a generation of its birth\nin England, the Industrial Revolution had spread to continental\nEurope and North America.  But it didn't spread everywhere.  This\nnew way of doing things could only take root in places that were\nprepared for it.  It could only spread to places that already had\na vigorous middle class.\n\nThere is a similar social component to the transformation that began\nin Silicon Valley in the 1960s.  Two new kinds of techniques were\ndeveloped there: techniques for building integrated circuits, and\ntechniques for building a new type of company designed to grow fast\nby creating new technology.  The techniques for building integrated\ncircuits spread rapidly to other countries.  But the techniques for\nbuilding startups didn't.  Fifty years later, startups are ubiquitous\nin Silicon Valley and common in a handful of other US cities, but\nthey're still an anomaly in most of the world.\n\nPart of the reason\u2014possibly the main reason\u2014that startups\nhave not spread as broadly as the Industrial Revolution did is their\nsocial disruptiveness.  Though it brought many social changes, the\nIndustrial Revolution was not fighting the principle that bigger\nis better.  Quite the opposite: the two dovetailed beautifully.\nThe new industrial companies adapted the customs of existing large\norganizations like the military and the civil service, and the\nresulting hybrid worked well.  \"Captains of industry\" issued orders\nto \"armies of workers,\" and everyone knew what they were supposed\nto do.\n\nStartups seem to go more against the grain, socially.  It's hard\nfor them to flourish in societies that value hierarchy and stability,\njust as it was hard for industrialization to flourish in societies\nruled by people who stole at will from the merchant class.  But\nthere were already a handful of countries past that stage when the\nIndustrial Revolution happened.   There do not seem to be that many\nready this time.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nOne of the bizarre consequences of this model was that the usual\nway to make more money was to become a manager.  This is one of the\nthings startups fix.\n\n[2]\nThere are a lot of reasons American car companies have been\ndoing so much worse than Japanese car companies, but at least one\nof them is a cause for optimism: American graduates have more\noptions.\n\n[3]\nIt's possible that companies will one day be able to grow big\nin revenues without growing big in people, but we are not very far\nalong that trend yet.\n\n[4]\nLecuyer, Christophe, Making Silicon Valley, MIT Press, 2006.\n\nThanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nand Robert Morris for reading drafts of this.\n\n", "November 2008\n\nOne of the differences between big companies and startups is that\nbig companies tend to have developed procedures to protect themselves\nagainst mistakes.  A startup walks like a toddler, bashing\ninto things and falling over all the time.  A big company is more\ndeliberate.\n\nThe gradual accumulation of checks in an organization is a kind of\nlearning, based on disasters that have happened to it or others\nlike it.  After giving a contract to a supplier who goes bankrupt\nand fails to deliver, for example, a company might require all\nsuppliers to prove they're solvent before submitting bids.\n\nAs companies grow they invariably get more such checks, either in\nresponse to disasters they've suffered, or (probably more often)\nby hiring people from bigger companies who bring with them customs\nfor protecting against new types of disasters.\n\nIt's natural for organizations to learn from mistakes.  The problem\nis, people who propose new checks almost never consider that the\ncheck itself has a cost.\n\nEvery check has a cost. For example, consider the case of making\nsuppliers verify their solvency.  Surely that's mere prudence?  But\nin fact it could have substantial costs.  There's obviously the\ndirect cost in time of the people on both sides who supply and check\nproofs of the supplier's solvency.  But the real costs are the ones\nyou never hear about: the company that would be the best supplier,\nbut doesn't bid because they can't spare the effort to get verified.\nOr the company that would be the best supplier, but falls just short\nof the threshold for solvency\u2014which will of course have been set\non the high side, since there is no apparent cost of increasing it.\n\nWhenever someone in an organization proposes to add a new check,\nthey should have to explain not just the benefit but the cost.  No\nmatter how bad a job they did of analyzing it, this meta-check would\nat least remind everyone there had to be a cost, and send them\nlooking for it.\n\nIf companies started doing that, they'd find some surprises.  Joel\nSpolsky recently spoke at Y Combinator about selling software to\ncorporate customers.  He said that in most companies software costing\nup to about $1000 could be bought by individual managers without\nany additional approvals.  Above that threshold, software purchases\ngenerally had to be approved by a committee.  But babysitting this\nprocess was so expensive for software vendors that it didn't make\nsense to charge less than $50,000.  Which means if you're making\nsomething you might otherwise have charged $5000 for, you have to\nsell it for $50,000 instead.\n\nThe purpose of the committee is presumably to ensure that the company\ndoesn't waste money. And yet the result is that the company pays\n10 times as much.\n\nChecks on purchases will always be expensive, because the harder\nit is to sell something to you, the more it has to cost.  And not\nmerely linearly, either.  If you're hard enough to sell to, the\npeople who are best at making things don't want to bother.  The\nonly people who will sell to you are companies that specialize in\nselling to you.  Then you've sunk to a whole new level of inefficiency.\nMarket mechanisms no longer protect you, because the good suppliers\nare no longer in the market.\n\nSuch things happen constantly to the biggest organizations of all,\ngovernments.  But checks instituted by governments can cause much\nworse problems than merely overpaying.  Checks instituted by\ngovernments can cripple a country's whole economy.  Up till about\n1400, China was richer and more technologically advanced than Europe.\nOne reason Europe pulled ahead was that the Chinese government\nrestricted long trading voyages.  So it was left to the Europeans\nto explore and eventually to dominate the rest of the world, including\nChina.\n\nIn more recent times, Sarbanes-Oxley has practically destroyed the\nUS IPO market.  That wasn't the intention of the legislators who\nwrote it.  They just wanted to add a few more checks on public\ncompanies.  But they forgot to consider the cost.  They forgot that\ncompanies about to go public are usually rather stretched, and that\nthe weight of a few extra checks that might be easy for General\nElectric to bear are enough to prevent younger companies from being\npublic at all.\n\nOnce you start to think about the cost of checks, you can start to\nask other interesting questions. Is the cost increasing or decreasing?\nIs it higher in some areas than others?  Where does it increase\ndiscontinuously?  If large organizations started to ask questions\nlike that, they'd learn some frightening things.\n\nI think the cost of checks may actually be increasing.  The reason\nis that software plays an increasingly important role in companies,\nand the people who write software are particularly harmed by checks.\n\nProgrammers are unlike many types of workers in that the best ones\nactually prefer to work hard.  This doesn't seem to be the case in\nmost types of work.  When I worked in fast food, we didn't prefer\nthe busy times.  And when I used to mow lawns, I definitely didn't\nprefer it when the grass was long after a week of rain.\n\nProgrammers, though, like it better when they write more code.  Or\nmore precisely, when they release more code.  Programmers like to\nmake a difference.  Good ones, anyway.\n\nFor good programmers, one of the best things about working for a\nstartup is that there are few checks on releases.  In true startups,\nthere are no external checks at all.  If you have an idea for a new\nfeature in the morning, you can write it and push it to the production\nservers before lunch.  And when you can do that, you have more\nideas.\n\nAt big companies, software has to go through various approvals\nbefore it can be launched.  And the cost of doing this can be\nenormous\u2014in fact, discontinuous.  I was talking recently to a\ngroup of three programmers whose startup had been acquired a few\nyears before by a big company.  When they'd been independent, they\ncould release changes instantly.  Now, they said, the absolute\nfastest they could get code released on the production servers was\ntwo weeks.\n\nThis didn't merely make them less productive.  It made them hate\nworking for the acquirer.\n\nHere's a sign of how much programmers like to be able to work hard:\nthese guys would have paid to be able to release code immediately,\nthe way they used to.  I asked them if they'd trade 10% of the\nacquisition price for the ability to release code immediately, and\nall three instantly said yes.  Then I asked what was the maximum\npercentage of the acquisition price they'd trade for it.  They said\nthey didn't want to think about it, because they didn't want to\nknow how high they'd go, but I got the impression it might be as\nmuch as half.\n\nThey'd have sacrificed hundreds of thousands of dollars, perhaps\nmillions, just to be able to deliver more software to users.  And\nyou know what?  It would have been perfectly safe to let them.  In\nfact, the acquirer would have been better off; not only wouldn't\nthese guys have broken anything, they'd have gotten a lot more done.\nSo the acquirer is in fact getting worse performance at greater\ncost.  Just like the committee approving software purchases.\n\nAnd just as the greatest danger of being hard to sell to is not\nthat you overpay but that the best suppliers won't even sell to\nyou, the greatest danger of applying too many checks to your\nprogrammers is not that you'll make them unproductive, but that\ngood programmers won't even want to work for you.\n\nSteve Jobs's famous maxim \"artists ship\" works both ways.  Artists\naren't merely capable of shipping.  They insist on it.  So if you\ndon't let people ship, you won't have any artists.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2008\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nAugust 2008\n", "July 2008\n\nAt this year's startup school, David Heinemeier Hansson gave a\n talk\nin which he suggested that startup founders\nshould do things the old fashioned way.  Instead of hoping to get\nrich by building a valuable company and then selling stock in a\n\"liquidity event,\" founders should start companies that make money\nand live off the revenues.\n\nSounds like a good plan.  Let's think about the optimal way to do\nthis.\n\nOne disadvantage of living off the revenues of your company is that\nyou have to keep running it.  And as anyone who runs their own\nbusiness can tell you, that requires your complete attention.  You\ncan't just start a business and check out once things are going\nwell, or they stop going well surprisingly fast.\n\nThe main economic motives of startup founders seem to be freedom\nand security.  They want enough money that (a) they don't have to\nworry about running out of money and (b) they can spend their time\nhow they want.  Running your own business offers neither.  You\ncertainly don't have freedom: no boss is so demanding.  Nor do you\nhave security, because if you stop paying attention to the company,\nits revenues go away, and with them your income.\n\nThe best case, for most people, would be if you could hire someone\nto manage the company for you once you'd grown it to a certain size.\nSuppose you could find a really good manager.  Then you would have\nboth freedom and security.  You could pay as little attention to\nthe business as you wanted, knowing that your manager would keep\nthings running smoothly.  And that being so, revenues would continue\nto flow in, so you'd have security as well.\n\nThere will of course be some founders who wouldn't like that idea:\nthe ones who like running their company so much that there's nothing\nelse they'd rather do.  But this group must be small.  The way you\nsucceed in most businesses is to be fanatically attentive\nto customers' needs.  What are the odds that your own desires would\ncoincide exactly with the demands of this powerful, external force?\n\nSure, running your own company can be fairly interesting.  Viaweb\nwas more interesting than any job I'd had before.  And since I made\nmuch more money from it, it offered the highest ratio of income to\nboringness of anything I'd done, by orders of magnitude.  But was\nit the most interesting work I could imagine doing?  No.\n\nWhether the number of founders in the same position is asymptotic\nor merely large, there are certainly a lot of them.  For them the\nright approach would be to hand the company over to a professional\nmanager eventually, if they could find one who was good enough.\n\n_____\n\nSo far so good.  But what if your manager was hit by a bus?  What\nyou really want is a management company to run your company for\nyou.  Then you don't depend on any one person.\n\nIf you own rental property, there are companies you can hire to\nmanage it for you.  Some will do everything, from finding tenants\nto fixing leaks.  Of course, running companies is a lot more\ncomplicated than managing rental property, but let's suppose there\nwere management companies that could do it for you. They'd charge\na lot, but wouldn't it be worth it?  I'd sacrifice a large percentage\nof the income for the extra peace of mind.\n\nI realize what I'm describing already sounds too good to be true, but I\ncan think of a way to make it even more attractive.  If\ncompany management companies existed, there would be an additional\nservice they could offer clients: they could let them insure their\nreturns by pooling their risk.  After all, even a perfect manager can't save a company\nwhen, as sometimes happens, its whole market dies, just as property\nmanagers can't save you from the building burning down.  But a\ncompany that managed a large enough number of companies could say\nto all its clients: we'll combine the revenues from all your\ncompanies, and pay you your proportionate share.\n\nIf such management companies existed, they'd offer the maximum of\nfreedom and security.  Someone would run your company for you, and\nyou'd be protected even if it happened to die.\n\nLet's think about how such a management company might be organized.\nThe simplest way would be to have a new kind of stock representing\nthe total pool of companies they were managing.  When you signed\nup, you'd trade your company's stock for shares of this pool, in\nproportion to an estimate of your company's value that you'd both\nagreed upon.  Then you'd automatically get your share of the returns\nof the whole pool.\n\nThe catch is that because this kind of trade would be hard to undo,\nyou couldn't switch management companies.  But there's a way they\ncould fix that: suppose all the company management companies got\ntogether and agreed to allow their clients to exchange shares in\nall their pools.  Then you could, in effect, simultaneously choose\nall the management companies to run yours for you, in whatever\nproportion you wanted, and change your mind later as often as you\nwanted.\n\nIf such pooled-risk company management companies existed, signing\nup with one would seem the ideal plan for most people following the\nroute David advocated.\n\nGood news: they do exist.  What I've just\ndescribed is an acquisition by a public company.\n\n_____\n\nUnfortunately, though public acquirers are structurally identical\nto pooled-risk company management companies, they don't think of\nthemselves that way.  With a property management company, you can\njust walk in whenever you want and say \"manage my rental property\nfor me\" and they'll do it.  Whereas acquirers are, as of this\nwriting, extremely fickle.  Sometimes they're in a buying mood and\nthey'll overpay enormously; other times they're not interested.\nThey're like property management companies run by madmen.  Or more\nprecisely, by Benjamin Graham's Mr. Market.\n\nSo while on average public acquirers behave like pooled-risk company\nmanagers, you need a window of several years to get average case\nperformance.  If you wait long enough (five years, say) you're\nlikely to hit an up cycle where some acquirer is hot to buy you.\nBut you can't choose when it happens.\n\nYou can't assume investors will carry you for as long as you might\nhave to wait. Your company has to make money.  Opinions are divided\nabout how early to focus on that.  \nJoe Kraus says you should try\ncharging customers right away.  And yet some of the most successful\nstartups, including Google, ignored revenue at first and concentrated\nexclusively on development.  The answer probably depends on the\ntype of company you're starting.  I can imagine some where trying\nto make sales would be a good heuristic for product design, and\nothers where it would just be a distraction.  The test is probably\nwhether it helps you to understand your users.\n\nYou can choose whichever revenue strategy you think is best for the\ntype of company you're starting, so long as you're profitable.\nBeing profitable ensures you'll get at least the average of the\nacquisition market\u2014in which public companies do behave as pooled-risk\ncompany management companies.\n\nDavid isn't mistaken in saying you should start a company to live\noff its revenues.  The mistake is thinking this is somehow opposed\nto starting a company and selling it.  In fact, for most people the\nlatter is merely the optimal case of the former.\n\n\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, Michael\nMandel, Robert Morris, and Fred Wilson for reading drafts of this.\n\n\n\n\n", "May 2008\n\n\nGreat cities attract ambitious people.  You can sense it when you\nwalk around one.  In a hundred subtle ways, the city sends you a\nmessage: you could do more; you should try harder.\n\nThe surprising thing is how different these messages can be.  New\nYork tells you, above all: you should make more money.  There are\nother messages too, of course.  You should be hipper.  You should\nbe better looking.  But the clearest message is that you should be\nricher.\n\nWhat I like about Boston (or rather Cambridge) is that the message\nthere is: you should be smarter.  You really should get around to\nreading all those books you've been meaning to.\n\nWhen you ask what message a city sends, you sometimes get surprising\nanswers.  As much as they respect brains in Silicon Valley, the\nmessage the Valley sends is: you should be more powerful.\n\nThat's not quite the same message New York sends.  Power matters\nin New York too of course, but New York is pretty impressed by a\nbillion dollars even if you merely inherited it.  In Silicon Valley\nno one would care except a few real estate agents.  What matters\nin Silicon Valley is how much effect you have on the world.  The\nreason people there care about Larry and Sergey is not their wealth\nbut the fact that they control Google, which affects practically\neveryone.\n\n_____\n\nHow much does it matter what message a city sends?  Empirically,\nthe answer seems to be: a lot. You might think that if you had\nenough strength of mind to do great things, you'd be able to transcend\nyour environment.  Where you live should make at most a couple\npercent difference.  But if you look at the historical evidence,\nit seems to matter more than that.  Most people who did great things\nwere clumped together in a few places where that sort of thing was\ndone at the time.\n\nYou can see how powerful cities are from something I wrote about\nearlier: the case of the Milanese Leonardo.  \nPractically every\nfifteenth century Italian painter you've heard of was from Florence,\neven though Milan was just as big.  People in Florence weren't\ngenetically different, so you have to assume there was someone born\nin Milan with as much natural ability as Leonardo.  What happened\nto him?\n\nIf even someone with the same natural ability as Leonardo\ncouldn't beat the force of environment, do you suppose you can?\n\nI don't.  I'm fairly stubborn, but I wouldn't try to fight this\nforce.  I'd rather use it.  So I've thought a lot about where to\nlive.\n\nI'd always imagined Berkeley would be the ideal place \u2014 that\nit would basically be Cambridge with good weather.  But when I\nfinally tried living there a couple years ago, it turned out not\nto be.  The message Berkeley sends is: you should live better.  Life\nin Berkeley is very civilized.  It's probably the place in America\nwhere someone from Northern Europe would feel most at home.  But\nit's not humming with ambition.\n\nIn retrospect it shouldn't have been surprising that a place so\npleasant would attract people interested above all in quality of\nlife.  Cambridge with good weather, it turns out, is not Cambridge.\nThe people you find in Cambridge are not there by accident.  You\nhave to make sacrifices to live there.  It's expensive and somewhat\ngrubby, and the weather's often bad.  So the kind of people you\nfind in Cambridge are the kind of people who want to live where the\nsmartest people are, even if that means living in an expensive,\ngrubby place with bad weather.\n\nAs of this writing, Cambridge seems to be the intellectual capital\nof the world.  I realize that seems a preposterous claim.  What\nmakes it true is that it's more preposterous to claim about anywhere\nelse.  American universities currently seem to be the best, judging\nfrom the flow of ambitious students.  And what US city has a stronger\nclaim?  New York?  A fair number of smart people, but diluted by a\nmuch larger number of neanderthals in suits.  The Bay Area has a\nlot of smart people too, but again, diluted;  there are two great\nuniversities, but they're far apart.  Harvard and MIT are practically\nadjacent by West Coast standards, and they're surrounded by about\n20 other colleges and universities.\n[1]\n\nCambridge as a result feels like a town whose main industry is\nideas, while New York's is finance and Silicon Valley's is startups.\n\n_____\n\nWhen you talk about cities in the sense we are, what you're really\ntalking about is collections of people.  For a long time cities\nwere the only large collections of people, so you could use the two\nideas interchangeably.  But we can see how much things are changing\nfrom the examples I've mentioned.  New York is a classic great city.\nBut Cambridge is just part of a city, and Silicon Valley is not\neven that.  (San Jose is not, as it sometimes claims, the capital\nof Silicon Valley.  It's just 178 square miles at one end of it.)\n\nMaybe the Internet will change things further.  Maybe one day the\nmost important community you belong to will be a virtual one, and\nit won't matter where you live physically.  But I wouldn't bet on\nit.  The physical world is very high bandwidth, and some of the\nways cities send you messages are quite subtle.\n\nOne of the exhilarating things about coming back to Cambridge every\nspring is walking through the streets at dusk, when you can see\ninto the houses.  When you walk through Palo Alto in the evening,\nyou see nothing but the blue glow of TVs.  In Cambridge you see\nshelves full of promising-looking books.  Palo Alto was probably\nmuch like Cambridge in 1960, but you'd never guess now that there\nwas a university nearby.  Now it's just one of the richer neighborhoods\nin Silicon Valley. \n[2]\n\nA city speaks to you mostly by accident \u2014 in things you see\nthrough windows, in conversations you overhear.  It's not something\nyou have to seek out, but something you can't turn off.  One of the\noccupational hazards of living in Cambridge is overhearing the\nconversations of people who use interrogative intonation in declarative\nsentences.  But on average I'll take Cambridge conversations over\nNew York or Silicon Valley ones.\n\nA friend who moved to Silicon Valley in the late 90s said the worst\nthing about living there was the low quality of the eavesdropping.\nAt the time I thought she was being deliberately eccentric. Sure,\nit can be interesting to eavesdrop on people, but is good quality\neavesdropping so important that it would affect where you chose to\nlive?  Now I understand what she meant.  The conversations you\noverhear tell you what sort of people you're among.\n\n_____\n\nNo matter how determined you are, it's hard not to be influenced\nby the people around you.  It's not so much that you do whatever a\ncity expects of you, but that you get discouraged when no one around\nyou cares about the same things you do.\n\nThere's an imbalance between encouragement and discouragement like\nthat between gaining and losing money.  Most people overvalue\nnegative amounts of money: they'll work much harder to avoid losing\na dollar than to gain one.  Similarly, although there are plenty of\npeople strong enough to resist doing something just because that's\nwhat one is supposed to do where they happen to be, there are few\nstrong enough to keep working on something no one around them cares\nabout.\n\nBecause ambitions are to some extent incompatible and admiration\nis a zero-sum game, each city tends to focus on one type of ambition.\nThe reason Cambridge is the intellectual capital is not just that\nthere's a concentration of smart people there, but that there's\nnothing else people there care about more.  Professors in\nNew York and the Bay area are second class citizens \u2014 till they\nstart hedge funds or startups respectively.\n\nThis suggests an answer to a question people in New York have\nwondered about since the Bubble: whether New York could grow into\na startup hub to rival Silicon Valley.  One reason that's unlikely\nis that someone starting a startup in New York would feel like a\nsecond class citizen. \n[3]\nThere's already something else people in New York admire more.\n\nIn the long term, that could be a bad thing for New York.  The power\nof an important new technology does eventually convert to money.\nSo by caring more about money and less about power than Silicon\nValley, New York is recognizing the same thing, but slower.\n[4]\nAnd in fact it has been losing to Silicon Valley at its own game:\nthe ratio of New York to California residents in the Forbes 400 has\ndecreased from 1.45 (81:56) when the list was first published in\n1982 to .83 (73:88) in 2007.\n\n_____\n\nNot all cities send a message.  Only those that are centers for\nsome type of ambition do.  And it can be hard to tell exactly what\nmessage a city sends without living there.  I understand the messages\nof New York, Cambridge, and Silicon Valley because I've lived for\nseveral years in each of them.  DC and LA seem to send messages\ntoo, but I haven't spent long enough in either to say for sure what\nthey are.\n\nThe big thing in LA seems to be fame.  There's an A List of people\nwho are most in demand right now, and what's most admired is to be\non it, or friends with those who are.  Beneath that, the message is\nmuch like New York's, though perhaps with more emphasis on physical\nattractiveness.\n\nIn DC the message seems to be that the most important thing is who\nyou know.  You want to be an insider.  In practice this seems to\nwork much as in LA.  There's an A List and you want to be on it or\nclose to those who are.  The only difference is how the A List is\nselected.  And even that is not that different.\n\nAt the moment, San Francisco's message seems to be the same as\nBerkeley's: you should live better.  But this will change if enough\nstartups choose SF over the Valley.  During the Bubble that was a\npredictor of failure \u2014 a self-indulgent choice, like buying\nexpensive office furniture.  Even now I'm suspicious when startups\nchoose SF.  But if enough good ones do, it stops being a self-indulgent\nchoice, because the center of gravity of Silicon Valley will shift\nthere.\n\nI haven't found anything like Cambridge for intellectual ambition.\nOxford and Cambridge (England) feel like Ithaca or Hanover: the\nmessage is there, but not as strong.\n\nParis was once a great intellectual center.  If you went there in\n1300, it might have sent the message Cambridge does now.  But I\ntried living there for a bit last year, and the ambitions of the\ninhabitants are not intellectual ones.  The message Paris sends now\nis: do things with style.  I liked that, actually.  Paris is the\nonly city I've lived in where people genuinely cared about art.  In\nAmerica only a few rich people buy original art, and even the more\nsophisticated ones rarely get past judging it by the brand name of\nthe artist.  But looking through windows at dusk in Paris you can\nsee that people there actually care what paintings look like.\nVisually, Paris has the best eavesdropping I know. \n[5]\n\nThere's one more message I've heard from cities: in London you can\nstill (barely) hear the message that one should be more aristocratic.\nIf you listen for it you can also hear it in Paris, New York, and\nBoston.  But this message is everywhere very faint.  It would have\nbeen strong 100 years ago, but now I probably wouldn't have picked\nit up at all if I hadn't deliberately tuned in to that wavelength\nto see if there was any signal left.\n\n_____\n\nSo far the complete list of messages I've picked up from cities is:\nwealth, style, hipness, physical attractiveness, fame, political\npower, economic power, intelligence, social class, and quality of\nlife.\n\nMy immediate reaction to this list is that it makes me slightly\nqueasy.  I'd always considered ambition a good thing, but I realize\nnow that was because I'd always implicitly understood it to mean\nambition in the areas I cared about.  When you list everything\nambitious people are ambitious about, it's not so pretty.\n\nOn closer examination I see a couple things on the list that are\nsurprising in the light of history.  For example, physical\nattractiveness wouldn't have been there 100 years ago (though it\nmight have been 2400 years ago).  It has always mattered for women,\nbut in the late twentieth century it seems to have started to matter\nfor men as well.  I'm not sure why \u2014 probably some combination\nof the increasing power of women, the increasing influence of actors\nas models, and the fact that so many people work in offices now:\nyou can't show off by wearing clothes too fancy to wear in a factory,\nso you have to show off with your body instead.\n\nHipness is another thing you wouldn't have seen on the list 100\nyears ago.  Or wouldn't you?  What it means is to know what's what.\nSo maybe it has simply replaced the component of social class that\nconsisted of being \"au fait.\"  That could explain why hipness seems\nparticularly admired in London: it's version 2 of the traditional\nEnglish delight in obscure codes that only insiders understand.\n\nEconomic power would have been on the list 100 years ago, but what\nwe mean by it is changing.  It used to mean the control of vast\nhuman and material resources.  But increasingly it means the ability\nto direct the course of technology, and some of the people in a\nposition to do that are not even rich \u2014 leaders of important\nopen source projects, for example.  The Captains of Industry of\ntimes past had laboratories full of clever people cooking up new\ntechnologies for them.  The new breed are themselves those people.\n\nAs this force gets more attention, another is dropping off the list:\nsocial class.  I think the two changes are related.  Economic power,\nwealth, and social class are just names for the same thing at\ndifferent stages in its life: economic power converts to wealth,\nand wealth to social class.  So the focus of admiration is simply\nshifting upstream.\n\n_____\n\nDoes anyone who wants to do great work have to live in a great city?\nNo; all great cities inspire some sort of ambition, but they aren't\nthe only places that do.  For some kinds of work, all you need is\na handful of talented colleagues.\n\nWhat cities provide is an audience, and a funnel for peers.  These\naren't so critical in something like math or physics, where no\naudience matters except your peers, and judging ability is sufficiently\nstraightforward that hiring and admissions committees can do it\nreliably.  In a field like math or physics all you need is a\ndepartment with the right colleagues in it.  It could be anywhere \u2014 in\nLos Alamos, New Mexico, for example.\n\nIt's in fields like the arts or writing or technology that the\nlarger environment matters.  In these the best practitioners aren't\nconveniently collected in a few top university departments and\nresearch labs \u2014 partly because talent is harder to judge, and\npartly because people pay for these things, so one doesn't need to\nrely on teaching or research funding to support oneself.  It's in\nthese more chaotic fields that it helps most to be in a great city:\nyou need the encouragement of feeling that people around you care\nabout the kind of work you do, and since you have to find peers for\nyourself, you need the much larger intake mechanism of a great city.\n\nYou don't have to live in a great city your whole life to benefit\nfrom it.  The critical years seem to be the early and middle ones\nof your career.  Clearly you don't have to grow up in a great city.\nNor does it seem to matter if you go to college in one.  To most\ncollege students a world of a few thousand people seems big enough.\nPlus in college you don't yet have to face the hardest kind of\nwork \u2014 discovering new problems to solve.\n\nIt's when you move on to the next and much harder step that it helps\nmost to be in a place where you can find peers and encouragement.\nYou seem to be able to leave, if you want, once you've found both.\nThe Impressionists show the typical pattern: they were born all\nover France (Pissarro was born in the Carribbean) and died all over\nFrance, but what defined them were the years they spent together\nin Paris.\n\n_____\n\nUnless you're sure what you want to do and where the leading center\nfor it is, your best bet is probably to try living in several\nplaces when you're young.  You can never tell what message a city\nsends till you live there, or even whether it still sends one.\nOften your information will be wrong: I tried living in Florence\nwhen I was 25, thinking it would be an art center, but it turned\nout I was 450 years too late.\n\nEven when a city is still a live center of ambition, you won't know\nfor sure whether its message will resonate with you till you hear\nit.  When I moved to New York, I was very excited at first.  It's\nan exciting place.  So it took me quite a while to realize I just\nwasn't like the people there.  I kept searching for the Cambridge\nof New York.  It turned out it was way, way uptown: an hour uptown\nby air.\n\nSome people know at 16 what sort of work they're going to do, but\nin most ambitious kids, ambition seems to precede anything specific\nto be ambitious about.  They know they want to do something great.\nThey just haven't decided yet whether they're going to be a rock\nstar or a brain surgeon.  There's nothing wrong with that.  But it\nmeans if you have this most common type of ambition, you'll probably\nhave to figure out where to live by trial and error.  You'll\nprobably have to find the city where you feel at home to know what sort of\nambition you have.\n\n\n\n\n\n\n\nNotes\n\n[1]\nThis is one of the advantages of not having the universities\nin your country controlled by the government.  When governments\ndecide how to allocate resources, political deal-making causes\nthings to be spread out geographically.  No central goverment would\nput its two best universities in the same town, unless it was the\ncapital (which would cause other problems).  But scholars seem to\nlike to cluster together as much as people in any other field, and\nwhen given the freedom to they derive the same advantages from it.\n\n[2]\nThere are still a few old professors in Palo Alto, but one by\none they die and their houses are transformed by developers into\nMcMansions and sold to VPs of Bus Dev.\n\n[3]\nHow many times have you read about startup founders who continued\nto live inexpensively as their companies took off?  Who continued\nto dress in jeans and t-shirts, to drive the old car they had in\ngrad school, and so on?  If you did that in New York, people would\ntreat you like shit.  If you walk into a fancy restaurant in San\nFrancisco wearing a jeans and a t-shirt, they're nice to you; who\nknows who you might be?  Not in New York.\n\nOne sign of a city's potential as a technology center is the number\nof restaurants that still require jackets for men.  According to\nZagat's there are none in San Francisco, LA, Boston, or Seattle, \n4 in DC, 6 in Chicago, 8 in London, 13 in New York, and 20 in Paris.\n\n(Zagat's lists the Ritz Carlton Dining Room in SF as requiring jackets\nbut I couldn't believe it, so I called to check and in fact they\ndon't. Apparently there's only one restaurant left on the entire West\nCoast that still requires jackets: The French Laundry in Napa Valley.)\n\n[4]\nIdeas are one step upstream from economic power, so it's\nconceivable that intellectual centers like Cambridge will one day\nhave an edge over Silicon Valley like the one the Valley has over\nNew York.\n\nThis seems unlikely at the moment; if anything Boston is falling\nfurther and further behind.  The only reason I even mention the\npossibility is that the path from ideas to startups has recently\nbeen getting smoother.  It's a lot easier now for a couple of hackers\nwith no business experience to start a startup than it was 10 years\nago.  If you extrapolate another 20 years, maybe the balance of\npower will start to shift back.  I wouldn't bet on it, but I wouldn't\nbet against it either.\n\n[5]\nIf Paris is where people care most about art, why is New York\nthe center of gravity of the art business?  Because in the twentieth\ncentury, art as brand split apart from art as stuff.  New York is\nwhere the richest buyers are, but all they demand from art is brand,\nand since you can base brand on anything with a sufficiently\nidentifiable style, you may as well use the local stuff.\n\n\n\nThanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nJackie McDonough, Robert Morris, and David Sloo for reading drafts\nof this.\n\n", "Note: The strategy described at the end of this essay didn't work.\nIt would work for a while, and then I'd gradually find myself\nusing the Internet on my work computer.  I'm trying other\nstrategies now, but I think this time I'll wait till I'm sure\nthey work before writing about them.\n\nMay 2008\n\nProcrastination feeds on distractions.  Most people find it\nuncomfortable just to sit and do nothing; you avoid work by doing\nsomething else.\n\nSo one way to beat procrastination is to starve it of distractions.\nBut that's not as straightforward as it sounds, because there are\npeople working hard to distract you.  Distraction is not a static\nobstacle that you avoid like you might avoid a rock in the road.\nDistraction seeks you out.\n\nChesterfield described dirt as matter out of place.  Distracting\nis, similarly, desirable at the wrong time.  And technology is\ncontinually being refined to produce more and more desirable things.\nWhich means that as we learn to avoid one class of distractions,\nnew ones constantly appear, like drug-resistant bacteria.\n\nTelevision, for example, has after 50 years of refinement reached\nthe point where it's like visual crack.  I realized when I was 13\nthat TV was addictive, so I stopped watching it.  But I read recently\n that the average American watches \n4 hours \nof TV a day.  A quarter\nof their life.\n\nTV is in decline now, but only because people have found even more\naddictive ways of wasting time.  And what's especially dangerous\nis that many happen at your computer.  This is no accident.  An\never larger percentage of office workers sit in front of computers\nconnected to the Internet, and distractions always evolve toward\nthe procrastinators.\n\nI remember when computers were, for me at least, exclusively for\nwork.  I might occasionally dial up a server to get mail or ftp\nfiles, but most of the time I was offline.  All I could do was write\nand program.  Now I feel as if someone snuck a television onto my\ndesk.  Terribly addictive things are just a click away.  Run into\nan obstacle in what you're working on?  Hmm, I wonder what's new\nonline.  Better check.\n\nAfter years of carefully avoiding classic time sinks like TV, games,\nand Usenet, I still managed to fall prey to distraction, because\nI didn't realize that it evolves.  Something that used to be safe,\nusing the Internet, gradually became more and more dangerous.  Some\ndays I'd wake up, get a cup of tea and check the news, then check\nemail, then check the news again, then answer a few emails, then\nsuddenly notice it was almost lunchtime and I hadn't gotten any real\nwork done.  And this started to happen more and more often.\n\nIt took me surprisingly long to realize how distracting the Internet\nhad become, because the problem was intermittent.  I ignored it the\nway you let yourself ignore a bug that only appears intermittently.  When\nI was in the middle of a project, distractions weren't really a\nproblem.  It was when I'd finished one project and was deciding\nwhat to do next that they always bit me.\n\nAnother reason it was hard to notice the danger of this new type\nof distraction was that social customs hadn't yet caught up with\nit.  If I'd spent a whole morning sitting on a sofa watching TV,\nI'd have noticed very quickly.  That's a known danger sign, like\ndrinking alone.  But using the Internet still looked and felt a \nlot like work.\n\nEventually, though, it became clear that the Internet had become so much\nmore distracting that I had to start treating it differently.\nBasically, I had to add a new application to my list of known time\nsinks: Firefox.\n\n* * *\n\nThe problem is a hard one to solve because most people still need\nthe Internet for some things.  If you drink too much, you can solve\nthat problem by stopping entirely.  But you can't solve the problem\nof overeating by stopping eating.  I couldn't simply avoid the \nInternet entirely, as I'd done with previous time sinks.\n\nAt first I tried rules.  For example, I'd tell myself I was only\ngoing to use the Internet twice a day.  But these schemes never\nworked for long.  Eventually something would come up that required\nme to use it more than that.  And then I'd gradually slip back\ninto my old ways.\n\nAddictive things have to be treated as if they were sentient\nadversaries\u2014as if there were a little man in your head always\ncooking up the most plausible arguments for doing whatever you're\ntrying to stop doing.  If you leave a path to it, he'll find it.\n\nThe key seems to be visibility.  The biggest ingredient in most bad habits\nis denial.  So you have to make it so that you can't merely slip\ninto doing the thing you're trying to avoid.  It has to set off\nalarms.\n\nMaybe in the long term the right answer for dealing with Internet\ndistractions will be \nsoftware that watches and controls them.  But\nin the meantime I've found a more drastic solution that definitely\nworks: to set up a separate computer for using the Internet.\n\nI now leave wifi turned off on my main computer except when I need\nto transfer a file or edit a web page, and I have a separate laptop \non the other side\nof the room that I use to check mail or browse the web.  (Irony of\nironies, it's the computer Steve Huffman wrote Reddit on.  When\nSteve and Alexis auctioned off their old laptops for charity, I\nbought them for the Y Combinator museum.)\n\nMy rule is that I can spend as much time online as I want, as long\nas I do it on that computer.  And this turns out to be enough.  When\nI have to sit on the other side of the room to check email or browse\nthe web, I become much more aware of it.  Sufficiently aware, in\nmy case at least, that it's hard to spend more than about an hour\na day online.\n\nAnd my main computer is now freed for work.  If you try this trick,\nyou'll probably be struck by how different it feels when your\ncomputer is disconnected from the Internet.  It was alarming to me\nhow foreign it felt to sit in front of a computer that could\nonly be used for work, because that showed how much time I must\nhave been wasting.\n\nWow.  All I can do at this computer is work.  Ok, I better work\nthen.\n\nThat's the good part.  Your old bad habits now help you to work.\nYou're used to sitting in front of that computer for hours at a\ntime.   But you can't browse the web or check email now.  What are\nyou going to do?  You can't just sit there.  So you start working.\n\n", "May 2008\n\nAdults lie constantly to kids.  I'm not saying we should stop, but\nI think we should at least examine which lies we tell and why.\n\nThere may also be a benefit to us.  We were all lied to as kids,\nand some of the lies we were told still affect us.  So by studying\nthe ways adults lie to kids, we may be able to clear our heads of\nlies we were told.\n\nI'm using the word \"lie\" in a very general sense: not just overt\nfalsehoods, but also all the more subtle ways we mislead kids.\nThough \"lie\" has negative connotations, I don't mean to suggest we\nshould never do this\u2014just that we should pay attention when\nwe do.\n[1]\n\nOne of the most remarkable things about the way we lie to kids is\nhow broad the conspiracy is.  All adults know what their culture \nlies to kids about: they're the questions you answer \"Ask\nyour parents.\"  If a kid asked who won the World Series in 1982\nor what the atomic weight of carbon was, you could just tell him.\nBut if a kid asks you \"Is there a God?\" or \"What's a prostitute?\"\nyou'll probably say \"Ask your parents.\"\n\nSince we all agree, kids see few cracks in the view of the world\npresented to them.  The biggest disagreements are between parents\nand schools, but even those are small. Schools are careful what\nthey say about controversial topics, and if they do contradict what\nparents want their kids to believe, parents either pressure the\nschool into keeping \nquiet or move their kids to a new school.\n\nThe conspiracy is so thorough that most kids who discover it do so\nonly by discovering internal contradictions in what they're told.\nIt can be traumatic for the ones who wake up during the operation.\nHere's what happened to Einstein:\n\n  Through the reading of popular scientific books I soon reached\n  the conviction that much in the stories of the Bible could not\n  be true.  The consequence was a positively fanatic freethinking\n  coupled with the impression that youth is intentionally being\n  deceived by the state through lies: it was a crushing impression.\n  [2]\n\nI remember that feeling.  By 15 I was convinced the world was corrupt\nfrom end to end.  That's why movies like The Matrix have such\nresonance.  Every kid grows up in a fake world.  In a way it would\nbe easier if the forces behind it were as clearly differentiated\nas a bunch of evil machines, and one could make a clean break just by\ntaking a pill.\n\n\nProtection\n\nIf you ask adults why they lie to kids, the most common reason they\ngive is to protect them.  And kids do need protecting.  The environment\nyou want to create for a newborn child will be quite unlike the\nstreets of a big city.\n\nThat seems so obvious it seems wrong to call it a lie.  It's certainly\nnot a bad lie to tell, to give a baby the impression the world is\nquiet and warm and safe.  But this harmless type of lie can turn\nsour if left unexamined.\n\nImagine if you tried to keep someone in as protected an environment\nas a newborn till age 18.  To mislead someone so grossly about the\nworld would seem not protection but abuse.  That's an extreme\nexample, of course; when parents do that sort of thing it becomes\nnational news.  But you see the same problem on a smaller scale in\nthe malaise teenagers feel in suburbia.\n\nThe main purpose of suburbia is to provide a protected environment\nfor children to grow up in.  And it seems great for 10 year olds.\nI liked living in suburbia when I was 10.  I didn't notice how\nsterile it was.  My whole world was no bigger than a few friends'\nhouses I bicycled to and some woods I ran around in.  On a log scale\nI was midway between crib and globe.  A suburban street was just\nthe right size.  But as I grew older, suburbia started to feel\nsuffocatingly fake.\n\nLife can be pretty good at 10 or 20, but it's often frustrating at\n15.  This is too big a problem to solve here, but certainly one\nreason life sucks at 15 is that kids are trapped in a world designed\nfor 10 year olds.\n\nWhat do parents hope to protect their children from by raising them\nin suburbia?  A friend who moved out of Manhattan said merely that\nher 3 year old daughter \"saw too much.\"  Off the top of my head,\nthat might include: people who are high or drunk, poverty, madness,\ngruesome medical conditions, sexual behavior of various degrees of\noddness, and violent anger.\n\nI think it's the anger that would worry me most if I had a 3 year\nold.  I was 29 when I moved to New York and I was surprised even\nthen.  I wouldn't want a 3 year old to see some of the disputes I\nsaw.  It would be too frightening.  A lot of the things adults\nconceal from smaller children, they conceal because they'd be\nfrightening, not because they want to conceal the existence of such\nthings.  Misleading the child is just a byproduct.\n\nThis seems one of the most justifiable types of lying adults do to\nkids.  But because the lies are indirect we don't keep a very strict\naccounting of them.  Parents know they've concealed the facts about\nsex, and many at some point sit their kids down and explain more.\nBut few tell their kids about the differences between the real world\nand the cocoon they grew up in.  Combine this with the confidence\nparents try to instill in their kids, and every year you get a new\ncrop of 18 year olds who think they know how to run the world.\n\nDon't all 18 year olds think they know how to run the world?  Actually\nthis seems to be a recent innovation, no more than about 100 years old.\nIn preindustrial times teenage kids were junior members of the adult\nworld and comparatively well aware of their shortcomings.  They\ncould see they weren't as strong or skillful as the village smith.\nIn past times people lied to kids about some things more than we\ndo now, but the lies implicit in an artificial, protected environment\nare a recent invention.  Like a lot of new inventions, the rich got\nthis first.  Children of kings and great magnates were the first\nto grow up out of touch with the world.  Suburbia means half the\npopulation can live like kings in that respect.\n\n\nSex (and Drugs)\n\nI'd have different worries about raising teenage kids in New York.\nI'd worry less about what they'd see, and more about what they'd\ndo.  I went to college with a lot of kids who grew up in Manhattan,\nand as a rule they seemed pretty jaded.  They seemed to have lost\ntheir virginity at an average of about 14 and by college had tried\nmore drugs than I'd even heard of.\n\nThe reasons parents don't want their teenage kids having sex are\ncomplex.  There are some obvious dangers: pregnancy and sexually\ntransmitted diseases.  But those aren't the only reasons parents\ndon't want their kids having sex.  The average parents of a 14 year\nold girl would hate the idea of her having sex even if there were\nzero risk of pregnancy or sexually transmitted diseases.\n\nKids can probably sense they aren't being told the whole story.\nAfter all, pregnancy and sexually transmitted diseases are just as\nmuch a problem for adults, and they have sex.\n\nWhat really bothers parents about their teenage kids having sex?\nTheir dislike of the idea is so visceral it's probably inborn.  But\nif it's inborn it should be universal, and there are plenty of\nsocieties where parents don't mind if their teenage kids have\nsex\u2014indeed, where it's normal for 14 year olds to become\nmothers.  So what's going on?  There does seem to be a universal\ntaboo against sex with prepubescent children.  One can imagine\nevolutionary reasons for that.  And I think this is the main reason\nparents in industrialized societies dislike teenage kids having\nsex.  They still think of them as children, even though biologically\nthey're not, so the taboo against child sex still has force.\n\nOne thing adults conceal about sex they also conceal about drugs:\nthat it can cause great pleasure.  That's what makes sex and drugs\nso dangerous. The desire for them can cloud one's judgement\u2014which\nis especially frightening when the judgement being clouded is the\nalready wretched judgement of a teenage kid.\n\nHere parents' desires conflict.  Older societies told kids they had\nbad judgement, but modern parents want their children to be confident.\nThis may well be a better plan than the old one of putting them in\ntheir place, but it has the side effect that after having implicitly\nlied to kids about how good their judgement is, we then have to lie\nagain about all the things they might get into trouble with if they\nbelieved us.\n\nIf parents told their kids the truth about sex and drugs, it would\nbe: the reason you should avoid these things is that you have lousy\njudgement.  People with twice your experience still get burned by\nthem.  But this may be one of those cases where the truth wouldn't\nbe convincing, because one of the symptoms of bad judgement is\nbelieving you have good judgement.  When you're too weak to lift\nsomething, you can tell, but when you're making a decision impetuously,\nyou're all the more sure of it.\n\n\nInnocence\n\nAnother reason parents don't want their kids having sex is that\nthey want to keep them innocent.  Adults have a certain model of\nhow kids are supposed to behave, and it's different from what they\nexpect of other adults.\n\nOne of the most obvious differences is the words kids are allowed\nto use.  Most parents use words when talking to other adults that\nthey wouldn't want their kids using.  They try to hide even the\nexistence of these words for as long as they can.  And this is\nanother of those conspiracies everyone participates in: everyone\nknows you're not supposed to swear in front of kids.\n\nI've never heard more different explanations for anything parents\ntell kids than why they shouldn't swear.  Every parent I know forbids\ntheir children to swear, and yet no two of them have the same\njustification.  It's clear most start with not wanting kids to\nswear, then make up the reason afterward.\n\nSo my theory about what's going on is that the function of\nswearwords is to mark the speaker as an adult.  There's no difference\nin the meaning of \"shit\" and \"poopoo.\"  So why should one be ok for\nkids to say and one forbidden?  The only explanation is: by definition.\n[3]\n\nWhy does it bother adults so much when kids do things reserved for\nadults?   The idea of a foul-mouthed, cynical 10 year old leaning\nagainst a lamppost with a cigarette hanging out of the corner of\nhis mouth is very disconcerting.  But why?\n\nOne reason we want kids to be innocent is that we're programmed to\nlike certain kinds of helplessness.  I've several times heard mothers\nsay they deliberately refrained from correcting their young children's\nmispronunciations because they were so cute.  And if you think about\nit, cuteness is helplessness. Toys and cartoon characters meant to\nbe cute always have clueless expressions and stubby, ineffectual\nlimbs.\n\nIt's not surprising we'd have an inborn desire to love and protect\nhelpless creatures, considering human offspring are so helpless for\nso long.  Without the helplessness that makes kids cute, they'd be\nvery annoying.  They'd merely seem like incompetent adults.  But\nthere's more to it than that.  The reason our hypothetical jaded\n10 year old bothers me so much is not just that he'd be annoying,\nbut that he'd have cut off his prospects for growth so early.  To\nbe jaded you have to think you know how the world works, and any\ntheory a 10 year old had about that would probably be a pretty\nnarrow one.\n\nInnocence is also open-mindedness.  We want kids to be innocent so\nthey can continue to learn.  Paradoxical as it sounds, there are\nsome kinds of knowledge that get in the way of other kinds of\nknowledge.  If you're going to learn that the world is a brutal\nplace full of people trying to take advantage of one another, you're\nbetter off learning it last.  Otherwise you won't bother learning\nmuch more.\n\nVery smart adults often seem unusually innocent, and I don't think\nthis is a coincidence.  I think they've deliberately avoided learning\nabout certain things.  Certainly I do.  I used to think I wanted\nto know everything.  Now I know I don't.\n\n\nDeath\n\nAfter sex, death is the topic adults lie most conspicuously about\nto kids.  Sex I believe they conceal because of deep taboos.  But\nwhy do we conceal death from kids?   Probably because small children\nare particularly horrified by it.  They want to feel safe, and death\nis the ultimate threat.\n\nOne of the most spectacular lies our parents told us was about the\ndeath of our first cat.  Over the years, as we asked for more\ndetails, they were compelled to invent more, so the story grew quite\nelaborate.  The cat had died at the vet's office.  Of what?  Of the\nanaesthesia itself.  Why was the cat at the vet's office?  To be\nfixed.  And why had such a routine operation killed it?  It wasn't\nthe vet's fault; the cat had a congenitally weak heart; the anaesthesia\nwas too much for it; but there was no way anyone could have\nknown this in advance.  It was not till we were in our twenties\nthat the truth came out: my sister, then about three, had accidentally\nstepped on the cat and broken its back.\n\nThey didn't feel the need to tell us the cat was now happily in cat\nheaven.  My parents never claimed that people or animals who died\nhad \"gone to a better place,\" or that we'd meet them again.  It\ndidn't seem to harm us.\n\nMy grandmother told us an edited version of the death of my\ngrandfather.  She said they'd been sitting reading one day, and\nwhen she said something to him, he didn't answer.  He seemed to be\nasleep, but when she tried to rouse him, she couldn't.  \"He was\ngone.\" Having a heart attack sounded like falling asleep.  Later I\nlearned it hadn't been so neat, and the heart attack had taken most\nof a day to kill him.\n\nAlong with such outright lies, there must have been a lot of changing\nthe subject when death came up.  I can't remember that, of course,\nbut I can infer it from the fact that I didn't really grasp I was\ngoing to die till I was about 19.  How could I have missed something\nso obvious for so long?  Now that I've seen parents managing the\nsubject, I can see how: questions about death are gently but firmly\nturned aside.\n\nOn this topic, especially, they're met half-way by kids.  Kids often\nwant to be lied to.  They want to believe they're living in a\ncomfortable, safe world as much as their parents want them to believe\nit.\n[4]\n\n\nIdentity\n\nSome parents feel a strong adherence to an ethnic or religious group\nand want their kids to feel it too.  This usually requires two\ndifferent kinds of lying: the first is to tell the child that he\nor she is an X, and the second is whatever specific lies Xes\ndifferentiate themselves by believing.\n[5]\n\nTelling a child they have a particular ethnic or religious identity\nis one of the stickiest things you can tell them.  Almost anything\nelse you tell a kid, they can change their mind about later when\nthey start to think for themselves.  But if you tell a kid they're\na member of a certain group, that seems nearly impossible to shake.\n\nThis despite the fact that it can be one of the most premeditated\nlies parents tell.  When parents are of different religions, they'll\noften agree between themselves that their children will be \"raised\nas Xes.\"  And it works. The kids obligingly grow up considering\nthemselves as Xes, despite the fact that if their parents had chosen\nthe other way, they'd have grown up considering themselves as Ys.\n\nOne reason this works so well is the second kind of lie involved.\nThe truth is common property.  You can't distinguish your group by\ndoing things that are rational, and believing things that are true.\nIf you want to set yourself apart from other people, you have to\ndo things that are arbitrary, and believe things that are false.\nAnd after having spent their whole lives doing things that are arbitrary\nand believing things that are false, and being regarded as odd by\n\"outsiders\" on that account, the cognitive dissonance pushing\nchildren to regard themselves as Xes must be enormous.  If they\naren't an X, why are they attached to all these arbitrary beliefs\nand customs?  If they aren't an X, why do all the non-Xes call them\none?\n\nThis form of lie is not without its uses.  You can use it to carry\na payload of beneficial beliefs, and they will also become part of\nthe child's identity.  You can tell the child that in addition to\nnever wearing the color yellow, believing the world was created by\na giant rabbit, and always snapping their fingers before eating\nfish, Xes are also particularly honest and industrious.  Then X\nchildren will grow up feeling it's part of their identity to be\nhonest and industrious.\n\nThis probably accounts for a lot of the spread of modern religions,\nand explains why their doctrines are a combination of the useful\nand the bizarre.  The bizarre half is what makes the religion stick,\nand the useful half is the payload.\n[6]\n\n\nAuthority\n\nOne of the least excusable reasons adults lie to kids is to maintain\npower over them.  Sometimes these lies are truly sinister, like a\nchild molester telling his victims they'll get in trouble if they\ntell anyone what happened to them.  Others seem more innocent; it\ndepends how badly adults lie to maintain their power, and what they\nuse it for.\n\nMost adults make some effort to conceal their flaws from children.\nUsually their motives are mixed.  For example, a father who has an\naffair generally conceals it from his children.  His motive is\npartly that it would worry them, partly that this would introduce\nthe topic of sex, and partly (a larger part than he would admit)\nthat he doesn't want to tarnish himself in their eyes.\n\nIf you want to learn what lies are told to kids, read almost any\nbook written to teach them about \"issues.\"\n[7]\nPeter Mayle wrote\none called Why Are We Getting a Divorce?  It begins with the three\nmost important things to remember about divorce, one of which is:\n\n  You shouldn't put the blame on one parent, because divorce is\n  never only one person's fault.\n  [8]\n\nReally?  When a man runs off with his secretary, is it always partly\nhis wife's fault?  But I can see why Mayle might have said this.\nMaybe it's more important for kids to respect their parents than\nto know the truth about them.\n\nBut because adults conceal their flaws, and at the same time insist\non high standards of behavior for kids, a lot of kids grow up feeling\nthey fall hopelessly short.  They walk around feeling horribly evil\nfor having used a swearword, while in fact most of the adults around\nthem are doing much worse things.\n\nThis happens in intellectual as well as moral questions.  The more\nconfident people are, the more willing they seem to be to answer a\nquestion \"I don't know.\"  Less confident people feel they have to\nhave an answer or they'll look bad.  My parents were pretty good\nabout admitting when they didn't know things, but I must have been\ntold a lot of lies of this type by teachers, because I rarely heard\na teacher say \"I don't know\" till I got to college.  I remember\nbecause it was so surprising to hear someone say that in front of\na class.\n\nThe first hint I had that teachers weren't omniscient came in sixth\ngrade, after my father contradicted something I'd learned in school.\nWhen I protested that the teacher had said the opposite, my father\nreplied that the guy had no idea what he was talking about\u2014that\nhe was just an elementary school teacher, after all.\n\nJust a teacher?  The phrase seemed almost grammatically ill-formed.\nDidn't teachers know everything about the subjects they taught?\nAnd if not, why were they the ones teaching us?\n\nThe sad fact is, US public school teachers don't generally understand\nthe stuff they're teaching very well.  There are some sterling\nexceptions, but as a rule people planning to go into teaching rank\nacademically near the bottom of the college population.  So the\nfact that I still thought at age 11 that teachers were infallible\nshows what a job the system must have done on my brain.\n\n\nSchool\n\nWhat kids get taught in school is a complex mix of lies.  The most\nexcusable are those told to simplify ideas to make them easy to\nlearn.  The problem is, a lot of propaganda gets slipped into the\ncurriculum in the name of simplification.\n\nPublic school textbooks represent a compromise between what various\npowerful groups want kids to be told.  The lies are rarely overt.\nUsually they consist either of omissions or of over-emphasizing\ncertain topics at the expense of others.  The view of history we\ngot in elementary school was a crude hagiography, with at least one\nrepresentative of each powerful group.\n\nThe famous scientists I remember were Einstein, Marie Curie, and\nGeorge Washington Carver.   Einstein was a big deal because his\nwork led to the atom bomb.  Marie Curie was involved with X-rays.\nBut I was mystified about Carver.  He seemed to have done stuff\nwith peanuts.\n\nIt's obvious now that he was on the list because he was black (and\nfor that matter that Marie Curie was on it because she was a woman),\nbut as a kid I was confused for years about him.  I wonder if it\nwouldn't have been better just to tell us the truth: that there\nweren't any famous black scientists.  Ranking George Washington\nCarver with Einstein misled us not only about science, but about\nthe obstacles blacks faced in his time.\n\nAs subjects got softer, the lies got more frequent.  By the time\nyou got to politics and recent history, what we were taught was\npretty much pure propaganda.  For example, we were taught to regard\npolitical leaders as saints\u2014especially the recently martyred\nKennedy and King.  It was astonishing to learn later that they'd\nboth been serial womanizers, and that Kennedy was a speed freak to\nboot.  (By the time King's plagiarism emerged, I'd lost the ability\nto be surprised by the misdeeds of famous people.)\n\nI doubt you could teach kids recent history without teaching them\nlies, because practically everyone who has anything to say about\nit has some kind of spin to put on it.  Much recent history consists\nof spin.  It would probably be better just to teach them metafacts\nlike that.\n\nProbably the biggest lie told in schools, though, is that the way\nto succeed is through following \"the rules.\"  In fact most such\nrules are just hacks to manage large groups efficiently.\n\n\nPeace\n\nOf all the reasons we lie to kids, the most powerful is probably\nthe same mundane reason they lie to us.\n\nOften when we lie to people it's not part of any conscious strategy,\nbut because they'd react violently to the truth.  Kids, almost by\ndefinition, lack self-control.  They react violently to things\u2014and\nso they get lied to a lot. \n[9]\n\nA few Thanksgivings ago, a friend of mine found himself in a situation\nthat perfectly illustrates the complex motives we have when we lie\nto kids.  As the roast turkey appeared on the table, his alarmingly\nperceptive 5 year old son suddenly asked if the turkey had wanted\nto die.  Foreseeing disaster, my friend and his wife rapidly\nimprovised: yes, the turkey had wanted to die, and in fact had lived\nits whole life with the aim of being their Thanksgiving dinner.\nAnd that (phew) was the end of that.\n\nWhenever we lie to kids to protect them, we're usually also lying\nto keep the peace.\n\nOne consequence of this sort of calming lie is that we grow up\nthinking horrible things are normal.  It's hard for us to feel a\nsense of urgency as adults over something we've literally been\ntrained not to worry about.  When I was about 10 I saw a documentary\non pollution that put me into a panic.  It seemed the planet was\nbeing irretrievably ruined.  I went to my mother afterward to ask\nif this was so.  I don't remember what she said, but she made me\nfeel better, so I stopped worrying about it.\n\nThat was probably the best way to handle a frightened 10 year old.\nBut we should understand the price.  This sort of lie is one of the\nmain reasons bad things persist: we're all trained to ignore them.\n\n\nDetox\n\nA sprinter in a race almost immediately enters a state called \"oxygen\ndebt.\"  His body switches to an emergency source of energy that's\nfaster than regular aerobic respiration.  But this process builds\nup waste products that ultimately require extra oxygen to break\ndown, so at the end of the race he has to stop and pant for a while\nto recover.\n\nWe arrive at adulthood with a kind of truth debt.  We were told a\nlot of lies to get us (and our parents) through our childhood.  Some\nmay have been necessary.  Some probably weren't.  But we all arrive\nat adulthood with heads full of lies.\n\nThere's never a point where the adults sit you down and explain all\nthe lies they told you.  They've forgotten most of them.  So if\nyou're going to clear these lies out of your head, you're going to\nhave to do it yourself.\n\nFew do.  Most people go through life with bits of packing material\nadhering to their minds and never know it.  You probably never can\ncompletely undo the effects of lies you were told as a kid, but\nit's worth trying.  I've found that whenever I've been able to undo\na lie I was told, a lot of other things fell into place.\n\nFortunately, once you arrive at adulthood you get a valuable new\nresource you can use to figure out what lies you were told.  You're\nnow one of the liars.  You get to watch behind the scenes as adults\nspin the world for the next generation of kids.\n\nThe first step in clearing your head is to realize how far you are\nfrom a neutral observer.  When I left high school I was, I thought,\na complete skeptic.  I'd realized high school was crap.  I thought\nI was ready to question everything I knew.  But among the many other\nthings I was ignorant of was how much debris there already was in\nmy head.  It's not enough to consider your mind a blank slate.  You\nhave to consciously erase it.\n\n\n\n\n\n\nNotes\n\n[1]\nOne reason I stuck with such a brutally simple word is that\nthe lies we tell kids are probably not quite as harmless as we\nthink.  If you look at what adults told children in the past, it's\nshocking how much they lied to them.  Like us, they did it with the\nbest intentions.  So if we think we're as open as one could reasonably\nbe with children, we're probably fooling ourselves.  Odds are people\nin 100 years will be as shocked at some of the lies we tell as we\nare at some of the lies people told 100 years ago.\n\nI can't predict which these will be, and I don't want to write an\nessay that will seem dumb in 100 years.  So instead of using special\neuphemisms for lies that seem excusable according to present fashions,\nI'm just going to call all our lies lies.\n\n(I have omitted one type: lies told to play games with kids'\ncredulity.  These range from \"make-believe,\" which is not really a\nlie because it's told with a wink, to the frightening lies told by\nolder siblings.   There's not much to say about these: I wouldn't\nwant the first type to go away, and wouldn't expect the second type\nto.)\n\n[2]\nCalaprice, Alice (ed.), The Quotable Einstein, Princeton\nUniversity Press, 1996.\n\n[3]\nIf you ask parents why kids shouldn't swear, the less educated\nones usually reply with some question-begging answer like \"it's\ninappropriate,\" while the more educated ones come up with elaborate\nrationalizations.  In fact the less educated parents seem closer\nto the truth.\n\n[4]\nAs a friend with small children pointed out, it's easy for small\nchildren to consider themselves immortal, because time seems to\npass so slowly for them.  To a 3 year old, a day feels like a month\nmight to an adult.  So 80 years sounds to him like 2400 years would\nto us.\n\n[5]\nI realize I'm going to get endless grief for classifying religion\nas a type of lie.  Usually people skirt that issue with some\nequivocation implying that lies believed for a sufficiently long\ntime by sufficiently large numbers of people are immune to the usual\nstandards for truth.  But because I can't predict which lies future\ngenerations will consider inexcusable, I can't safely omit any type\nwe tell.  Yes, it seems unlikely that religion will be out of fashion\nin 100 years, but no more unlikely than it would have seemed to\nsomeone in 1880 that schoolchildren in 1980 would be taught that\nmasturbation was perfectly normal and not to feel guilty about it.\n\n[6]\nUnfortunately the payload can consist of bad customs as well\nas good ones.  For example, there are certain qualities that some\ngroups in America consider \"acting white.\"  In fact most of them\ncould as accurately be called \"acting Japanese.\"  There's nothing\nspecifically white about such customs. They're common to all cultures\nwith long traditions of living in cities.  So it is probably a\nlosing bet for a group to consider behaving the opposite way as\npart of its identity.\n\n[7]\nIn this context, \"issues\" basically means \"things we're going\nto lie to them about.\"  That's why there's a special name for these\ntopics.\n\n[8]\nMayle, Peter, Why Are We Getting a Divorce?, Harmony, 1988.\n\n[9]\nThe ironic thing is, this is also the main reason kids lie to\nadults.  If you freak out when people tell you alarming things,\nthey won't tell you them.  Teenagers don't tell their parents what\nhappened that night they were supposed to be staying at a friend's\nhouse for the same reason parents don't tell 5 year olds the truth\nabout the Thanksgiving turkey.  They'd freak if they knew.\n\n\nThanks to Sam Altman, Marc Andreessen, Trevor Blackwell,\nPatrick Collison, Jessica Livingston, Jackie McDonough, Robert\nMorris, and David Sloo for reading drafts of this.  And since there\nare some controversial ideas here, I should add that none of them\nagreed with everything in it.\n\n", "April 2008\n\n(This essay is derived from a talk at the 2008 Startup School.)\n\nAbout a month after we started Y Combinator we came up with the\nphrase that became our motto: Make something people want.  We've\nlearned a lot since then, but if I were choosing now that's still\nthe one I'd pick.\n\nAnother thing we tell founders is not to worry too much about the\nbusiness model, at least at first.  Not because making money is\nunimportant, but because it's so much easier than building something\ngreat.\n\nA couple weeks ago I realized that if you put those two ideas\ntogether, you get something surprising.  Make something people want.\nDon't worry too much about making money.  What you've got is a\ndescription of a charity.\n\nWhen you get an unexpected result like this, it could either be a\nbug or a new discovery.  Either businesses aren't supposed to be\nlike charities, and we've proven by reductio ad absurdum that one\nor both of the principles we began with is false.  Or we have a new\nidea.\n\nI suspect it's the latter, because as soon as this thought occurred\nto me, a whole bunch of other things fell into place.\n\nExamples\n\nFor example, Craigslist.  It's not a charity, but they run it like\none.  And they're astoundingly successful.  When you scan down the\nlist of most popular web sites, the number of employees at Craigslist\nlooks like a misprint. Their revenues aren't as high as they could\nbe, but most startups would be happy to trade places with them.\n\nIn Patrick O'Brian's novels, his captains always try to get upwind\nof their opponents.  If you're upwind, you decide when and if to\nengage the other ship.  Craigslist is effectively upwind of enormous\nrevenues.  They'd face some challenges if they wanted to make more,\nbut not the sort you face when you're tacking upwind, trying to\nforce a crappy product on ambivalent users by spending ten times\nas much on sales as on development.  [1]\n\nI'm not saying startups should aim to end up like Craigslist.\nThey're a product of unusual circumstances.  But they're a good\nmodel for the early phases.\n\nGoogle looked a lot like a charity in the beginning. They didn't\nhave ads for over a year.  At year 1, Google was indistinguishable\nfrom a nonprofit.  If a nonprofit or government organization had\nstarted a project to index the web, Google at year 1 is the limit\nof what they'd have produced.\n\nBack when I was working on spam filters I thought it would be a\ngood idea to have a web-based email service with good spam filtering.\nI wasn't thinking of it as a company.  I just wanted to keep people\nfrom getting spammed.  But as I thought more about this project, I\nrealized it would probably have to be a company.  It would cost\nsomething to run, and it would be a pain to fund with grants and\ndonations.\n\nThat was a surprising realization.  Companies often claim to be\nbenevolent, but it was surprising to realize there were purely\nbenevolent projects that had to be embodied as companies to work.\n\nI didn't want to start another company, so I didn't do it.  But if\nsomeone had, they'd probably be quite rich now.  There was a window\nof about two years when spam was increasing rapidly but all the big\nemail services had terrible filters.  If someone had launched a\nnew, spam-free mail service, users would have flocked to it.\n\nNotice the pattern here?  From either direction we get to the same\nspot.  If you start from successful startups, you find they often\nbehaved like nonprofits.  And if you start from ideas for nonprofits,\nyou find they'd often make good startups.\n\nPower\n\nHow wide is this territory?  Would all good nonprofits be good\ncompanies?  Possibly not.  What makes Google so valuable is that\ntheir users have money.  If you make people with money love you,\nyou can probably get some of it.  But could you also base a successful\nstartup on behaving like a nonprofit to people who don't have money?\nCould you, for example, grow a successful startup out of curing an\nunfashionable but deadly disease like malaria?\n\nI'm not sure, but I suspect that if you pushed this idea, you'd be\nsurprised how far it would go.  For example, people who apply to Y\nCombinator don't generally have much money, and yet we can profit\nby helping them, because with our help they could make money.  Maybe\nthe situation is similar with malaria.  Maybe an organization that\nhelped lift its weight off a country could benefit from the resulting\ngrowth.\n\nI'm not proposing this is a serious idea.  I don't know anything\nabout malaria.  But I've been kicking ideas around long enough to\nknow when I come across a powerful one.\n\nOne way to guess how far an idea extends is to ask yourself at what\npoint you'd bet against it.  The thought of betting against benevolence\nis alarming in the same way as saying that something is technically\nimpossible.  You're just asking to be made a fool of, because these\nare such powerful forces.  [2]\n\nFor example, initially I thought maybe this principle only applied\nto Internet startups.  Obviously it worked for Google, but what\nabout Microsoft?  Surely Microsoft isn't benevolent?  But when I\nthink back to the beginning, they were.  Compared to IBM they were\nlike Robin Hood.  When IBM introduced the PC, they thought they\nwere going to make money selling hardware at high prices.  But by\ngaining control of the PC standard, Microsoft opened up the market\nto any manufacturer.  Hardware prices plummeted, and lots of people\ngot to have computers who couldn't otherwise have afforded them.\nIt's the sort of thing you'd expect Google to do.\n\nMicrosoft isn't so benevolent now.  Now when one thinks of what\nMicrosoft does to users, all the verbs that come to mind begin with\nF.  [3] And yet it doesn't seem to pay.\nTheir stock price has been flat for years.  Back when they were\nRobin Hood, their stock price rose like Google's.  Could there be\na connection?\n\nYou can see how there would be.  When you're small, you can't bully\ncustomers, so you have to charm them.  Whereas when you're big you\ncan maltreat them at will, and you tend to, because it's easier\nthan satisfying them.  You grow big by being nice, but you can stay\nbig by being mean.\n\nYou get away with it till the underlying conditions change, and\nthen all your victims escape.  So \"Don't be evil\" may be the most\nvaluable thing Paul Buchheit made for Google, because it may turn\nout to be an elixir of corporate youth.  I'm sure they find it\nconstraining, but think how valuable it will be if it saves them\nfrom lapsing into the fatal laziness that afflicted Microsoft and\nIBM.\n\nThe curious thing is, this elixir is freely available to any other\ncompany.  Anyone can adopt \"Don't be evil.\"  The catch is that\npeople will hold you to it.  So I don't think you're going to see\nrecord labels or tobacco companies using this discovery.\n\nMorale\n\nThere's a lot of external evidence that benevolence works.  But how\ndoes it work?  One advantage of investing in a large number of\nstartups is that you get a lot of data about how they work.  From\nwhat we've seen, being good seems to help startups in three ways:\nit improves their morale, it makes other people want to help them,\nand above all, it helps them be decisive.\n\nMorale is tremendously important to a startup\u2014so important\nthat morale alone is almost enough to determine success.  Startups\nare often described as emotional roller-coasters. One minute you're\ngoing to take over the world, and the next you're doomed.  The\nproblem with feeling you're doomed is not just that it makes you\nunhappy, but that it makes you stop working.  So the downhills\nof the roller-coaster are more of a self fulfilling prophecy than\nthe uphills.  If feeling you're going to succeed makes you work\nharder, that probably improves your chances of succeeding, but if\nfeeling you're going to fail makes you stop working, that practically\nguarantees you'll fail.\n\nHere's where benevolence comes in.  If you feel you're really helping\npeople, you'll keep working even when it seems like your startup\nis doomed.  Most of us have some amount of natural benevolence.\nThe mere fact that someone needs you makes you want to help them.\nSo if you start the kind of startup where users come back each day,\nyou've basically built yourself a giant tamagotchi.  You've made\nsomething you need to take care of.\n\nBlogger is a famous example of a startup that went through really\nlow lows and survived.  At one point they ran out of money and\neveryone left. Evan Williams came in to work the next day, and there\nwas no one but him.  What kept him going?  Partly that users needed\nhim.  He was hosting thousands of people's blogs. He couldn't just\nlet the site die.\n\nThere are many advantages of launching quickly, but the most important\nmay be that once you have users, the tamagotchi effect kicks in.\nOnce you have users to take care of, you're forced to figure out\nwhat will make them happy, and that's actually very valuable\ninformation.\n\nThe added confidence that comes from trying to help people can\nalso help you with investors. One of the founders of \nChatterous told \nme recently that he and his cofounder had decided that this service\nwas something the world needed, so they were going to keep working\non it no matter what, even if they had to move back to Canada and live\nin their parents' basements.\n\nOnce they realized this, they stopped caring so much what investors thought\nabout them.  They still met with them, but they weren't going to\ndie if they didn't get their money.  And you know what?  The investors\ngot a lot more interested.  They could sense that the Chatterouses\nwere going to do this startup with or without them.\n\nIf you're really committed and your startup is cheap to run, you\nbecome very hard to kill.  And practically all startups, even the\nmost successful, come close to death at some point.  So if doing\ngood for people gives you a sense of mission that makes you harder\nto kill, that alone more than compensates for whatever you lose by\nnot choosing a more selfish project.\n\nHelp\n\nAnother advantage of being good is that it makes other people want\nto help you.  This too seems to be an inborn trait in humans.\n\nOne of the startups we've funded, Octopart, is currently locked in\na classic battle of good versus evil.  They're a search site for\nindustrial components.  A lot of people need to search for components,\nand before Octopart there was no good way to do it.  That, it turned\nout, was no coincidence.\n\nOctopart built the right way to search for components.  Users like\nit and they've been growing rapidly.  And yet for most of Octopart's\nlife, the biggest distributor, Digi-Key, has been trying to force\nthem take their prices off the site.  Octopart is sending them\ncustomers for free, and yet Digi-Key is trying to make that traffic\nstop.  Why?  Because their current business model depends on\novercharging people who have incomplete information about prices.\nThey don't want search to work.\n\nThe Octoparts are the nicest guys in the world.  They dropped out\nof the PhD program in physics at Berkeley to do this.  They just\nwanted to fix a problem they encountered in their research.  Imagine\nhow much time you could save the world's engineers if they could\ndo searches online.  So when I hear that a big, evil company is\ntrying to stop them in order to keep search broken, it makes me\nreally want to help them. It makes me spend more time on the Octoparts\nthan I do with most of the other startups we've funded.  It just\nmade me spend several minutes telling you how great they are.  Why?\nBecause they're good guys and they're trying to help the world.\n\nIf you're benevolent, people will rally around you: investors,\ncustomers, other companies, and potential employees.  In the long\nterm the most important may be the potential employees.  I think\neveryone knows now that \ngood hackers are much better than mediocre\nones.  If you can attract the best hackers to work for you, as\nGoogle has, you have a big advantage.  And the very best hackers\ntend to be idealistic.  They're not desperate for a job.  They can\nwork wherever they want.  So most want to work on things that will\nmake the world better.\n\nCompass\n\nBut the most important advantage of being good is that it acts as\na compass.  One of the hardest parts of doing a startup is that you\nhave so many choices.  There are just two or three of you, and a\nthousand things you could do. How do you decide?\n\nHere's the answer: Do whatever's best for your users.  You can hold\nonto this like a rope in a hurricane, and it will save you if\nanything can.  Follow it and it will take you through everything\nyou need to do.\n\nIt's even the answer to questions that seem unrelated, like how to\nconvince investors to give you money.  If you're a good salesman,\nyou could try to just talk them into it.  But the more reliable\nroute is to convince them through your users: if you make something\nusers love enough to tell their friends, you grow exponentially,\nand that will convince any investor.\n\nBeing good is a particularly useful strategy for making decisions\nin complex situations because it's stateless.  It's like telling\nthe truth.  The trouble with lying is that you have to remember\neverything you've said in the past to make sure you don't contradict\nyourself.  If you tell the truth you don't have to remember anything,\nand that's a really useful property in domains where things happen\nfast.\n\nFor example, Y Combinator has now invested in 80 startups, 57 of\nwhich are still alive.  (The rest have died or merged or been\nacquired.)  When you're trying to advise 57 startups, it turns out\nyou have to have a stateless algorithm.  You can't have ulterior\nmotives when you have 57 things going on at once, because you can't\nremember them.  So our rule is just to do whatever's best for the\nfounders.  Not because we're particularly benevolent, but because\nit's the only algorithm that works on that scale.\n\nWhen you write something telling people to be good, you seem to be\nclaiming to be good yourself.  So I want to say explicitly that I\nam not a particularly good person.  When I was a kid I was firmly\nin the camp of bad.  The way adults used the word good, it seemed\nto be synonymous with quiet, so I grew up very suspicious of it.\n\nYou know how there are some people whose names come up in conversation\nand everyone says \"He's such a great guy?\"  People never say\nthat about me.  The best I get is \"he means well.\"  I am not claiming\nto be good.  At best I speak good as a second language.\n\nSo I'm not suggesting you be good in the usual sanctimonious way.\nI'm suggesting it because it works.  It will work not just as a\nstatement of \"values,\" but as a guide to strategy,\nand even a design spec for software.  Don't just not be evil.  Be\ngood.\n\n\n\n\n\nNotes\n\n[1] Fifty years ago\nit would have seemed shocking for a public company not to pay\ndividends.  Now many tech companies don't.  The markets seem to\nhave figured out how to value potential dividends.  Maybe that isn't\nthe last step in this evolution.  Maybe markets will eventually get\ncomfortable with potential earnings. (VCs already are, and at least\nsome of them consistently make money.)\n\nI realize this sounds like the stuff one used to hear about the\n\"new economy\" during the Bubble.  Believe me, I was not drinking\nthat kool-aid at the time.  But I'm convinced there were some \ngood\nideas buried in Bubble thinking.  For example, it's ok to focus on\ngrowth instead of profits\u2014but only if the growth is genuine.\nYou can't be buying users; that's a pyramid scheme.   But a company\nwith rapid, genuine growth is valuable, and eventually markets learn\nhow to value valuable things.\n\n[2] The idea of starting\na company with benevolent aims is currently undervalued, because\nthe kind of people who currently make that their explicit goal don't\nusually do a very good job.\n\nIt's one of the standard career paths of trustafarians to start\nsome vaguely benevolent business.  The problem with most of them\nis that they either have a bogus political agenda or are feebly\nexecuted.  The trustafarians' ancestors didn't get rich by preserving\ntheir traditional culture; maybe people in Bolivia don't want to\neither.  And starting an organic farm, though it's at least\nstraightforwardly benevolent, doesn't help people on the scale that\nGoogle does.\n\nMost explicitly benevolent projects don't hold themselves sufficiently\naccountable.  They act as if having good intentions were enough to\nguarantee good effects.\n\n[3] Users dislike their\nnew operating system so much that they're starting petitions to\nsave the old one.  And the old one was nothing special.  The hackers\nwithin Microsoft must know in their hearts that if the company\nreally cared about users they'd just advise them to switch to OSX.\n\nThanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston,\nand Robert Morris for reading drafts of this.\n\n\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nApril 2008\n", "April 2008\n\nThere are some topics I save up because they'll be so much fun to\nwrite about.  This is one of them: a list of my heroes.\n\nI'm not claiming this is a list of the n most admirable people.\nWho could make such a list, even if they wanted to?\n\nEinstein isn't on the list, for example, even though he probably\ndeserves to be on any shortlist of admirable people.  I once asked\na physicist friend if Einstein was really as smart as his fame\nimplies, and she said that yes, he was.  So why isn't he on the\nlist?  Because I had to ask.  This is a list of people who've\ninfluenced me, not people who would have if I understood their work.\n\nMy test was to think of someone and ask \"is this person my\nhero?\"  It often returned surprising answers.  For example,\nit returned false for Montaigne, who was arguably the inventor of\nthe essay.  Why?  When I thought\nabout what it meant to call someone a hero, it meant I'd decide what\nto do by asking what they'd do in the same situation.  That's a \nstricter standard than admiration.\n\nAfter I made the list, I looked to see if there was a pattern, and\nthere was, a very clear one.  Everyone on the list had two qualities:\nthey cared almost excessively about their work, and they were\nabsolutely honest.  By honest I don't mean trustworthy so much as\nthat they never pander: they never say or do something because\nthat's what the audience wants.  They are all fundamentally subversive\nfor this reason, though they conceal it to varying degrees.\n\n\nJack Lambert\n\nI grew up in Pittsburgh in the 1970s.  Unless you were there it's\nhard to imagine how that town felt about the Steelers.   Locally,\nall the news was bad.  The steel industry was dying.  But the\nSteelers were the best team in football \u2014 and moreover, in a\nway that seemed to reflect the personality of the city.  They didn't\ndo anything fancy.  They just got the job done.\n\nOther players were more famous: Terry Bradshaw, Franco Harris, Lynn\nSwann.  But they played offense, and you always get more attention\nfor that.  It seemed to me as a twelve year old football expert\nthat the best of them all was \nJack Lambert.  And what made him so\ngood was that he was utterly relentless.  He didn't just care about\nplaying well; he cared almost too much.  He seemed to regard it as\na personal insult when someone from the other team had possession\nof the ball on his side of the line of scrimmage.\n\nThe suburbs of Pittsburgh in the 1970s were a pretty dull place.\nSchool was boring.  All the adults around were bored with their\njobs working for big companies. Everything that came to us through\nthe mass media was (a) blandly uniform and (b) produced elsewhere.\nJack Lambert was the exception.  He was like nothing else I'd seen.\n\n\nKenneth Clark\n\nKenneth Clark is the best nonfiction writer I know of, on any\nsubject.  Most people who write about art history don't really like\nart; you can tell from a thousand little signs.  But Clark did, and\nnot just intellectually, but the way one anticipates a delicious\ndinner.\n\nWhat really makes him stand out, though, is the quality of his\nideas.  His style is deceptively casual, but there is more in \nhis books than in a library\nof art monographs.  Reading \nThe Nude is like a ride in a\nFerrari.  Just as you're getting settled, you're slammed back in\nyour seat by the acceleration.  Before you can adjust, you're thrown\nsideways as the car screeches into the first turn.  His brain throws\noff ideas almost too fast to grasp them.  Finally at the end of the\nchapter you come to a halt, with your eyes wide and a big smile on\nyour face.\n\nKenneth Clark was a star in his day, thanks to the documentary\nseries \nCivilisation.  And if you read only one book about\nart history, \nCivilisation is the one I'd recommend.  It's\nmuch better than the drab Sears Catalogs of art that undergraduates\nare forced to buy for Art History 101.\n\n\nLarry Mihalko\n\nA lot of people have a great teacher at some point in their childhood.\nLarry Mihalko was mine.  When I look back it's like there's a line\ndrawn between third and fourth grade.  After Mr. Mihalko, everything\nwas different.\n\nWhy?  First of all, he was intellectually curious.  I had a few\nother teachers who were smart, but I wouldn't describe them as\nintellectually curious.  In retrospect, he was out of place as an\nelementary school teacher, and I think he knew it.  That must have\nbeen hard for him, but it was wonderful for us, his students.  His\nclass was a constant adventure.  I used to like going to school\nevery day.\n\nThe other thing that made him different was that he liked us.  Kids\nare good at telling that.  The other teachers were at best benevolently\nindifferent.  But Mr.  Mihalko seemed like he actually wanted to\nbe our friend.  On the last day of fourth grade, he got out one of\nthe heavy school record players and played James Taylor's \"You've\nGot a Friend\" to us.  Just call out my name, and you know wherever\nI am, I'll come running.  He died at 59 of lung cancer.  I've never\ncried like I cried at his funeral.\n\n\nLeonardo\n\nOne of the things I've learned about making things that I didn't\nrealize when I was a kid is that much of the best stuff isn't made\nfor audiences, but for oneself.  You see paintings and drawings in\nmuseums and imagine they were made for you to look at.  Actually a\nlot of the best ones were made as a way of exploring the world, not\nas a way to please other people.  The best of these explorations\nare sometimes more pleasing than stuff made explicitly to please.\n\nLeonardo did a lot of things.  One of his most admirable qualities\nwas that he did so many different things that were admirable.  What\npeople know of him now is his paintings and his more flamboyant\ninventions, like flying machines.  That makes him seem like some\nkind of dreamer who sketched artists' conceptions of rocket ships\non the side.  In fact he made a large number of far more practical\ntechnical discoveries.  He was as good an engineer as a painter.\n\nHis most impressive work, to me, is his \ndrawings.  They're clearly\nmade more as a way of studying the world than producing something\nbeautiful. And yet they can hold their own with any work of art\never made.  No one else, before or since, was that good when no one\nwas looking.\n\n\nRobert Morris\n\nRobert Morris has a very unusual quality: he's never wrong.  It\nmight seem this would require you to be omniscient, but actually\nit's surprisingly easy. Don't say anything unless you're fairly\nsure of it.  If you're not omniscient, you just don't end up saying\nmuch.\n\nMore precisely, the trick is to pay careful attention to how you\nqualify what you say.  By using this trick, Robert has, as far as\nI know, managed to be mistaken only once, and that was when he was\nan undergrad.  When the Mac came out, he said that little desktop\ncomputers would never be suitable for real hacking.\n\nIt's wrong to call it a trick in his case, though.  If it were a\nconscious trick, he would have slipped in a moment of excitement.\nWith Robert this quality is wired-in.  He has an almost superhuman\nintegrity.  He's not just generally correct, but also correct about\nhow correct he is.\n\nYou'd think it would be such a great thing never to be wrong that\neveryone would do this.  It doesn't seem like that much extra work\nto pay as much attention to the error on an idea as to the idea\nitself.  And yet practically no one does.  I know how hard it is,\nbecause since meeting Robert I've tried to do in software what he\nseems to do in hardware.\n\n\nP. G. Wodehouse\n\nPeople are finally starting to admit that Wodehouse was a great\nwriter.  If you want to be thought a great novelist in your own\ntime, you have to sound intellectual.  If what you write is popular,\nor entertaining, or funny, you're ipso facto suspect.  That makes\nWodehouse doubly impressive, because it meant that to write as he\nwanted to, he had to commit to being despised in his own lifetime.\n\nEvelyn Waugh called him a great writer, but to most people at the\ntime that would have read as a chivalrous or deliberately perverse\ngesture. At the time any random autobiographical novel by a recent\ncollege grad could count on more respectful treatment from the\nliterary establishment.\n\nWodehouse may have begun with simple atoms, but the way he composed\nthem into molecules was near faultless.  His rhythm in particular.\nIt makes me self-conscious to write about it.  I can think of only\ntwo other writers who came near him for style: Evelyn Waugh and\nNancy Mitford.  Those three used the English language like they\nowned it.\n\nBut Wodehouse has something neither of them did.  He's at ease.\nEvelyn Waugh and Nancy Mitford cared what other people thought of\nthem: he wanted to seem aristocratic; she was afraid she wasn't\nsmart enough.  But Wodehouse didn't give a damn what anyone thought\nof him.  He wrote exactly what he wanted.\n\n\nAlexander Calder\n\nCalder's on this list because he makes me happy.  Can his work stand\nup to Leonardo's?  Probably not.  There might not be anything from\nthe 20th Century that can.  But what was good about Modernism,\nCalder had, and had in a way that he made seem effortless.\n\nWhat was good about Modernism was its freshness.  Art became stuffy\nin the nineteenth century.  The paintings that were popular at the\ntime were mostly the art equivalent of McMansions\u2014big,\npretentious, and fake.  Modernism meant starting over, making things\nwith the same earnest motives that children might.  The artists who\nbenefited most from this were the ones who had preserved a child's\nconfidence, like Klee and Calder.\n\nKlee was impressive because he could work in so many different\nstyles.  But between the two I like Calder better, because his work\nseemed happier.  Ultimately the point of art is to engage the viewer.\nIt's hard to predict what will; often something that seems interesting\nat first will bore you after a month.  Calder's \nsculptures never\nget boring.  They just sit there quietly radiating optimism, like\na battery that never runs out.  As far as I can tell from books and\nphotographs, the happiness of Calder's work is his own happiness\nshowing through.\n\n\nJane Austen\n\nEveryone admires Jane Austen.  Add my name to the list.  To me she\nseems the best novelist of all time.\n\nI'm interested in how things work.  When I read most novels, I pay\nas much attention to the author's choices as to the story.  But in\nher novels I can't see the gears at work.  Though I'd really like\nto know how she does what she does, I can't figure it out, because\nshe's so good that her stories don't seem made up.  I feel like I'm\nreading a description of something that actually happened.\n\nI used to read a lot of novels when I was younger.  I can't read\nmost anymore, because they don't have enough information in them.\nNovels seem so impoverished compared to history and biography.  But \nreading Austen is like reading\nnonfiction.  She writes so well you don't even notice her.\n\n\nJohn McCarthy\n\nJohn McCarthy invented Lisp, the field of (or at least the term)\nartificial intelligence, and was an early member of both of the top\ntwo computer science departments, MIT and Stanford.  No one would\ndispute that he's one of the greats, but he's an especial hero to\nme because of \nLisp.\n\nIt's hard for us now to understand what a conceptual leap that was\nat the time.  Paradoxically, one of the reasons his achievement is\nhard to appreciate is that it was so successful.  Practically every\nprogramming language invented in the last 20 years includes ideas\nfrom Lisp, and each year the median language gets more Lisplike.\n\nIn 1958 these ideas were anything but obvious.  In 1958 there seem\nto have been two ways of thinking about programming.  Some people\nthought of it as math, and proved things about Turing Machines.\nOthers thought of it as a way to get things done, and designed\nlanguages all too influenced by the technology of the day.  McCarthy\nalone bridged the gap.  He designed a language that was math.  But\ndesigned is not really the word; discovered is more like it.\n\n\nThe Spitfire\n\nAs I was making this list I found myself thinking of people like\nDouglas Bader \nand \nR.J. Mitchell\n and \nJeffrey Quill and I realized\nthat though all of them had done many things in their lives, there\nwas one factor above all that connected them: the Spitfire.\n\nThis is supposed to be a list of heroes.  How can a machine be on\nit?  Because that machine was not just a machine.  It was a lens\nof heroes.  Extraordinary devotion went into it, and extraordinary\ncourage came out.\n\nIt's a cliche to call World War II a contest between good and evil,\nbut between fighter designs, it really was.  The Spitfire's original\nnemesis, the ME 109, was a brutally practical plane.  It was a\nkilling machine.  The Spitfire was optimism embodied.  And not just\nin its beautiful lines: it was at the edge of what could be\nmanufactured.  But taking the high road worked.  In the air, beauty\nhad the edge, just.\n\n\nSteve Jobs\n\nPeople alive when Kennedy was killed  usually remember exactly where\nthey were when they heard about it.  I remember exactly where I was\nwhen a friend asked if I'd heard Steve Jobs had cancer.  It was\nlike the floor dropped out.   A few seconds later she told me that\nit was a rare operable type, and that he'd be ok.  But those seconds\nseemed long.\n\nI wasn't sure whether to include Jobs on this list.  A lot of people\nat Apple seem to be afraid of him, which is a bad sign.  But he\ncompels admiration.\n\nThere's no name for what Steve Jobs is, because there hasn't been\nanyone quite like him before.  He doesn't design Apple's products\nhimself.  Historically the closest analogy to what he does are the\ngreat Renaissance patrons of the arts.  As the CEO of a company,\nthat makes him unique.\n\nMost CEOs delegate \ntaste to a subordinate.\nThe \ndesign paradox\n means they're choosing more or less at random.  But Steve\nJobs actually has taste himself \u2014 such good taste that he's shown\nthe world how much more important taste is than they realized.\n\n\nIsaac Newton\n\nNewton has a strange role in my pantheon of heroes: he's the one I\nreproach myself with.  He worked on big things, at least for part\nof his life.  It's so easy to get distracted working on small stuff.\nThe questions you're answering are pleasantly familiar.  You get\nimmediate rewards \u2014 in fact, you get bigger rewards in your\ntime if you work on matters of passing importance.  But I'm\nuncomfortably aware that this is the route to well-deserved obscurity.\n\nTo do really great things, you have to seek out questions people\ndidn't even realize were questions.  There have probably been other\npeople who did this as well as Newton, for their time, but Newton\nis my model of this kind of thought.  I can just begin to understand\nwhat it must have felt like for him.\n\nYou only get one life.  Why not do something huge?  The phrase \"paradigm\nshift\" is overused now, but Kuhn was onto something.  And you know\nmore are out there, separated from us by what will later seem a\nsurprisingly thin wall of laziness and stupidity.  If we work like\nNewton.\n\n\n\n\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, and Jackie McDonough for reading drafts of this.\n\n", "March 2008\n\nThe web is turning writing into a conversation.  Twenty years ago,\nwriters wrote and readers read.  The web lets readers respond, and\nincreasingly they do\u2014in comment threads, on forums, and in their\nown blog posts.\n\nMany who respond to something disagree with it.  That's to be\nexpected.  Agreeing tends to motivate people less than disagreeing.\nAnd when you agree there's less to say.  You could expand on something\nthe author said, but he has probably already explored the\nmost interesting implications.  When you disagree you're entering\nterritory he may not have explored.\n\nThe result is there's a lot more disagreeing going on, especially\nmeasured by the word.  That doesn't mean people are getting angrier.\nThe structural change in the way we communicate is enough to account\nfor it.  But though it's not anger that's driving the increase in\ndisagreement, there's a danger that the increase in disagreement\nwill make people angrier.  Particularly online, where it's easy to\nsay things you'd never say face to face.\n\nIf we're all going to be disagreeing more, we should be careful to\ndo it well.  What does it mean to disagree well?   Most readers can\ntell the difference between mere name-calling and a carefully\nreasoned refutation, but I think it would help to put names on the\nintermediate stages.  So here's an attempt at a disagreement\nhierarchy:\n\n\nDH0. Name-calling.\n\nThis is the lowest form of disagreement, and probably also the most\ncommon.  We've all seen comments like this:\n\n  u r a fag!!!!!!!!!!\n\nBut it's important to realize that more articulate name-calling has\njust as little weight.  A comment like\n\n  The author is a self-important dilettante.\n\nis really nothing more than a pretentious version of \"u r a fag.\"\n\n\nDH1. Ad Hominem.\n\nAn ad hominem attack is not quite as weak as mere name-calling.  It\nmight actually carry some weight.  For example, if a senator wrote\nan article saying senators' salaries should be increased, one could\nrespond:\n\n  Of course he would say that.  He's a senator.\n\nThis wouldn't refute the author's argument, but it may at least be\nrelevant to the case.  It's still a very weak form of disagreement,\nthough.  If there's something wrong with the senator's argument,\nyou should say what it is; and if there isn't, what difference does\nit make that he's a senator?\n\nSaying that an author lacks the authority to write about a topic\nis a variant of ad hominem\u2014and a particularly useless sort, because\ngood ideas often come from outsiders.  The question is whether the\nauthor is correct or not.  If his lack of authority caused him to\nmake mistakes, point those out.  And if it didn't, it's not a\nproblem.\n\n\nDH2. Responding to Tone.\n\nThe next level up we start to see responses to the writing, rather\nthan the writer.  The lowest form of these is to disagree with the\nauthor's tone.  E.g.\n\n  I can't believe the author dismisses intelligent design in such\n  a cavalier fashion.\n\nThough better than attacking the author, this is still a weak form\nof disagreement.  It matters much more whether the author is wrong\nor right than what his tone is.  Especially since tone is so hard\nto judge.  Someone who has a chip on their shoulder about some topic\nmight be offended by a tone that to other readers seemed neutral.\n\nSo if the worst thing you can say about something is to criticize\nits tone, you're not saying much.  Is the author flippant, but\ncorrect?  Better that than grave and wrong.  And if the author is\nincorrect somewhere, say where.\n\nDH3. Contradiction.\n\nIn this stage we finally get responses to what was said, rather\nthan how or by whom.  The lowest form of response to an argument\nis simply to state the opposing case, with little or no supporting\nevidence.\n\nThis is often combined with DH2 statements, as in:\n\n  I can't believe the author dismisses intelligent design in such\n  a cavalier fashion.  Intelligent design is a legitimate scientific\n  theory.\n\nContradiction can sometimes have some weight.  Sometimes merely\nseeing the opposing case stated explicitly is enough to see that\nit's right.  But usually evidence will help.\n\nDH4. Counterargument.\n\nAt level 4 we reach the first form of convincing disagreement:\ncounterargument.  Forms up to this point can usually be ignored as\nproving nothing.  Counterargument might prove something.  The problem\nis, it's hard to say exactly what.\n\nCounterargument is contradiction plus reasoning and/or evidence.\nWhen aimed squarely at the original argument, it can be convincing.\nBut unfortunately it's common for counterarguments to be aimed at\nsomething slightly different.  More often than not, two people\narguing passionately about something are actually arguing about two\ndifferent things.  Sometimes they even agree with one another, but\nare so caught up in their squabble they don't realize it.\n\nThere could be a legitimate reason for arguing against something\nslightly different from what the original author said: when you\nfeel they missed the heart of the matter.  But when you do that,\nyou should say explicitly you're doing it.\n\nDH5. Refutation.\n\nThe most convincing form of disagreement is refutation.  It's also\nthe rarest, because it's the most work.  Indeed, the disagreement\nhierarchy forms a kind of pyramid, in the sense that the higher you\ngo the fewer instances you find.\n\nTo refute someone you probably have to quote them.  You have to\nfind a \"smoking gun,\" a passage in whatever you disagree with that\nyou feel is mistaken, and then explain why it's mistaken.  If you\ncan't find an actual quote to disagree with, you may be arguing\nwith a straw man.\n\nWhile refutation generally entails quoting, quoting doesn't necessarily\nimply refutation.  Some writers quote parts of things they disagree\nwith to give the appearance of legitimate refutation, then follow\nwith a response as low as DH3 or even DH0.\n\nDH6. Refuting the Central Point.\n\nThe force of a refutation depends on what you refute.  The most\npowerful form of disagreement is to refute someone's central point.\n\nEven as high as DH5 we still sometimes see deliberate dishonesty,\nas when someone picks out minor points of an argument and refutes\nthose.  Sometimes the spirit in which this is done makes it more\nof a sophisticated form of ad hominem than actual refutation.  For\nexample, correcting someone's grammar, or harping on minor mistakes\nin names or numbers.  Unless the opposing argument actually depends\non such things, the only purpose of correcting them is to\ndiscredit one's opponent.\n\nTruly refuting something requires one to refute its central point,\nor at least one of them.  And that means one has to commit explicitly\nto what the central point is.  So a truly effective refutation would\nlook like:\n\n  The author's main point seems to be x.  As he says:\n\n    <quotation>\n\n  But this is wrong for the following reasons...\n\nThe quotation you point out as mistaken need not be the actual\nstatement of the author's main point.  It's enough to refute something\nit depends upon.\n\n\nWhat It Means\n\nNow we have a way of classifying forms of disagreement.  What good\nis it?  One thing the disagreement hierarchy doesn't give us is\na way of picking a winner.  DH levels merely describe the form of\na statement, not whether it's correct.  A DH6 response could still\nbe completely mistaken.\n\nBut while DH levels don't set a lower bound on the convincingness\nof a reply, they do set an upper bound.  A DH6 response might be\nunconvincing, but a DH2 or lower response is always unconvincing.\n\nThe most obvious advantage of classifying the forms of disagreement\nis that it will help people to evaluate what they read.  In particular,\nit will help them to see through intellectually dishonest arguments.\nAn eloquent speaker or writer can give the impression of vanquishing\nan opponent merely by using forceful words.  In fact that is probably\nthe defining quality of a demagogue.  By giving names to the different\nforms of disagreement, we give critical readers a pin for popping\nsuch balloons.\n\nSuch labels may help writers too.  Most intellectual dishonesty is\nunintentional.  Someone arguing against the tone of something he\ndisagrees with may believe he's really saying something.  Zooming\nout and seeing his current position on the disagreement hierarchy\nmay inspire him to try moving up to counterargument or refutation.\n\nBut the greatest benefit of disagreeing well is not just that it\nwill make conversations better, but that it will make the people\nwho have them happier.  If you study conversations, you find there\nis a lot more meanness down in DH1 than up in DH6.  You don't have\nto be mean when you have a real point to make.  In fact, you don't\nwant to.  If you have something real to say, being mean just gets\nin the way.\n\nIf moving up the disagreement hierarchy makes people less mean,\nthat will make most of them happier.  Most people don't really enjoy\nbeing mean; they do it because they can't help it.\n\n\n\n\n\n\nThanks to Trevor Blackwell and Jessica Livingston for reading\ndrafts of this.\n\n\n\nRelated:\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMarch 2008, rev. June 2008\n", "March 2008, rev May 2013\n\n(This essay grew out of something I wrote for myself to figure\nout what we do.  Even though Y Combinator is now 3 years old, we're still\ntrying to understand its implications.)\n\n\nI was annoyed recently to read a description of Y Combinator that\nsaid \"Y Combinator does seed funding for startups.\"  What was\nespecially annoying about it was that I wrote it.  This doesn't\nreally convey what we do.  And the reason it's inaccurate is that,\nparadoxically, funding very early stage startups is not mainly about\nfunding.\n\nSaying YC does seed funding for startups is a description in terms\nof earlier models.  It's like calling a car a horseless carriage.\n\nWhen you scale animals you can't just keep everything in proportion.\nFor example, volume grows as the cube of linear dimension, but\nsurface area only as the square.  So as animals get bigger they\nhave trouble radiating heat.  That's why mice and rabbits are furry\nand elephants and hippos aren't.  You can't make a mouse by scaling\ndown an elephant.\n\nYC represents a new, smaller kind of animal\u2014so much smaller\nthat all the rules are different.\n\nBefore us, most companies in the startup funding business were\nventure capital funds.  VCs generally fund later stage companies\nthan we do.  And they supply so much money that, even though the\nother things they do may be very valuable, it's not that inaccurate\nto regard VCs as sources of money.  Good VCs are \"smart money,\" but\nthey're still money.\n\nAll good investors supply a combination of money and help.  But\nthese scale differently, just as volume and surface area do.  Late\nstage investors supply huge amounts of money and\ncomparatively little help: when a company about to go public gets\na mezzanine round of $50 million, the deal tends to be almost\nentirely about money.  As you move earlier in the venture\nfunding process, the ratio of help to money increases, because\nearlier stage companies have different needs.  Early stage companies\nneed less money because they're smaller and cheaper to run, but\nthey need more help because life is so precarious for them.  So\nwhen VCs do a series A round for, say, $2 million, they generally\nexpect to offer a significant amount of help along with the money.\n\nY Combinator occupies the earliest end of the spectrum.  We're at\nleast one and generally two steps before VC funding.  (Though some\nstartups go straight from YC to VC, the most common trajectory is\nto do an angel round first.)  And what happens at Y Combinator is\nas different from what happens in a series A round as a series A\nround is from a mezzanine financing.\n\nAt our end, money is almost a negligible factor.  The startup usually\nconsists of just the founders. Their living expenses are the\ncompany's main expense, and since most founders are under 30, their\nliving expenses are low.  But at this early stage companies need a\nlot of help.  Practically every question is still unanswered.  Some\ncompanies we've funded have been working on their software for a\nyear or more, but others haven't decided what to work on, or even\nwho the founders should be.\n\nWhen PR people and journalists recount the histories of startups\nafter they've become big, they always underestimate how uncertain\nthings were at first.  They're not being deliberately misleading.\nWhen you look at a company like Google, it's hard to imagine they\ncould once have been small and helpless.  Sure, at one point they\nwere a just a couple guys in a garage\u2014but even then their\ngreatness was assured, and all they had to do was roll forward along\nthe railroad tracks of destiny.\n\nFar from it.  A lot of startups with just as promising beginnings\nend up failing.  Google has such momentum now that it would be hard\nfor anyone to stop them.  But all it would have taken in the beginning\nwould have been for two Google employees to focus on the wrong\nthings for six months, and the company could have died.\n\nWe know, because we've been there, just how vulnerable startups are\nin the earliest phases.  Curiously enough, that's why founders tend\nto get so rich from them.  Reward is always proportionate to risk,\nand very early stage startups are insanely risky.\n\nWhat we really do at Y Combinator is get startups launched straight.\nOne of many metaphors you could use for YC is a steam catapult on\nan aircraft carrier.  We get startups airborne.  Barely airborne,\nbut enough that they can accelerate fast.\n\nWhen you're launching planes they have to be set up properly or\nyou're just launching projectiles.  They have to be pointed straight\ndown the deck; the wings have to be trimmed properly; the engines\nhave to be at full power; the pilot has to be ready.  These are the\nkind of problems we deal with.  After we fund startups we work\nclosely with them for three months\u2014so closely in fact that\nwe insist they move to where we are.  And what we do in those three\nmonths is make sure everything is set up for launch.  If there are\ntensions between cofounders we help sort them out.  We get all the\npaperwork set up properly so there are no nasty surprises later.\nIf the founders aren't sure what to focus on first, we try to figure\nthat out.  If there is some obstacle right in front of them, we\neither try to remove it, or shift the startup sideways.  The goal\nis to get every distraction out of the way so the founders can use\nthat time to build (or finish building) something impressive.  And\nthen near the end of the three months we push the button on the\nsteam catapult in the form of Demo Day, where the current group of\nstartups present to pretty much every investor in Silicon Valley.\n\nLaunching companies isn't identical with launching products.  Though\nwe do spend a lot of time on launch strategies for products, there\nare some things that take too long to build for a startup to launch\nthem before raising their next round of funding.  Several of the\nmost promising startups we've funded haven't launched their products\nyet, but are definitely launched as companies.\n\nIn the earliest stage, startups not only have more questions to\nanswer, but they tend to be different kinds of questions.  In later\nstage startups the questions are about deals, or hiring, or\norganization.  In the earliest phase they tend to be about technology\nand design.  What do you make?  That's the first problem to solve.\nThat's why our motto is \"Make something people want.\"  This is\nalways a good thing for companies to do, but it's even more important\nearly on, because it sets the bounds for every other question.  Who\nyou hire, how much money you raise, how you market yourself\u2014they\nall depend on what you're making.\n\nBecause the early problems are so much about technology and design,\nyou probably need to be hackers to do what we do.  While some VCs\nhave technical backgrounds, I don't know any who still write code.\nTheir expertise is mostly in business\u2014as it should be, because\nthat's the kind of expertise you need in the phase between series\nA and (if you're lucky) IPO.\n\nWe're so different from VCs that we're really a different kind of\nanimal.  Can we claim founders are better off as a result of this\nnew type of venture firm?  I'm pretty sure the answer is yes, because\nYC is an improved version of what happened to our startup, and our\ncase was not atypical.  We started Viaweb with $10,000 in seed money\nfrom our friend Julian.  He was a lawyer and arranged all our\npaperwork, so we could just code.  We spent three months building\na version 1, which we then presented to investors to raise more\nmoney.  Sounds familiar, doesn't it?  But YC improves on that\nsignificantly.  Julian knew a lot about law and business, but his\nadvice ended there; he was not a startup guy.  So we made some basic\nmistakes early on.  And when we presented to investors, we presented\nto only 2, because that was all we knew.  If we'd had our later\nselves to encourage and advise us, and Demo Day to present at, we\nwould have been in much better shape.  We probably could have raised\nmoney at 3 to 5 times the valuation we did.\n\nIf we take 7% of a company we fund, the founders only have to do\n7.5% better in their next round of funding\nto end up net ahead.  We certainly manage that.\n\nSo who is our 7% coming out of?  If the founders end up net ahead\nit's not coming out of them.  So is it coming out of later stage\ninvestors?  Well, they do end up paying more.  But I think they pay\nmore because the company is actually more valuable.  And later stage\ninvestors have no problem with that.  The returns of a VC fund\ndepend on the quality of the companies they invest in, not how\ncheaply they can buy stock in them.\n\nIf what we do is useful, why wasn't anyone doing it before?  There\nare two answers to that.  One is that people were doing it before,\njust haphazardly on a smaller scale.  Before us, seed funding came\nprimarily from individual angel investors.  Larry and Sergey, for\nexample, got their seed funding from Andy Bechtolsheim, one of the\nfounders of Sun.  And because he was a startup guy he probably gave\nthem useful advice.  But raising money from angel investors is a\nhit or miss thing.  It's a sideline for most of them, so they only\ndo a handful of deals a year and they don't spend a lot of time on\nthe startups they invest in.  And they're hard to reach, because\nthey don't want random startups pestering them with business plans.\nThe Google guys were lucky because they knew someone who knew\nBechtolsheim.  It generally takes a personal introduction with\nangels.\n\nThe other reason no one was doing quite what we do is that till\nrecently it was a lot more expensive to start a startup.  You'll\nnotice we haven't funded any biotech startups.  That's still\nexpensive.  But advancing technology has made web startups so cheap\nthat you really can get a company airborne for $15,000.  If you\nunderstand how to operate a steam catapult, at least.\n\nSo in effect what's happened is that a new ecological niche has\nopened up, and Y Combinator is the new kind of animal that has moved\ninto it.  We're not a replacement for venture capital funds.  We\noccupy a new, adjacent niche.  And conditions in our niche are\nreally quite different.  It's not just that the problems we face\nare different; the whole structure of the business is different.\nVCs are playing a zero-sum game.  They're all competing for a slice\nof a fixed amount of \"deal flow,\" and that explains a lot of their\nbehavior.  Whereas our m.o. is to create new deal flow, by encouraging\nhackers who would have gotten jobs to start their own startups\ninstead.  We compete more with employers than VCs.\n\nIt's not surprising something like this would happen.  Most fields\nbecome more specialized\u2014more articulated\u2014as they develop,\nand startups are certainly an area in which there has been a lot\nof development over the past couple decades.  The venture business\nin its present form is only about forty years old.  It stands to\nreason it would evolve.\n\nAnd it's natural that the new niche would at first be described,\neven by its inhabitants, in terms of the old one.  But really Y\nCombinator is not in the startup funding business.  Really we're\nmore of a small, furry steam catapult.\n\n\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, and Robert Morris\nfor reading drafts of this.\n\n\nComment on this essay.\n\n\n", "February 2008\n\nA user on Hacker News recently posted a\ncomment\nthat set me thinking:\n\n  Something about hacker culture that never really set well with\n  me was this \u0097 the nastiness. ... I just don't understand why people\n  troll like they do.\n\nI've thought a lot over the last couple years about the problem of\ntrolls.  It's an old one, as old as forums, but\nwe're still just learning what the causes are and how to address\nthem.\n\nThere are two senses of the word \"troll.\"  In the original sense\nit meant someone, usually an outsider, who deliberately stirred up\nfights in a forum by saying controversial things.\n[1]\nFor example,\nsomeone who didn't use a certain programming language might go to\na forum for users of that language and make disparaging remarks\nabout it, then sit back and watch as people rose to the bait.  This\nsort of trolling was in the nature of a practical joke, like letting\na bat loose in a room full of people.\n\nThe definition then spread to people who behaved like assholes in\nforums, whether intentionally or not.  Now when people talk about\ntrolls they usually mean this broader sense of the word.  Though\nin a sense this is historically inaccurate, it is in other ways\nmore accurate, because when someone is being an asshole it's usually\nuncertain even in their own mind how much is deliberate.\nThat is arguably one of the defining qualities of an asshole.\n\nI think trolling in the broader sense has four causes.  The most\nimportant is distance.  People will say things in anonymous forums\nthat they'd never dare say to someone's face, just as they'll do\nthings in cars that they'd never do as pedestrians \u0097 like tailgate\npeople, or honk at them, or cut them off.\n\nTrolling tends to be particularly bad in forums related to computers,\nand I think that's due to the kind of people you find there.  Most\nof them (myself included) are more comfortable dealing with abstract\nideas than with people.  Hackers can be abrupt even in person.  Put\nthem on an anonymous forum, and the problem gets worse.\n\nThe third cause of trolling is incompetence.  If you disagree with\nsomething, it's easier to say \"you suck\" than to figure out and\nexplain exactly what you disagree with.  You're also safe that way\nfrom refutation.  In this respect trolling is a lot like graffiti.\nGraffiti happens at the intersection of ambition and incompetence:\npeople want to make their mark on the world, but have no other way\nto do it than literally making a mark on the world.\n[2]\n\nThe final contributing factor is the culture of the forum.  Trolls\nare like children (many are children) in that they're capable of\na wide range of behavior depending on what they think will be\ntolerated.  In a place where rudeness isn't tolerated, most can be\npolite.  But vice versa as well.\n\nThere's a sort of Gresham's Law of trolls: trolls are willing to\nuse a forum with a lot of thoughtful people in it, but thoughtful\npeople aren't willing to use a forum with a lot of trolls in it.\nWhich means that once trolling takes hold, it tends to become the\ndominant culture.  That had already happened to Slashdot and Digg by\nthe time I paid attention to comment threads there, but I watched\nit happen to Reddit.\n\nNews.YC is, among other things, an experiment to see if this fate\ncan be avoided.  The sites's guidelines\nexplicitly ask people not to say things they wouldn't say face to\nface.  If someone starts being rude, other users will step in and\ntell them to stop.  And when people seem to be deliberately trolling,\nwe ban them ruthlessly.\n\nTechnical tweaks may also help.  On Reddit, votes on your comments\ndon't affect your karma score, but they do on News.YC.  And it does\nseem to influence people when they can see their reputation in the\neyes of their peers drain away after making an asshole remark.\nOften users have second thoughts and delete such comments.\n\nOne might worry this would prevent people from expressing controversial\nideas, but empirically that doesn't seem to be what happens.  When\npeople say something substantial that gets modded down, they\nstubbornly leave it up.  What people delete are wisecracks, because\nthey have less invested in them.\n\nSo far the experiment seems to be working.  The level of conversation\non News.YC is as high as on any forum I've seen.  But we still only\nhave about 8,000 uniques a day.  The conversations on Reddit were\ngood when it was that small.  The challenge is whether we can keep\nthings this way.\n\nI'm optimistic we will.  We're not depending just on technical\ntricks.  The core users of News.YC are mostly refugees from other\nsites that were overrun by trolls.  They feel about trolls roughly\nthe way refugees from Cuba or Eastern Europe feel about dictatorships.\nSo there are a lot of people working to keep this from happening\nagain.\n\n\n\n\n\n\nNotes\n\n[1]\nI mean forum in the general sense of a place to exchange views.\nThe original Internet forums were not web sites but Usenet newsgroups.\n\n[2]\nI'm talking here about everyday tagging.  Some graffiti is\nquite impressive (anything becomes art if you do it well enough)\nbut the median tag is just visual spam.\n\n", "February 2008\n\nThe fiery reaction to the release of Arc had\nan unexpected consequence: it made me realize I had a design\nphilosophy.  The main complaint of the more articulate critics was\nthat Arc seemed so flimsy. After years of working on it, all I had\nto show for myself were a few thousand lines of macros?  Why hadn't\nI worked on more substantial problems?\n\nAs I was mulling over these remarks it struck me how familiar they\nseemed.  This was exactly the kind of thing people said at first\nabout Viaweb, and Y Combinator, and most of my essays.\n\nWhen we launched Viaweb, it seemed laughable to VCs and e-commerce\n\"experts.\"  We were just a couple guys in an apartment,\nwhich did not seem cool in 1995 the way it does now.  And the thing\nwe'd built, as far as they could tell, wasn't even software.\nSoftware, to them, equalled big, honking Windows apps.  Since Viaweb\nwas the first web-based app \nthey'd seen, it seemed to be nothing\nmore than a website.  They were even more contemptuous when they\ndiscovered that Viaweb didn't process credit card transactions (we\ndidn't for the whole first year).  Transaction processing seemed\nto them what e-commerce was all about.  It sounded serious and\ndifficult.\n\nAnd yet, mysteriously, Viaweb ended up crushing all its competitors.\n\nThe initial reaction to \nY Combinator was almost identical.  It\nseemed laughably lightweight.  Startup funding meant series A rounds:\nmillions of dollars given to a small number of startups founded by\npeople with established credentials after months of serious,\nbusinesslike meetings, on terms described in a document a foot\nthick.  Y Combinator seemed inconsequential.  It's too early to say\nyet whether Y Combinator will turn out like Viaweb, but judging\nfrom the number of imitations, a lot of people seem to think we're\non to something.\n\nI can't measure whether my essays are successful, except in page\nviews, but the reaction to them is at least different from when I\nstarted.  At first the default reaction of the Slashdot trolls was\n(translated into articulate terms): \"Who is this guy and what\nauthority does he have to write about these topics?  I haven't read\nthe essay, but there's no way anything so short and written in such\nan informal style could have anything useful to say about such and\nsuch topic, when people with degrees in the subject have already\nwritten many thick books about it.\" Now there's a new generation\nof trolls on a new generation of sites, but they have at least\nstarted to omit the initial \"Who is this guy?\"\n\nNow people are saying the same things about Arc that they said at\nfirst about Viaweb and Y Combinator and most of my essays.  Why the\npattern?  The answer, I realized, is that my m.o. for all four has\nbeen the same.\n\nHere it is: I like to find (a) simple solutions (b) to overlooked\nproblems (c) that actually need to be solved, and (d) deliver them\nas informally as possible, (e) starting with a very crude version\n1, then (f) iterating rapidly.\n\nWhen I first laid out these principles explicitly, I noticed something\nstriking: this is practically a recipe for generating a contemptuous\ninitial reaction.  Though simple solutions are better, they don't\nseem as impressive as complex ones.  Overlooked problems are by\ndefinition problems that most people think don't matter.  Delivering\nsolutions in an informal way means that instead of judging something\nby the way it's presented, people have to actually understand it,\nwhich is more work.  And starting with a crude version 1 means your\ninitial effort is always small and incomplete.\n\nI'd noticed, of course, that people never seemed to grasp new ideas\nat first.  I thought it was just because most people were stupid.\nNow I see there's more to it than that.   Like a\ncontrarian investment fund, someone following this strategy will\nalmost always be doing things that seem wrong to the average person.\n\nAs with contrarian investment strategies, that's exactly the point.\nThis technique is successful (in the long term) because it gives you\nall the advantages other people forgo by trying to seem legit.  If\nyou work on overlooked problems, you're more likely to discover new\nthings, because you have less competition.  If you deliver solutions\ninformally, you (a) save all the effort you would have had to expend\nto make them look impressive, and (b) avoid the danger of fooling\nyourself as well as your audience.  And if you release a crude\nversion 1 then iterate, your solution can benefit from the imagination\nof nature, which, as Feynman pointed out, is more powerful than\nyour own.\n\nIn the case of Viaweb, the simple solution was to make the software\nrun on the server.  The overlooked problem was to generate web sites\nautomatically; in 1995, online stores were all made by hand by human\ndesigners, but we knew this wouldn't scale.  The part that actually\nmattered was graphic design, not transaction processing.\nThe informal delivery mechanism was me, showing up in jeans and a\nt-shirt at some retailer's office.  And the crude version 1 was,\nif I remember correctly, less than 10,000 lines of code when we\nlaunched.\n\nThe power of this technique extends beyond startups and programming\nlanguages and essays.  It probably extends to any kind of creative\nwork.  Certainly it can be used in painting: this is exactly \nwhat Cezanne and Klee did.\n\nAt Y Combinator we bet money on it, in the sense that we encourage\nthe startups we fund to work this way. There are always new ideas\nright under your nose.  So look for simple things that other people\nhave overlooked\u2014things people will later claim were \n\"obvious\"\u2014especially when they've been led astray by obsolete \nconventions,\nor by trying to do things that are superficially impressive.  Figure\nout what the real problem is, and make sure you solve that.  Don't\nworry about trying to look corporate; the product is what wins in\nthe long term.  And launch as soon as you can, so you start learning\nfrom users what you should have been making.\n\nReddit is a classic example of \nthis approach.  When Reddit first\nlaunched, it seemed like there was nothing to it.  To the graphically\nunsophisticated its deliberately minimal design seemed like no\ndesign at all.  But Reddit solved the real problem, which was to\ntell people what was new and otherwise stay out of the way.  As a\nresult it became massively successful.  Now that conventional ideas\nhave caught up with it, it seems obvious.  People look at Reddit\nand think the founders were lucky.  Like all such things, it was\nharder than it looked.  The Reddits pushed so hard against the\ncurrent that they reversed it; now it looks like they're merely\nfloating downstream.\n\nSo when you look at something like Reddit and think \"I wish I could\nthink of an idea like that,\" remember: ideas like that are all\naround you.  But you ignore them because they look wrong.\n\n\n", "October 2007\n\nAfter the last \ntalk I gave, one of the organizers \ngot up on the\nstage to deliver an impromptu rebuttal.  That never happened before.\nI only heard the first few sentences, but that was enough to tell\nwhat I said that upset him: that startups would do better if they\nmoved to Silicon Valley.\n\nThis conference was in London, and most of the audience seemed to\nbe from the UK.  So saying startups should move to Silicon Valley\nseemed like a nationalistic remark: an obnoxious American telling\nthem that if they wanted to do things right they should all just\nmove to America.\n\nActually I'm less American than I seem.  I didn't say so, but I'm\nBritish by birth.  And just as Jews are ex officio allowed to tell\nJewish jokes, I don't feel like I have to bother being diplomatic\nwith a British audience.\n\nThe idea that startups would do better to move to Silicon Valley\nis not even a nationalistic one.\n[1]\nIt's the same thing I say to\nstartups in the US.  Y Combinator alternates between coasts every\n6 months. Every other funding cycle is in Boston.  And even though\nBoston is the second biggest startup hub in the US (and the world),\nwe tell the startups from those cycles that their best bet is to\nmove to Silicon Valley.  If that's true of Boston, it's even more\ntrue of every other city.\n\nThis is about cities, not countries.\n\nAnd I think I can prove I'm right.  You can easily reduce the\nopposing argument ad what most people would agree was absurdum.\nFew would be willing to claim that it doesn't matter at all where\na startup is\u2014that a startup operating out of a small agricultural\ntown wouldn't benefit from moving to a startup hub.  Most people\ncould see how it might be helpful to be in a place where there was\ninfrastructure for startups, accumulated knowledge about how to\nmake them work, and other people trying to do it.  And yet whatever\nargument you use to prove that startups don't need to move from\nLondon to Silicon Valley could equally well be used to prove startups\ndon't need to move from smaller towns to London.\n\nThe difference between cities is a matter of degree.  And if, as\nnearly everyone who knows agrees, startups are better off in Silicon\nValley than Boston, then they're better off in Silicon Valley than\neverywhere else too.\n\nI realize I might seem to have a vested interest in this conclusion,\nbecause startups that move to the US might do it through Y Combinator.\nBut the American startups we've funded will attest that I say the\nsame thing to them.\n\nI'm not claiming of course that every startup has to go to Silicon\nValley to succeed.  Just that all other things being equal, the\nmore of a startup hub a place is, the better startups will do there.\nBut other considerations can outweigh the advantages of moving.\nI'm not saying founders with families should uproot them to move\nhalfway around the world; that might be too much of a distraction.\n\nImmigration difficulties might be another reason to stay put.\nDealing with immigration problems is like raising money: for some\nreason it seems to consume all your attention.  A startup can't\nafford much of that.  One Canadian startup we funded spent about 6\nmonths working on moving to the US.  Eventually they just gave up,\nbecause they couldn't afford to take so much time away from working\non their software.\n\n(If another country wanted to establish a rival to Silicon Valley,\nthe single best thing they could do might be to create a special\nvisa for startup founders.  US immigration policy is one of Silicon \nValley's biggest weaknesses.)\n\nIf your startup is connected to a specific industry, you may be\nbetter off in one of its centers.  A startup doing something related\nto entertainment might want to be in New York or LA.\n\nAnd finally, if a good investor has committed to fund\nyou if you stay where you are, you should probably stay.  Finding\ninvestors is hard.  You generally shouldn't pass up a definite\nfunding offer to move.\n[2]\n\nIn fact, the quality of the investors may be the main advantage of\nstartup hubs.  Silicon Valley investors are noticeably more aggressive\nthan Boston ones.  Over and over, I've seen startups we've funded\nsnatched by west coast investors out from under the noses of Boston\ninvestors who saw them first but acted too slowly.  At this year's\nBoston Demo Day, I told the audience that this happened every year,\nso if they saw a startup they liked, they should make them an offer.\nAnd yet within a month it had happened again: an aggressive west\ncoast VC who had met the founder of a YC-funded startup a week\nbefore beat out a Boston VC who had known him for years.  By the\ntime the Boston VC grasped what was happening, the deal was already\ngone.\n\nBoston investors will admit they're more conservative.  Some want\nto believe this comes from the city's prudent Yankee character.\nBut Occam's razor suggests the truth is less flattering.  Boston\ninvestors are probably more conservative than Silicon Valley investors\nfor the same reason Chicago investors are more conservative than\nBoston ones.  They don't understand startups as well.\n\nWest coast investors aren't bolder because they're irresponsible\ncowboys, or because the good weather makes them optimistic.  They're\nbolder because they know what they're doing.  They're the skiers\nwho ski on the diamond slopes.  Boldness is the essence of venture\ninvesting.  The way you get big returns is not by trying to avoid\nlosses, but by trying to ensure you get some of the big hits. And\nthe big hits often look risky at first.\n\nLike Facebook.  Facebook was started in Boston.  Boston VCs had the\nfirst shot at them.  But they said no, so Facebook moved to Silicon\nValley and raised money there.  The partner who turned them down\nnow says that \"may turn out to have been a mistake.\"\n\nEmpirically, boldness wins.  If the aggressive ways of west coast\ninvestors are going to come back to bite them, it has been a long\ntime coming.  Silicon Valley has been pulling ahead of Boston since\nthe 1970s.  If there was going to be a comeuppance for the west\ncoast investors, the bursting of the Bubble would have been it.\nBut since then the west coast has just pulled further ahead.\n\nWest coast investors are confident enough of their judgement to act\nboldly; east coast investors, not so much; but anyone who thinks\neast coast investors act that way out of prudence should see the\nfrantic reactions of an east coast VC in the process of losing a\ndeal to a west coast one.\n\nIn addition to the concentration that comes from specialization,\nstartup hubs are also markets.  And markets are usually centralized.\nEven now, when traders could be anywhere, they cluster in a few\ncities.  It's hard to say exactly what it is about face to face\ncontact that makes deals happen, but whatever it is, it hasn't yet\nbeen duplicated by technology.\n\nWalk down University Ave at the right time, and you might overhear\nfive different people talking on the phone about deals.  In fact,\nthis is part of the reason Y Combinator is in Boston half the time:\nit's hard to stand that year round.  But though it can sometimes\nbe annoying to be surrounded by people who only think about one\nthing, it's the place to be if that one thing is what you're trying\nto do.\n\nI was talking recently to someone who works on search at Google.\nHe knew a lot of people at Yahoo, so he was in a good position to\ncompare the two companies.  I asked him why Google was better at\nsearch.  He said it wasn't anything specific Google did, but simply\nthat they understood search so much better.\n\nAnd that's why startups thrive in startup hubs like Silicon Valley.\nStartups are a very specialized business, as specialized as diamond\ncutting.  And in startup hubs they understand it.\n\n\n\n\n\n\n\n\nNotes\n\n[1]\nThe nationalistic idea is the converse: that startups should\nstay in a certain city because of the country it's in.  If you\nreally have a \"one world\" viewpoint, deciding to move from London\nto Silicon Valley is no different from deciding to move from Chicago\nto Silicon Valley.\n\n[2]\nAn investor who merely seems like he will fund you, however,\nyou can ignore.  Seeming like they will fund you one day is the way\ninvestors say No.\n\nThanks to Sam Altman, Jessica Livingston, Harjeet Taggar, and Kulveer\nTaggar for reading drafts of this.\n\n\nComment on this essay.\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2007\n", "September 2007\n\nIn high school I decided I was going to study philosophy in college.\nI had several motives, some more honorable than others.  One of the\nless honorable was to shock people.  College was regarded as job\ntraining where I grew up, so studying philosophy seemed an impressively\nimpractical thing to do.  Sort of like slashing holes in your clothes\nor putting a safety pin through your ear, which were other forms\nof impressive impracticality then just coming into fashion.\n\nBut I had some more honest motives as well.  I thought studying\nphilosophy would be a shortcut straight to wisdom.  All the people\nmajoring in other things would just end up with a bunch of domain\nknowledge.  I would be learning what was really what.\n\nI'd tried to read a few philosophy books.  Not recent ones; you\nwouldn't find those in our high school library.  But I tried to\nread Plato and Aristotle.  I doubt I believed I understood them,\nbut they sounded like they were talking about something important.\nI assumed I'd learn what in college.\n\nThe summer before senior year I took some college classes.  I learned\na lot in the calculus class, but I didn't learn much in Philosophy\n101.  And yet my plan to study philosophy remained intact.  It was\nmy fault I hadn't learned anything.  I hadn't read the books we\nwere assigned carefully enough.  I'd give Berkeley's Principles\nof Human Knowledge another shot in college.  Anything so admired\nand so difficult to read must have something in it, if one could\nonly figure out what.\n\nTwenty-six years later, I still don't understand Berkeley.  I have\na nice edition of his collected works.  Will I ever read it?  Seems\nunlikely.\n\nThe difference between then and now is that now I understand why\nBerkeley is probably not worth trying to understand.  I think I see\nnow what went wrong with philosophy, and how we might fix it.\n\nWords\n\nI did end up being a philosophy major for most of college.  It\ndidn't work out as I'd hoped.  I didn't learn any magical truths\ncompared to which everything else was mere domain knowledge.  But\nI do at least know now why I didn't.  Philosophy doesn't really\nhave a subject matter in the way math or history or most other\nuniversity subjects do.  There is no core of knowledge one must\nmaster.  The closest you come to that is a knowledge of what various\nindividual philosophers have said about different topics over the\nyears.  Few were sufficiently correct that people have forgotten\nwho discovered what they discovered.\n\nFormal logic has some subject matter. I took several classes in\nlogic.  I don't know if I learned anything from them.\n[1]\nIt does seem to me very important to be able to flip ideas around in\none's head: to see when two ideas don't fully cover the space of\npossibilities, or when one idea is the same as another but with a\ncouple things changed.  But did studying logic teach me the importance\nof thinking this way, or make me any better at it?  I don't know.\n\nThere are things I know I learned from studying philosophy.  The\nmost dramatic I learned immediately, in the first semester of\nfreshman year, in a class taught by Sydney Shoemaker.  I learned\nthat I don't exist.  I am (and you are) a collection of cells that\nlurches around driven by various forces, and calls itself I.  But\nthere's no central, indivisible thing that your identity goes with.\nYou could conceivably lose half your brain and live.  Which means\nyour brain could conceivably be split into two halves and each\ntransplanted into different bodies.  Imagine waking up after such\nan operation.  You have to imagine being two people.\n\nThe real lesson here is that the concepts we use in everyday life\nare fuzzy, and break down if pushed too hard.  Even a concept as\ndear to us as I.  It took me a while to grasp this, but when I\ndid it was fairly sudden, like someone in the nineteenth century\ngrasping evolution and realizing the story of creation they'd been\ntold as a child was all wrong. \n[2]\nOutside of math there's a limit\nto how far you can push words; in fact, it would not be a bad\ndefinition of math to call it the study of terms that have precise\nmeanings.  Everyday words are inherently imprecise.  They work well\nenough in everyday life that you don't notice.  Words seem to work,\njust as Newtonian physics seems to.  But you can always make them\nbreak if you push them far enough.\n\nI would say that this has been, unfortunately for philosophy, the\ncentral fact of philosophy.  Most philosophical debates are not\nmerely afflicted by but driven by confusions over words.  Do we\nhave free will?  Depends what you mean by \"free.\" Do abstract ideas\nexist?  Depends what you mean by \"exist.\"\n\nWittgenstein is popularly credited with the idea that most philosophical\ncontroversies are due to confusions over language.  I'm not sure\nhow much credit to give him.  I suspect a lot of people realized\nthis, but reacted simply by not studying philosophy, rather than\nbecoming philosophy professors.\n\nHow did things get this way?  Can something people have spent\nthousands of years studying really be a waste of time?  Those are\ninteresting questions.  In fact, some of the most interesting\nquestions you can ask about philosophy.  The most valuable way to\napproach the current philosophical tradition may be neither to get\nlost in pointless speculations like Berkeley, nor to shut them down\nlike Wittgenstein, but to study it as an example of reason gone\nwrong.\n\nHistory\n\nWestern philosophy really begins with Socrates, Plato, and Aristotle.\nWhat we know of their predecessors comes from fragments and references\nin later works; their doctrines could be described as speculative\ncosmology that occasionally strays into analysis.  Presumably they\nwere driven by whatever makes people in every other society invent\ncosmologies.\n[3]\n\nWith Socrates, Plato, and particularly Aristotle, this tradition\nturned a corner.  There started to be a lot more analysis.  I suspect\nPlato and Aristotle were encouraged in this by progress in math.\nMathematicians had by then shown that you could figure things out\nin a much more conclusive way than by making up fine sounding stories\nabout them.  \n[4]\n\nPeople talk so much about abstractions now that we don't realize\nwhat a leap it must have been when they first started to.  It was\npresumably many thousands of years between when people first started\ndescribing things as hot or cold and when someone asked \"what is\nheat?\"  No doubt it was a very gradual process.  We don't know if\nPlato or Aristotle were the first to ask any of the questions they\ndid.  But their works are the oldest we have that do this on a large\nscale, and there is a freshness (not to say naivete) about them\nthat suggests some of the questions they asked were new to them,\nat least.\n\nAristotle in particular reminds me of the phenomenon that happens\nwhen people discover something new, and are so excited by it that\nthey race through a huge percentage of the newly discovered territory\nin one lifetime.  If so, that's evidence of how new this kind of\nthinking was. \n[5]\n\nThis is all to explain how Plato and Aristotle can be very impressive\nand yet naive and mistaken.  It was impressive even to ask the\nquestions they did.  That doesn't mean they always came up with\ngood answers.  It's not considered insulting to say that ancient\nGreek mathematicians were naive in some respects, or at least lacked\nsome concepts that would have made their lives easier.  So I hope\npeople will not be too offended if I propose that ancient philosophers\nwere similarly naive.  In particular, they don't seem to have fully\ngrasped what I earlier called the central fact of philosophy: that\nwords break if you push them too far.\n\n\"Much to the surprise of the builders of the first digital computers,\"\nRod Brooks wrote, \"programs written for them usually did not work.\"\n[6]\nSomething similar happened when people first started trying\nto talk about abstractions.  Much to their surprise, they didn't\narrive at answers they agreed upon.  In fact, they rarely seemed\nto arrive at answers at all.\n\nThey were in effect arguing about artifacts induced by sampling at\ntoo low a resolution.\n\nThe proof of how useless some of their answers turned out to be is\nhow little effect they have.  No one after reading Aristotle's\nMetaphysics does anything differently as a result.\n[7]\n\nSurely I'm not claiming that ideas have to have practical applications\nto be interesting?  No, they may not have to.  Hardy's boast that\nnumber theory had no use whatsoever wouldn't disqualify it.  But\nhe turned out to be mistaken.  In fact, it's suspiciously hard to\nfind a field of math that truly has no practical use.  And Aristotle's\nexplanation of the ultimate goal of philosophy in Book A of the\nMetaphysics implies that philosophy should be useful too.\n\nTheoretical Knowledge\n\nAristotle's goal was to find the most general of general principles.\nThe examples he gives are convincing: an ordinary worker builds\nthings a certain way out of habit; a master craftsman can do more\nbecause he grasps the underlying principles.  The trend is clear:\nthe more general the knowledge, the more admirable it is.  But then\nhe makes a mistake\u2014possibly the most important mistake in the\nhistory of philosophy.  He has noticed that theoretical knowledge\nis often acquired for its own sake, out of curiosity, rather than\nfor any practical need.  So he proposes there are two kinds of\ntheoretical knowledge: some that's useful in practical matters and\nsome that isn't.  Since people interested in the latter are interested\nin it for its own sake, it must be more noble.  So he sets as his\ngoal in the Metaphysics the exploration of knowledge that has no\npractical use.  Which means no alarms go off when he takes on grand\nbut vaguely understood questions and ends up getting lost in a sea\nof words.\n\nHis mistake was to confuse motive and result.  Certainly, people\nwho want a deep understanding of something are often driven by\ncuriosity rather than any practical need.  But that doesn't mean\nwhat they end up learning is useless.  It's very valuable in practice\nto have a deep understanding of what you're doing; even if you're\nnever called on to solve advanced problems, you can see shortcuts\nin the solution of simple ones, and your knowledge won't break down\nin edge cases, as it would if you were relying on formulas you\ndidn't understand.  Knowledge is power.  That's what makes theoretical\nknowledge prestigious.  It's also what causes smart people to be\ncurious about certain things and not others; our DNA is not so\ndisinterested as we might think.\n\nSo while ideas don't have to have immediate practical applications\nto be interesting, the kinds of things we find interesting will\nsurprisingly often turn out to have practical applications.\n\nThe reason Aristotle didn't get anywhere in the Metaphysics was\npartly that he set off with contradictory aims: to explore the most\nabstract ideas, guided by the assumption that they were useless.\nHe was like an explorer looking for a territory to the north of\nhim, starting with the assumption that it was located to the south.\n\nAnd since his work became the map used by generations of future\nexplorers, he sent them off in the wrong direction as well. \n[8]\nPerhaps worst of all, he protected them from both the criticism of\noutsiders and the promptings of their own inner compass by establishing\nthe principle that the most noble sort of theoretical knowledge had\nto be useless.\n\nThe Metaphysics is mostly a failed experiment.  A few ideas from\nit turned out to be worth keeping; the bulk of it has had no effect\nat all.  The Metaphysics is among the least read of all famous\nbooks.  It's not hard to understand the way Newton's Principia\nis, but the way a garbled message is.\n\nArguably it's an interesting failed experiment.  But unfortunately\nthat was not the conclusion Aristotle's successors derived from\nworks like the Metaphysics. \n[9]\nSoon after, the western world\nfell on intellectual hard times.  Instead of version 1s to be\nsuperseded, the works of Plato and Aristotle became revered texts\nto be mastered and discussed.  And so things remained for a shockingly\nlong time.  It was not till around 1600 (in Europe, where the center\nof gravity had shifted by then) that one found people confident\nenough to treat Aristotle's work as a catalog of mistakes.  And\neven then they rarely said so outright.\n\nIf it seems surprising that the gap was so long, consider how little\nprogress there was in math between Hellenistic times and the\nRenaissance.\n\nIn the intervening years an unfortunate idea took hold:  that it\nwas not only acceptable to produce works like the Metaphysics,\nbut that it was a particularly prestigious line of work, done by a\nclass of people called philosophers.  No one thought to go back and\ndebug Aristotle's motivating argument.  And so instead of correcting\nthe problem Aristotle discovered by falling into it\u2014that you can\neasily get lost if you talk too loosely about very abstract ideas\u2014they \ncontinued to fall into it.\n\nThe Singularity\n\nCuriously, however, the works they produced continued to attract\nnew readers.  Traditional philosophy occupies a kind of singularity\nin this respect.  If you write in an unclear way about big ideas,\nyou produce something that seems tantalizingly attractive to\ninexperienced but intellectually ambitious students.  Till one knows\nbetter, it's hard to distinguish something that's hard to understand\nbecause the writer was unclear in his own mind from something like\na mathematical proof that's hard to understand because the ideas\nit represents are hard to understand.  To someone who hasn't learned\nthe difference, traditional philosophy seems extremely attractive:\nas hard (and therefore impressive) as math, yet broader in scope.\nThat was what lured me in as a high school student.\n\nThis singularity is even more singular in having its own defense\nbuilt in.  When things are hard to understand, people who suspect\nthey're nonsense generally keep quiet.  There's no way to prove a\ntext is meaningless.  The closest you can get is to show that the\nofficial judges of some class of texts can't distinguish them from\nplacebos. \n[10]\n\nAnd so instead of denouncing philosophy, most people who suspected\nit was a waste of time just studied other things.  That alone is\nfairly damning evidence, considering philosophy's claims.  It's\nsupposed to be about the ultimate truths. Surely all smart people\nwould be interested in it, if it delivered on that promise.\n\nBecause philosophy's flaws turned away the sort of people who might\nhave corrected them, they tended to be self-perpetuating.  Bertrand\nRussell wrote in a letter in 1912:\n\n  Hitherto the people attracted to philosophy have been mostly those\n  who loved the big generalizations, which were all wrong, so that\n  few people with exact minds have taken up the subject.\n[11]\n\nHis response was to launch Wittgenstein at it, with dramatic results.\n\nI think Wittgenstein deserves to be famous not for the discovery\nthat most previous philosophy was a waste of time, which judging\nfrom the circumstantial evidence must have been made by every smart\nperson who studied a little philosophy and declined to pursue it\nfurther, but for how he acted in response.\n[12]\nInstead of quietly\nswitching to another field, he made a fuss, from inside.  He was\nGorbachev.\n\nThe field of philosophy is still shaken from the fright Wittgenstein\ngave it. \n[13]\nLater in life he spent a lot of time talking about\nhow words worked.  Since that seems to be allowed, that's what a\nlot of philosophers do now.  Meanwhile, sensing a vacuum in the\nmetaphysical speculation department, the people who used to do\nliterary criticism have been edging Kantward, under new names like\n\"literary theory,\" \"critical theory,\" and when they're feeling\nambitious, plain \"theory.\"  The writing is the familiar word salad:\n\n  Gender is not like some of the other grammatical modes which\n  express precisely a mode of conception without any reality that\n  corresponds to the conceptual mode, and consequently do not express\n  precisely something in reality by which the intellect could be\n  moved to conceive a thing the way it does, even where that motive\n  is not something in the thing as such.\n  [14]\n\nThe singularity I've described is not going away.  There's a market\nfor writing that sounds impressive and can't be disproven. There\nwill always be both supply and demand.  So if one group abandons\nthis territory, there will always be others ready to occupy it.\n\nA Proposal\n\nWe may be able to do better.  Here's an intriguing possibility.\nPerhaps we should do what Aristotle meant to do, instead of what\nhe did.  The goal he announces in the Metaphysics seems one worth\npursuing: to discover the most general truths.  That sounds good.\nBut instead of trying to discover them because they're useless,\nlet's try to discover them because they're useful.\n\nI propose we try again, but that we use that heretofore despised\ncriterion, applicability, as a guide to keep us from wondering\noff into a swamp of abstractions.  Instead of trying to answer the\nquestion:\n\n  What are the most general truths?\n\nlet's try to answer the question\n\n  Of all the useful things we can say, which are the most general?\n\nThe test of utility I propose is whether we cause people who read\nwhat we've written to do anything differently afterward.  Knowing\nwe have to give definite (if implicit) advice will keep us from\nstraying beyond the resolution of the words we're using.\n\nThe goal is the same as Aristotle's; we just approach it from a\ndifferent direction.\n\nAs an example of a useful, general idea, consider that of the\ncontrolled experiment.  There's an idea that has turned out to be\nwidely applicable.  Some might say it's part of science, but it's\nnot part of any specific science; it's literally meta-physics (in\nour sense of \"meta\").   The idea of evolution is another. It turns\nout to have quite broad applications\u2014for example, in genetic\nalgorithms and even product design.  Frankfurt's distinction between\nlying and bullshitting seems a promising recent example.\n[15]\n\nThese seem to me what philosophy should look like: quite general\nobservations that would cause someone who understood them to do\nsomething differently.\n\nSuch observations will necessarily be about things that are imprecisely\ndefined.  Once you start using words with precise meanings, you're\ndoing math.  So starting from utility won't entirely solve the\nproblem I described above\u2014it won't flush out the metaphysical\nsingularity.  But it should help.  It gives people with good\nintentions a new roadmap into abstraction.  And they may thereby\nproduce things that make the writing of the people with bad intentions\nlook bad by comparison.\n\nOne drawback of this approach is that it won't produce the sort of\nwriting that gets you tenure.  And not just because it's not currently\nthe fashion.  In order to get tenure in any field you must not\narrive at conclusions that members of tenure committees can disagree\nwith.  In practice there are two kinds of solutions to this problem.\nIn math and the sciences, you can prove what you're saying, or at\nany rate adjust your conclusions so you're not claiming anything\nfalse (\"6 of 8 subjects had lower blood pressure after the treatment\").\nIn the humanities you can either avoid drawing any definite conclusions\n(e.g. conclude that an issue is a complex one), or draw conclusions\nso narrow that no one cares enough to disagree with you.\n\nThe kind of philosophy I'm advocating won't be able to take either\nof these routes.  At best you'll be able to achieve the essayist's\nstandard of proof, not the mathematician's or the experimentalist's.\nAnd yet you won't be able to meet the usefulness test without\nimplying definite and fairly broadly applicable conclusions.  Worse\nstill, the usefulness test will tend to produce results that annoy\npeople: there's no use in telling people things they already believe,\nand people are often upset to be told things they don't.\n\nHere's the exciting thing, though.  Anyone can do this.  Getting\nto general plus useful by starting with useful and cranking up the\ngenerality may be unsuitable for junior professors trying to get\ntenure, but it's better for everyone else, including professors who\nalready have it.  This side of the mountain is a nice gradual slope.\nYou can start by writing things that are useful but very specific,\nand then gradually make them more general.  Joe's has good burritos.\nWhat makes a good burrito?  What makes good food?  What makes\nanything good?  You can take as long as you want.  You don't have\nto get all the way to the top of the mountain.  You don't have to\ntell anyone you're doing philosophy.\n\nIf it seems like a daunting task to do philosophy, here's an\nencouraging thought.  The field is a lot younger than it seems.\nThough the first philosophers in the western tradition lived about\n2500 years ago, it would be misleading to say the field is 2500\nyears old, because for most of that time the leading practitioners\nweren't doing much more than writing commentaries on Plato or\nAristotle while watching over their shoulders for the next invading\narmy.  In the times when they weren't, philosophy was hopelessly\nintermingled with religion.  It didn't shake itself free till a\ncouple hundred years ago, and even then was afflicted by the\nstructural problems I've described above.  If I say this, some will\nsay it's a ridiculously overbroad and uncharitable generalization,\nand others will say it's old news, but here goes: judging from their\nworks, most philosophers up to the present have been wasting their\ntime.  So in a sense the field is still at the first step. \n[16]\n\nThat sounds a preposterous claim to make.  It won't seem so\npreposterous in 10,000 years.  Civilization always seems old, because\nit's always the oldest it's ever been.  The only way to say whether\nsomething is really old or not is by looking at structural evidence,\nand structurally philosophy is young; it's still reeling from the\nunexpected breakdown of words.\n\nPhilosophy is as young now as math was in 1500.  There is a lot\nmore to discover.\n\n\n\n\n\n\n\nNotes\n\n\n[1]\nIn practice formal logic is not much use, because despite\nsome progress in the last 150 years we're still only able to formalize\na small percentage of statements.  We may never do that much better,\nfor the same reason 1980s-style \"knowledge representation\" could\nnever have worked; many statements may have no representation more\nconcise than a huge, analog brain state.\n\n[2]\nIt was harder for Darwin's contemporaries to grasp this than\nwe can easily imagine.  The story of creation in the Bible is not\njust a Judeo-Christian concept; it's roughly what everyone must\nhave believed since before people were people.  The hard part of\ngrasping evolution was to realize that species weren't, as they\nseem to be, unchanging, but had instead evolved from different,\nsimpler organisms over unimaginably long periods of time.\n\nNow we don't have to make that leap.  No one in an industrialized\ncountry encounters the idea of evolution for the first time as an\nadult.  Everyone's taught about it as a child, either as truth or\nheresy.\n\n[3]\nGreek philosophers before Plato wrote in verse.  This must\nhave affected what they said.  If you try to write about the nature\nof the world in verse, it inevitably turns into incantation.  Prose\nlets you be more precise, and more tentative.\n\n[4]\nPhilosophy is like math's\nne'er-do-well brother.  It was born when Plato and Aristotle looked\nat the works of their predecessors and said in effect \"why can't\nyou be more like your brother?\"  Russell was still saying the same\nthing 2300 years later.\n\nMath is the precise half of the most abstract ideas, and philosophy\nthe imprecise half.  It's probably inevitable that philosophy will\nsuffer by comparison, because there's no lower bound to its precision.\nBad math is merely boring, whereas bad philosophy is nonsense.  And\nyet there are some good ideas in the imprecise half.\n\n[5]\nAristotle's best work was in logic and zoology, both of which\nhe can  be said to have invented.  But the most dramatic departure\nfrom his predecessors was a new, much more analytical style of\nthinking.  He was arguably the first scientist.\n\n[6]\nBrooks, Rodney, Programming in Common Lisp, Wiley, 1985, p.\n94.\n\n[7]\nSome would say we depend on Aristotle more than we realize,\nbecause his ideas were one of the ingredients in our common culture.\nCertainly a lot of the words we use have a connection with Aristotle,\nbut it seems a bit much to suggest that we wouldn't have the concept\nof the essence of something or the distinction between matter and\nform if Aristotle hadn't written about them.\n\nOne way to see how much we really depend on Aristotle would be to\ndiff European culture with Chinese: what ideas did European culture\nhave in 1800 that Chinese culture didn't, in virtue of Aristotle's\ncontribution?\n\n[8]\nThe meaning of the word \"philosophy\" has changed over time.\nIn ancient times it covered a broad range of topics, comparable in\nscope to our \"scholarship\" (though without the methodological\nimplications).  Even as late as Newton's time it included what we\nnow call \"science.\"  But core of the subject today is still what\nseemed to Aristotle the core: the attempt to discover the most\ngeneral truths.\n\nAristotle didn't call this \"metaphysics.\"  That name got assigned\nto it because the books we now call the Metaphysics came after\n(meta = after) the Physics in the standard edition of Aristotle's\nworks compiled by Andronicus of Rhodes three centuries later.  What\nwe call \"metaphysics\" Aristotle called \"first philosophy.\"\n\n[9]\nSome of Aristotle's immediate successors may have realized\nthis, but it's hard to say because most of their works are lost.\n\n[10]\nSokal, Alan, \"Transgressing the Boundaries: Toward a Transformative\nHermeneutics of Quantum Gravity,\" Social Text 46/47, pp. 217-252.\n\nAbstract-sounding nonsense seems to be most attractive when it's\naligned with some axe the audience already has to grind.  If this\nis so we should find it's most popular with groups that are (or\nfeel) weak.  The powerful don't need its reassurance.\n\n[11]\nLetter to Ottoline Morrell, December 1912.  Quoted in:\n\nMonk, Ray, Ludwig Wittgenstein: The Duty of Genius, Penguin, 1991,\np. 75.\n\n[12]\nA preliminary result, that all metaphysics between Aristotle\nand 1783 had been a waste of time, is due to I. Kant.\n\n[13]\nWittgenstein asserted a sort of mastery to which the inhabitants\nof early 20th century Cambridge seem to have been peculiarly\nvulnerable\u2014perhaps partly because so many had been raised religious\nand then stopped believing, so had a vacant space in their heads\nfor someone to tell them what to do (others chose Marx or Cardinal\nNewman), and partly because a quiet, earnest place like Cambridge\nin that era had no natural immunity to messianic figures, just as\nEuropean politics then had no natural immunity to dictators.\n\n[14]\nThis is actually from the Ordinatio of Duns Scotus (ca.\n1300), with \"number\" replaced by \"gender.\"  Plus ca change.\n\nWolter, Allan (trans), Duns Scotus: Philosophical Writings, Nelson,\n1963, p. 92.\n\n[15]\nFrankfurt, Harry, On Bullshit,  Princeton University Press,\n2005.\n\n[16]\nSome introductions to philosophy now take the line that\nphilosophy is worth studying as a process rather than for any\nparticular truths you'll learn.  The philosophers whose works they\ncover would be rolling in their graves at that.  They hoped they\nwere doing more than serving as examples of how to argue: they hoped\nthey were getting results.  Most were wrong, but it doesn't seem\nan impossible hope.\n\nThis argument seems to me like someone in 1500 looking at the lack\nof results achieved by alchemy and saying its value was as a process.\nNo, they were going about it wrong.  It turns out it is possible\nto transmute lead into gold (though not economically at current\nenergy prices), but the route to that knowledge was to\nbacktrack and try another approach.\n\nThanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston, \nRobert Morris, Mark Nitzberg, and Peter Norvig for reading drafts of this.\n\n\n", "September 2007\n\nA few weeks ago I had a thought so heretical that it really surprised\nme. It may not matter all that much where you go to college.\n\nFor me, as for a lot of middle class kids, getting into a good\ncollege was more or less the meaning of life when I was growing up.\nWhat was I?  A student.  To do that well meant to get good grades.\nWhy did one have to get good grades?  To get into a good college.\nAnd why did one want to do that?  There seemed to be several reasons:\nyou'd learn more, get better jobs, make more money.  But it didn't\nmatter exactly what the benefits would be.  College was a bottleneck\nthrough which all your future prospects passed; everything would\nbe better if you went to a better college.\n\nA few weeks ago I realized that somewhere along the line I had\nstopped believing that.\n\nWhat first set me thinking about this was the new trend of worrying\nobsessively about what \nkindergarten\nyour kids go to.  It seemed to\nme this couldn't possibly matter.  Either it won't help your kid\nget into Harvard, or if it does, getting into Harvard won't mean\nmuch anymore.  And then I thought: how much does it mean even now?\n\nIt turns out I have a lot of data about that.  My three partners\nand I run a seed stage investment firm called \nY Combinator.  We\ninvest when the company is just a couple guys and an idea.  The\nidea doesn't matter much; it will change anyway.  Most of our\ndecision is based on the founders.  The average founder is three\nyears out of college.  Many have just graduated; a few are still\nin school.  So we're in much the same position as a graduate program,\nor a company hiring people right out of college.  Except our choices\nare immediately and visibly tested.  There are two possible outcomes\nfor a startup: success or failure\u2014and usually you know within a\nyear which it will be.\n\nThe test applied to a startup is among the purest of real world\ntests.  A startup succeeds or fails depending almost entirely on\nthe efforts of the founders.  Success is decided by the market: you\nonly succeed if users like what you've built.  And users don't care\nwhere you went to college.\n\nAs well as having precisely measurable results, we have a lot of\nthem.  Instead of doing a small number of large deals like a\ntraditional venture capital fund, we do a large number of small\nones.  We currently fund about 40 companies a year, selected from\nabout 900 applications representing a total of about 2000 people. \n[1]\n\nBetween the volume of people we judge and the rapid, unequivocal\ntest that's applied to our choices, Y Combinator has been an\nunprecedented opportunity for learning how to pick winners.  One\nof the most surprising things we've learned is how little it matters\nwhere people went to college.\n\nI thought I'd already been cured of caring about that.  There's\nnothing like going to grad school at Harvard to cure you of any\nillusions you might have about the average Harvard undergrad.  And\nyet Y Combinator showed us we were still overestimating people who'd\nbeen to elite colleges.  We'd interview people from MIT or Harvard\nor Stanford and sometimes find ourselves thinking: they must be\nsmarter than they seem.  It took us a few iterations to learn to\ntrust our senses.\n\nPractically everyone thinks that someone who went to MIT or Harvard\nor Stanford must be smart.  Even people who hate you for it believe\nit.\n\nBut when you think about what it means to have gone to an elite\ncollege, how could this be true?   We're talking about a decision\nmade by admissions officers\u2014basically, HR people\u2014based on a\ncursory examination of a huge pile of depressingly similar applications\nsubmitted by seventeen year olds.  And what do they have to go on?\nAn easily gamed standardized test; a short essay telling you what\nthe kid thinks you want to hear; an interview with a random alum;\na high school record that's largely an index of obedience.  Who\nwould rely on such a test?\n\nAnd yet a lot of companies do.  A lot of companies are very much\ninfluenced by where applicants went to college.  How could they be?\nI think I know the answer to that.\n\nThere used to be a saying in the corporate world: \"No one ever got\nfired for buying IBM.\"  You no longer hear this about IBM specifically,\nbut the idea is very much alive; there is a whole category of\n\"enterprise\" software companies that exist to take advantage of it.\nPeople buying technology for large organizations don't care if they\npay a fortune for mediocre software.  It's not their money.  They\njust want to buy from a supplier who seems safe\u2014a company with\nan established name, confident salesmen, impressive offices, and\nsoftware that conforms to all the current fashions.  Not necessarily\na company that will deliver so much as one that, if they do let you\ndown, will still seem to have been a prudent choice.  So companies\nhave evolved to fill that niche.\n\nA recruiter at a big company is in much the same position as someone\nbuying technology for one.  If someone went to Stanford and is not\nobviously insane, they're probably a safe bet.  And a safe bet is\nenough.  No one ever measures recruiters by the later performance\nof people they turn down. \n[2]\n\nI'm not saying, of course, that elite colleges have evolved to prey\nupon the weaknesses of large organizations the way enterprise\nsoftware companies have.  But they work as if they had.  In addition\nto the power of the brand name, graduates of elite colleges have\ntwo critical qualities that plug right into the way large organizations\nwork.  They're good at doing what they're asked, since that's what\nit takes to please the adults who judge you at seventeen.  And\nhaving been to an elite college makes them more confident.\n\nBack in the days when people might spend their whole career at one\nbig company, these qualities must have been very valuable.  Graduates\nof elite colleges would have been capable, yet amenable to authority.\nAnd since individual performance is so hard to measure in large\norganizations, their own confidence would have been the starting\npoint for their reputation.\n\nThings are very different in the new world of startups.  We couldn't\nsave someone from the market's judgement even if we wanted to.  And\nbeing charming and confident counts for nothing with users.  All\nusers care about is whether you make something they like.  If you\ndon't, you're dead.\n\nKnowing that test is coming makes us work a lot harder to get the\nright answers than anyone would if they were merely hiring people.\nWe can't afford to have any illusions about the predictors of\nsuccess.  And what we've found is that the variation between schools\nis so much smaller than the variation between individuals that it's\nnegligible by comparison.  We can learn more about someone in the\nfirst minute of talking to them than by knowing where they went to\nschool.\n\nIt seems obvious when you put it that way.  Look at the individual,\nnot where they went to college.  But that's a weaker statement than\nthe idea I began with, that it doesn't matter much where a given\nindividual goes to college.  Don't you learn things at the best\nschools that you wouldn't learn at lesser places?\n\nApparently not.  Obviously you can't prove this in the case of a\nsingle individual, but you can tell from aggregate evidence: you\ncan't, without asking them, distinguish people who went to one\nschool from those who went to another three times as far down the\nUS News list. \n[3]\nTry it and see.\n\nHow can this be?  Because how much you learn in college depends a\nlot more on you than the college.  A determined party animal can\nget through the best school without learning anything.  And someone\nwith a real thirst for knowledge will be able to find a few smart\npeople to learn from at a school that isn't prestigious at all.\n\n\nThe other students are the biggest advantage of going to an elite\ncollege; you learn more from them than the professors.  But\nyou should be able to reproduce this at most colleges if you make\na conscious effort to find smart friends.  At\nmost colleges you can find at least a handful of other smart students,\nand most people have only a handful of close friends in college\nanyway. \n[4]\nThe odds of finding smart professors are even better.\nThe curve for faculty is a lot flatter than for students, especially\nin math and the hard sciences; you have to go pretty far down the\nlist of colleges before you stop finding smart professors in the\nmath department.\n\nSo it's not surprising that we've found the relative prestige of\ndifferent colleges useless in judging individuals.  There's a lot\nof randomness in how colleges select people, and what they learn\nthere depends much more on them than the college.  Between these\ntwo sources of variation, the college someone went to doesn't mean\na lot.  It is to some degree a predictor of ability, but so weak\nthat we regard it mainly as a source of error and try consciously\nto ignore it.\n\nI doubt what we've discovered is an anomaly specific to startups.\nProbably people have always overestimated the importance of where\none goes to college.  We're just finally able to measure it.\n\nThe unfortunate thing is not just that people are judged by such a\nsuperficial test, but that so many judge themselves by it.  A lot\nof people, probably the majority of people in America, have\nsome amount of insecurity about where, or whether, they went to\ncollege.  The tragedy of the situation is that by far the greatest\nliability of not having gone to the college you'd have liked is\nyour own feeling that you're thereby lacking something.  Colleges\nare a bit like exclusive clubs in this respect.  There is only one\nreal advantage to being a member of most exclusive clubs: you know\nyou wouldn't be missing much if you weren't.  When you're excluded,\nyou can only imagine the advantages of being an insider.  But\ninvariably they're larger in your imagination than in real life.\n\nSo it is with colleges.  Colleges differ, but they're nothing like\nthe stamp of destiny so many imagine them to be.  People aren't\nwhat some admissions officer decides about them at seventeen.\nThey're what they make themselves.\n\nIndeed, the great advantage of not caring where people went to\ncollege is not just that you can stop judging them (and yourself)\nby superficial measures, but that you can focus instead on what\nreally matters.  What matters is what you make of yourself.  \nI think that's what we\nshould tell kids.  Their job isn't to get good grades so they can\nget into a good college, but to learn and do.  And not just because\nthat's more rewarding than worldly success.  That will increasingly\nbe the route to worldly success.\n\n\n\n\n\n\nNotes\n\n[1] \nIs what we measure worth measuring?  I think so.  You can get\nrich simply by being energetic and unscrupulous, but getting rich\nfrom a technology startup takes some amount of brains.   It is just\nthe kind of work the upper middle class values; it has about the\nsame intellectual component as being a doctor.\n\n[2] \nActually, someone did, once.  Mitch Kapor's wife Freada was\nin charge of HR at Lotus in the early years.  (As he is at pains\nto point out, they did not become romantically involved till\nafterward.)  At one point they worried Lotus was losing its startup\nedge and turning into a big company.  So as an experiment she sent\ntheir recruiters the resumes of the first 40 employees, with\nidentifying details changed.  These were the people who had made\nLotus into the star it was.  Not one got an interview.\n\n[3] \nThe US News list?  Surely no one trusts that.  Even if the\nstatistics they consider are useful, how do they decide on the\nrelative weights?  The reason the US News list is meaningful is\nprecisely because they are so intellectually dishonest in that\nrespect.  There is no external source they can use to calibrate the\nweighting of the statistics they use; if there were, we could just\nuse that instead.  What they must do is adjust the weights till the\ntop schools are the usual suspects in about the right order.  So\nin effect what the US News list tells us is what the editors think\nthe top schools are, which is probably not far from the conventional\nwisdom on the matter.  The amusing thing is, because some schools\nwork hard to game the system, the editors will have to keep tweaking\ntheir algorithm to get the rankings they want.\n\n[4] \nPossible doesn't mean easy, of course.  A smart student at a party school\nwill inevitably be something of an outcast, just as he or\nshe would be in most high schools.\n\n\nThanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Jackie\nMcDonough, Peter Norvig, and Robert Morris for reading drafts of\nthis.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nAugust 2007\n", "August 2007\n\nA good programmer working intensively on his own code can hold it\nin his mind the way a mathematician holds a problem he's working\non.  Mathematicians don't answer questions by working them out on\npaper the way schoolchildren are taught to.  They do more in their\nheads: they try to understand a problem space well enough that they\ncan walk around it the way you can walk around the memory of the\nhouse you grew up in.  At its best programming is the same.  You\nhold the whole program in your head, and you can manipulate it at\nwill.\n\nThat's particularly valuable at the start of a project, because\ninitially the most important thing is to be able to change what\nyou're doing.  Not just to solve the problem in a different way,\nbut to change the problem you're solving.\n\nYour code is your understanding of the problem you're exploring.\nSo it's only when you have your code in your head that you really\nunderstand the problem.\n\nIt's not easy to get a program into your head.  If you leave a\nproject for a few months, it can take days to really understand it\nagain when you return to it.  Even when you're actively working on\na program it can take half an hour to load into your head when you\nstart work each day.  And that's in the best case.  Ordinary\nprogrammers working in typical office conditions never enter this\nmode.  Or to put it more dramatically, ordinary programmers working\nin typical office conditions never really understand the problems\nthey're solving.\n\nEven the best programmers don't always have the whole program they're\nworking on loaded into their heads.   But there are things you can\ndo to help:\n\n\n Avoid distractions.  Distractions are bad for many types of work,\n   but especially bad for programming, because programmers tend to\n   operate at the limit of the detail they can handle.\n\nThe danger of a distraction depends not on how long it is, but\n   on how much it scrambles your brain.  A programmer can leave the\n   office and go and get a sandwich without losing the code in his\n   head.  But the wrong kind of interruption can wipe your brain\n   in 30 seconds.\n\nOddly enough, scheduled distractions may be worse than unscheduled\n   ones.  If you know you have a meeting in an hour, you don't even\n   start working on something hard.\n\n Work in long stretches.  Since there's a fixed cost each time\n   you start working on a program, it's more efficient to work in\n   a few long sessions than many short ones.  There will of course\n   come a point where you get stupid because you're tired.  This\n   varies from person to person.  I've heard of people hacking for\n   36 hours straight, but the most I've ever been able to manage\n   is about 18, and I work best in chunks of no more than 12.\n\nThe optimum is not the limit you can physically endure.  There's\n   an advantage as well as a cost of breaking up a project.  Sometimes\n   when you return to a problem after a rest, you find your unconscious\n   mind has left an answer waiting for you.\n\n Use succinct languages.  More \n   powerful programming languages\n   make programs shorter. And programmers seem to think of programs\n   at least partially in the language they're using to write them.\n   The more succinct the language, the shorter the program, and the\n   easier it is to load and keep in your head.\n\nYou can magnify the effect of a powerful language by using a\n   style called bottom-up programming, where you write programs in\n   multiple layers, the lower ones acting as programming languages\n   for those above.  If you do this right, you only have to keep\n   the topmost layer in your head.\n\n Keep rewriting your program.  Rewriting a program often yields\n   a cleaner design.  But it would have advantages even if it didn't:\n   you have to understand a program completely to rewrite it, so\n   there is no better way to get one loaded into your head.\n\n Write rereadable code.  All programmers know it's good to write\n   readable code.  But you yourself are the most important reader.\n   Especially in the beginning; a prototype is a conversation with\n   yourself.  And when writing for yourself you have different\n   priorities.  If you're writing for other people, you may not\n   want to make code too dense.  Some parts of a program may be\n   easiest to read if you spread things out, like an introductory \n   textbook.  Whereas if you're writing code to make it easy to reload \n   into your head, it may be best to go for brevity.\n\n Work in small groups.  When you manipulate a program in your\n   head, your vision tends to stop at the edge of the code you own.\n   Other parts you don't understand as well, and more importantly,\n   can't take liberties with.  So the smaller the number of\n   programmers, the more completely a project can mutate.  If there's\n   just one programmer, as there often is at first, you can do\n   all-encompassing redesigns.\n\n Don't have multiple people editing the same piece of code.  You\n   never understand other people's code as well as your own.  No\n   matter how thoroughly you've read it, you've only read it, not\n   written it.  So if a piece of code is written by multiple authors,\n   none of them understand it as well as a single author would.\n\nAnd of course you can't safely redesign something other people\n   are working on.  It's not just that you'd have to ask permission.\n   You don't even let yourself think of such things.  Redesigning\n   code with several authors is like changing laws; redesigning\n   code you alone control is like seeing the other interpretation\n   of an ambiguous image.\n\nIf you want to put several people to work on a project, divide\n   it into components and give each to one person.\n\n Start small.  A program gets easier to hold in your head as you\n   become familiar with it.  You can start to treat parts as black\n   boxes once you feel confident you've fully explored them.  But\n   when you first start working on a project, you're forced to see\n   everything.  If you start with too big a problem, you may never\n   quite be able to encompass it.  So if you need to write a big,\n   complex program, the best way to begin may not be to write a\n   spec for it, but to write a prototype that solves a subset of\n   the problem.  Whatever the advantages of planning, they're often\n   outweighed by the advantages of being able to keep a program in\n   your head.\n\nIt's striking how often programmers manage to hit all eight points\nby accident.  Someone has an idea for a new project, but because\nit's not officially sanctioned, he has to do it in off hours\u2014which\nturn out to be more productive because there are no distractions.\nDriven by his enthusiasm for the new project he works on it for\nmany hours at a stretch.  Because it's initially just an\nexperiment, instead of a \"production\" language he uses a mere\n\"scripting\" language\u2014which is in fact far more powerful.  He\ncompletely rewrites the program several times; that wouldn't be\njustifiable for an official project, but this is a labor of love\nand he wants it to be perfect.  And since no one is going to see\nit except him, he omits any comments except the note-to-self variety.\nHe works in a small group perforce, because he either hasn't told\nanyone else about the idea yet, or it seems so unpromising that no\none else is allowed to work on it.  Even if there is a group, they\ncouldn't have multiple people editing the same code, because it\nchanges too fast for that to be possible.  And the project starts\nsmall because the idea is small at first; he just has some cool\nhack he wants to try out.\n\nEven more striking are the number of officially sanctioned projects\nthat manage to do all eight things wrong.  In fact, if you look at\nthe way software gets written in most organizations, it's almost\nas if they were deliberately trying to do things wrong. In a sense,\nthey are.  One of the defining qualities of organizations since\nthere have been such a thing is to treat individuals as interchangeable\nparts.  This works well for more parallelizable tasks, like fighting\nwars.  For most of history a well-drilled army of professional\nsoldiers could be counted on to beat an army of individual warriors,\nno matter how valorous.  But having ideas is not very parallelizable.\nAnd that's what programs are: ideas.\n\nIt's not merely true that organizations dislike the idea of depending\non individual genius, it's a tautology.  It's part of the definition\nof an organization not to.  Of our current concept of an organization,\nat least.\n\nMaybe we could define a new kind of organization that combined the\nefforts of individuals without requiring them to be interchangeable.\nArguably a market is such a form of organization, though it may be\nmore accurate to describe a market as a degenerate case\u2014as what\nyou get by default when organization isn't possible.\n\nProbably the best we'll do is some kind of hack, like making the\nprogramming parts of an organization work differently from the rest.\nPerhaps the optimal solution is for big companies not even to try\nto develop ideas in house, but simply to \nbuy them.  But regardless\nof what the solution turns out to be, the first step is to realize\nthere's a problem.  There is a contradiction in the very phrase\n\"software company.\"   The two words are pulling in opposite directions.\nAny good programmer in a large organization is going to be at odds\nwith it, because organizations are designed to prevent what\nprogrammers strive for.\n\nGood programmers manage to get a lot done anyway.  \nBut often it\nrequires practically an act of rebellion against the organizations\nthat employ them.  Perhaps it will help if more people understand that the way\nprogrammers behave is driven by the demands of the work they do.\nIt's not because they're irresponsible that they work in long binges\nduring which they blow off all other obligations, plunge straight into\nprogramming instead of writing specs first, and rewrite code that\nalready works.  It's not because they're unfriendly that they prefer\nto work alone, or growl at people who pop their head in the door\nto say hello.  This apparently random collection of annoying habits\nhas a single explanation: the power of holding a program in one's\nhead.\n\nWhether or not understanding this can help large organizations, it\ncan certainly help their competitors.  The weakest point in big\ncompanies is that they don't let individual programmers do great\nwork.  So if you're a little startup, this is the place to attack\nthem.  Take on the kind of problems that have to be solved in one\nbig brain.\n\n\n\n\n\n\nThanks to Sam Altman, David Greenspan, Aaron Iba, Jessica Livingston,\nRobert Morris, Peter Norvig, Lisa Randall, Emmett Shear, Sergei Tsarev,\nand Stephen Wolfram for reading drafts of this.\n\n", "July 2007\n\nI have too much stuff.  Most people in America do.  In fact, the\npoorer people are, the more stuff they seem to have.  Hardly anyone\nis so poor that they can't afford a front yard full of old cars.\n\nIt wasn't always this way.  Stuff used to be rare and valuable.\nYou can still see evidence of that if you look for it.  For example,\nin my house in Cambridge, which was built in 1876, the bedrooms\ndon't have closets.  In those days people's stuff fit in a chest\nof drawers.  Even as recently as a few decades ago there was a lot\nless stuff.  When I look back at photos from the 1970s, I'm surprised\nhow empty houses look.  As a kid I had what I thought was a huge\nfleet of toy cars, but they'd be dwarfed by the number of toys my\nnephews have.  All together my Matchboxes and Corgis took up about\na third of the surface of my bed.  In my nephews' rooms the bed is\nthe only clear space.\n\nStuff has gotten a lot cheaper, but our attitudes toward it haven't\nchanged correspondingly.  We overvalue stuff.\n\nThat was a big problem\nfor me when I had no money.  I felt poor, and stuff seemed valuable,\nso almost instinctively I accumulated it.  Friends would leave\nsomething behind when they moved, or I'd see something as I was\nwalking down the street on trash night (beware of anything you find\nyourself describing as \"perfectly good\"), or I'd find something in\nalmost new condition for a tenth its retail price at a garage sale.\nAnd pow, more stuff.\n\nIn fact these free or nearly free things weren't bargains, because\nthey were worth even less than they cost.  Most of the stuff I\naccumulated was worthless, because I didn't need it.\n\nWhat I didn't understand was that the value of some new acquisition\nwasn't the difference between its retail price and what I paid for\nit.  It was the value I derived from it.  Stuff is an extremely\nilliquid asset.  Unless you have some plan for selling that valuable\nthing you got so cheaply, what difference does it make what it's\n\"worth?\"  The only way you're ever going to extract any value from\nit is to use it.  And if you don't have any immediate use for it,\nyou probably never will.\n\nCompanies that sell stuff have spent huge sums training us to think\nstuff is still valuable.  But it would be closer to the truth to\ntreat stuff as worthless.\n\nIn fact, worse than worthless, because once you've accumulated a\ncertain amount of stuff, it starts to own you rather than the other\nway around.  I know of one couple who couldn't retire to the town\nthey preferred because they couldn't afford a place there big enough\nfor all their stuff.  Their house isn't theirs; it's their stuff's.\n\nAnd unless you're extremely organized, a house full of stuff can\nbe very depressing. A cluttered room saps one's spirits.  One\nreason, obviously, is that there's less room for people in a room\nfull of stuff.  But there's more going on than that.  I think humans\nconstantly scan their environment to build a mental model of what's\naround them.  And the harder a scene is to parse, the less energy\nyou have left for conscious thoughts.  A cluttered room is literally\nexhausting.\n\n(This could explain why clutter doesn't seem to bother kids as much\nas adults. Kids are less perceptive.  They build a coarser model\nof their surroundings, and this consumes less energy.)\n\nI first realized the worthlessness of stuff when I lived in Italy\nfor a year.  All I took with me was one large backpack of stuff.\nThe rest of my stuff I left in my landlady's attic back in the US.\nAnd you know what?  All I missed were some of the books.  By the\nend of the year I couldn't even remember what else I had stored in\nthat attic.\n\nAnd yet when I got back I didn't discard so much as a box of it.\nThrow away a perfectly good rotary telephone?  I might need that\none day.\n\nThe really painful thing to recall is not just that I accumulated\nall this useless stuff, but that I often spent money I desperately\nneeded on stuff that I didn't.\n\nWhy would I do that?  Because the people whose job is to sell you\nstuff are really, really good at it.  The average 25 year old is\nno match for companies that have spent years figuring out how to\nget you to spend money on stuff.  They make the experience of buying\nstuff so pleasant that \"shopping\" becomes a leisure activity.\n\nHow do you protect yourself from these people?  It can't be easy.\nI'm a fairly skeptical person, and their tricks worked on me well\ninto my thirties.  But one thing that might work is to ask yourself,\nbefore buying something, \"is this going to make my life noticeably\nbetter?\"\n\nA friend of mine cured herself of a clothes buying habit by asking\nherself before she bought anything \"Am I going to wear this all the\ntime?\"  If she couldn't convince herself that something she was\nthinking of buying would become one of those few things she wore\nall the time, she wouldn't buy it.  I think that would work for any\nkind of purchase.  Before you buy anything, ask yourself: will this\nbe something I use constantly?  Or is it just something nice?  Or\nworse still, a mere bargain?\n\nThe worst stuff in this respect may be stuff you don't use much\nbecause it's too good.  Nothing owns you like fragile stuff.  For\nexample, the \"good china\" so many households have, and whose defining\nquality is not so much that it's fun to use, but that one must be\nespecially careful not to break it.\n\nAnother way to resist acquiring stuff is to think of the overall\ncost of owning it.  The purchase price is just the beginning.  You're\ngoing to have to think about that thing for years\u2014perhaps for\nthe rest of your life.  Every thing you own takes energy away from\nyou.  Some give more than they take.  Those are the only things\nworth having.\n\nI've now stopped accumulating stuff.  Except books\u2014but books are\ndifferent.  Books are more like a fluid than individual objects.\nIt's not especially inconvenient to own several thousand books,\nwhereas if you owned several thousand random possessions you'd be\na local celebrity.  But except for books, I now actively avoid\nstuff.  If I want to spend money on some kind of treat, I'll take\nservices over \ngoods any day.\n\nI'm not claiming this is because I've achieved some kind of zenlike\ndetachment from material things.  I'm talking about something more\nmundane.  A historical change has taken place, and I've now realized\nit.  Stuff used to be valuable, and now it's not.\n\nIn industrialized countries the same thing happened with food in\nthe middle of the twentieth century.  As food got cheaper (or we\ngot richer; they're indistinguishable), eating too much started to\nbe a bigger danger than eating too little.   We've now reached that\npoint with stuff.  For most people, rich or poor, stuff has become\na burden.\n\nThe good news is, if you're carrying a burden without knowing it,\nyour life could be better than you realize.  Imagine walking around\nfor years with five pound ankle weights, then suddenly having them\nremoved.\n\n\n\n\n\n\n\n\n", "July 2007\n\nAn investor wants to give you money for a certain percentage of\nyour startup.  Should you take it?  You're about to hire your first\nemployee.  How much stock should you give him?\n\nThese are some of the hardest questions founders face.  And yet\nboth have the same answer:\n\n1/(1 - n)\n\nWhenever you're trading stock in your company for anything, whether\nit's money or an employee or a deal with another company, the test\nfor whether to do it is the same.  You should give up n% of your\ncompany if what you trade it for improves your average outcome\nenough that the (100 - n)% you have left is worth more than the\nwhole company was before.\n\nFor example, if an investor wants to buy half your company, how\nmuch does that investment have to improve your average outcome for\nyou to break even?  Obviously it has to double: if you trade half\nyour company for something that more than doubles the company's\naverage outcome, you're net ahead.  You have half as big a share\nof something worth more than twice as much.\n\nIn the general case, if n is the fraction of the company you're\ngiving up, the deal is a good one if it makes the company worth\nmore than 1/(1 - n).\n\nFor example, suppose Y Combinator offers to fund you in return for\n7% of your company.  In this case, n is .07 and 1/(1 - n) is 1.075.\nSo you should take the deal if you believe we can improve your\naverage outcome by more than 7.5%.  If we improve your outcome by\n10%, you're net ahead, because the remaining .93 you hold is worth\n.93 x 1.1 = 1.023.\n[1]\n\nOne of the things the equity equation shows us is that, financially\nat least, taking money from a top VC firm can be a really good deal.\nGreg Mcadoo from Sequoia recently said at a YC dinner that when\nSequoia invests alone they like to take about 30% of a company.\n1/.7 = 1.43, meaning that deal is worth taking if they can improve\nyour outcome by more than 43%.  For the average startup, that would\nbe an extraordinary bargain.  It would improve the average startup's\nprospects by more than 43% just to be able to say they were funded\nby Sequoia, even if they never actually got the money.\n\nThe reason Sequoia is such a good deal is that the percentage of\nthe company they take is artificially low.  They don't even try to\nget market price for their investment; they limit their holdings\nto leave the founders enough stock to feel the company is still\ntheirs.\n\nThe catch is that Sequoia gets about 6000 business plans a year and\nfunds about 20 of them, so the odds of getting this great deal are\n1 in 300. The companies that make it through are not average startups.\n\nOf course, there are other factors to consider in a VC deal.  It's\nnever just a straight trade of money for stock.  But if it were,\ntaking money from a top firm would generally be a bargain.\n\nYou can use the same formula when giving stock to employees, but\nit works in the other direction.  If i is the average outcome for\nthe company with the addition of some new person, then they're worth\nn such that i = 1/(1 - n).  Which means n = (i - 1)/i.\n\nFor example, suppose you're just two founders and you want to hire\nan additional hacker who's so good you feel he'll increase the\naverage outcome of the whole company by 20%.  n = (1.2 - 1)/1.2 =\n.167.  So you'll break even if you trade 16.7% of the company\nfor him.\n\nThat doesn't mean 16.7% is the right amount of stock to give him.\nStock is not the only cost of hiring someone: there's usually salary\nand overhead as well.  And if the company merely breaks even on the\ndeal, there's no reason to do it.\n\nI think to translate salary and overhead into stock you should\nmultiply the annual rate by about 1.5.  Most startups grow fast or\ndie; if you die you don't have to pay the guy, and if you grow fast\nyou'll be paying next year's salary out of next year's valuation,\nwhich should be 3x this year's.  If your valuation grows 3x a year,\nthe total cost in stock of a new hire's salary and overhead is 1.5\nyears' cost at the present valuation.  [2]\n\nHow much of an additional margin should the company need as the\n\"activation energy\" for the deal?  Since this is in effect the\ncompany's profit on a hire, the market will determine that: if\nyou're a hot opportunity, you can charge more.\n\nLet's run through an example.  Suppose the company wants to make a\n\"profit\" of 50% on the new hire mentioned above.  So subtract a\nthird from 16.7% and we have 11.1% as his \"retail\" price.  Suppose\nfurther that he's going to cost $60k a year in salary and overhead,\nx 1.5 = $90k total.  If the company's valuation is $2 million, $90k\nis 4.5%.  11.1% - 4.5% = an offer of 6.6%.\n\nIncidentally, notice how important it is for early employees to\ntake little salary.  It comes right out of stock that could otherwise\nbe given to them.\n\nObviously there is a great deal of play in these numbers.  I'm not\nclaiming that stock grants can now be reduced to a formula.  Ultimately\nyou always have to guess.  But at least know what you're guessing.\nIf you choose a number based on your gut feel, or a table of typical\ngrant sizes supplied by a VC firm, understand what those are estimates\nof.\n\nAnd more generally, when you make any decision involving equity,\nrun it through 1/(1 - n) to see if it makes sense.  You should\nalways feel richer after trading equity.  If the trade didn't\nincrease the value of your remaining shares enough to put you net\nahead, you wouldn't have (or shouldn't have) done it.\n\n\n\nNotes\n\n[1] This is why we\ncan't believe anyone would think Y Combinator was a bad deal.  Does\nanyone really think we're so useless that in three months we can't\nimprove a startup's prospects by 7.5%?\n\n\n[2] The obvious choice\nfor your present valuation is the post-money valuation of your last\nfunding round.  This probably undervalues the company, though,\nbecause (a) unless your last round just happened, the company is\npresumably worth more, and (b) the valuation of an early funding\nround usually reflects some other contribution by the investors.\n\nThanks to Sam Altman, Trevor Blackwell, Paul Buchheit, \nHutch Fishman, David Hornik, Paul Kedrosky, Jessica Livingston, Gary Sabot, and \nJoshua Schachter for reading drafts of this.\n\n", "May 2007\n\nPeople who worry about the increasing gap between rich and poor\ngenerally look back on the mid twentieth century as a golden age.\nIn those days we had a large number of high-paying union manufacturing\njobs that boosted the median income.  I wouldn't quite call the\nhigh-paying union job a myth, but I think people who dwell on it\nare reading too much into it.\n\nOddly enough, it was working with startups that made me realize\nwhere the high-paying union job came from.  In a rapidly growing\nmarket, you don't worry too much about efficiency.  It's more\nimportant to grow fast.  If there's some mundane problem getting\nin your way, and there's a simple solution that's somewhat expensive,\njust take it and get on with more important things.  EBay didn't\nwin by paying less for servers than their competitors.\n\nDifficult though it may be to imagine now, manufacturing was a\ngrowth industry in the mid twentieth century.  This was an era when\nsmall firms making everything from cars to candy were getting\nconsolidated into a new kind of corporation with national reach and\nhuge economies of scale.  You had to grow fast or die.  Workers\nwere for these companies what servers are for an Internet startup.\nA reliable supply was more important than low cost.\n\nIf you looked in the head of a 1950s auto executive, the attitude\nmust have been: sure, give 'em whatever they ask for, so long as\nthe new model isn't delayed.\n\nIn other words, those workers were not paid what their work was\nworth.  Circumstances being what they were, companies would have\nbeen stupid to insist on paying them so little.\n\nIf you want a less controversial example of this phenomenon, ask\nanyone who worked as a consultant building web sites during the\nInternet Bubble.  In the late nineties you could get paid huge sums\nof money for building the most trivial things.  And yet does anyone\nwho was there have any expectation those days will ever return?  I\ndoubt it.  Surely everyone realizes that was just a temporary\naberration.\n\nThe era of labor unions seems to have been the same kind of aberration, \njust spread\nover a longer period, and mixed together with a lot of ideology\nthat prevents people from viewing it with as cold an eye as they\nwould something like consulting during the Bubble.\n\nBasically, unions were just Razorfish.\n\nPeople who think the labor movement was the creation of heroic union\norganizers have a problem to explain: why are unions shrinking now?\nThe best they can do is fall back on the default explanation of\npeople living in fallen civilizations.  Our ancestors were giants.\nThe workers of the early twentieth century must have had a moral\ncourage that's lacking today.\n\nIn fact there's a simpler explanation.  The early twentieth century\nwas just a fast-growing startup overpaying for infrastructure.  And\nwe in the present are not a fallen people, who have abandoned\nwhatever mysterious high-minded principles produced the high-paying\nunion job.  We simply live in a time when the fast-growing companies\noverspend on different things.\n\n\n", "April 2007\n\n(This essay is derived from a keynote talk at the 2007 ASES Summit\nat Stanford.)\n\nThe world of investors is a foreign one to most hackers\u2014partly\nbecause investors are so unlike hackers, and partly because they\ntend to operate in secret.  I've been dealing with this world for\nmany years, both as a founder and an investor, and I still don't\nfully understand it.\n\nIn this essay I'm going to list some of the more surprising things\nI've learned about investors.  Some I only learned in the past year.\n\nTeaching hackers how to deal with investors is probably the second\nmost important thing we do at Y Combinator.  The most important\nthing for a startup is to make something good.  But everyone knows\nthat's important.  The dangerous thing about investors is that\nhackers don't know how little they know about this strange world.\n\n1. The investors are what make a startup hub.\n\nAbout a year ago I tried to figure out what you'd need to reproduce\nSilicon Valley.  I decided the \ncritical ingredients were rich people\nand nerds\u2014investors and founders.  People are all you need to\nmake technology, and all the other people will move.\n\nIf I had to narrow that down, I'd say investors are the limiting\nfactor.  Not because they contribute more to the startup, but simply\nbecause they're least willing to move.  They're rich.  They're not\ngoing to move to Albuquerque just because there are some smart\nhackers there they could invest in.  Whereas hackers will move to\nthe Bay Area to find investors.\n\n2. Angel investors are the most critical.\n\nThere are several types of investors.  The two main categories are\nangels and VCs: VCs invest other people's money, and angels invest\ntheir own.\n\nThough they're less well known, the angel investors are probably\nthe more critical ingredient in creating a silicon valley.  Most\ncompanies that VCs invest in would never have made it that far if angels\nhadn't invested first.  VCs say between half and three quarters of\ncompanies that raise series A rounds have taken some outside\ninvestment already.\n[1]\n\nAngels are willing to fund riskier projects than VCs.  They also\ngive valuable advice, because (unlike VCs) many have been startup\nfounders themselves.\n\nGoogle's story shows the key role angels play. A lot of people know\nGoogle raised money from Kleiner and Sequoia.  What most don't realize\nis how late.  That VC round was a series B round; the premoney\nvaluation was $75 million.  Google was already a successful company\nat that point.  Really, Google was funded with angel money.\n\nIt may seem odd that the canonical Silicon Valley startup was funded\nby angels, but this is not so surprising.  Risk is always proportionate\nto reward.  So the most successful startup of all is likely to have\nseemed an extremely risky bet at first, and that is exactly the\nkind VCs won't touch.\n\nWhere do angel investors come from?  From other startups.  So startup\nhubs like Silicon Valley benefit from something like the marketplace\neffect, but shifted in time: startups are there because startups\nwere there.\n\n3. Angels don't like publicity.\n\nIf angels are so important, why do we hear more about VCs?  Because\nVCs like publicity.  They need to market themselves to the investors\nwho are their \"customers\"\u2014the endowments and pension funds and\nrich families whose money they invest\u2014and also to founders who\nmight come to them for funding.\n\nAngels don't need to market themselves to investors because they\ninvest their own money.  Nor do they want to market themselves to\nfounders: they don't want random people pestering them with business\nplans.  Actually, neither do VCs.  Both angels and VCs get deals\nalmost exclusively through personal introductions.  \n[2]\n\nThe reason VCs want a strong brand is not to draw in more business\nplans over the transom, but so they win deals when competing\nagainst other VCs.  Whereas angels are rarely in direct competition,\nbecause (a) they do fewer deals, (b) they're happy to split them,\nand (c) they invest at a point where the stream is broader.\n\n4. Most investors, especially VCs, are not like founders.\n\nSome angels are, or were, hackers.  But most VCs are a different\ntype of people: they're dealmakers.\n\nIf you're a hacker, here's a thought experiment you can run to\nunderstand why there are basically no hacker VCs: How would you\nlike a job where you never got to make anything, but instead spent\nall your time listening to other people pitch (mostly terrible)\nprojects, deciding whether to fund them, and sitting on their boards\nif you did?  That would not be fun for most hackers.  Hackers like\nto make things.  This would be like being an administrator.\n\nBecause most VCs are a different species of people from\nfounders, it's hard to know what they're thinking.  If you're a\nhacker, the last time you had to deal with these guys was in high\nschool.  Maybe in college you walked past their fraternity on your\nway to the lab.  But don't underestimate them.  They're as expert\nin their world as you are in yours.  What they're good at is reading\npeople, and making deals work to their advantage.  Think twice\nbefore you try to beat them at that.\n\n5. Most investors are momentum investors.\n\nBecause most investors are dealmakers rather than technology people,\nthey generally don't understand what you're doing.  I knew as a\nfounder that most VCs didn't get technology.  I also knew some made\na lot of money.  And yet it never occurred to me till recently to\nput those two ideas together and ask \"How can VCs make money by\ninvesting in stuff they don't understand?\"\n\nThe answer is that they're like momentum investors.  You can (or\ncould once) make a lot of money by noticing sudden changes in stock\nprices.  When a stock jumps upward, you buy, and when it suddenly\ndrops, you sell.  In effect you're insider trading, without knowing\nwhat you know.  You just know someone knows something, and that's\nmaking the stock move.\n\nThis is how most venture investors operate.  They don't try to look\nat something and predict whether it will take off.  They win by\nnoticing that something is taking off a little sooner than everyone\nelse.  That generates almost as good returns as actually being able\nto pick winners.  They may have to pay a little more than they would\nif they got in at the very beginning, but only a little.\n\nInvestors always say what they really care about is the team.\nActually what they care most about is your traffic, then what other\ninvestors think, then the team.  If you don't yet have any traffic,\nthey fall back on number 2, what other investors think.  And this,\nas you can imagine, produces wild oscillations in the \"stock price\"\nof a startup.  One week everyone wants you, and they're begging not\nto be cut out of the deal.  But all it takes is for one big investor\nto cool on you, and the next week no one will return your phone\ncalls.  We regularly have startups go from hot to cold or cold to\nhot in a matter of days, and literally nothing has changed.\n\nThere are two ways to deal with this phenomenon.  If you're feeling\nreally confident, you can try to ride it.  You can start by asking\na comparatively lowly VC for a small amount of money, and then after\ngenerating interest there, ask more prestigious VCs for larger\namounts, stirring up a crescendo of buzz, and then \"sell\" at the\ntop.  This is extremely risky, and takes months even if you succeed.\nI wouldn't try it myself.  My advice is to err on the side of safety:\nwhen someone offers you a decent deal, just take it and get on with\nbuilding the company.  Startups win or lose based on the quality\nof their product, not the quality of their funding deals.\n\n6. Most investors are looking for big hits.\n\nVenture investors like companies that could go public.  That's where\nthe big returns are.  They know the odds of any individual startup\ngoing public are small, but they want to invest in those that at\nleast have a chance of going public.\n\nCurrently the way VCs seem to operate is to invest in a bunch of\ncompanies, most of which fail, and one of which is Google.  Those\nfew big wins compensate for losses on their other investments.  What this\nmeans is that most VCs will only invest in you if you're a potential\nGoogle.  They don't care about companies that are a safe bet to be\nacquired for $20 million.  There needs to be a chance, however\nsmall, of the company becoming really big.\n\nAngels are different in this respect.  They're happy to invest in\na company where the most likely outcome is a $20 million acquisition\nif they can do it at a low enough valuation.  But of course they\nlike companies that could go public too.  So having an ambitious\nlong-term plan pleases everyone.\n\nIf you take VC money, you have to mean it, because the structure\nof VC deals prevents early acquisitions.  If you take VC money,\nthey won't let you sell early.\n\n7. VCs want to invest large amounts.\n\nThe fact that they're running investment funds makes VCs want to\ninvest large amounts.  A typical VC fund is now hundreds of millions\nof dollars.  If $400 million has to be invested by 10 partners,\nthey have to invest $40 million each.  VCs usually sit on the boards\nof companies they fund.  If the average deal size was $1 million,\neach partner would have to sit on 40 boards, which would not be\nfun.  So they prefer bigger deals, where they can put a lot of money\nto work at once.\n\nVCs don't regard you as a bargain if you don't need a lot of money.\nThat may even make you less attractive, because it means their\ninvestment creates less of a barrier to entry for competitors.\n\nAngels are in a different position because they're investing their\nown money.  They're happy to invest small amounts\u2014sometimes as\nlittle as $20,000\u2014as long as the potential returns look good\nenough.  So if you're doing something inexpensive, go to angels.\n\n8. Valuations are fiction.\n\nVCs admit that valuations are an artifact.  They decide how much\nmoney you need and how much of the company they want, and those two\nconstraints yield a valuation.\n\nValuations increase as the size of the investment does.  A company\nthat an angel is willing to put $50,000 into at a valuation of a\nmillion can't take $6 million from VCs at that valuation.  That\nwould leave the founders less than a seventh of the company between\nthem (since the option pool would also come out of that seventh).\nMost VCs wouldn't want that, which is why you never hear of deals\nwhere a VC invests $6 million at a premoney valuation of $1 million.\n\nIf valuations change depending on the amount invested, that shows\nhow far they are from reflecting any kind of value of the company.\n\nSince valuations are made up, founders shouldn't care too much about\nthem.  That's not the part to focus on.  In fact, a high valuation\ncan be a bad thing.  If you take funding at a premoney valuation\nof $10 million, you won't be selling the company for 20.  You'll\nhave to sell for over 50 for the VCs to get even a 5x return, which\nis low to them.  More likely they'll want you to hold out for 100.\nBut needing to get a high price decreases the chance of getting\nbought at all; many companies can buy you for $10 million, but only\na handful for 100.  And since a startup is like a pass/fail course\nfor the founders, what you want to optimize is your chance of a\ngood outcome, not the percentage of the company you keep.\n\nSo why do founders chase high valuations?  They're tricked by\nmisplaced ambition.  They feel they've achieved more if they get a\nhigher valuation.  They usually know other founders, and if they\nget a higher valuation they can say \"mine is bigger than yours.\"\nBut funding is not the real test.  The real test is the final outcome\nfor the founder, and getting too high a valuation may just make a\ngood outcome less likely.\n\nThe one advantage of a high valuation is that you get less dilution.\nBut there is another less sexy way to achieve that: just take less\nmoney.\n\n9. Investors look for founders like the current stars.\n\nTen years ago investors were looking for the next Bill Gates.  This\nwas a mistake, because Microsoft was a very anomalous startup.  They\nstarted almost as a contract programming operation, and the reason\nthey became huge was that IBM happened to drop the PC standard in\ntheir lap.\n\nNow all the VCs are looking for the next Larry and Sergey.  This\nis a good trend, because Larry and Sergey are closer to the ideal\nstartup founders.\n\nHistorically investors thought it was important for a founder to\nbe an expert in business.  So they were willing to fund teams of\nMBAs who planned to use the money to pay programmers to build their\nproduct for them.  This is like funding Steve Ballmer in the hope\nthat the programmer he'll hire is Bill Gates\u2014kind of backward,\nas the events of the Bubble showed.  Now most VCs know they should\nbe funding technical guys.  This is more pronounced among the very\ntop funds; the lamer ones still want to fund MBAs.\n\nIf you're a hacker, it's good news that investors are looking for\nLarry and Sergey.  The bad news is, the only investors who can do\nit right are the ones who knew them when they were a\ncouple of CS grad students, not the confident media stars they are\ntoday.  What investors still don't get is how clueless and tentative\ngreat founders can seem at the very beginning.\n\n10. The contribution of investors tends to be underestimated.\n\nInvestors do more for startups than give them money.  They're helpful\nin doing deals and arranging introductions, and some of the smarter\nones, particularly angels, can give good advice about the product.\n\nIn fact, I'd say what separates the great investors from the mediocre\nones is the quality of their advice.  Most investors give advice,\nbut the top ones give good advice.\n\nWhatever help investors give a startup tends to be underestimated.\nIt's to everyone's advantage to let the world think the founders\nthought of everything.  The goal of the investors is for the company\nto become valuable, and the company seems more valuable if it seems\nlike all the good ideas came from within.\n\nThis trend is compounded by the obsession that the press has with\nfounders.  In a company founded by two people, 10% of the ideas\nmight come from the first guy they hire.  Arguably they've done a\nbad job of hiring otherwise.  And yet this guy will be almost\nentirely overlooked by the press.\n\nI say this as a founder: the contribution of founders is always\noverestimated.  The danger here is that new founders, looking at\nexisting founders, will think that they're supermen that one couldn't\npossibly equal oneself.  Actually they have a hundred different\ntypes of support people just offscreen making the whole show possible.\n[3]\n\n11. VCs are afraid of looking bad.\n\nI've been very surprised to discover how timid most VCs are.  They\nseem to be afraid of looking bad to their partners, and perhaps\nalso to the limited partners\u2014the people whose money they invest.\n\nYou can measure this fear in how much less risk VCs are willing to\ntake.  You can tell they won't make investments for their fund that\nthey might be willing to make themselves as angels.  Though it's\nnot quite accurate to say that VCs are less willing to take risks.\nThey're less willing to do things that might look bad.  That's not\nthe same thing.\n\nFor example, most VCs would be very reluctant to invest in a startup\nfounded by a pair of 18 year old hackers, no matter how brilliant,\nbecause if the startup failed their partners could turn on them and\nsay \"What, you invested $x million of our money in a pair of 18\nyear olds?\"  Whereas if a VC invested in a startup founded by\nthree former banking executives in their 40s who planned to outsource\ntheir product development\u2014which to my mind is actually a lot\nriskier than investing in a pair of really smart 18 year olds\u2014he\ncouldn't be faulted, if it failed, for making such an apparently\nprudent investment.\n\nAs a friend of mine said, \"Most VCs can't do anything that would\nsound bad to the kind of doofuses who run pension funds.\" Angels\ncan take greater risks because they don't have to answer to anyone.\n\n12. Being turned down by investors doesn't mean much.\n\nSome founders are quite dejected when they get turned down by\ninvestors.  They shouldn't take it so much to heart.  To start with,\ninvestors are often wrong.  It's hard to think of a successful\nstartup that wasn't turned down by investors at some point.  Lots\nof VCs rejected Google.  So obviously the reaction of investors is\nnot a very meaningful test.\n\nInvestors will often reject you for what seem to be superficial\nreasons.  I read of one VC who \nturned\ndown a startup simply because\nthey'd given away so many little bits of stock that the deal required\ntoo many signatures to close. \n[4]\nThe reason investors can get away\nwith this is that they see so many deals.  It doesn't matter if\nthey underestimate you because of some surface imperfection, because\nthe next best deal will be almost as good.  \nImagine picking out\napples at a grocery store.  You grab one with a little bruise.\nMaybe it's just a surface bruise, but why even bother checking when\nthere are so many other unbruised apples to choose from?\n\nInvestors would be the first to admit they're often wrong.  So when\nyou get rejected by investors, don't think \"we suck,\" but instead\nask \"do we suck?\"  Rejection is a question, not an answer.\n\n13. Investors are emotional.\n\nI've been surprised to discover how emotional investors can be.\nYou'd expect them to be cold and calculating, or at least businesslike,\nbut often they're not.  I'm not sure if it's their position of power\nthat makes them this way, or the large sums of money involved, but\ninvestment negotiations can easily turn personal.  If you offend\ninvestors, they'll leave in a huff.\n\nA while ago an eminent VC firm offered a series A round to a startup\nwe'd seed funded.  Then they heard a rival VC firm was also interested.\nThey were so afraid that they'd be rejected in favor of this other\nfirm that they gave the startup what's known as an \"exploding\ntermsheet.\"  They had, I think, 24 hours to say yes or no, or the\ndeal was off.  Exploding termsheets are a somewhat dubious device,\nbut not uncommon.  What surprised me was their reaction when I\ncalled to talk about it.  I asked if they'd still be interested in\nthe startup if the rival VC didn't end up making an offer, and they\nsaid no.  What rational basis could they have had for saying that?\nIf they thought the startup was worth investing in, what difference\nshould it make what some other VC thought?  Surely it was their\nduty to their limited partners simply to invest in the best\nopportunities they found; they should be delighted if the other VC\nsaid no, because it would mean they'd overlooked a good opportunity.\nBut of course there was no rational basis for their decision.  They\njust couldn't stand the idea of taking this rival firm's rejects.\n\nIn this case the exploding termsheet was not (or not only) a tactic\nto pressure the startup.  It was more like the high school trick\nof breaking up with someone before they can break up with you.  In\nan earlier essay I said that VCs were a lot like high school girls.\nA few VCs have joked about that characterization, but none have\ndisputed it.\n\n14. The negotiation never stops till the closing.\n\nMost deals, for investment or acquisition, happen in two phases.\nThere's an initial phase of negotiation about the big questions.\nIf this succeeds you get a termsheet, so called because it outlines\nthe key terms of a deal.  A termsheet is not legally binding,\nbut it is a definite step.  It's supposed to mean that a\ndeal is going to happen, once the lawyers work out all the details.\nIn theory these details are minor ones; by definition all the\nimportant points are supposed to be covered in the termsheet.\n\nInexperience and wishful thinking combine to make founders feel\nthat when they have a termsheet, they have a deal.  They want there\nto be a deal; everyone acts like they have a deal; so there must\nbe a deal.  But there isn't and may not be for several months.  A\nlot can change for a startup in several months.  It's not uncommon\nfor investors and acquirers to get buyer's remorse.  So you have\nto keep pushing, keep selling, all the way to the close.  Otherwise\nall the \"minor\" details left unspecified in the termsheet will be\ninterpreted to your disadvantage.  The other side may even break\nthe deal; if they do that, they'll usually seize on some technicality\nor claim you misled them, rather than admitting they changed their\nminds.\n\nIt can be hard to keep the pressure on an investor or acquirer all\nthe way to the closing, because the most effective pressure is\ncompetition from other investors or acquirers, and these tend to\ndrop away when you get a termsheet.  You should try to stay as close\nfriends as you can with these rivals, but the most important thing\nis just to keep up the momentum in your startup.  The investors or\nacquirers chose you because you seemed hot.  Keep doing whatever\nmade you seem hot.  Keep releasing new features; keep getting new\nusers; keep getting mentioned in the press and in blogs.\n\n15. Investors like to co-invest.\n\nI've been surprised how willing investors are to split deals.  You\nmight think that if they found a good deal they'd want it all to\nthemselves, but they seem positively eager to syndicate.  This is\nunderstandable with angels; they invest on a smaller scale and don't\nlike to have too much money tied up in any one deal.  But VCs also\nshare deals a lot.  Why?\n\nPartly I think this is an artifact of the rule I quoted earlier:\nafter traffic, VCs care most what other VCs think.  A deal that has\nmultiple VCs interested in it is more likely to close, so of deals\nthat close, more will have multiple investors.\n\nThere is one rational reason to want multiple VCs in a deal: Any\ninvestor who co-invests with you is one less investor who could\nfund a competitor.  Apparently Kleiner and Sequoia didn't like\nsplitting the Google deal, but it did at least have the advantage,\nfrom each one's point of view, that there probably wouldn't be a\ncompetitor funded by the other.  Splitting deals thus has similar\nadvantages to confusing paternity.\n\nBut I think the main reason VCs like splitting deals is the fear\nof looking bad.  If another firm shares the deal, then in the event\nof failure it will seem to have been a prudent choice\u2014a consensus\ndecision, rather than just the whim of an individual partner.\n\n16. Investors collude.\n\nInvesting is not covered by antitrust law.  At least, it better not\nbe, because investors regularly do things that would be illegal\notherwise.  I know personally of cases where one investor has talked\nanother out of making a competitive offer, using the promise of\nsharing future deals.\n\nIn principle investors are all competing for the same deals, but\nthe spirit of cooperation is stronger than the spirit of competition.\nThe reason, again, is that there are so many deals.  Though a\nprofessional investor may have a closer relationship with a founder\nhe invests in than with other investors, his relationship with the\nfounder is only going to last a couple years, whereas his relationship\nwith other firms will last his whole career.  There isn't so much\nat stake in his interactions with other investors, but there will\nbe a lot of them.  Professional investors are constantly trading\nlittle favors.\n\nAnother reason investors stick together is to preserve the power\nof investors as a whole.  So you will not, as of this writing, be\nable to get investors into an auction for your series A round.\nThey'd rather lose the deal than establish a precedent of VCs\ncompetitively bidding against one another.  An efficient startup\nfunding market may be coming in the distant future; things tend to\nmove in that direction; but it's certainly not here now.\n\n\n17. Large-scale investors care about their portfolio, not any\nindividual company.\n\nThe reason startups work so well is that everyone with power also\nhas equity.  The only way any of them can succeed is if they all\ndo.  This makes everyone naturally pull in the same direction,\nsubject to differences of opinion about tactics.\n\nThe problem is, larger scale investors don't have exactly the same\nmotivation.  Close, but not identical. They don't need any given\nstartup to succeed, like founders do, just their portfolio as a\nwhole to.  So in borderline cases the rational thing for them to\ndo is to sacrifice unpromising startups.\n\nLarge-scale investors tend to put startups in three categories:\nsuccesses, failures, and the \"living dead\"\u2014companies that are\nplugging along but don't seem likely in the immediate future to get\nbought or go public.  To the founders, \"living dead\" sounds harsh.\nThese companies may be far from failures by ordinary standards. But\nthey might as well be from a venture investor's point of view, and\nthey suck up just as much time and attention as the successes.  So\nif such a company has two possible strategies, a conservative one\nthat's slightly more likely to work in the end, or a risky one that\nwithin a short time will either yield a giant success or kill the\ncompany, VCs will push for the kill-or-cure option.  To them the\ncompany is already a write-off.  Better to have resolution, one way\nor the other, as soon as possible.\n\nIf a startup gets into real trouble, instead of trying to save it\nVCs may just sell it at a low price to another of their portfolio\ncompanies.  Philip Greenspun said in Founders at Work that Ars Digita's VCs did this to them.\n\n18. Investors have different risk profiles from founders.\n\nMost people would rather a 100% chance of $1 million than a 20%\nchance of $10 million.  Investors are rich enough to be rational\nand prefer the latter.  So they'll always tend to encourage founders\nto keep rolling the dice.  If a company is doing well, investors\nwill want founders to turn down most acquisition offers.  And indeed,\nmost startups that turn down acquisition offers ultimately do better.\nBut it's still hair-raising for the founders, because they might\nend up with nothing.  When someone's offering to buy you for a price\nat which your stock is worth $5 million, saying no is equivalent\nto having $5 million and betting it all on one spin of the roulette\nwheel.\n\nInvestors will tell you the company is worth more.  And they may\nbe right.  But that doesn't mean it's wrong to sell.  Any financial\nadvisor who put all his client's assets in the stock of a single,\nprivate company would probably lose his license for it.\n\nMore and more, investors are letting founders cash out partially.\nThat should correct the problem. Most founders have such low standards\nthat they'll feel rich with a sum that doesn't seem huge to investors.\nBut this custom is spreading too slowly, because VCs are afraid of\nseeming irresponsible.  No one wants to be the first VC to give\nsomeone fuck-you money and then actually get told \"fuck you.\" But\nuntil this does start to happen, we know VCs are being too conservative.\n\n19. Investors vary greatly.\n\nBack when I was a founder I used to think all VCs were the same.\nAnd in fact they do all look \nthe same.  They're all what hackers\ncall \"suits.\"  But since I've been dealing with VCs more I've learned\nthat some suits are smarter than others.\n\nThey're also in a business where winners tend to keep winning and\nlosers to keep losing.  When a VC firm has been successful in the\npast, everyone wants funding from them, so they get the pick of all\nthe new deals.  The self-reinforcing nature of the venture funding\nmarket means that the top ten firms live in a completely different\nworld from, say, the hundredth.  As well as being smarter, they\ntend to be calmer and more upstanding; they don't need to do iffy\nthings to get an edge, and don't want to because they have more\nbrand to protect.\n\nThere are only two kinds of VCs you want to take money from, if you\nhave the luxury of choosing: the \"top tier\" VCs, meaning about the\ntop 20 or so firms, plus a few new ones that are not among the top\n20 only because they haven't been around long enough.\n\nIt's particularly important to raise money from a top firm if you're\na hacker, because they're more confident.  That means they're less\nlikely to stick you with a business guy as CEO, like VCs used to\ndo in the 90s.  If you seem smart and want to do it, they'll let\nyou run the company.\n\n20. Investors don't realize how much it costs to raise money from\nthem.\n\nRaising money is a huge time suck at just the point where startups\ncan least afford it. It's not unusual for it to take five or six\nmonths to close a funding round.  Six weeks is fast.  And raising\nmoney is not just something you can leave running as a background\nprocess.  When you're raising money, it's inevitably the main focus\nof the company.  Which means building the product isn't.\n\nSuppose a Y Combinator company starts talking to VCs after demo\nday, and is successful in raising money from them, closing the deal\nafter a comparatively short 8 weeks.  Since demo day occurs after\n10 weeks, the company is now 18 weeks old.  Raising money, rather\nthan working on the product, has been the company's main focus for\n44% of its existence.  And mind you, this an example where things\nturned out well.\n\nWhen a startup does return to working on the product after a funding\nround finally closes, it's as if they were returning to work after\na months-long illness.  They've lost most of their momentum.\n\nInvestors have no idea how much they damage the companies they\ninvest in by taking so long to do it.  But companies do. So there\nis a big opportunity here for a new kind of venture fund that invests\nsmaller amounts at lower valuations, but promises to either close\nor say no very quickly.  If there were such a firm, I'd recommend\nit to startups in preference to any other, no matter how prestigious.\nStartups live on speed and momentum.\n\n21. Investors don't like to say no.\n\nThe reason funding deals take so long to close is mainly that\ninvestors can't make up their minds.  VCs are not big companies;\nthey can do a deal in 24 hours if they need to.  But they usually\nlet the initial meetings stretch out over a couple weeks.  The\nreason is the selection algorithm I mentioned earlier.  Most don't\ntry to predict whether a startup will win, but to notice quickly\nthat it already is winning.  They care what the market thinks of\nyou and what other VCs think of you, and they can't judge those\njust from meeting you.\n\nBecause they're investing in things that (a) change fast and (b)\nthey don't understand, a lot of investors will reject you in a way\nthat can later be claimed not to have been a rejection.  Unless you\nknow this world, you may not even realize you've been rejected.\nHere's a VC saying no:\n\n  We're really excited about your project, and we want to keep in\n  close touch as you develop it further.\n\nTranslated into more straightforward language, this means: We're\nnot investing in you, but we may change our minds if it looks like\nyou're taking off.  Sometimes they're more candid and say explicitly\nthat they need to \"see some traction.\"  They'll invest in you if\nyou start to get lots of users.  But so would any VC.  So all they're\nsaying is that you're still at square 1.\n\nHere's a test for deciding whether a VC's response was yes or no.\nLook down at your hands.  Are you holding a termsheet?\n\n22. You need investors.\n\nSome founders say \"Who needs investors?\"  Empirically the answer\nseems to be: everyone who wants to succeed.  Practically every\nsuccessful startup takes outside investment at some point.\n\nWhy? What the people who think they don't need investors forget is\nthat they will have competitors.  The question is not whether you\nneed outside investment, but whether it could help you at all.\nIf the answer is yes, and you don't take investment, then competitors\nwho do will have an advantage over you.  And in the startup world\na little advantage can expand into a lot.\n\nMike Moritz famously said that he invested in Yahoo because he\nthought they had a few weeks' lead over their competitors.  That\nmay not have mattered quite so much as he thought, because Google\ncame along three years later and kicked Yahoo's ass.  But there is\nsomething in what he said.  Sometimes a small lead can grow into\nthe yes half of a binary choice.\n\nMaybe as it gets cheaper to start a startup, it will start to be\npossible to succeed in a competitive market without outside funding.  \nThere are certainly\ncosts to raising money.  But as of this writing the empirical\nevidence says it's a net win.\n\n23. Investors like it when you don't need them.\n\nA lot of founders approach investors as if they needed their\npermission to start a company\u2014as if it were like getting into\ncollege.  But you don't need investors to start most companies;\nthey just make it easier.\n\nAnd in fact, investors greatly prefer it if you don't need them.\nWhat excites them, both consciously and unconsciously, is the sort\nof startup that approaches them saying \"the train's leaving the\nstation; are you in or out?\" not the one saying \"please can we have\nsome money to start a company?\"\n\nMost investors are \"bottoms\" in the sense that the startups they\nlike most are those that are rough with them.  When Google stuck\nKleiner and Sequoia with a $75 million premoney valuation, their\nreaction was probably \"Ouch! That feels so good.\" And they were\nright, weren't they?  That deal probably made them more than any\nother they've done.\n\nThe thing is, VCs are pretty good at reading people.  So don't try\nto act tough with them unless you really are the next Google, or\nthey'll see through you in a second.  Instead of acting tough, what\nmost startups should do is simply always have a backup plan.  Always\nhave some alternative plan for getting started if any given investor\nsays no.  Having one is the best insurance against needing one.\n\nSo you shouldn't start a startup that's expensive to start, because\nthen you'll be at the mercy of investors.  If you ultimately want\nto do something that will cost a lot, start by doing a cheaper\nsubset of it, and expand your ambitions when and if you raise more\nmoney.\n\nApparently the most likely animals to be left alive after a nuclear\nwar are cockroaches, because they're so hard to kill.  That's what\nyou want to be as a startup, initially.  Instead of a beautiful\nbut fragile flower that needs to have its stem in a plastic tube\nto support itself, better to be small, ugly, and indestructible.\n\n\n\n\n\nNotes\n\n[1]\nI may be underestimating VCs.  They may play some behind the scenes \nrole in IPOs, which you ultimately need if you want to create a silicon \nvalley.\n\n[2]\nA few VCs have an email address you can send your business\nplan to, but the number of startups that get funded this way is\nbasically zero.  You should always get a personal introduction\u2014and \nto a partner, not an associate.\n\n[3]\nSeveral people have told us that the most valuable thing about \nstartup school \nwas that they got to see famous startup founders and realized\nthey were just ordinary guys.  Though we're happy to provide this\nservice, this is not generally the way we pitch startup school to\npotential speakers.\n\n[4]\nActually this sounds to me like a VC who got buyer's remorse,\nthen used a technicality to get out of the deal.  But it's telling\nthat it even seemed a plausible excuse.\n\nThanks to Sam Altman, Paul Buchheit, Hutch Fishman, and Robert \nMorris for reading drafts of\nthis, and to Kenneth King of ASES for inviting me to speak.\n\n\nComment on this essay.\n\n", "April 2007\n\nThere are two different ways people judge you.  Sometimes judging\nyou correctly is the end goal.  But there's a second much more\ncommon type of judgement where it isn't.  We tend to regard all\njudgements of us as the first type.  We'd probably be happier if\nwe realized which are and which aren't.\n\nThe first type of judgement, the type where judging you is the end\ngoal, include court cases, grades in classes, and most competitions.\nSuch judgements can of course be mistaken, but because the goal is\nto judge you correctly, there's usually some kind of appeals process.\nIf you feel you've been misjudged, you can protest that you've been\ntreated unfairly.\n\nNearly all the judgements made on children are of this type, so we\nget into the habit early in life of thinking that all judgements\nare.\n\nBut in fact there is a second much larger class of judgements where\njudging you is only a means to something else.  These include college\nadmissions, hiring and investment decisions, and of course the\njudgements made in dating.  This kind of judgement is not really\nabout you.\n\nPut yourself in the position of someone selecting players for a\nnational team.  Suppose for the sake of simplicity that this is a\ngame with no positions, and that you have to select 20 players.\nThere will be a few stars who clearly should make the team, and\nmany players who clearly shouldn't.  The only place your judgement\nmakes a difference is in the borderline cases.  Suppose you screw\nup and underestimate the 20th best player, causing him not to make\nthe team, and his place to be taken by the 21st best.  You've still\npicked a good team.  If the players have the usual distribution of\nability, the 21st best player will be only slightly worse than the\n20th best.  Probably the difference between them will be less than\nthe measurement error.\n\nThe 20th best player may feel he has been misjudged.  But your goal\nhere wasn't to provide a service estimating people's ability.  It\nwas to pick a team, and if the difference between the 20th and 21st\nbest players is less than the measurement error, you've still done\nthat optimally.\n\nIt's a false analogy even to use the word unfair to describe this\nkind of misjudgement.  It's not aimed at producing a correct estimate\nof any given individual, but at selecting a reasonably optimal set.\n\nOne thing that leads us astray here is that the selector seems to\nbe in a position of power.  That makes him seem like a judge.  If\nyou regard someone judging you as a customer instead of a judge,\nthe expectation of fairness goes away.  The author of a good novel\nwouldn't complain that readers were unfair for preferring a\npotboiler with a racy cover.  Stupid, perhaps, but not unfair.\n\nOur early training and our self-centeredness combine to make us\nbelieve that every judgement of us is about us.  In fact most aren't.\nThis is a rare case where being less self-centered will make people\nmore confident.  Once you realize how little most people judging\nyou care about judging you accurately\u2014once you realize that because\nof the normal distribution of most applicant pools, it matters least\nto judge accurately in precisely the cases where judgement has the\nmost effect\u2014you won't take rejection so personally.\n\nAnd curiously enough, taking rejection less personally may help you\nto get rejected less often.  If you think someone judging you will\nwork hard to judge you correctly, you can afford to be passive.\nBut the more you realize that most judgements are greatly influenced\nby random, extraneous factors\u2014that most people judging you are\nmore like a fickle novel buyer than a wise and perceptive \nmagistrate\u2014the more you realize you can do things to influence the\noutcome.\n\nOne good place to apply this principle is in college applications.\nMost high school students applying to college do it with the usual\nchild's mix of inferiority and self-centeredness: inferiority in\nthat they assume that admissions committees must be all-seeing;\nself-centeredness in that they assume admissions committees care\nenough about them to dig down into their application and figure out\nwhether they're good or not.  These combine to make applicants\npassive in applying and hurt when they're rejected.  If college\napplicants realized how quick and impersonal most selection processes\nare, they'd make more effort to sell themselves, and take the outcome\nless personally.\n\n", "April 2007\n\nA few days ago I suddenly realized Microsoft was dead.  I was talking\nto a young startup founder about how Google was different from\nYahoo.  I said that Yahoo had been warped from the start by\ntheir fear of Microsoft.  That was why they'd positioned themselves\nas a \"media company\" instead of a technology company.  Then I looked\nat his face and realized he didn't understand.  It was as if I'd\ntold him how much girls liked Barry Manilow in the mid\n80s.  Barry who?\n\nMicrosoft?  He didn't say anything, but I could tell he didn't quite\nbelieve anyone would be frightened of them.\n\nMicrosoft cast\na shadow over the software world for almost 20 years\nstarting in the late 80s.\nI can remember when it was IBM before them.  I mostly ignored this\nshadow.  I never used Microsoft software, so it only affected me\nindirectly\u2014for example, in the spam I got from botnets.  And\nbecause I wasn't paying attention, I didn't notice when the shadow\ndisappeared.\n\nBut it's gone now.  I can sense that.  No one is even afraid of\nMicrosoft anymore.  They still make a lot of money\u2014so does IBM,\nfor that matter.  But they're not dangerous.\n\nWhen did Microsoft die, and of what?  I know they seemed dangerous\nas late as 2001, because I wrote an essay then \nabout how they were\nless dangerous than they seemed.   I'd guess they were dead by 2005.\nI know when we started Y Combinator we didn't worry about Microsoft\nas competition for the startups we funded.  In fact, we've never\neven invited them to the demo days we organize for startups to\npresent to investors.  We invite Yahoo and Google and some other\nInternet companies, but we've never bothered to invite Microsoft.\nNor has anyone there ever even sent us an email.  They're in a\ndifferent world.\n\nWhat killed them?  Four things, I think, all of them occurring\nsimultaneously in the mid 2000s.\n\nThe most obvious is Google.  There can only be one big man in town,\nand they're clearly it.  Google is the most dangerous company\nnow by far, in both the good and bad senses of the word.  Microsoft\ncan at best limp along afterward.\n\nWhen did Google take the lead?  There will be a tendency to push\nit back to their IPO in August 2004, but they weren't setting the\nterms of the debate then.  I'd say they took the lead in\n2005.  Gmail was one of the things that put them over the edge.\nGmail showed they could do more than search.\n\nGmail also showed how much you could do with web-based software,\nif you took advantage of what later came to be called \"Ajax.\" And\nthat was the second cause of Microsoft's death: everyone can see the\ndesktop is over.  It now seems inevitable that applications will\nlive on the web\u2014not just email, but everything, right up to\nPhotoshop.  Even Microsoft sees that now.\n\nIronically, Microsoft unintentionally helped create Ajax.  The x\nin Ajax is from the XMLHttpRequest object, which lets the browser\ncommunicate with the server in the background while displaying a page.\n(Originally the only way to communicate with the server was to \nask for a new page.) XMLHttpRequest was created by Microsoft in the late 90s\nbecause they needed it for Outlook.  What they didn't realize was\nthat it would be useful to a lot of other people too\u2014in fact, to\nanyone who wanted to make web apps work like desktop ones.\n\nThe other critical component of Ajax is Javascript, the programming\nlanguage that runs in the browser.  Microsoft saw the danger of\nJavascript and tried to keep it broken for as long as they could.\n[1] \nBut eventually the open source world won, by producing\nJavascript libraries that grew over the brokenness of Explorer\nthe way a tree grows over barbed wire.\n\nThe third cause of Microsoft's death was broadband Internet.  Anyone\nwho cares can have fast Internet access\nnow.  And the bigger the pipe to the server, the less you need the\ndesktop.\n\nThe last nail in the coffin came, of all places, from Apple.  \nThanks to OS X, Apple has come back from the dead in a way\nthat is extremely rare in technology.\n[2]\nTheir victory is so complete that I'm now surprised when I come across\na computer running Windows.  Nearly all the people we fund at Y\nCombinator use Apple laptops.  It was the same in the audience at \nstartup\nschool.  All the computer people use Macs or Linux now.  Windows is for\ngrandmas, like Macs used to be in the 90s.  So not only does the\ndesktop no longer matter, no one who cares about computers uses\nMicrosoft's anyway.\n\nAnd of course Apple has Microsoft on the run in music\ntoo, with TV and phones on the way.\n\nI'm glad Microsoft is dead.  They were like Nero or \nCommodus\u2014evil\nin the way only inherited power can make you.  Because remember,\nthe Microsoft monopoly didn't begin with Microsoft.  They got it\nfrom IBM.  The software business was overhung by a\nmonopoly from about the mid-1950s to about 2005.  For practically\nits whole existence, that is.  One of the reasons \"Web 2.0\" has\nsuch an air of euphoria about it is the feeling, conscious or not,\nthat this era of monopoly may finally be over.\n\nOf course, as a hacker I can't help thinking about how something\nbroken could be fixed.  Is there some way Microsoft could come back?\nIn principle, yes.  To see how, envision two things: (a) the amount\nof cash Microsoft now has on hand, and (b) Larry and Sergey making\nthe rounds of all the search engines ten years ago trying to sell\nthe idea for Google for a million dollars, and being turned down\nby everyone.\n\nThe surprising fact is, brilliant hackers\u2014dangerously brilliant\nhackers\u2014can be had very cheaply, by the standards of a\ncompany as rich as Microsoft.  They can't \nhire smart people anymore,\nbut they could buy as many as they wanted for only an order of magnitude \nmore. So if they wanted to be a contender\nagain, this is how they could do it:\n\n Buy all the good \"Web 2.0\" startups.  They could get substantially\n    all of them for less than they'd have to pay for Facebook.\n\n Put them all in a building in Silicon Valley, surrounded by\n    lead shielding to protect them from any contact with Redmond.\n\nI feel safe suggesting this, because they'd never do it.  Microsoft's\nbiggest weakness is that they still don't realize how much they\nsuck.  They still think they can write software in house.  Maybe they\ncan, by the standards of the desktop world.  But that world ended\na few years ago.\n\nI already know what the reaction to this essay will be.  Half the\nreaders will say that Microsoft is still an enormously profitable\ncompany, and that I should be more\ncareful about drawing conclusions based on what a few people think\nin our insular little \"Web 2.0\" bubble.  The other half, the younger\nhalf, will complain that this is old news.\n\n\n\n\n\nSee also: Microsoft is Dead: the Cliffs Notes\n\nNotes\n\n[1]\nIt doesn't take a conscious effort to make software incompatible.\nAll you have to do is not work too hard at fixing bugs\u2014which, if\nyou're a big company, you produce in copious quantities.  The\nsituation is analogous to the writing of \"literary\ntheorists.\"  Most don't try to be obscure; they just don't make an\neffort to be clear.  It wouldn't pay.\n\n[2]\nIn part because Steve Jobs got pushed out by John Sculley in\na way that's rare among technology companies.  If Apple's board\nhadn't made that blunder, they wouldn't have had to bounce back.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMarch 2007\n", "February 2007\n\nA few days ago I finally figured out something I've wondered about\nfor 25 years: the relationship between wisdom and intelligence.\nAnyone can see they're not the same by the number of people who are\nsmart, but not very wise.  And yet intelligence and wisdom do seem\nrelated.  How?\n\nWhat is wisdom?  I'd say it's knowing what to do in a lot of\nsituations.  I'm not trying to make a deep point here about the\ntrue nature of wisdom, just to figure out how we use the word.  A\nwise person is someone who usually knows the right thing to do.\n\nAnd yet isn't being smart also knowing what to do in certain\nsituations?  For example, knowing what to do when the teacher tells\nyour elementary school class to add all the numbers from 1 to 100?\n[1]\n\nSome say wisdom and intelligence apply to different types of\nproblems\u2014wisdom to human problems and intelligence to abstract\nones.  But that isn't true.  Some wisdom has nothing to do with\npeople: for example, the wisdom of the engineer who knows certain\nstructures are less prone to failure than others.  And certainly\nsmart people can find clever solutions to human problems as well\nas abstract ones. \n[2]\n\nAnother popular explanation is that wisdom comes from experience\nwhile intelligence is innate.  But people are not simply wise in\nproportion to how much experience they have.  Other things must\ncontribute to wisdom besides experience, and some may be innate: a\nreflective disposition, for example.\n\nNeither of the conventional explanations of the difference between\nwisdom and intelligence stands up to scrutiny.  So what is the\ndifference?  If we look at how people use the words \"wise\" and\n\"smart,\" what they seem to mean is different shapes of performance.\n\nCurve\n\n\"Wise\" and \"smart\" are both ways of saying someone knows what to\ndo.  The difference is that \"wise\" means one has a high average\noutcome across all situations, and \"smart\" means one does spectacularly\nwell in a few.  That is, if you had a graph in which the x axis\nrepresented situations and the y axis the outcome, the graph of the\nwise person would be high overall, and the graph of the smart person\nwould have high peaks.\n\nThe distinction is similar to the rule that one should judge talent\nat its best and character at its worst.  Except you judge intelligence\nat its best, and wisdom by its average.  That's how the two are\nrelated: they're the two different senses in which the same curve\ncan be high.\n\nSo a wise person knows what to do in most situations, while a smart\nperson knows what to do in situations where few others could.  We\nneed to add one more qualification: we should ignore cases where\nsomeone knows what to do because they have inside information. \n[3]\nBut aside from that, I don't think we can get much more specific\nwithout starting to be mistaken.\n\nNor do we need to.  Simple as it is, this explanation predicts, or\nat least accords with, both of the conventional stories about the\ndistinction between wisdom and intelligence.  Human problems are\nthe most common type, so being good at solving those is key in\nachieving a high average outcome.   And it seems natural that a\nhigh average outcome depends mostly on experience, but that dramatic\npeaks can only be achieved by people with certain rare, innate\nqualities; nearly anyone can learn to be a good swimmer, but to be\nan Olympic swimmer you need a certain body type.\n\nThis explanation also suggests why wisdom is such an elusive concept:\nthere's no such thing.  \"Wise\" means something\u2014that one is\non average good at making the right choice.  But giving the name\n\"wisdom\" to the supposed quality that enables one to do that doesn't\nmean such a thing exists.  To the extent \"wisdom\" means anything,\nit refers to a grab-bag of qualities as various as self-discipline,\nexperience, and empathy.  \n[4]\n\nLikewise, though \"intelligent\" means something, we're asking for\ntrouble if we insist on looking for a single thing called \"intelligence.\"\nAnd whatever its components, they're not all innate.  We use the\nword \"intelligent\" as an indication of ability: a smart person can\ngrasp things few others could.  It does seem likely there's some\ninborn predisposition to intelligence (and wisdom too), but this\npredisposition is not itself intelligence.\n\nOne reason we tend to think of intelligence as inborn is that people\ntrying to measure it have concentrated on the aspects of it that\nare most measurable.  A quality that's inborn will obviously be\nmore convenient to work with than one that's influenced by experience,\nand thus might vary in the course of a study.  The problem comes\nwhen we drag the word \"intelligence\" over onto what they're measuring.\nIf they're measuring something inborn, they can't be measuring\nintelligence.  Three year olds aren't smart.   When we describe one\nas smart, it's shorthand for \"smarter than other three year olds.\"\n\nSplit\n\nPerhaps it's a technicality to point out that a predisposition to\nintelligence is not the same as intelligence.  But it's an important\ntechnicality, because it reminds us that we can become smarter,\njust as we can become wiser.\n\nThe alarming thing is that we may have to choose between the two.\n\nIf wisdom and intelligence are the average and peaks of the same\ncurve, then they converge as the number of points on the curve\ndecreases.  If there's just one point, they're identical: the average\nand maximum are the same.  But as the number of points increases,\nwisdom and intelligence diverge.  And historically the number of\npoints on the curve seems to have been increasing: our ability is\ntested in an ever wider range of situations.\n\nIn the time of Confucius and Socrates, people seem to have regarded\nwisdom, learning, and intelligence as more closely related than we\ndo.  Distinguishing between \"wise\" and \"smart\" is a modern habit.\n[5]\nAnd the reason we do is that they've been diverging.  As knowledge\ngets more specialized, there are more points on the curve, and the\ndistinction between the spikes and the average becomes sharper,\nlike a digital image rendered with more pixels.\n\nOne consequence is that some old recipes may have become obsolete.\nAt the very least we have to go back and figure out if they were\nreally recipes for wisdom or intelligence.  But the really striking\nchange, as intelligence and wisdom drift apart, is that we may have\nto decide which we prefer.  We may not be able to optimize for both\nsimultaneously.\n\nSociety seems to have voted for intelligence.  We no longer admire\nthe sage\u2014not the way people did two thousand years ago.  Now\nwe admire the genius.  Because in fact the distinction we began\nwith has a rather brutal converse: just as you can be smart without\nbeing very wise, you can be wise without being very smart.  That\ndoesn't sound especially admirable.  That gets you James Bond, who\nknows what to do in a lot of situations, but has to rely on Q for\nthe ones involving math.\n\nIntelligence and wisdom are obviously not mutually exclusive.  In\nfact, a high average may help support high peaks.  But there are\nreasons to believe that at some point you have to choose between\nthem.  One is the example of very smart people, who are so often\nunwise that in popular culture this now seems to be regarded as the\nrule rather than the exception.  Perhaps the absent-minded professor\nis wise in his way, or wiser than he seems, but he's not wise in\nthe way Confucius or Socrates wanted people to be. \n[6]\n\nNew\n\nFor both Confucius and Socrates, wisdom, virtue, and happiness were\nnecessarily related.  The wise man was someone who knew what the\nright choice was and always made it; to be the right choice, it had\nto be morally right; he was therefore always happy, knowing he'd\ndone the best he could.  I can't think of many ancient philosophers\nwho would have disagreed with that, so far as it goes.\n\n\"The superior man is always happy; the small man sad,\" said Confucius.\n[7]\n\nWhereas a few years ago I read an interview with a mathematician\nwho said that most nights he went to bed discontented, feeling he\nhadn't made enough progress.  \n[8]\nThe Chinese and Greek words we\ntranslate as \"happy\" didn't mean exactly what we do by it, but\nthere's enough overlap that this remark contradicts them.\n\nIs the mathematician a small man because he's discontented?  No;\nhe's just doing a kind of work that wasn't very common in Confucius's\nday.\n\nHuman knowledge seems to grow fractally.  Time after time, something\nthat seemed a small and uninteresting area\u2014experimental error,\neven\u2014turns out, when examined up close, to have as much in\nit as all knowledge up to that point.  Several of the fractal buds\nthat have exploded since ancient times involve inventing and\ndiscovering new things.  Math, for example, used to be something a\nhandful of people did part-time.  Now it's the career of thousands.\nAnd in work that involves making new things, some old rules don't\napply.\n\nRecently I've spent some time advising people, and there I find the\nancient rule still works: try to understand the situation as well\nas you can, give the best advice you can based on your experience,\nand then don't worry about it, knowing you did all you could.  But\nI don't have anything like this serenity when I'm writing an essay.\nThen I'm worried.  What if I run out of ideas?  And when I'm writing,\nfour nights out of five I go to bed discontented, feeling I didn't\nget enough done.\n\nAdvising people and writing are fundamentally different types of\nwork.  When people come to you with a problem and you have to figure\nout the right thing to do, you don't (usually) have to invent\nanything.  You just weigh the alternatives and try to judge which\nis the prudent choice.  But prudence can't tell me what sentence\nto write next.  The search space is too big.\n\nSomeone like a judge or a military officer can in much of his work\nbe guided by duty, but duty is no guide in making things.  Makers\ndepend on something more precarious: inspiration.  And like most\npeople who lead a precarious existence, they tend to be worried,\nnot contented.  In that respect they're more like the small man of\nConfucius's day, always one bad harvest (or ruler) away from\nstarvation. Except instead of being at the mercy of weather and\nofficials, they're at the mercy of their own imagination.\n\nLimits\n\nTo me it was a relief just to realize it might be ok to be discontented.\nThe idea that a successful person should be happy has thousands of\nyears of momentum behind it.  If I was any good, why didn't I have\nthe easy confidence winners are supposed to have?  But that, I now\nbelieve, is like a runner asking \"If I'm such a good athlete, why\ndo I feel so tired?\" Good runners still get tired; they just get\ntired at higher speeds.\n\nPeople whose work is to invent or discover things are in the same\nposition as the runner.  There's no way for them to do the best\nthey can, because there's no limit to what they could do.  The\nclosest you can come is to compare yourself to other people.  But\nthe better you do, the less this matters.  An undergrad who gets\nsomething published feels like a star.  But for someone at the top\nof the field, what's the test of doing well?  Runners can at least\ncompare themselves to others doing exactly the same thing; if you\nwin an Olympic gold medal, you can be fairly content, even if you\nthink you could have run a bit faster.  But what is a novelist to\ndo?\n\nWhereas if you're doing the kind of work in which problems are\npresented to you and you have to choose between several alternatives,\nthere's an upper bound on your performance: choosing the best every\ntime.  In ancient societies, nearly all work seems to have been of\nthis type.  The peasant had to decide whether a garment was worth\nmending, and the king whether or not to invade his neighbor, but\nneither was expected to invent anything.  In principle they could\nhave; the king could have invented firearms, then invaded his\nneighbor.  But in practice innovations were so rare that they weren't\nexpected of you, any more than goalkeepers are expected to score\ngoals. \n[9]\nIn practice, it seemed as if there was a correct decision\nin every situation, and if you made it you'd done your job perfectly,\njust as a goalkeeper who prevents the other team from scoring is\nconsidered to have played a perfect game.\n\nIn this world, wisdom seemed paramount.  \n[10]\nEven now, most people\ndo work in which problems are put before them and they have to\nchoose the best alternative.  But as knowledge has grown more\nspecialized, there are more and more types of work in which people\nhave to make up new things, and in which performance is therefore\nunbounded.  Intelligence has become increasingly important relative\nto wisdom because there is more room for spikes.\n\nRecipes\n\nAnother sign we may have to choose between intelligence and wisdom\nis how different their recipes are.  Wisdom seems to come largely\nfrom curing childish qualities, and intelligence largely from\ncultivating them.\n\nRecipes for wisdom, particularly ancient ones, tend to have a\nremedial character.  To achieve wisdom one must cut away all the\ndebris that fills one's head on emergence from childhood, leaving\nonly the important stuff.  Both self-control and experience have\nthis effect: to eliminate the random biases that come from your own\nnature and from the circumstances of your upbringing respectively.\nThat's not all wisdom is, but it's a large part of it.  Much of\nwhat's in the sage's head is also in the head of every twelve year\nold.  The difference is that in the head of the twelve year old\nit's mixed together with a lot of random junk.\n\nThe path to intelligence seems to be through working on hard problems.\nYou develop intelligence as you might develop muscles, through\nexercise.  But there can't be too much compulsion here.  No amount\nof discipline can replace genuine curiosity.  So cultivating\nintelligence seems to be a matter of identifying some bias in one's\ncharacter\u2014some tendency to be interested in certain types of\nthings\u2014and nurturing it.  Instead of obliterating your\nidiosyncrasies in an effort to make yourself a neutral vessel for\nthe truth, you select one and try to grow it from a seedling into\na tree.\n\nThe wise are all much alike in their wisdom, but very smart people\ntend to be smart in distinctive ways.\n\nMost of our educational traditions aim at wisdom. So perhaps one\nreason schools work badly is that they're trying to make intelligence\nusing recipes for wisdom.  Most recipes for wisdom have an element\nof subjection.  At the very least, you're supposed to do what the\nteacher says.  The more extreme recipes aim to break down your\nindividuality the way basic training does.  But that's not the route\nto intelligence.  Whereas wisdom comes through humility, it may\nactually help, in cultivating intelligence, to have a mistakenly\nhigh opinion of your abilities, because that encourages you to keep\nworking.  Ideally till you realize how mistaken you were.\n\n(The reason it's hard to learn new skills late in life is not just\nthat one's brain is less malleable.  Another probably even worse\nobstacle is that one has higher standards.)\n\nI realize we're on dangerous ground here.  I'm not proposing the\nprimary goal of education should be to increase students' \"self-esteem.\"\nThat just breeds laziness.  And in any case, it doesn't really fool\nthe kids, not the smart ones.  They can tell at a young age that a\ncontest where everyone wins is a fraud.\n\nA teacher has to walk a narrow path: you want to encourage kids to\ncome up with things on their own, but you can't simply applaud\neverything they produce.  You have to be a good audience: appreciative,\nbut not too easily impressed.  And that's a lot of work.  You have\nto have a good enough grasp of kids' capacities at different ages\nto know when to be surprised.\n\nThat's the opposite of traditional recipes for education.  Traditionally\nthe student is the audience, not the teacher; the student's job is\nnot to invent, but to absorb some prescribed body of material.  (The\nuse of the term \"recitation\" for sections in some colleges is a\nfossil of this.) The problem with these old traditions is that\nthey're too much influenced by recipes for wisdom.\n\nDifferent\n\nI deliberately gave this essay a provocative title; of course it's\nworth being wise.  But I think it's important to understand the\nrelationship between intelligence and wisdom, and particularly what\nseems to be the growing gap between them.  That way we can avoid\napplying rules and standards to intelligence that are really meant\nfor wisdom.  These two senses of \"knowing what to do\" are more\ndifferent than most people realize.  The path to wisdom is through\ndiscipline, and the path to intelligence through carefully selected\nself-indulgence.  Wisdom is universal, and intelligence idiosyncratic.\nAnd while wisdom yields calmness, intelligence much of the time\nleads to discontentment.\n\nThat's particularly worth remembering.  A physicist friend recently\ntold me half his department was on Prozac.  Perhaps if we acknowledge\nthat some amount of frustration is inevitable in certain kinds\nof work, we can mitigate its effects.  Perhaps we can box it up and\nput it away some of the time, instead of letting it flow together\nwith everyday sadness to produce what seems an alarmingly large\npool.  At the very least, we can avoid being discontented about\nbeing discontented.\n\nIf you feel exhausted, it's not necessarily because there's something\nwrong with you.  Maybe you're just running fast.\n\n\n\n\n\nNotes\n\n[1]\nGauss was supposedly asked this when he was 10.  Instead of\nlaboriously adding together the numbers like the other students,\nhe saw that they consisted of 50 pairs that each summed to 101 (100\n+ 1, 99 + 2, etc), and that he could just multiply 101 by 50 to get\nthe answer, 5050.\n\n[2]\nA variant is that intelligence is the ability to solve problems,\nand wisdom the judgement to know how to use those solutions.   But\nwhile this is certainly an important relationship between wisdom\nand intelligence, it's not the distinction between them.  Wisdom\nis useful in solving problems too, and intelligence can help in\ndeciding what to do with the solutions.\n\n[3]\nIn judging both intelligence and wisdom we have to factor out\nsome knowledge. People who know the combination of a safe will be\nbetter at opening it than people who don't, but no one would say\nthat was a test of intelligence or wisdom.\n\nBut knowledge overlaps with wisdom and probably also intelligence.\nA knowledge of human nature is certainly part of wisdom.  So where\ndo we draw the line?\n\nPerhaps the solution is to discount knowledge that at some point\nhas a sharp drop in utility.  For example, understanding French\nwill help you in a large number of situations, but its value drops\nsharply as soon as no one else involved knows French.  Whereas the\nvalue of understanding vanity would decline more gradually.\n\nThe knowledge whose utility drops sharply is the kind that has\nlittle relation to other knowledge.  This includes mere conventions,\nlike languages and safe combinations, and also what we'd call\n\"random\" facts, like movie stars' birthdays, or how to distinguish\n1956 from 1957 Studebakers.\n\n[4]\nPeople seeking some single thing called \"wisdom\" have been\nfooled by grammar.  Wisdom is just knowing the right thing to do,\nand there are a hundred and one different qualities that help in\nthat.  Some, like selflessness, might come from meditating in an\nempty room, and others, like a knowledge of human nature, might\ncome from going to drunken parties.\n\nPerhaps realizing this will help dispel the cloud of semi-sacred\nmystery that surrounds wisdom in so many people's eyes.  The mystery\ncomes mostly from looking for something that doesn't exist.  And\nthe reason there have historically been so many different schools\nof thought about how to achieve wisdom is that they've focused on\ndifferent components of it.\n\nWhen I use the word \"wisdom\" in this essay, I mean no more than\nwhatever collection of qualities helps people make the right choice\nin a wide variety of situations.\n\n[5]\nEven in English, our sense of the word \"intelligence\" is\nsurprisingly recent.  Predecessors like \"understanding\" seem to\nhave had a broader meaning.\n\n[6]\nThere is of course some uncertainty about how closely the remarks\nattributed to Confucius and Socrates resemble their actual opinions.\nI'm using these names as we use the name \"Homer,\" to mean the\nhypothetical people who said the things attributed to them.\n\n[7]\nAnalects VII:36, Fung trans.\n\nSome translators use \"calm\" instead of \"happy.\"  One source of\ndifficulty here is that present-day English speakers have a different\nidea of happiness from many older societies.  Every language probably\nhas a word meaning \"how one feels when things are going well,\" but\ndifferent cultures react differently when things go well.  We react\nlike children, with smiles and laughter.  But in a more reserved\nsociety, or in one where life was tougher, the reaction might be a\nquiet contentment.\n\n[8]\nIt may have been Andrew Wiles, but I'm not sure.  If anyone\nremembers such an interview, I'd appreciate hearing from you.\n\n[9]\nConfucius claimed proudly that he had never invented\nanything\u2014that he had simply passed on an accurate account of\nancient traditions.  [Analects VII:1] It's hard for us now to\nappreciate how important a duty it must have been in preliterate\nsocieties to remember and pass on the group's accumulated knowledge.\nEven in Confucius's time it still seems to have been the first duty\nof the scholar.\n\n[10]\nThe bias toward wisdom in ancient philosophy may be exaggerated\nby the fact that, in both Greece and China, many of the first\nphilosophers (including Confucius and Plato) saw themselves as\nteachers of administrators, and so thought disproportionately about\nsuch matters.  The few people who did invent things, like storytellers,\nmust have seemed an outlying data point that could be ignored.\n\nThanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston,\nand Robert Morris for reading drafts of this.\n\n", "January 2007\n\n(Foreword to Jessica Livingston's \nFounders at Work.)\n\nApparently sprinters reach their highest speed right out of the\nblocks, and spend the rest of the race slowing down.  The winners\nslow down the least.  It's that way with most startups too.  The\nearliest phase is usually the most productive.  That's when they\nhave the really big ideas.  Imagine what Apple was like when 100%\nof its employees were either Steve Jobs or Steve Wozniak.\n\nThe striking thing about this phase is that it's completely different\nfrom most people's idea of what business is like.  If you looked\nin people's heads (or stock photo collections) for images representing\n\"business,\" you'd get images of people dressed up in suits, groups\nsitting around conference tables looking serious, Powerpoint\npresentations, people producing thick reports for one another to\nread.   Early stage startups are the exact opposite of this.  And\nyet they're probably the most productive part of the whole economy.\n\nWhy the disconnect?  I think there's a general principle at work\nhere: the less energy people expend on performance, the more they\nexpend on appearances to compensate.  More often than not the energy\nthey expend on seeming impressive makes their actual performance\nworse.  A few years ago I read an article in which a car magazine\nmodified the \"sports\" model of some production car to get the fastest\npossible standing quarter mile.  You know how they did it?  They\ncut off all the crap the manufacturer had bolted onto the car to\nmake it look fast.\n\nBusiness is broken the same way that car was.  The effort that goes\ninto looking productive is not merely wasted, but actually makes\norganizations less productive.  Suits, for example.  Suits do not\nhelp people to think better.  I bet most executives at big companies\ndo their best thinking when they wake up on Sunday morning and go\ndownstairs in their bathrobe to make a cup of coffee.  That's when\nyou have ideas.  Just imagine what a company would be like if people\ncould think that well at work.  People do in startups, at least\nsome of the time.  (Half the time you're in a panic because your\nservers are on fire, but the other half you're thinking as deeply\nas most people only get to sitting alone on a Sunday morning.)\n\nDitto for most of the other differences between startups and what\npasses for productivity in big companies.  And yet conventional\nideas of professionalism have such an iron grip on our minds that\neven startup founders are affected by them.  In our startup, when\noutsiders came to visit we tried hard to seem \"professional.\" We'd\nclean up our offices, wear better clothes, try to arrange that a\nlot of people were there during conventional office hours.  In fact,\nprogramming didn't get done by well-dressed people at clean desks\nduring office hours.  It got done by badly dressed people (I was\nnotorious for programmming wearing just a towel) in offices strewn\nwith junk at 2 in the morning.  But no visitor would understand\nthat.  Not even investors, who are supposed to be able to recognize\nreal productivity when they see it.  Even we were affected by the\nconventional wisdom.  We thought of ourselves as impostors, succeeding\ndespite being totally unprofessional.  It was as if we'd created a\nFormula 1 car but felt sheepish because it didn't look like a car\nwas supposed to look.\n\nIn the car world, there are at least some people who know that a\nhigh performance car looks like a Formula 1 racecar, not a sedan\nwith giant rims and a fake spoiler bolted to the trunk.  Why not\nin business?  Probably because startups are so small.  The really\ndramatic growth happens when a startup only has three or four people,\nso only three or four people see that, whereas tens of thousands\nsee business as it's practiced by Boeing or Philip Morris.\n\nThis book can help fix that problem, by showing everyone what, till\nnow, only a handful people got to see: what happens in the first\nyear of a startup.  This is what real productivity looks like. This\nis the Formula 1 racecar.  It looks weird, but it goes fast.\n\nOf course, big companies won't be able to do everything these\nstartups do.  In big companies there's always going to be more\npolitics, and less scope for individual decisions.  But seeing what\nstartups are really like will at least show other organizations\nwhat to aim for.  The time may soon be coming when instead of\nstartups trying to seem more corporate, corporations will try to\nseem more like startups.  That would be a good thing.\n\n\n\n\nJapanese\nTranslation\n\n\n\n", "December 2006\n\nI grew up believing that taste is just a matter of personal preference.\nEach person has things they like, but no one's preferences are any\nbetter than anyone else's.  There is no such thing as good taste.\n\nLike a lot of things I grew up believing, this turns out to be\nfalse, and I'm going to try to explain why.\n\nOne problem with saying there's no such thing as good taste is that\nit also means there's no such thing as good art.  If there were\ngood art, then people who liked it would have better taste than\npeople who didn't.  So if you discard taste, you also have to discard\nthe idea of art being good, and artists being good at making it.\n\nIt was pulling on that thread that unravelled my childhood faith\nin relativism.  When you're trying to make things, taste becomes a\npractical matter.  You have to decide what to do next.  Would it\nmake the painting better if I changed that part?  If there's no\nsuch thing as better, it doesn't matter what you do.  In fact, it\ndoesn't matter if you paint at all.  You could just go out and buy\na ready-made blank canvas.  If there's no such thing as good, that\nwould be just as great an achievement as the ceiling of the Sistine\nChapel.  Less laborious, certainly, but if you can achieve the same\nlevel of performance with less effort, surely that's more impressive,\nnot less.\n\nYet that doesn't seem quite right, does it?\n\nAudience\n\nI think the key to this puzzle is to remember that art has an\naudience.  Art has a purpose, which is to interest its audience.\nGood art (like good anything) is art that achieves its purpose\nparticularly well.  The meaning of \"interest\" can vary.  Some works\nof art are meant to shock, and others to please; some are meant to\njump out at you, and others to sit quietly in the background. But\nall art has to work on an audience, and\u2014here's the critical \npoint\u2014members of the audience share things in common.\n\nFor example, nearly all humans find human faces engaging.  It seems\nto be wired into us.  Babies can recognize faces practically from\nbirth.  In fact, faces seem to have co-evolved with our interest\nin them; the face is the body's billboard.  So all other things\nbeing equal, a painting with faces in it will interest people more\nthan one without. \n[1]\n\nOne reason it's easy to believe that taste is merely personal\npreference is that, if it isn't, how do you pick out the people\nwith better taste?  There are billions of people, each with their\nown opinion; on what grounds can you prefer one to another?\n[2]\n\nBut if audiences have a lot in common, you're not in a position of\nhaving to choose one out of a random set of individual biases,\nbecause the set isn't random.  All humans find faces \nengaging\u2014practically by definition: face recognition is \nin our DNA.  And so\nhaving a notion of good art, in the sense of art that does its job\nwell, doesn't require you to pick out a few individuals and label\ntheir opinions as correct.  No matter who you pick, they'll find\nfaces engaging.\n\nOf course, space aliens probably wouldn't find human faces engaging.\nBut there might be other things they shared in common with us.  The\nmost likely source of examples is math.  I expect space aliens would\nagree with us most of the time about which of two proofs was better.\nErdos thought so.  He called a maximally elegant proof one out of\nGod's book, and presumably God's book is universal.\n[3]\n\nOnce you start talking about audiences, you don't have to argue\nsimply that there are or aren't standards of taste.  Instead tastes\nare a series of concentric rings, like ripples in a pond.  There\nare some things that will appeal to you and your friends, others\nthat will appeal to most people your age, others that will appeal\nto most humans, and perhaps others that would appeal to most sentient\nbeings (whatever that means).\n\nThe picture is slightly more complicated than that, because in the\nmiddle of the pond there are overlapping sets of ripples.  For\nexample, there might be things that appealed particularly to men,\nor to people from a certain culture.\n\nIf good art is art that interests its audience, then when you talk\nabout art being good, you also have to say for what audience.  So\nis it meaningless to talk about art simply being good or bad?  No,\nbecause one audience is the set of all possible humans.  I think\nthat's the audience people are implicitly talking about when they\nsay a work of art is good: they mean it would engage any human.\n[4]\n\nAnd that is a meaningful test, because although, like any everyday\nconcept, \"human\" is fuzzy around the edges, there are a lot of\nthings practically all humans have in common.  In addition to our\ninterest in faces, there's something special about primary colors\nfor nearly all of us, because it's an artifact of the way our eyes\nwork.  Most humans will also find images of 3D objects engaging,\nbecause that also seems to be built into our visual perception.\n[5]\nAnd beneath that there's edge-finding, which makes images\nwith definite shapes more engaging than mere blur.\n\nHumans have a lot more in common than this, of course.  My goal is\nnot to compile a complete list, just to show that there's some solid\nground here.  People's preferences aren't random.  So an artist\nworking on a painting and trying to decide whether to change some\npart of it doesn't have to think \"Why bother?  I might as well flip\na coin.\" Instead he can ask \"What would make the painting more\ninteresting to people?\"  And the reason you can't equal Michelangelo\nby going out and buying a blank canvas is that the ceiling of the\nSistine Chapel is more interesting to people.\n\nA lot of philosophers have had a hard time believing it was possible\nfor there to be objective standards for art. It seemed obvious that\nbeauty, for example, was something that happened in the head of the observer,\nnot something that was a property of objects.  It was thus \n\"subjective\" rather than \"objective.\"  But in fact if you narrow the\ndefinition of beauty to something that works a certain way on\nhumans, and you observe how much humans have in common, it turns out\nto be a property of objects after all.   You don't\nhave to choose between something being a property of the   \nsubject or the object if subjects all react similarly.\nBeing good art is thus a property of objects as much as, say, being\ntoxic to humans is: it's good art if it consistently affects humans \nin a certain way.\n\n\nError\n\nSo could we figure out what the best art is by taking a vote?  After\nall, if appealing to humans is the test, we should be able to just\nask them, right?\n\nWell, not quite.  For products of nature that might work.  I'd be\nwilling to eat the apple the world's population had voted most\ndelicious, and I'd probably be willing to visit the beach they voted\nmost beautiful, but having to look at the painting they voted the\nbest would be a crapshoot.\n\nMan-made stuff is different.  For one thing, artists, unlike apple\ntrees, often deliberately try to trick us.  Some tricks are quite\nsubtle.  For example, any work of art sets expectations by its level\nof finish.  You don't expect photographic accuracy in something\nthat looks like a quick sketch.  So one widely used trick, especially\namong illustrators, is to intentionally make a painting or drawing\nlook like it was done faster than it was.  The average person looks\nat it and thinks: how amazingly skillful.  It's like saying something\nclever in a conversation as if you'd thought of it on the spur of\nthe moment, when in fact you'd worked it out the day before.\n\nAnother much less subtle influence is brand.  If you go to see the\nMona Lisa, you'll probably be disappointed, because it's hidden\nbehind a thick glass wall and surrounded by a frenzied crowd taking\npictures of themselves in front of it.  At best you can see it the\nway you see a friend across the room at a crowded party.  The Louvre\nmight as well replace it with copy; no one would be able to tell.\nAnd yet the Mona Lisa is a small, dark painting.  If you found\npeople who'd never seen an image of it and sent them to a museum\nin which it was hanging among other paintings with a tag labelling\nit as a portrait by an unknown fifteenth century artist, most would\nwalk by without giving it a second look.\n\nFor the average person, brand dominates all other factors in the\njudgement of art.  Seeing a painting they recognize from reproductions\nis so overwhelming that their response to it as a painting is drowned\nout.\n\nAnd then of course there are the tricks people play on themselves.\nMost adults looking at art worry that if they don't like what they're\nsupposed to, they'll be thought uncultured.  This doesn't just\naffect what they claim to like; they actually make themselves like\nthings they're supposed to.\n\nThat's why you can't just take a vote.  Though appeal to people is\na meaningful test, in practice you can't measure it, just as you\ncan't find north using a compass with a magnet sitting next to it.\nThere are sources of error so powerful that if you take a vote, all\nyou're measuring is the error.\n\nWe can, however, approach our goal from another direction, by using\nourselves as guinea pigs.  You're human.  If you want to know what\nthe basic human reaction to a piece of art would be, you can at\nleast approach that by getting rid of the sources of error in your\nown judgements.\n\nFor example, while anyone's reaction to a famous painting will be\nwarped at first by its fame, there are ways to decrease its effects.\nOne is to come back to the painting over and over.  After a few\ndays the fame wears off, and you can start to see it as a painting.\nAnother is to stand close.  A painting familiar from reproductions\nlooks more familiar from ten feet away; close in you see details\nthat get lost in reproductions, and which you're therefore seeing\nfor the first time.\n\nThere are two main kinds of error that get in the way of seeing a\nwork of art: biases you bring from your own circumstances, and\ntricks played by the artist.  Tricks are straightforward to correct\nfor. Merely being aware of them usually prevents them from working.\nFor example, when I was ten I used to be very impressed by airbrushed\nlettering that looked like shiny metal.  But once you study how\nit's done, you see that it's a pretty cheesy trick\u2014one of the\nsort that relies on pushing a few visual buttons really hard to\ntemporarily overwhelm the viewer.  It's like trying to convince\nsomeone by shouting at them.\n\nThe way not to be vulnerable to tricks is to explicitly seek out\nand catalog them.  When you notice a whiff of dishonesty coming\nfrom some kind of art, stop and figure out what's going on.  When\nsomeone is obviously pandering to an audience that's easily fooled,\nwhether it's someone making shiny stuff to impress ten year olds,\nor someone making conspicuously avant-garde stuff to impress would-be\nintellectuals, learn how they do it.  Once you've seen enough\nexamples of specific types of tricks, you start to become a connoisseur\nof trickery in general, just as professional magicians are.\n\nWhat counts as a trick?  Roughly, it's something done with contempt\nfor the audience.  For example, the guys designing Ferraris in the\n1950s were probably designing cars that they themselves admired.\nWhereas I suspect over at General Motors the marketing people are\ntelling the designers, \"Most people who buy SUVs do it to seem\nmanly, not to drive off-road. So don't worry about the suspension;\njust make that sucker as big and tough-looking as you can.\" \n[6]\n\nI think with some effort you can make yourself nearly immune to\ntricks.  It's harder to escape the influence of your own circumstances,\nbut you can at least move in that direction.  The way to do it is\nto travel widely, in both time and space.  If you go and see all\nthe different kinds of things people like in other cultures, and\nlearn about all the different things people have liked in the past,\nyou'll probably find it changes what you like.  I doubt you could\never make yourself into a completely universal person, if only\nbecause you can only travel in one direction in time.  But if you\nfind a work of art that would appeal equally to your friends, to\npeople in Nepal, and to the ancient Greeks, you're probably onto\nsomething.\n\nMy main point here is not how to have good taste, but that there\ncan even be such a thing.  And I think I've shown that.  There is\nsuch a thing as good art. It's art that interests its human audience,\nand since humans have a lot in common, what interests them is not\nrandom.  Since there's such a thing as good art, there's\nalso such a thing as good taste, which is the ability to recognize\nit.\n\nIf we were talking about the taste of apples, I'd agree that taste\nis just personal preference.  Some people like certain kinds of\napples and others like other kinds, but how can you say that one\nis right and the other wrong? \n[7]\n\nThe thing is, art isn't apples.  Art is man-made. It comes with a\nlot of cultural baggage, and in addition the people who make it\noften try to trick us.  Most people's judgement of art is dominated\nby these extraneous factors; they're like someone trying to judge\nthe taste of apples in a dish made of equal parts apples and jalapeno\npeppers.  All they're tasting is the peppers.  So it turns out you\ncan pick out some people and say that they have better taste than\nothers: they're the ones who actually taste art like apples.\n\nOr to put it more prosaically, they're the people who (a) are hard\nto trick, and (b) don't just like whatever they grew up with.  If\nyou could find people who'd eliminated all such influences on their\njudgement, you'd probably still see variation in what they liked.\nBut because humans have so much in common, you'd also find they\nagreed on a lot.  They'd nearly all prefer the ceiling of the Sistine\nChapel to a blank canvas.\n\nMaking It\n\nI wrote this essay because I was tired of hearing \"taste is subjective\"\nand wanted to kill it once and for all. Anyone who makes things\nknows intuitively that's not true.  When you're trying to make art,\nthe temptation to be lazy is as great as in any other kind of work.\nOf course it matters to do a good job.  And yet you can see how\ngreat a hold \"taste is subjective\" has even in the art world by how\nnervous it makes people to talk about art being good or bad.  Those\nwhose jobs require them to judge art, like curators, mostly resort\nto euphemisms like \"significant\" or \"important\" or (getting dangerously\nclose) \"realized.\" \n[8]\n\nI don't have any illusions that being able to talk about art being\ngood or bad will cause the people who talk about it to have anything\nmore useful to say.  Indeed, one of the reasons \"taste is subjective\"\nfound such a receptive audience is that, historically, the things\npeople have said about good taste have generally been such nonsense.\n\nIt's not for the people who talk about art that I want to free the\nidea of good art, but for those who \nmake it.  Right now, ambitious\nkids going to art school run smack into a brick wall.  They arrive\nhoping one day to be as good as the famous artists they've seen in\nbooks, and the first thing they learn is that the concept of good\nhas been retired.  Instead everyone is just supposed to explore\ntheir own personal vision. \n[9]\n\nWhen I was in art school, we were looking one day at a slide of\nsome great fifteenth century painting, and one of the students asked\n\"Why don't artists paint like that now?\" The room suddenly got\nquiet.  Though rarely asked out loud, this question lurks uncomfortably\nin the back of every art student's mind.  It was as if someone had\nbrought up the topic of lung cancer in a meeting within Philip\nMorris.\n\n\"Well,\" the professor replied, \"we're interested in different\nquestions now.\"  He was a pretty nice guy, but at the time I couldn't\nhelp wishing I could send him back to fifteenth century Florence\nto explain in person to Leonardo & Co. how we had moved beyond their\nearly, limited concept of art.  Just imagine that conversation.\n\nIn fact, one of the reasons artists in fifteenth century Florence made\nsuch great things was that they believed you could make great things.\n[10]\nThey were intensely competitive and were always trying to outdo\none another, like mathematicians or physicists today\u2014maybe like\nanyone who has ever done anything really well.\n\nThe idea that you could make great things was not just a useful\nillusion.  They were actually right.  So the most important consequence\nof realizing there can be good art is that it frees artists to try\nto make it.  To the ambitious kids arriving at art school this year\nhoping one day to make great things, I say: don't believe it when\nthey tell you this is a naive and outdated ambition.  There is such\na thing as good art, and if you try to make it, there are people\nwho will notice.\n\n\n\n\n\nNotes\n\n[1]\nThis is not to say, of course, that good paintings must\nhave faces in them, just that everyone's visual piano has that key\non it.  There are situations in which you want to avoid faces,\nprecisely because they attract so much attention.  But you can see\nhow universally faces work by their prevalence in\nadvertising.\n\n[2]\nThe other reason it's easy to believe is that it makes people\nfeel good.  To a kid, this idea is crack.  In every other respect\nthey're constantly being told that they have a lot to learn.  But\nin this they're perfect.  Their opinion carries the same weight as\nany adult's.  You should probably question anything you believed\nas a kid that you'd want to believe this much.\n\n[3]\nIt's conceivable that the elegance of proofs is quantifiable,\nin the sense that there may be some formal measure that turns out\nto coincide with mathematicians' judgements.  Perhaps it would be\nworth trying to make a formal language for proofs in which those\nconsidered more elegant consistently came out shorter (perhaps after\nbeing macroexpanded or compiled).\n\n[4]\nMaybe it would be possible to make art that would appeal to\nspace aliens, but I'm not going to get into that because (a) it's\ntoo hard to answer, and (b) I'm satisfied if I can establish that\ngood art is a meaningful idea for human audiences.\n\n[5]\nIf early abstract paintings seem more interesting than later\nones, it may be because the first abstract painters were trained\nto paint from life, and their hands thus tended to make the kind\nof gestures you use in representing physical things.  In effect\nthey were saying \"scaramara\" instead of \"uebfgbsb.\"\n\n[6]\nIt's a bit more complicated, because sometimes artists\nunconsciously use tricks by imitating art that does.\n\n[7]\nI phrased this in terms of the taste of apples because if\npeople can see the apples, they can be fooled.  When I was a kid\nmost apples were a variety called Red Delicious that had been bred\nto look appealing in stores, but which didn't taste very good.\n\n[8]\nTo be fair, curators are in a difficult position.  If they're\ndealing with recent art, they have to include things in shows that\nthey think are bad.  That's because the test for what gets included\nin shows is basically the market price, and for recent art that is\nlargely determined by successful businessmen and their wives.  So\nit's not always intellectual dishonesty that makes curators and\ndealers use neutral-sounding language.\n\n[9]\nWhat happens in practice is that everyone gets really good at\ntalking about art.  As the art itself gets more random, the effort\nthat would have gone into the work goes instead into the intellectual\nsounding theory behind it.  \"My work represents an exploration of\ngender and sexuality in an urban context,\" etc.  Different people\nwin at that game.\n\n[10]\nThere were several other reasons, including that Florence was\nthen the richest and most sophisticated city in the world, and that\nthey lived in a time before photography had (a) killed portraiture\nas a source of income and (b) made brand the dominant factor in the\nsale of art.\n\nIncidentally, I'm not saying that good art = fifteenth century\nEuropean art.  I'm not saying we should make what they made, but\nthat we should work like they worked.  There are fields now in which\nmany people work with the same energy and honesty that fifteenth\ncentury artists did, but art is not one of them.\n\nThanks to Trevor Blackwell, Jessica Livingston, and Robert Morris \nfor reading drafts of this, and to Paul Watson for permission to \nuse the image at the top.\n\n\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2006\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2006\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nAugust 2006, rev. April 2007, September 2010\n", "July 2006\n\n\nWhen I was in high school I spent a lot of time imitating bad\nwriters.  What we studied in English classes was mostly fiction,\nso I assumed that was the highest form of writing.  Mistake number\none.  The stories that seemed to be most admired were ones in which\npeople suffered in complicated ways.  Anything funny or\ngripping was ipso facto suspect, unless it was old enough to be hard to\nunderstand, like Shakespeare or Chaucer.  Mistake number two.  The\nideal medium seemed the short story, which I've since learned had\nquite a brief life, roughly coincident with the peak of magazine\npublishing.  But since their size made them perfect for use in\nhigh school classes, we read a lot of them, which gave us the\nimpression the short story was flourishing.  Mistake number three.\nAnd because they were so short, nothing really had to happen; you\ncould just show a randomly truncated slice of life, and that was\nconsidered advanced.  Mistake number four.  The result was that I\nwrote a lot of stories in which nothing happened except that someone\nwas unhappy in a way that seemed deep.\n\nFor most of college I was a philosophy major.  I was very impressed\nby the papers published in philosophy journals.  They were so\nbeautifully typeset, and their tone was just captivating\u2014alternately\ncasual and buffer-overflowingly technical.  A fellow would be walking\nalong a street and suddenly modality qua modality would spring upon\nhim.  I didn't ever quite understand these papers, but I figured\nI'd get around to that later, when I had time to reread them more\nclosely.  In the meantime I tried my best to imitate them.  This\nwas, I can now see, a doomed undertaking, because they weren't\nreally saying anything.  No philosopher ever refuted another, for\nexample, because no one said anything definite enough to refute.\nNeedless to say, my imitations didn't say anything either.\n\nIn grad school I was still wasting time imitating the wrong things.\nThere was then a fashionable type of program called an expert system,\nat the core of which was something called an inference engine.  I\nlooked at what these things did and thought \"I could write that in\na thousand lines of code.\"  And yet eminent professors were writing\nbooks about them, and startups were selling them for a year's salary\na copy.  What an opportunity, I thought; these impressive things\nseem easy to me; I must be pretty sharp.  Wrong.  It was simply a\nfad.  The books the professors wrote about expert systems are now\nignored.  They were not even on a path to anything interesting.\nAnd the customers paying so much for them were largely the same\ngovernment agencies that paid thousands for screwdrivers and toilet\nseats.\n\nHow do you avoid copying the wrong things?  Copy only what you\ngenuinely like.  That would have saved me in all three cases.  I\ndidn't enjoy the short stories we had to read in English classes;\nI didn't learn anything from philosophy papers; I didn't use expert\nsystems myself.  I believed these things were good because they\nwere admired.\n\nIt can be hard to separate the things you like from the things\nyou're impressed with.  One trick is to ignore presentation.  Whenever\nI see a painting impressively hung in a museum, I ask myself: how\nmuch would I pay for this if I found it at a garage sale, dirty and\nframeless, and with no idea who painted it?  If you walk around a\nmuseum trying this experiment, you'll find you get some truly\nstartling results.  Don't ignore this data point just because it's\nan outlier.\n\nAnother way to figure out what you like is to look at what you enjoy\nas guilty pleasures.  Many things people like, especially if they're\nyoung and ambitious, they like largely for the feeling of virtue\nin liking them.  99% of people reading Ulysses are thinking\n\"I'm reading Ulysses\" as they do it. A guilty pleasure is\nat least a pure one.  What do you read when you don't feel up to being\nvirtuous?  What kind of book do you read and feel sad that there's\nonly half of it left, instead of being impressed that you're half\nway through?  That's what you really like.\n\nEven when you find genuinely good things to copy, there's another\npitfall to be avoided.  Be careful to copy what makes them good,\nrather than their flaws.  It's easy to be drawn into imitating\nflaws, because they're easier to see, and of course easier to copy\ntoo.  For example, most painters in the eighteenth and nineteenth\ncenturies used brownish colors.  They were imitating the great\npainters of the Renaissance, whose paintings by that time were brown\nwith dirt.  Those paintings have since been cleaned, revealing\nbrilliant colors; their imitators are of course still brown.\n\nIt was painting, incidentally, that cured me of copying the wrong\nthings.  Halfway through grad school I decided I wanted to try being\na painter, and the art world was so manifestly corrupt that it\nsnapped the leash of credulity.  These people made philosophy\nprofessors seem as scrupulous as mathematicians.  It was so clearly\na choice of doing good work xor being an insider that I was forced\nto see the distinction.  It's there to some degree in almost every\nfield, but I had till then managed to avoid facing it.\n\nThat was one of the most valuable things I learned from painting:\nyou have to figure out for yourself what's \ngood.  You can't trust\nauthorities. They'll lie to you on this one.\n\n\n\n\n\n\n\nComment on this essay.\n\n\n", "July 2006\n\nI've discovered a handy test for figuring out what you're addicted\nto.  Imagine you were going to spend the weekend at a friend's house\non a little island off the coast of Maine.  There are no shops on\nthe island and you won't be able to leave while you're there.  Also,\nyou've never been to this house before, so you can't assume it will\nhave more than any house might.\n\nWhat, besides clothes and toiletries, do you make a point of packing?\nThat's what you're addicted to.  For example, if you find yourself\npacking a bottle of vodka (just in case), you may want to stop and\nthink about that.\n\nFor me the list is four things: books, earplugs, a notebook, and a\npen.\n\nThere are other things I might bring if I thought of it, like music,\nor tea, but I can live without them.  I'm not so addicted to caffeine\nthat I wouldn't risk the house not having any tea, just for a\nweekend.\n\nQuiet is another matter.  I realize it seems a bit eccentric to\ntake earplugs on a trip to an island off the coast of Maine.  If\nanywhere should be quiet, that should.  But what if the person in\nthe next room snored?  What if there was a kid playing basketball?\n(Thump, thump, thump... thump.)  Why risk it?  Earplugs are small.\n\nSometimes I can think with noise.  If I already have momentum on\nsome project, I can work in noisy places.  I can edit an essay or\ndebug code in an airport.  But airports are not so bad: most of the\nnoise is whitish.  I couldn't work with the sound of a sitcom coming\nthrough the wall, or a car in the street playing thump-thump music.\n\nAnd of course there's another kind of thinking, when you're starting\nsomething new, that requires complete quiet.   You never\nknow when this will strike. It's just as well to carry plugs.\n\nThe notebook and pen are professional equipment, as it were.  Though\nactually there is something druglike about them, in the sense that\ntheir main purpose is to make me feel better.  I hardly ever go\nback and read stuff I write down in notebooks.  It's just that if\nI can't write things down, worrying about remembering one idea gets\nin the way of having the next.  Pen and paper wick ideas.\n\nThe best notebooks I've found are made by a company called Miquelrius.\nI use their smallest size, which is about 2.5 x 4 in.\nThe secret to writing on such\nnarrow pages is to break words only when you run out of space, like\na Latin inscription.  I use the cheapest plastic Bic ballpoints,\npartly because their gluey ink doesn't seep through pages, and\npartly so I don't worry about losing them.\n\nI only started carrying a notebook about three years ago.  Before\nthat I used whatever scraps of paper I could find.  But the problem\nwith scraps of paper is that they're not ordered.  In a notebook\nyou can guess what a scribble means by looking at the pages\naround it.  In the scrap era I was constantly finding notes I'd\nwritten years before that might say something I needed to remember,\nif I could only figure out what.\n\nAs for books, I know the house would probably have something to\nread.  On the average trip I bring four books and only read one of\nthem, because I find new books to read en route.  Really bringing\nbooks is insurance.\n\nI realize this dependence on books is not entirely good\u2014that what\nI need them for is distraction.  The books I bring on trips are\noften quite virtuous, the sort of stuff that might be assigned\nreading in a college class.  But I know my motives aren't virtuous.\nI bring books because if the world gets boring I need to be able\nto slip into another distilled by some writer.  It's like eating\njam when you know you should be eating fruit.\n\nThere is a point where I'll do without books.  I was walking in\nsome steep mountains once, and decided I'd rather just think, if I\nwas bored, rather than carry a single unnecessary ounce.  It wasn't\nso bad.  I found I could entertain myself by having ideas instead\nof reading other people's.  If you stop eating jam, fruit starts\nto taste better.\n\nSo maybe I'll try not bringing books on some future trip.  They're\ngoing to have to pry the plugs out of my cold, dead ears, however.\n\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJune 2006\n", "May 2006\n\n(This essay is derived from a keynote at Xtech.)\n\nStartups happen in clusters.  There are a lot of them in Silicon\nValley and Boston, and few in Chicago or Miami.  A country that\nwants startups will probably also have to reproduce whatever makes\nthese clusters form.\n\nI've claimed that the recipe is a\ngreat university near a town smart\npeople like.  If you set up those conditions within the US, startups\nwill form as inevitably as water droplets condense on a cold piece\nof metal.  But when I consider what it would take to reproduce\nSilicon Valley in another country, it's clear the US is a particularly\nhumid environment.  Startups condense more easily here.\n\nIt is by no means a lost cause to try to create a silicon valley\nin another country.  There's room not merely to equal Silicon Valley,\nbut to surpass it.  But if you want to do that, you have to\nunderstand the advantages startups get from being in America.\n\n1. The US Allows Immigration.\n\nFor example, I doubt it would be possible to reproduce Silicon\nValley in Japan, because one of Silicon Valley's most distinctive\nfeatures is immigration.  Half the people there speak with accents.\nAnd the Japanese don't like immigration.  When they think about how\nto make a Japanese silicon valley, I suspect they unconsciously\nframe it as how to make one consisting only of Japanese people.\nThis way of framing the question probably guarantees failure.\n\nA silicon valley has to be a mecca for the smart and the ambitious,\nand you can't have a mecca if you don't let people into it.\n\nOf course, it's not saying much that America is more open to\nimmigration than Japan.  Immigration policy is one area where a\ncompetitor could do better.\n\n2. The US Is a Rich Country.\n\nI could see India one day producing a rival to Silicon Valley.\nObviously they have the right people: you can tell that by the\nnumber of Indians in the current Silicon Valley.  The problem with\nIndia itself is that it's still so poor.\n\nIn poor countries, things we take for granted are missing.  A friend\nof mine visiting India sprained her ankle falling down the steps\nin a railway station.  When she turned to see what had happened,\nshe found the steps were all different heights.  In industrialized\ncountries we walk down steps our whole lives and never think about\nthis, because there's an infrastructure that prevents such a staircase\nfrom being built.\n\nThe US has never been so poor as some countries are now.  There\nhave never been swarms of beggars in the streets of American cities.\nSo we have no data about what it takes to get from the swarms-of-beggars\nstage to the silicon-valley stage.  Could you have both at once,\nor does there have to be some baseline prosperity before you get a\nsilicon valley?\n\nI suspect there is some speed limit to the evolution\nof an economy.  Economies are made out of people, and attitudes can\nonly change a certain amount per generation.\n[1]\n\n3. The US Is Not (Yet) a Police State.\n\nAnother country I could see wanting to have a silicon valley is\nChina.  But I doubt they could do it yet either.  China still seems\nto be a police state, and although present rulers seem enlightened\ncompared to the last, even enlightened despotism can probably only\nget you part way toward being a great economic power.\n\nIt can get you factories for building things designed elsewhere.\nCan it get you the designers, though?  Can imagination flourish\nwhere people can't criticize the government?  Imagination means\nhaving odd ideas, and it's hard to have odd ideas about technology\nwithout also having odd ideas about politics.  And in any case,\nmany technical ideas do have political implications.  So if you\nsquash dissent, the back pressure will propagate into technical\nfields. \n[2]\n\nSingapore would face a similar problem.  Singapore seems very aware\nof the importance of encouraging startups.  But while energetic\ngovernment intervention may be able to make a port run efficiently,\nit can't coax startups into existence.  A state that bans chewing\ngum has a long way to go before it could create a San Francisco.\n\nDo you need a San Francisco?  Might there not be an alternate route\nto innovation that goes through obedience and cooperation instead\nof individualism?  Possibly, but I'd bet not.  Most imaginative\npeople seem to share a certain prickly independence,\nwhenever and wherever they lived.  You see it in Diogenes telling\nAlexander to get out of his light and two thousand years later in\nFeynman breaking into safes at Los Alamos.\n[3]\nImaginative people\ndon't want to follow or lead.  They're most productive when everyone\ngets to do what they want.\n\nIronically, of all rich countries the US has lost the most civil\nliberties recently.  But I'm not too worried yet.  I'm hoping once\nthe present administration is out, the natural openness of American\nculture will reassert itself.\n\n4. American Universities Are Better.\n\nYou need a great university to seed a silicon valley, and so far\nthere are few outside the US.  I asked a handful of American computer\nscience professors which universities in Europe were most admired,\nand they all basically said \"Cambridge\" followed by a long pause\nwhile they tried to think of others.  There don't seem to be many\nuniversities elsewhere that compare with the best in America, at\nleast in technology.\n\nIn some countries this is the result of a deliberate policy.  The\nGerman and Dutch governments, perhaps from fear of elitism, try to\nensure that all universities are roughly equal in quality.  The\ndownside is that none are especially good.   The best professors\nare spread out, instead of being concentrated as they are in the\nUS.  This probably makes them less productive, because they don't\nhave good colleagues to inspire them.  It also means no one university\nwill be good enough to act as a mecca, attracting talent from abroad\nand causing startups to form around it.\n\nThe case of Germany is a strange one.  The Germans invented the\nmodern university, and up till the 1930s theirs were the best in\nthe world.  Now they have none that stand out.  As I was mulling\nthis over, I found myself thinking: \"I can understand why German\nuniversities declined in the 1930s, after they excluded Jews.  But\nsurely they should have bounced back by now.\"  Then I realized:\nmaybe not.  There are few Jews left in Germany and most Jews I know\nwould not want to move there.  And if you took any great American\nuniversity and removed the Jews, you'd have some pretty big gaps.\nSo maybe it would be a lost cause trying to create a silicon valley\nin Germany, because you couldn't establish the level of university\nyou'd need as a seed.\n[4]\n\nIt's natural for US universities to compete with one another because\nso many are private.  To reproduce the quality of American universities\nyou probably also have to reproduce this.  If universities are\ncontrolled by the central government, log-rolling will pull them\nall toward the mean: the new Institute of X will end up at the\nuniversity in the district of a powerful politician, instead of\nwhere it should be.\n\n5. You Can Fire People in America.\n\nI think one of the biggest obstacles to creating startups in Europe\nis the attitude toward employment.  The famously rigid labor laws\nhurt every company, but startups especially, because startups have\nthe least time to spare for bureaucratic hassles.\n\nThe difficulty of firing people is a particular problem for startups\nbecause they have no redundancy.  Every person has to do their\njob well.\n\nBut the problem is more than just that some startup might have a\nproblem firing someone they needed to.  Across industries and\ncountries, there's a strong inverse correlation between performance\nand job security.  Actors and directors are fired at the end of\neach film, so they have to deliver every time.  Junior professors\nare fired by default after a few years unless the university chooses\nto grant them tenure.  Professional athletes know they'll be pulled\nif they play badly for just a couple games.  At the other end of\nthe scale (at least in the US) are auto workers, New York City\nschoolteachers, and civil servants, who are all nearly impossible\nto fire.  The trend is so clear that you'd have to be willfully\nblind not to see it.\n\nPerformance isn't everything, you say?  Well, are auto workers,\nschoolteachers, and civil servants happier than actors,\nprofessors, and professional athletes?\n\nEuropean public opinion will apparently tolerate people being fired\nin industries where they really care about performance.  Unfortunately\nthe only industry they care enough about so far is soccer.  But\nthat is at least a precedent.\n\n6. In America Work Is Less Identified with Employment.\n\nThe problem in more traditional places like Europe and Japan goes\ndeeper than the employment laws.  More dangerous is the attitude\nthey reflect: that an employee is a kind of servant, whom the\nemployer has a duty to protect.  It used to be that way in America\ntoo.  In 1970 you were still supposed to get a job with a big\ncompany, for whom ideally you'd work your whole career.  In return\nthe company would take care of you: they'd try not to fire you,\ncover your medical expenses, and support you in old age.\n\nGradually employment has been shedding such paternalistic overtones\nand becoming simply an economic exchange.  But the importance of\nthe new model is not just that it makes it easier for startups to\ngrow.  More important, I think, is that it it makes it easier for\npeople to start startups.\n\nEven in the US most kids graduating from college still think they're\nsupposed to get jobs, as if you couldn't be productive without being\nsomeone's employee.  But the less you identify work with employment,\nthe easier it becomes to start a startup.  When you see your career\nas a series of different types of work, instead of a lifetime's\nservice to a single employer, there's less risk in starting your\nown company, because you're only replacing one segment instead of\ndiscarding the whole thing.\n\nThe old ideas are so powerful that even the most successful startup\nfounders have had to struggle against them.  A year after the\nfounding of Apple, Steve Wozniak still hadn't quit HP.  He still\nplanned to work there for life.  And when Jobs found someone to\ngive Apple serious venture funding, on the condition that Woz quit,\nhe initially refused, arguing that he'd designed both the Apple I\nand the Apple II while working at HP, and there was no reason he\ncouldn't continue.\n\n7.  America Is Not Too Fussy.\n\nIf there are any laws regulating businesses, you can assume larval\nstartups will break most of them, because they don't know what the\nlaws are and don't have time to find out.\n\nFor example, many startups in America begin in places where it's\nnot really legal to run a business.  Hewlett-Packard, Apple, and\nGoogle were all run out of garages.  Many more startups, including\nours, were initially run out of apartments.  If the laws against\nsuch things were actually enforced, most startups wouldn't happen.\n\nThat could be a problem in fussier countries.  If Hewlett and Packard\ntried running an electronics company out of their garage in\nSwitzerland, the old lady next door would report them to the municipal\nauthorities.\n\nBut the worst problem in other countries is probably the effort\nrequired just to start a company.  A friend of mine started a company\nin Germany in the early 90s, and was shocked to discover, among\nmany other regulations, that you needed $20,000 in capital to\nincorporate.  That's one reason I'm not typing this on an Apfel\nlaptop.  Jobs and Wozniak couldn't have come up with that kind of\nmoney in a company financed by selling a VW bus and an HP calculator.\nWe couldn't have started Viaweb either.\n[5]\n\nHere's a tip for governments that want to encourage startups: read\nthe stories of existing startups, and then try to simulate what\nwould have happened in your country.  When you hit something that\nwould have killed Apple, prune it off.\n\nStartups are marginal.  \nThey're started by the poor and the\ntimid; they begin in marginal space and spare time; they're started\nby people who are supposed to be doing something else; and though\nbusinesses, their founders often know nothing about business.  Young\nstartups are fragile.  A society that trims its margins sharply\nwill kill them all.\n\n8. America Has a Large Domestic Market.\n\nWhat sustains a startup in the beginning is the prospect of getting\ntheir initial product out.  The successful ones therefore make the\nfirst version as simple as possible.  In the US they usually begin\nby making something just for the local market.\n\nThis works in America, because the local market is 300 million\npeople.  It wouldn't work so well in Sweden.  In a small country,\na startup has a harder task: they have to sell internationally from\nthe start.\n\nThe EU was designed partly to simulate a single, large domestic\nmarket.  The problem is that the inhabitants still speak many\ndifferent languages.  So a software startup in Sweden is still at\na disadvantage relative to one in the US, because they have to deal\nwith internationalization from the beginning.  It's significant\nthat the most famous recent startup in Europe, Skype, worked on a\nproblem that was intrinsically international.\n\nHowever, for better or worse it looks as if Europe will in a few\ndecades speak a single language.  When I was a student in Italy in\n1990, few Italians spoke English.  Now all educated people seem to\nbe expected to-- and Europeans do not like to seem uneducated.  This\nis presumably a taboo subject, but if present trends continue,\nFrench and German will eventually go the way of Irish and Luxembourgish:\nthey'll be spoken in homes and by eccentric nationalists.\n\n9. America Has Venture Funding.\n\nStartups are easier to start in America because funding is easier\nto get.  There are now a few VC firms outside the US, but startup\nfunding doesn't only come from VC firms.  A more important source,\nbecause it's more personal and comes earlier in the process, is\nmoney from individual angel investors.  Google might never have got\nto the point where they could raise millions from VC funds if they\nhadn't first raised a hundred thousand from Andy Bechtolsheim.  And\nhe could help them because he was one of the founders of Sun.  This\npattern is repeated constantly in startup hubs.  It's this pattern\nthat makes them startup hubs.\n\nThe good news is, all you have to do to get the process rolling is\nget those first few startups successfully launched.  If they stick\naround after they get rich, startup founders will almost automatically\nfund and encourage new startups.\n\nThe bad news is that the cycle is slow.  It probably takes five\nyears, on average, before a startup founder can make angel investments.\nAnd while governments might be able to set up local VC funds\nby supplying the money themselves and recruiting people from existing\nfirms to run them, only organic growth can produce angel investors.\n\nIncidentally, America's private universities are one reason there's\nso much venture capital.  A lot of the money in VC funds comes from\ntheir endowments.  So another advantage of private universities is\nthat a good chunk of the country's wealth is managed by enlightened\ninvestors.\n\n10. America Has Dynamic Typing for Careers.\n\nCompared to other industrialized countries the US is disorganized\nabout routing people into careers.  For example, in America people\noften don't decide to go to medical school till they've finished\ncollege.  In Europe they generally decide in high school.\n\nThe European approach reflects the old idea that each person has a\nsingle, definite occupation-- which is not far from the idea that\neach person has a natural \"station\" in life.  If this were true,\nthe most efficient plan would be to discover each person's station\nas early as possible, so they could receive the training appropriate\nto it.\n\nIn the US things are more haphazard.  But that turns out to be an\nadvantage as an economy gets more liquid, just as dynamic typing\nturns out to work better than static for ill-defined problems.  This\nis particularly true with startups.  \"Startup founder\" is not the\nsort of career a high school student would choose.  If you ask at\nthat age, people will choose conservatively.  They'll choose\nwell-understood occupations like engineer, or doctor, or lawyer.\n\nStartups are the kind of thing people don't plan, so you're more\nlikely to get them in a society where it's ok to make career decisions\non the fly.\n\nFor example, in theory the purpose of a PhD program is to train you\nto do research.  But fortunately in the US this is another rule\nthat isn't very strictly enforced.  In the US most people in CS PhD\nprograms are there simply because they wanted to learn more.  They\nhaven't decided what they'll do afterward.  So American grad schools\nspawn a lot of startups, because students don't feel they're failing\nif they don't go into research.\n\nThose worried about America's \"competitiveness\" often suggest\nspending more on public schools.  But perhaps America's lousy public\nschools have a hidden advantage.  Because they're so bad, the kids\nadopt an attitude of waiting for college.  I did; I knew I was\nlearning so little that I wasn't even learning what the choices\nwere, let alone which to choose.  This is demoralizing, but it does\nat least make you keep an open mind.\n\nCertainly if I had to choose between bad high schools and good\nuniversities, like the US, and good high schools and bad universities,\nlike most other industrialized countries, I'd take the US system.\nBetter to make everyone feel like a late bloomer than a failed child\nprodigy.\n\nAttitudes\n\nThere's one item conspicuously missing from this list: American\nattitudes.  Americans are said to be more entrepreneurial, and less\nafraid of risk.  But America has no monopoly on this.  Indians and\nChinese seem plenty entrepreneurial, perhaps more than Americans.\n\nSome say Europeans are less energetic, but I don't believe it.  I\nthink the problem with Europe is not that they lack balls, but that\nthey lack examples.\n\nEven in the US, the most successful startup founders are often\ntechnical people who are quite timid, initially, about the idea of\nstarting their own company. Few are the sort of backslapping\nextroverts one thinks of as typically American.  They can usually\nonly summon up the activation energy to start a startup when they\nmeet people who've done it and realize they could too.\n\nI think what holds back European hackers is simply that they don't\nmeet so many people who've done it. You see that variation even\nwithin the US.  Stanford students are more entrepreneurial than\nYale students, but not because of some difference in their characters;\nthe Yale students just have fewer examples.\n\nI admit there seem to be different attitudes toward ambition in\nEurope and the US.  In the US it's ok to be overtly ambitious, and\nin most of Europe it's not.  But this can't be an intrinsically\nEuropean quality; previous generations of Europeans were as ambitious\nas Americans.  What happened?  My hypothesis is that ambition was\ndiscredited by the terrible things ambitious people did in the first\nhalf of the twentieth century.  Now swagger is out. (Even now the\nimage of a very ambitious German presses a button or two, doesn't\nit?)\n\nIt would be surprising if European attitudes weren't affected by\nthe disasters of the twentieth century.  It takes a while to be\noptimistic after events like that.  But ambition is human nature.\nGradually it will re-emerge.\n[6]\n\nHow To Do Better\n\nI don't mean to suggest by this list that America is the perfect\nplace for startups.  It's the best place so far, but the sample\nsize is small, and \"so far\" is not very long.   On historical time \nscales, what we have now is just a\nprototype.\n\nSo let's look at Silicon Valley the way you'd look at a product\nmade by a competitor.  What weaknesses could you exploit?  How could\nyou make something users would like better?  The users in this case\nare those critical few thousand people you'd like to move to your\nsilicon valley.\n\nTo start with, Silicon Valley is too far from San Francisco.  Palo\nAlto, the original ground zero, is about thirty miles away, and the\npresent center more like forty.  So people who come to work in\nSilicon Valley face an unpleasant choice: either live in the boring\nsprawl of the valley proper, or live in San Francisco and endure\nan hour commute each way.\n\nThe best thing would be if the silicon valley were not merely closer\nto the interesting city, but interesting itself.  And there is a\nlot of room for improvement here.  Palo Alto is not so bad, but\neverything built since is the worst sort of strip development.  You\ncan measure how demoralizing it is by the number of people who will\nsacrifice two hours a day commuting rather than live there.\n\nAnother area in which you could easily surpass Silicon Valley is\npublic transportation.  There is a train running the length of it,\nand by American standards it's not bad.  Which is to say that to\nJapanese or Europeans it would seem like something out of the third\nworld.\n\nThe kind of people you want to attract to your silicon valley like\nto get around by train, bicycle, and on foot.  So if you want to\nbeat America, design a town that puts cars last.  It will be a while\nbefore any American city can bring itself to do that.\n\nCapital Gains\n\nThere are also a couple things you could do to beat America at the\nnational level.  One would be to have lower capital gains taxes.\nIt doesn't seem critical to have the lowest income taxes,\nbecause to take advantage of those, people have to move.\n[7]\nBut\nif capital gains rates vary, you move assets, not yourself, so\nchanges are reflected at market speeds.  The lower the rate, the\ncheaper it is to buy stock in growing companies as opposed to real\nestate, or bonds, or stocks bought for the dividends they pay.\n\nSo if you want to encourage startups you should have a low rate on\ncapital gains.  Politicians are caught between a rock and a hard\nplace here, however: make the capital gains rate low and be accused\nof creating \"tax breaks for the rich,\" or make it high and starve\ngrowing companies of investment capital.   As Galbraith said,\npolitics is a matter of choosing between the unpalatable and the\ndisastrous.  A lot of governments experimented with the disastrous\nin the twentieth century; now the trend seems to be toward the\nmerely unpalatable.\n\nOddly enough, the leaders now are European countries like Belgium,\nwhich has a capital gains tax rate of zero.\n\nImmigration\n\nThe other place you could beat the US would be with smarter immigration\npolicy.  There are huge gains to be made here.  Silicon valleys are\nmade of people, remember.\n\nLike a company whose software runs on Windows, those in the current\nSilicon Valley are all too aware of the shortcomings of the INS,\nbut there's little they can do about it.  They're hostages of the\nplatform.\n\nAmerica's immigration system has never been well run, and since\n2001 there has been an additional admixture of paranoia.  What\nfraction of the smart people who want to come to America can even\nget in?  I doubt even half.  Which means if you made a competing\ntechnology hub that let in all smart people, you'd immediately get\nmore than half the world's top talent, for free.\n\nUS immigration policy is particularly ill-suited to startups, because\nit reflects a model of work from the 1970s.  It assumes good technical\npeople have college degrees, and that work means working for a big\ncompany.\n\nIf you don't have a college degree you can't get an H1B visa, the\ntype usually issued to programmers.  But a test that excludes Steve\nJobs, Bill Gates, and Michael Dell can't be a good one.  Plus you\ncan't get a visa for working on your own company, only for working\nas an employee of someone else's.  And if you want to apply for\ncitizenship you daren't work for a startup at all, because if your\nsponsor goes out of business, you have to start over.\n\nAmerican immigration policy keeps out most smart people, and channels\nthe rest into unproductive jobs.  It would be easy to do better.\nImagine if, instead, you treated immigration like recruiting-- if\nyou made a conscious effort to seek out the smartest people and get\nthem to come to your country.\n\nA country that got immigration right would have a huge advantage.\nAt this point you could become a mecca for smart people simply by\nhaving an immigration system that let them in.\n\nA Good Vector\n\nIf you look at the kinds of things you have to do to create an\nenvironment where startups condense, none are great sacrifices.\nGreat universities?  Livable towns?  Civil liberties?  Flexible\nemployment laws?  Immigration policies that let in smart people?\nTax laws that encourage growth?  It's not as if you have to risk\ndestroying your country to get a silicon valley; these are all good\nthings in their own right.\n\nAnd then of course there's the question, can you afford not to?  I\ncan imagine a future in which the default choice of ambitious young\npeople is to start their own company\nrather than work for someone else's.  I'm not sure that will happen,\nbut it's where the trend points now.  And if that is the future,\nplaces that don't have startups will be a whole step behind,\nlike those that missed the Industrial Revolution.\n\n\n\n\n\nNotes\n\n[1]\nOn the verge of the Industrial Revolution, England was already\nthe richest country in the world.  As far as such things can be\ncompared, per capita income in England in 1750 was higher than\nIndia's in 1960.\n\nDeane, Phyllis, The First Industrial Revolution, Cambridge\nUniversity Press, 1965.\n\n[2]\n This has already happened once in China, during the Ming\nDynasty, when the country turned its back on industrialization at\nthe command of the court.  One of Europe's advantages was that it\nhad no government powerful enough to do that.\n\n[3]\nOf course, Feynman and Diogenes were from adjacent traditions,\nbut Confucius, though more polite, was no more willing to be told\nwhat to think.\n\n[4]\nFor similar reasons it might be a lost cause to try to establish\na silicon valley in Israel.  Instead of no Jews moving there, only\nJews would move there, and I don't think you could build a silicon\nvalley out of just Jews any more than you could out of just Japanese.\n\n(This is not a remark about the qualities of these groups, just their\nsizes.  Japanese are only about 2% of the world population, and\nJews about .2%.)\n\n[5]\nAccording to the World Bank, the initial capital requirement\nfor German companies is 47.6% of the per capita income.  Doh.\n\nWorld Bank, Doing Business in 2006, http://doingbusiness.org\n\n[6]\nFor most of the twentieth century, Europeans looked back on\nthe summer of 1914 as if they'd been living in a dream world.  It\nseems more accurate (or at least, as accurate) to call the years\nafter 1914 a nightmare than to call those before a dream.  A lot\nof the optimism Europeans consider distinctly American is simply\nwhat they too were feeling in 1914.\n\n[7]\nThe point where things start to go wrong seems to be about\n50%.  Above that people get serious about tax avoidance.  The reason\nis that the payoff for avoiding tax grows hyperexponentially (x/1-x\nfor 0 < x < 1).  If your income tax rate is 10%, moving to Monaco\nwould only give you 11% more income, which wouldn't even cover the\nextra cost.  If it's 90%, you'd get ten times as much income.  And\nat 98%, as it was briefly in Britain in the 70s, moving to Monaco\nwould give you fifty times as much income.  It seems quite likely\nthat European governments of the 70s never drew this curve.\n\nThanks to Trevor Blackwell, Matthias Felleisen, Jessica\nLivingston, Robert Morris, Neil Rimer, Hugues Steinier, Brad \nTempleton, Fred Wilson, and Stephen Wolfram for reading\ndrafts of this, and to Ed Dumbill for inviting me to speak.\n\n", "May 2006\n\n(This essay is derived from a keynote at Xtech.)\n\nCould you reproduce Silicon Valley elsewhere, or is there something\nunique about it?\n\nIt wouldn't be surprising if it were hard to reproduce in other\ncountries, because you couldn't reproduce it in most of the US\neither.  What does it take to make a silicon valley even here?\n\nWhat it takes is the right people.  If you could get the right ten\nthousand people to move from Silicon Valley to Buffalo, Buffalo\nwould become Silicon Valley.  \n[1]\n\nThat's a striking departure from the past.  Up till a couple decades\nago, geography was destiny for cities.  All great cities were located\non waterways, because cities made money by trade, and water was the\nonly economical way to ship.\n\nNow you could make a great city anywhere, if you could get the right\npeople to move there.  So the question of how to make a silicon\nvalley becomes: who are the right people, and how do you get them\nto move?\n\nTwo Types\n\nI think you only need two kinds of people to create a technology\nhub: rich people and nerds.  They're the limiting reagents in the\nreaction that produces startups, because they're the only ones\npresent when startups get started.  Everyone else will move.\n\nObservation bears this out: within the US, towns have become startup\nhubs if and only if they have both rich people and nerds.  Few\nstartups happen in Miami, for example, because although it's full\nof rich people, it has few nerds.  It's not the kind of place nerds\nlike.\n\nWhereas Pittsburgh has the opposite problem: plenty of nerds, but\nno rich people.  The top US Computer Science departments are said\nto be MIT, Stanford, Berkeley, and Carnegie-Mellon.  MIT yielded\nRoute 128.  Stanford and Berkeley yielded Silicon Valley.  But\nCarnegie-Mellon?  The record skips at that point.  Lower down the\nlist, the University of Washington yielded a high-tech community\nin Seattle, and the University of Texas at Austin yielded one in\nAustin.  But what happened in Pittsburgh?  And in Ithaca, home of\nCornell, which is also high on the list?\n\nI grew up in Pittsburgh and went to college at Cornell, so I can\nanswer for both.  The weather is terrible,  particularly in winter,\nand there's no interesting old city to make up for it, as there is\nin Boston.  Rich people don't want to live in Pittsburgh or Ithaca.\nSo while there are plenty of hackers who could start startups,\nthere's no one to invest in them.\n\nNot Bureaucrats\n\nDo you really need the rich people?  Wouldn't it work to have the\ngovernment invest in the nerds?  No, it would not.  Startup investors\nare a distinct type of rich people.  They tend to have a lot of\nexperience themselves in the technology business.  This (a) helps\nthem pick the right startups, and (b) means they can supply advice\nand connections as well as money.  And the fact that they have a\npersonal stake in the outcome makes them really pay attention.\n\nBureaucrats by their nature are the exact opposite sort of people\nfrom startup investors. The idea of them making startup investments\nis comic.  It would be like mathematicians running Vogue-- or\nperhaps more accurately, Vogue editors running a math journal.\n[2]\n\nThough indeed, most things bureaucrats do, they do badly.   We just\ndon't notice usually, because they only have to compete against\nother bureaucrats.  But as startup investors they'd have to compete\nagainst pros with a great deal more experience and motivation.\n\nEven corporations that have in-house VC groups generally forbid\nthem to make their own investment decisions.  Most are only allowed\nto invest in deals where some reputable private VC firm is willing\nto act as lead investor.\n\nNot Buildings\n\nIf you go to see Silicon Valley, what you'll see are buildings.\nBut it's the people that make it Silicon Valley, not the buildings.\nI read occasionally about attempts to set up \"technology\nparks\" in other places, as if the active ingredient of Silicon\nValley were the office space.  An article about Sophia Antipolis\nbragged that companies there included Cisco, Compaq, IBM, NCR, and\nNortel.  Don't the French realize these aren't startups?\n\nBuilding office buildings for technology companies won't get you a\nsilicon valley, because the key stage in the life of a startup\nhappens before they want that kind of space.  The key stage is when\nthey're three guys operating out of an apartment.  Wherever the\nstartup is when it gets funded, it will stay.  The defining quality\nof Silicon Valley is not that Intel or Apple or Google have offices\nthere, but that they were started there.\n\nSo if you want to reproduce Silicon Valley, what you need to reproduce\nis those two or three founders sitting around a kitchen table\ndeciding to start a company.  And to reproduce that you need those\npeople.\n\nUniversities\n\nThe exciting thing is, all you need are the people.  If you could\nattract a critical mass of nerds and investors to live somewhere,\nyou could reproduce Silicon Valley.  And both groups are highly\nmobile.  They'll go where life is good.  So what makes a place good\nto them?\n\nWhat nerds like is other nerds.  Smart people will go wherever other\nsmart people are.  And in particular, to great universities.  In\ntheory there could be other ways to attract them, but so far\nuniversities seem to be indispensable.  Within the US, there are\nno technology hubs without first-rate universities-- or at least,\nfirst-rate computer science departments.\n\nSo if you want to make a silicon valley, you not only need a\nuniversity, but one of the top handful in the world.  It has to be\ngood enough to act as a magnet, drawing the best people from thousands\nof miles away.  And that means it has to stand up to existing magnets\nlike MIT and Stanford.\n\nThis sounds hard.  Actually it might be easy.  My professor friends,\nwhen they're deciding where they'd like to work, consider one thing\nabove all: the quality of the other faculty.  What attracts professors\nis good colleagues.  So if you managed to recruit, en masse, a\nsignificant number of the best young researchers, you could create\na first-rate university from nothing overnight.  And you could do\nthat for surprisingly little.  If you paid 200 people hiring bonuses\nof $3 million apiece, you could put together a faculty that would\nbear comparison with any in the world.  And from that point the\nchain reaction would be self-sustaining.  So whatever it costs to\nestablish a mediocre university, for an additional half billion or\nso you could have a great one.  \n[3]\n\nPersonality\n\nHowever, merely creating a new university would not be enough to\nstart a silicon valley. The university is just the seed.  It has\nto be planted in the right soil, or it won't germinate.  Plant it\nin the wrong place, and you just create Carnegie-Mellon.\n\nTo spawn startups, your university has to be in a town that has\nattractions other than the university.  It has to be a place where\ninvestors want to live, and students want to stay after they graduate.\n\nThe two like much the same things, because most startup investors\nare nerds themselves.  So what do nerds look for in a town?  Their\ntastes aren't completely different from other people's, because a\nlot of the towns they like most in the US are also big tourist\ndestinations: San Francisco, Boston, Seattle.   But their tastes\ncan't be quite mainstream either, because they dislike other big\ntourist destinations, like New York, Los Angeles, and Las Vegas.\n\nThere has been a lot written lately about the \"creative class.\" The\nthesis seems to be that as wealth derives increasingly from ideas,\ncities will prosper only if they attract those who have them.  That\nis certainly true; in fact it was the basis of Amsterdam's prosperity\n400 years ago.\n\nA lot of nerd tastes they share with the creative class in general.\nFor example, they like well-preserved old neighborhoods instead of\ncookie-cutter suburbs, and locally-owned shops and restaurants\ninstead of national chains.  Like the rest of the creative class,\nthey want to live somewhere with personality.\n\nWhat exactly is personality?  I think it's the feeling that each\nbuilding is the work of a distinct group of people.  A town with\npersonality is one that doesn't feel mass-produced.  So if you want\nto make a startup hub-- or any town to attract the \"creative class\"--\nyou probably have to ban large development projects.\nWhen a large tract has been developed by a single organization, you\ncan always tell. \n[4]\n\nMost towns with personality are old, but they don't have to be.\nOld towns have two advantages: they're denser, because they were\nlaid out before cars, and they're more varied, because they were\nbuilt one building at a time.  You could have both now.  Just have\nbuilding codes that ensure density, and ban large scale developments.\n\nA corollary is that you have to keep out the biggest developer of\nall: the government.  A government that asks \"How can we build a\nsilicon valley?\" has probably ensured failure by the way they framed\nthe question.  You don't build a silicon valley; you let one grow.\n\nNerds\n\nIf you want to attract nerds, you need more than a town with\npersonality.  You need a town with the right personality.  Nerds\nare a distinct subset of the creative class, with different tastes\nfrom the rest.  You can see this most clearly in New York, which\nattracts a lot of creative people, but few nerds. \n[5]\n\nWhat nerds like is the kind of town where people walk around smiling.\nThis excludes LA, where no one walks at all, and also New York,\nwhere people walk, but not smiling. When I was in grad school in\nBoston, a friend came to visit from New York.  On the subway back\nfrom the airport she asked \"Why is everyone smiling?\"  I looked and\nthey weren't smiling.  They just looked like they were compared to\nthe facial expressions she was used to.\n\nIf you've lived in New York, you know where these facial expressions\ncome from.  It's the kind of place where your mind may be excited,\nbut your body knows it's having a bad time.  People don't so much\nenjoy living there as endure it for the sake of the excitement.\nAnd if you like certain kinds of excitement, New York is incomparable.\nIt's a hub of glamour, a magnet for all the shorter half-life\nisotopes of style and fame.\n\nNerds don't care about glamour, so to them the appeal of New York\nis a mystery.  People who like New York will pay a fortune for a\nsmall, dark, noisy apartment in order to live in a town where the\ncool people are really cool.  A nerd looks at that deal and sees\nonly: pay a fortune for a small, dark, noisy apartment.\n\nNerds will pay a premium to live in a town where the smart people\nare really smart, but you don't have to pay as much for that.  It's\nsupply and demand: glamour is popular, so you have to pay a lot for\nit.\n\nMost nerds like quieter pleasures.  They like cafes instead of\nclubs; used bookshops instead of fashionable clothing shops; hiking\ninstead of dancing; sunlight instead of tall buildings.  A nerd's\nidea of paradise is Berkeley or Boulder.\n\nYouth\n\nIt's the young nerds who start startups, so it's those specifically\nthe city has to appeal to.  The startup hubs in the US are all\nyoung-feeling towns.  This doesn't mean they have to be new.\nCambridge has the oldest town plan in America, but it feels young\nbecause it's full of students.\n\nWhat you can't have, if you want to create a silicon valley, is a\nlarge, existing population of stodgy people.  It would be a waste\nof time to try to reverse the fortunes of a declining industrial town\nlike Detroit or Philadelphia by trying to encourage startups.  Those\nplaces have too much momentum in the wrong direction.  You're better\noff starting with a blank slate in the form of a small town.  Or\nbetter still, if there's a town young people already flock to, that\none.\n\nThe Bay Area was a magnet for the young and optimistic for decades\nbefore it was associated with technology.  It was a place people\nwent in search of something new.  And so it became synonymous with\nCalifornia nuttiness.  There's still a lot of that there.  If you\nwanted to start a new fad-- a new way to focus one's \"energy,\" for\nexample, or a new category of things not to eat-- the Bay Area would\nbe the place to do it.  But a place that tolerates oddness in the\nsearch for the new is exactly what you want in a startup hub, because\neconomically that's what startups are.  Most good startup ideas\nseem a little crazy; if they were obviously good ideas, someone\nwould have done them already.\n\n(How many people are going to want computers in their houses?\nWhat, another search engine?)\n\nThat's the connection between technology and liberalism.  Without\nexception the high-tech cities in the US are also the most liberal.\nBut it's not because liberals are smarter that this is so.  It's\nbecause liberal cities tolerate odd ideas, and smart people by\ndefinition have odd ideas.\n\nConversely, a town that gets praised for being \"solid\" or representing\n\"traditional values\" may be a fine place to live, but it's never\ngoing to succeed as a startup hub.  The 2004 presidential election,\nthough a disaster in other respects, conveniently supplied us with\na county-by-county \nmap of such places.  \n[6]\n\nTo attract the young, a town must have an intact center.  In most\nAmerican cities the center has been abandoned, and the growth, if\nany, is in the suburbs.  Most American cities have been turned\ninside out. But none of the startup hubs has: not San Francisco,\nor Boston, or Seattle.  They all have intact centers.\n[7]\nMy guess is that no city with a dead center could be turned into a\nstartup hub.  Young people don't want to live in the suburbs.\n\nWithin the US, the two cities I think could most easily be turned\ninto new silicon valleys are Boulder and Portland.  Both have the\nkind of effervescent feel that attracts the young.  They're each\nonly a great university short of becoming a silicon valley, if they\nwanted to.\n\nTime\n\nA great university near an attractive town.  Is that all it takes?\nThat was all it took to make the original Silicon Valley.  Silicon\nValley traces its origins to William Shockley, one of the inventors\nof the transistor.  He did the research that won him the Nobel Prize\nat Bell Labs, but when he started his own company in 1956 he moved\nto Palo Alto to do it.   At the time that was an odd thing to do.\nWhy did he?  Because he had grown up there and remembered how nice\nit was.  Now Palo Alto is suburbia, but then it was a charming\ncollege town-- a charming college town with perfect weather and San\nFrancisco only an hour away.\n\nThe companies that rule Silicon Valley now are all descended in\nvarious ways from Shockley Semiconductor.  Shockley was a difficult\nman, and in 1957 his top people-- \"the traitorous eight\"-- left to\nstart a new company, Fairchild Semiconductor.  Among them were\nGordon Moore and Robert Noyce, who went on to found Intel, and\nEugene Kleiner, who founded the VC firm Kleiner Perkins.  Forty-two\nyears later, Kleiner Perkins funded Google, and the partner responsible\nfor the deal was John Doerr, who came to Silicon Valley in 1974 to\nwork for Intel.\n\nSo although a lot of the newest companies in Silicon Valley don't\nmake anything out of silicon, there always seem to be multiple links\nback to Shockley.  There's a lesson here: startups beget startups.\nPeople who work for startups start their own.  People who get rich\nfrom startups fund new ones.  I suspect this kind of organic growth\nis the only way to produce a startup hub, because it's the only way\nto grow the expertise you need.\n\nThat has two important implications.  The first is that you need\ntime to grow a silicon valley.  The university you could create in\na couple years, but the startup community around it has to grow\norganically.   The cycle time is limited by the time it takes a\ncompany to succeed, which probably averages about five years.\n\nThe other implication of the organic growth hypothesis is that you\ncan't be somewhat of a startup hub.  You either have a self-sustaining\nchain reaction, or not.  Observation confirms this too: cities\neither have a startup scene, or they don't.  There is no middle\nground.  Chicago has the third largest metropolitan area in America.\nAs source of startups it's negligible compared to Seattle, number 15.\n\nThe good news is that the initial seed can be quite small.  Shockley\nSemiconductor, though itself not very successful, was big enough.\nIt brought a critical mass of experts in an important new technology\ntogether in a place they liked enough to stay.\n\nCompeting\n\nOf course, a would-be silicon valley faces an obstacle the original\none didn't: it has to compete with Silicon Valley.  Can that be\ndone?  Probably.\n\nOne of Silicon Valley's biggest advantages is its venture capital\nfirms.  This was not a factor in Shockley's day, because VC funds\ndidn't exist.  In fact, Shockley Semiconductor and Fairchild\nSemiconductor were not startups at all in our sense.  They were\nsubsidiaries-- of Beckman Instruments and Fairchild Camera and\nInstrument respectively.  Those companies were apparently willing\nto establish subsidiaries wherever the experts wanted to live.\n\nVenture investors, however, prefer to fund startups within an hour's\ndrive.  For one, they're more likely to notice startups nearby.\nBut when they do notice startups in other towns they prefer them\nto move.  They don't want to have to travel to attend board meetings,\nand in any case the odds of succeeding are higher in a startup hub.\n\nThe centralizing effect of venture firms is a double one: they cause\nstartups to form around them, and those draw in more startups through\nacquisitions.  And although the first may be weakening because it's\nnow so cheap to start some startups, the second seems as strong as ever.\nThree of the most admired\n\"Web 2.0\" companies were started outside the usual startup hubs,\nbut two of them have already been reeled in through acquisitions.\n\nSuch centralizing forces make it harder for new silicon valleys to\nget started.  But by no means impossible.  Ultimately power rests\nwith the founders.  A startup with the best people will beat one\nwith funding from famous VCs, and a startup that was sufficiently\nsuccessful would never have to move.  So a town that\ncould exert enough pull over the right people could resist and\nperhaps even surpass Silicon Valley.\n\nFor all its power, Silicon Valley has a great weakness: the paradise\nShockley found in 1956 is now one giant parking lot.  San Francisco\nand Berkeley are great, but they're forty miles away.  Silicon\nValley proper is soul-crushing suburban sprawl.  It\nhas fabulous weather, which makes it significantly better than the\nsoul-crushing sprawl of most other American cities.  But a competitor\nthat managed to avoid sprawl would have real leverage.  All a city\nneeds is to be the kind of place the next traitorous eight look at\nand say \"I want to stay here,\" and that would be enough to get the\nchain reaction started.\n\n\n\n\n\nNotes\n\n[1]\nIt's interesting to consider how low this number could be\nmade.  I suspect five hundred would be enough, even if they could\nbring no assets with them.  Probably just thirty, if I could pick them, \nwould be enough to turn Buffalo into a significant startup hub.\n\n[2]\nBureaucrats manage to allocate research funding moderately\nwell, but only because (like an in-house VC fund) they outsource\nmost of the work of selection.  A professor at a famous university\nwho is highly regarded by his peers will get funding, pretty much\nregardless of the proposal.  That wouldn't work for startups, whose\nfounders aren't sponsored by organizations, and are often unknowns.\n\n[3]\nYou'd have to do it all at once, or at least a whole department\nat a time, because people would be more likely to come if they\nknew their friends were.  And you should probably start from scratch,\nrather than trying to upgrade an existing university, or much energy\nwould be lost in friction.\n\n[4]\nHypothesis: Any plan in which multiple independent buildings\nare gutted or demolished to be \"redeveloped\" as a single project\nis a net loss of personality for the city, with the exception of\nthe conversion of buildings not previously public, like warehouses.\n\n[5]\nA few startups get started in New York, but less\nthan a tenth as many per capita as in Boston, and mostly\nin less nerdy fields like finance and media.\n\n[6]\nSome blue counties are false positives (reflecting the\nremaining power of Democractic party machines), but there are no\nfalse negatives.  You can safely write off all the red counties.\n\n[7]\nSome \"urban renewal\" experts took a shot at destroying Boston's\nin the 1960s, leaving the area around city hall a bleak wasteland,\nbut most neighborhoods successfully resisted them.\n\nThanks to Chris Anderson, Trevor Blackwell, Marc Hedlund,\nJessica Livingston, Robert Morris, Greg Mcadoo, Fred Wilson,\nand Stephen Wolfram for\nreading drafts of this, and to Ed Dumbill for inviting me to speak.\n\n(The second part of this talk became Why Startups\nCondense in America.)\n\n", "April 2006\n\n(This essay is derived from a talk at the 2006 \nStartup School.)\n\nThe startups we've funded so far are pretty quick, but they seem\nquicker to learn some lessons than others.  I think it's because\nsome things about startups are kind of counterintuitive.\n\nWe've now \ninvested \nin enough companies that I've learned a trick\nfor determining which points are the counterintuitive ones:\nthey're the ones I have to keep repeating.\n\nSo I'm going to number these points, and maybe with future startups\nI'll be able to pull off a form of Huffman coding. I'll make them\nall read this, and then instead of nagging them in detail, I'll\njust be able to say: number four!\n\n\n1. Release Early.\n\nThe thing I probably repeat most is this recipe for a startup: get\na version 1 out fast, then improve it based on users' reactions.\n\nBy \"release early\" I don't mean you should release something full\nof bugs, but that you should release something minimal.  Users hate\nbugs, but they don't seem to mind a minimal version 1, if there's\nmore coming soon.\n\nThere are several reasons it pays to get version 1 done fast.  One\nis that this is simply the right way to write software, whether for\na startup or not.  I've been repeating that since 1993, and I haven't seen much since to\ncontradict it.  I've seen a lot of startups die because they were\ntoo slow to release stuff, and none because they were too quick.\n[1]\n\nOne of the things that will surprise you if you build something\npopular is that you won't know your users.  Reddit now has almost half a million\nunique visitors a month.  Who are all those people?  They have no\nidea.  No web startup does.  And since you don't know your users,\nit's dangerous to guess what they'll like.  Better to release\nsomething and let them tell you.\n\nWufoo took this to heart and released\ntheir form-builder before the underlying database.  You can't even\ndrive the thing yet, but 83,000 people came to sit in the driver's\nseat and hold the steering wheel.  And Wufoo got valuable feedback\nfrom it: Linux users complained they used too much Flash, so they\nrewrote their software not to.  If they'd waited to release everything\nat once, they wouldn't have discovered this problem till it was\nmore deeply wired in.\n\nEven if you had no users, it would still be important to release\nquickly, because for a startup the initial release acts as a shakedown\ncruise.  If anything major is broken-- if the idea's no good,\nfor example, or the founders hate one another-- the stress of getting\nthat first version out will expose it.  And if you have such problems\nyou want to find them early.\n\nPerhaps the most important reason to release early, though, is that\nit makes you work harder.  When you're working on something that\nisn't released, problems are intriguing.  In something that's out\nthere, problems are alarming.  There is a lot more urgency once you\nrelease.  And I think that's precisely why people put it off.  They\nknow they'll have to work a lot harder once they do. \n[2]\n\n\n2. Keep Pumping Out Features.\n\nOf course, \"release early\" has a second component, without which\nit would be bad advice.  If you're going to start with something\nthat doesn't do much, you better improve it fast.\n\nWhat I find myself repeating is \"pump out features.\"  And this rule\nisn't just for the initial stages.  This is something all startups\nshould do for as long as they want to be considered startups.\n\nI don't mean, of course, that you should make your application ever\nmore complex.  By \"feature\" I mean one unit of hacking-- one quantum\nof making users' lives better.\n\nAs with exercise, improvements beget improvements.  If you run every\nday, you'll probably feel like running tomorrow.  But if you skip\nrunning for a couple weeks, it will be an effort to drag yourself\nout.  So it is with hacking: the more ideas you implement, the more\nideas you'll have.  You should make your system better at least in\nsome small way every day or two.\n\nThis is not just a good way to get development done; it is also a\nform of marketing.  Users love a site that's constantly improving.\nIn fact, users expect a site to improve.  Imagine if you visited a\nsite that seemed very good, and then returned two months later and\nnot one thing had changed.  Wouldn't it start to seem lame? \n[3]\n\nThey'll like you even better when you improve in response to their\ncomments, because customers are used to companies ignoring them.\nIf you're the rare exception-- a company that actually listens--\nyou'll generate fanatical loyalty.  You won't need to advertise,\nbecause your users will do it for you.\n\nThis seems obvious too, so why do I have to keep repeating it?  I\nthink the problem here is that people get used to how things are.\nOnce a product gets past the stage where it has glaring flaws, you\nstart to get used to it, and gradually whatever features it happens\nto have become its identity.  For example, I doubt many people at\nYahoo (or Google for that matter) realized how much better web mail\ncould be till Paul Buchheit showed them.\n\nI think the solution is to assume that anything you've made is far\nshort of what it could be.  Force yourself, as a sort of intellectual\nexercise, to keep thinking of improvements.  Ok, sure, what you\nhave is perfect.  But if you had to change something, what would\nit be?\n\nIf your product seems finished, there are two possible explanations:\n(a) it is finished, or (b) you lack imagination.  Experience suggests\n(b) is a thousand times more likely.\n\n\n3. Make Users Happy.\n\nImproving constantly is an instance of a more general rule: make\nusers happy.  One thing all startups have in common is that they\ncan't force anyone to do anything.  They can't force anyone to use\ntheir software, and they can't force anyone to do deals with them.\nA startup has to sing for its supper.  That's why the successful\nones make great things.  They have to, or die.\n\nWhen you're running a startup you feel like a little bit of debris\nblown about by powerful winds.  The most powerful wind is users.\nThey can either catch you and loft you up into the sky, as they did\nwith Google, or leave you flat on the pavement, as they do with\nmost startups.  Users are a fickle wind, but more powerful than any\nother.  If they take you up, no competitor can keep you down.\n\nAs a little piece of debris, the rational thing for you to do is\nnot to lie flat, but to curl yourself into a shape the wind will\ncatch.\n\nI like the wind metaphor because it reminds you how impersonal the\nstream of traffic is.  The vast majority of people who visit your\nsite will be casual visitors.  It's them you have to design your\nsite for.  The people who really care will find what they want by\nthemselves.\n\nThe median visitor will arrive with their finger poised on the Back\nbutton.  Think about your own experience: most links you\nfollow lead to something lame.  Anyone who has used the web for\nmore than a couple weeks has been trained to click on Back after\nfollowing a link.  So your site has to say \"Wait!  Don't click on\nBack.  This site isn't lame.  Look at this, for example.\"\n\nThere are two things you have to do to make people pause.  The most\nimportant is to explain, as concisely as possible, what the hell\nyour site is about.  How often have you visited a site that seemed\nto assume you already knew what they did?  For example, the corporate\nsite that says the\ncompany makes\n\n  enterprise content management solutions for business that enable\n  organizations to unify people, content and processes to minimize\n  business risk, accelerate time-to-value and sustain lower total\n  cost of ownership.\n\nAn established company may get away with such an opaque description,\nbut no startup can.  A startup\nshould be able to explain in one or two sentences exactly what it\ndoes. \n[4]\nAnd not just to users.  You need this for everyone:\ninvestors, acquirers, partners, reporters, potential employees, and\neven current employees.  You probably shouldn't even start a company\nto do something that can't be described compellingly in one or two\nsentences.\n\nThe other thing I repeat is to give people everything you've got,\nright away.  If you have something impressive, try to put it on the\nfront page, because that's the only one most visitors will see.\nThough indeed there's a paradox here: the more you push the good\nstuff toward the front, the more likely visitors are to explore\nfurther. \n[5]\n\nIn the best case these two suggestions get combined: you tell\nvisitors what your site is about by showing them.  One of the\nstandard pieces of advice in fiction writing is \"show, don't tell.\"\nDon't say that a character's angry; have him grind his teeth, or\nbreak his pencil in half.  Nothing will explain what your site does\nso well as using it.\n\nThe industry term here is \"conversion.\"  The job of your site is\nto convert casual visitors into users-- whatever your definition\nof a user is.  You can measure this in your growth rate.  Either\nyour site is catching on, or it isn't, and you must know which.  If\nyou have decent growth, you'll win in the end, no matter how obscure\nyou are now.  And if you don't, you need to fix something.\n\n\n4. Fear the Right Things.\n\nAnother thing I find myself saying a lot is \"don't worry.\"  Actually,\nit's more often \"don't worry about this; worry about that instead.\"\nStartups are right to be paranoid, but they sometimes fear the wrong\nthings.\n\nMost visible disasters are not so alarming as they seem.  Disasters\nare normal in a startup: a founder quits, you discover a patent\nthat covers what you're doing, your servers keep crashing, you run\ninto an insoluble technical problem, you have to change your name,\na deal falls through-- these are all par for the course.  They won't\nkill you unless you let them.\n\nNor will most competitors.  A lot of startups worry \"what if Google\nbuilds something like us?\"  Actually big companies are not the ones\nyou have to worry about-- not even Google.  The people at Google\nare smart, but no smarter than you; they're not as motivated, because\nGoogle is not going to go out of business if this one product fails;\nand even at Google they have a lot of bureaucracy to slow them down.\n\nWhat you should fear, as a startup, is not the established players,\nbut other startups you don't know exist yet.  They're way more\ndangerous than Google because, like you, they're cornered animals.\n\nLooking just at existing competitors can give you a false sense of\nsecurity.  You should compete against what someone else could be\ndoing, not just what you can see people doing.  A corollary is that\nyou shouldn't relax just because you have no visible competitors\nyet.  No matter what your idea, there's someone else out there\nworking on the same thing.\n\nThat's the downside of it being easier to start a startup: more people\nare doing it.  But I disagree with Caterina Fake when she says that\nmakes this a bad time to start a startup.  More people are starting\nstartups, but not as many more as could.  Most college graduates\nstill think they have to get a job.  The average person can't ignore\nsomething that's been beaten into their head since they were three\njust because serving web pages recently got a lot cheaper.\n\nAnd in any case, competitors are not the biggest threat.  Way more\nstartups hose themselves than get crushed by competitors.  There\nare a lot of ways to do it, but the three main ones are internal\ndisputes, inertia, and ignoring users.  Each is, by itself, enough\nto kill you.  But if I had to pick the worst, it would be ignoring\nusers.  If you want a recipe for a startup that's going to die,\nhere it is: a couple of founders who have some great idea they know\neveryone is going to love, and that's what they're going to build,\nno matter what.\n\nAlmost everyone's initial plan is broken.  If companies stuck to\ntheir initial plans, Microsoft would be selling programming languages,\nand Apple would be selling printed circuit boards.  In both cases\ntheir customers told them what their business should be-- and they\nwere smart enough to listen.\n\nAs Richard Feynman said, the imagination of nature is greater than\nthe imagination of man.  You'll find more interesting things by\nlooking at the world than you could ever produce just by thinking.\nThis principle is very powerful.  It's why the best abstract painting\nstill falls short of Leonardo, for example.  And it applies to\nstartups too.  No idea for a product could ever be so clever as the\nones you can discover by smashing a beam of prototypes into a beam\nof users.\n\n\n5. Commitment Is a Self-Fulfilling Prophecy.\n\nI now have enough experience with startups to be able to say what\nthe most important quality is in a startup founder, and it's not\nwhat you might think.  The most important quality in a startup\nfounder is determination.  Not intelligence-- determination.\n\nThis is a little depressing.  I'd like to believe Viaweb succeeded\nbecause we were smart, not merely determined.  A lot of people in\nthe startup world want to believe that.  Not just founders, but\ninvestors too.  They like the idea of inhabiting a world ruled by\nintelligence.  And you can tell they really believe this, because\nit affects their investment decisions.\n\nTime after time VCs invest in startups founded by eminent professors.\nThis may work in biotech, where a lot of startups simply commercialize\nexisting research, but in software you want to invest in students,\nnot professors.  Microsoft, Yahoo, and Google were all founded by\npeople who dropped out of school to do it.  What students lack in\nexperience they more than make up in dedication.\n\nOf course, if you want to get rich, it's not enough merely to be\ndetermined.  You have to be smart too, right?  I'd like to think\nso, but I've had an experience that convinced me otherwise: I spent\nseveral years living in New York.\n\nYou can lose quite a lot in the brains department and it won't kill\nyou.  But lose even a little bit in the commitment department, and\nthat will kill you very rapidly.\n\nRunning a startup is like walking on your hands: it's possible, but\nit requires extraordinary effort.  If an ordinary employee were\nasked to do the things a startup founder has to, he'd be very\nindignant.  Imagine if you were hired at some big company, and in\naddition to writing software ten times faster than you'd ever had\nto before, they expected you to answer support calls, administer\nthe servers, design the web site, cold-call customers, find the\ncompany office space, and go out and get everyone lunch.\n\nAnd to do all this not in the calm, womb-like atmosphere of a big\ncompany, but against a backdrop of constant disasters.  That's the\npart that really demands determination.  In a startup, there's\nalways some disaster happening.  So if you're the least bit inclined\nto find an excuse to quit, there's always one right there.\n\nBut if you lack commitment, chances are it will have been hurting\nyou long before you actually quit.  Everyone who deals with startups\nknows how important commitment is, so if they sense you're ambivalent,\nthey won't give you much attention.  If you lack commitment, you'll\njust find that for some mysterious reason good things happen to\nyour competitors but not to you.  If you lack commitment, it will\nseem to you that you're unlucky.\n\nWhereas if you're determined to stick around, people will pay\nattention to you, because odds are they'll have to deal with you\nlater.  You're a local, not just a tourist, so everyone has to come\nto terms with you.\n\nAt Y Combinator we sometimes mistakenly fund teams who have the\nattitude that they're going to give this startup thing a shot for\nthree months, and if something great happens, they'll stick with\nit-- \"something great\" meaning either that someone wants to buy\nthem or invest millions of dollars in them.  But if this is your\nattitude, \"something great\" is very unlikely to happen to you,\nbecause both acquirers and investors judge you by your level of\ncommitment.\n\nIf an acquirer thinks you're going to stick around no matter what,\nthey'll be more likely to buy you, because if they don't and you\nstick around, you'll probably grow, your price will go up, and\nthey'll be left wishing they'd bought you earlier.  Ditto for\ninvestors.  What really motivates investors, even big VCs, is not\nthe hope of good returns, but the fear of missing out. \n[6]\nSo if\nyou make it clear you're going to succeed no matter what, and the only\nreason you need them is to make it happen a little faster, you're\nmuch more likely to get money.\n\nYou can't fake this.  The only way to convince everyone that you're\nready to fight to the death is actually to be ready to.\n\nYou have to be the right kind of determined, though.  I carefully\nchose the word determined rather than stubborn, because stubbornness\nis a disastrous quality in a startup.  You have to be determined,\nbut flexible, like a running back.  A successful running back doesn't\njust put his head down and try to run through people.  He improvises:\nif someone appears in front of him, he runs around them; if someone\ntries to grab him, he spins out of their grip; he'll even run in\nthe wrong direction briefly if that will help.  The one thing he'll\nnever do is stand still. \n[7]\n\n\n6. There Is Always Room.\n\nI was talking recently to a startup founder about whether it might\nbe good to add a social component to their software.  He said he\ndidn't think so, because the whole social thing was tapped out.\nReally?  So in a hundred years the only social networking sites\nwill be the Facebook, MySpace, Flickr, and Del.icio.us?  Not likely.\n\nThere is always room for new stuff.  At every point in history,\neven the darkest bits of the dark ages, people were discovering\nthings that made everyone say \"why didn't anyone think of that\nbefore?\"  We know this continued to be true up till 2004, when the\nFacebook was founded-- though strictly speaking someone else did\nthink of that.\n\nThe reason we don't see the opportunities all around us is that we\nadjust to however things are, and assume that's how things have to\nbe.  For example, it would seem crazy to most people to try to make\na better search engine than Google.  Surely that field, at least,\nis tapped out.  Really?  In a hundred years-- or even twenty-- are\npeople still going to search for information using something like\nthe current Google?  Even Google probably doesn't think that.\n\nIn particular, I don't think there's any limit to the number of\nstartups.  Sometimes you hear people saying \"All these guys starting\nstartups now are going to be disappointed. How many little startups\nare Google and Yahoo going to buy, after all?\" That sounds cleverly\nskeptical, but I can prove it's mistaken.  No one proposes that\nthere's some limit to the number of people who can be employed in\nan economy consisting of big, slow-moving companies with a couple\nthousand people each.  Why should there be any limit to the number\nwho could be employed by small, fast-moving companies with ten each?\nIt seems to me the only limit would be the number of people who\nwant to work that hard.\n\nThe limit on the number of startups is not the number that can get\nacquired by Google and Yahoo-- though it seems even that should\nbe unlimited, if the startups were actually worth buying-- but the\namount of wealth that can be created.  And I don't think there's\nany limit on that, except cosmological ones.\n\nSo for all practical purposes, there is no limit to the number of\nstartups.  Startups make wealth, which means they make things people\nwant, and if there's a limit on the number of things people want,\nwe are nowhere near it.  I still don't even have a flying car.\n\n\n7. Don't Get Your Hopes Up.\n\nThis is another one I've been repeating since long before Y Combinator.\nIt was practically the corporate motto at Viaweb.\n\nStartup founders are naturally optimistic.  They wouldn't do it\notherwise.  But you should treat your optimism the way you'd treat\nthe core of a nuclear reactor: as a source of power that's also\nvery dangerous.  You have to build a shield around it, or it will\nfry you.\n\nThe shielding of a reactor is not uniform; the reactor would be\nuseless if it were.  It's pierced in a few places to let pipes in.\nAn optimism shield has to be pierced too.  I think the place to\ndraw the line is between what you expect of yourself, and what you\nexpect of other people.  It's ok to be optimistic about what you\ncan do, but assume the worst about machines and other people.\n\nThis is particularly necessary in a startup, because you tend to\nbe pushing the limits of whatever you're doing.  So things don't\nhappen in the smooth, predictable way they do in the rest of the\nworld.  Things change suddenly, and usually for the worse.\n\nShielding your optimism is nowhere more important than with deals.\nIf your startup is doing a deal, just assume it's not going to\nhappen.  The VCs who say they're going to invest in you aren't.\nThe company that says they're going to buy you isn't.  The big\ncustomer who wants to use your system in their whole company won't.\nThen if things work out you can be pleasantly surprised.\n\nThe reason I warn startups not to get their hopes up is not to save\nthem from being disappointed when things fall through.  It's\nfor a more practical reason: to prevent them from leaning their\ncompany against something that's going to fall over, taking them\nwith it.\n\nFor example, if someone says they want to invest in you, there's a\nnatural tendency to stop looking for other investors.  That's why\npeople proposing deals seem so positive: they want you to\nstop looking.  And you want to stop too, because doing deals is a\npain.  Raising money, in particular, is a huge time sink.  So you\nhave to consciously force yourself to keep looking.\n\nEven if you ultimately do the first deal, it will be to your advantage\nto have kept looking, because you'll get better terms.  Deals are\ndynamic; unless you're negotiating with someone unusually honest,\nthere's not a single point where you shake hands and the deal's\ndone. There are usually a lot of subsidiary questions to be cleared\nup after the handshake, and if the other side senses weakness-- if\nthey sense you need this deal-- they will be very tempted to screw\nyou in the details.\n\nVCs and corp dev guys are professional negotiators.  They're trained\nto take advantage of weakness. \n[8]\nSo while they're often nice\nguys, they just can't help it.  And as pros they do this more than\nyou.  So don't even try to bluff them.  The only way a startup can\nhave any leverage in a deal is genuinely not to need it.  And if\nyou don't believe in a deal, you'll be less likely to depend on it.\n\nSo I want to plant a hypnotic suggestion in your heads: when you\nhear someone say the words \"we want to invest in you\" or \"we want\nto acquire you,\" I want the following phrase to appear automatically\nin your head: don't get your hopes up.  Just continue running\nyour company as if this deal didn't exist.  Nothing is more likely\nto make it close.\n\nThe way to succeed in a startup is to focus on the goal of getting\nlots of users, and keep walking swiftly toward it while investors\nand acquirers scurry alongside trying to wave money in your face.\n\n\nSpeed, not Money\n\nThe way I've described it, starting a startup sounds pretty stressful.\nIt is.  When I talk to the founders of the companies we've funded,\nthey all say the same thing: I knew it would be hard, but I didn't\nrealize it would be this hard.\n\nSo why do it?  It would be worth enduring a lot of pain and stress\nto do something grand or heroic, but just to make money?  Is making\nmoney really that important?\n\nNo, not really.  It seems ridiculous to me when people take business\ntoo seriously.  I regard making money as a boring errand to be got\nout of the way as soon as possible.  There is nothing grand or\nheroic about starting a startup per se.\n\nSo why do I spend so much time thinking about startups?  I'll tell\nyou why.  Economically, a startup is best seen not as a way to get\nrich, but as a way to work faster.  You have to make a living, and\na startup is a way to get that done quickly, instead of letting it\ndrag on through your whole life.\n[9]\n\nWe take it for granted most of the time, but human life is fairly\nmiraculous.  It is also palpably short.  You're given this marvellous\nthing, and then poof, it's taken away.  You can see why people\ninvent gods to explain it.  But even to people who don't believe\nin gods, life commands respect.  There are times in most of our\nlives when the days go by in a blur, and almost everyone has a\nsense, when this happens, of wasting something precious.  As Ben\nFranklin said, if you love life, don't waste time, because time is\nwhat life is made of.\n\nSo no, there's nothing particularly grand about making money.  That's\nnot what makes startups worth the trouble.  What's important about\nstartups is the speed.  By compressing the dull but necessary task\nof making a living into the smallest possible time, you show respect\nfor life, and there is something grand about that.\n\n\n\n\n\nNotes\n\n[1]\nStartups can die from releasing something full of bugs, and not\nfixing them fast enough, but I don't know of any that died from\nreleasing something stable but minimal very early, then promptly\nimproving it.\n\n[2]\nI know this is why I haven't released Arc.  The moment I do,\nI'll have people nagging me for features.\n\n[3]\nA web site is different from a book or movie or desktop application\nin this respect.  Users judge a site not as a single snapshot, but\nas an animation with multiple frames.  Of the two, I'd say the rate of\nimprovement is more important to users than where you currently\nare.\n\n[4]\nIt should not always tell this to users, however.  For example,\nMySpace is basically a replacement mall for mallrats.  But it was\nwiser for them, initially, to pretend that the site was about bands.\n\n[5]\nSimilarly, don't make users register to try your site.  Maybe\nwhat you have is so valuable that visitors should gladly register\nto get at it.  But they've been trained to expect the opposite.\nMost of the things they've tried on the web have sucked-- and\nprobably especially those that made them register.\n\n[6]\nVCs have rational reasons for behaving this way. They don't\nmake their money (if they make money) off their median investments.\nIn a typical fund, half the companies fail, most of the rest generate\nmediocre returns, and one or two \"make the fund\" by succeeding\nspectacularly.  So if they miss just a few of the most promising\nopportunities, it could hose the whole fund.\n\n[7]\nThe attitude of a running back doesn't translate to soccer.\nThough it looks great when a forward dribbles past multiple defenders,\na player who persists in trying such things will do worse in the\nlong term than one who passes.\n\n[8]\nThe reason Y Combinator never negotiates valuations\nis that we're not professional negotiators, and don't want to turn\ninto them.\n\n[9]\nThere are two ways to do \nwork you love: (a) to make money, then work\non what you love, or (b) to get a job where you get paid to work on\nstuff you love.  In practice the first phases of both\nconsist mostly of unedifying schleps, and in (b) the second phase is less\nsecure.\n\nThanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica \nLivingston, and Robert Morris for reading drafts of this.\n\n", "April 2006, rev August 2009\n\nPlato quotes Socrates as saying \"the unexamined life is not worth\nliving.\"  Part of what he meant was that the proper role of humans is to\nthink, just as the proper role of anteaters is to poke their noses\ninto anthills.\n\nA lot of ancient philosophy had the quality \u2014 and I\ndon't mean this in an insulting way \u2014 of the kind of conversations\nfreshmen have late at night in common rooms:\n\nWhat is our purpose?  Well, we humans are\nas conspicuously different from other animals as the anteater.\nIn our case the distinguishing feature is the ability to reason.\nSo obviously that is what we should be doing, and a human who\ndoesn't is doing a bad job of being human \u2014 is no better than an\nanimal.\n\nNow we'd give a different answer.  At least, someone Socrates's age\nwould.  We'd ask why we even suppose we have a \"purpose\" in life.\nWe may be better adapted for some things than others; we\nmay be happier doing things we're adapted for; but why assume\npurpose?\n\nThe history of ideas\nis a history of gradually discarding the assumption that it's all\nabout us.  No, it turns out, the earth is not the center of the\nuniverse \u2014 not even the center of the solar system.  No, it turns\nout, humans are not created by God in his own image; they're just\none species among many, descended not merely from apes, but from\nmicroorganisms.  Even the concept of \"me\" turns out to be fuzzy\naround the edges if you examine it closely.\n\nThe idea that we're the center of things is difficult to discard.\nSo difficult that there's probably room to discard more.  Richard\nDawkins made another step in that direction only in the last several\ndecades, with the idea of the \nselfish gene.   \nNo, it turns\nout, we're not even the protagonists: we're just the latest model\nvehicle our genes have constructed to travel around in.  And having\nkids is our genes heading for the lifeboats.  Reading\nthat book snapped my brain out of its previous way of thinking the\nway Darwin's must have when it first appeared.\n\n(Few people can experience now what Darwin's contemporaries did\nwhen The Origin of Species was first published, because everyone\nnow is raised either to take evolution for granted, or to regard\nit as a heresy. No one encounters the idea of natural selection for\nthe first time as an adult.)\n\nSo if you want to discover things that have been overlooked till\nnow, one really good place to look is in our blind spot: in our\nnatural, naive belief that it's all about us.  And expect to encounter\nferocious opposition if you do.\n\nConversely, if you have to choose between two theories, prefer the\none that doesn't center on you.\n\nThis principle isn't only for big ideas.  It works in everyday life,\ntoo.  For example, suppose you're saving a piece of cake in the fridge, and you\ncome home one day to find your housemate has eaten\nit.  Two possible theories:\n\na) Your housemate did it deliberately to upset you.  He knew\nyou were saving that piece of cake.\n\nb) Your housemate was hungry.\n\nI say pick b.  No one knows who said \"never attribute to malice what\ncan be explained by incompetence,\" but it is a powerful idea.\nIts more general version is our answer to the Greeks:\nDon't see purpose where there isn't.\nOr better still, the positive version:\nSee randomness.\n\n", "\nMarch 2006\n\n(This essay is derived from a talk at Google.)\n\nA few weeks ago I found to my surprise that I'd been granted four patents.  \nThis was all the more surprising\nbecause I'd only applied for three.  The patents aren't mine, of\ncourse.  They were assigned to Viaweb, and became Yahoo's when they\nbought us.  But the news set me thinking about the question of\nsoftware patents generally.\n\nPatents are a hard problem.  I've had to advise most of the startups\nwe've funded about them, and despite years of experience I'm still\nnot always sure I'm giving the right advice.\n\nOne thing I do feel pretty certain of is that if you're against\nsoftware patents, you're against patents in general.  Gradually our\nmachines consist more and more of software.  Things that used to\nbe done with levers and cams and gears are now done with loops and\ntrees and closures.  There's nothing special about physical embodiments\nof control systems that should make them patentable, and the software\nequivalent not.\n\nUnfortunately, patent law is inconsistent on this point.  Patent\nlaw in most countries says that algorithms aren't patentable.  This\nrule is left over from a time when \"algorithm\" meant something like\nthe Sieve of Eratosthenes.  In 1800, people could not see as readily\nas we can that a great many patents on mechanical objects were\nreally patents on the algorithms they embodied.\n\nPatent lawyers still have to pretend that's what they're doing when\nthey patent algorithms.  You must not use the word \"algorithm\" in\nthe title of a patent application, just as you must not use the\nword \"essays\" in the title of a book.  If you want to patent an\nalgorithm, you have to frame it as a computer system executing that algorithm.\nThen it's mechanical; phew.  The default euphemism for algorithm\nis \"system and method.\"  Try a patent search for that phrase and\nsee how many results you get.\n\nSince software patents are no different from hardware patents,\npeople who say \"software patents are evil\" are saying simply \"patents\nare evil.\"  So why do so many people complain about software patents\nspecifically?\n\nI think the problem is more with the patent office than the concept\nof software patents.  Whenever software meets government, bad things\nhappen, because software changes fast and government changes slow.\nThe patent office has been overwhelmed by both the volume and the\nnovelty of applications for software patents, and as a result they've\nmade a lot of mistakes.\n\nThe most common is to grant patents that shouldn't be granted.  To\nbe patentable, an invention has to be more than new.  It also has\nto be non-obvious.  And this, especially, is where the USPTO has\nbeen dropping the ball. Slashdot has an icon that expresses the\nproblem vividly: a knife and fork with the words \"patent pending\"\nsuperimposed.\n\nThe scary thing is, this is the only icon they have for\npatent stories.  Slashdot readers now take it for granted that a\nstory about a patent will be about a bogus patent.\nThat's how bad the problem has become.\n\nThe problem with Amazon's notorious one-click patent, for example,\nis not that it's a software patent, but that it's obvious.  Any\nonline store that kept people's shipping addresses would have\nimplemented this.  The reason Amazon did it first was not that they\nwere especially smart, but because they were one of the earliest\nsites with enough clout to force customers to log in before they\ncould buy something. \n[1]\n\nWe, as hackers, know the USPTO is letting people patent the knives\nand forks of our world.  The problem is, the USPTO are not hackers.\nThey're probably good at judging new inventions for casting steel\nor grinding lenses, but they don't understand software yet.\n\nAt this point an optimist would be tempted to add \"but they will\neventually.\"  Unfortunately that might not be true.  The problem\nwith software patents is an instance of a more general one: the\npatent office takes a while to understand new technology.  If so,\nthis problem will only get worse, because the rate of technological\nchange seems to be increasing.  In thirty years, the patent office\nmay understand the sort of things we now patent as software, but\nthere will be other new types of inventions they understand even\nless.\n\nApplying for a patent is a negotiation.  You generally apply for a\nbroader patent than you think you'll be granted, and the examiners\nreply by throwing out some of your claims and granting others.  So\nI don't really blame Amazon for applying for the one-click patent.\nThe big mistake was the patent office's, for not insisting on\nsomething narrower, with real technical content.  By granting such\nan over-broad patent, the USPTO in effect slept with Amazon on the\nfirst date.  Was Amazon supposed to say no?\n\nWhere Amazon went over to the dark side was not in applying for the\npatent, but in enforcing it.  A lot of companies (Microsoft, for\nexample) have been granted large numbers of preposterously over-broad\npatents,  but they keep them mainly for defensive purposes.  Like\nnuclear weapons, the main role of big companies' patent portfolios\nis to threaten anyone who attacks them with a counter-suit.  Amazon's\nsuit against Barnes & Noble was thus the equivalent of a nuclear\nfirst strike.\n\nThat suit probably hurt Amazon more than it helped them.  Barnes &\nNoble was a lame site; Amazon would have crushed them anyway.  To\nattack a rival they could have ignored, Amazon put a lasting black\nmark on their own reputation.  Even now I think if you asked hackers\nto free-associate about Amazon, the one-click patent would turn up\nin the first ten topics.\n\nGoogle clearly doesn't feel that merely holding patents is evil.\nThey've applied for a lot of them.  Are they hypocrites?  Are patents\nevil?\n\nThere are really two variants of that question, and people answering\nit often aren't clear in their own minds which they're answering.\nThere's a narrow variant: is it bad, given the current legal system,\nto apply for patents? and also a broader one: is it bad that the\ncurrent legal system allows patents?\n\nThese are separate questions.  For example, in preindustrial societies\nlike medieval Europe, when someone attacked you, you didn't call\nthe police.  There were no police.  When attacked, you were supposed\nto fight back, and there were conventions about how to do it.  Was\nthis wrong?  That's two questions: was it wrong to take justice\ninto your own hands, and was it wrong that you had to?  We tend to\nsay yes to the second, but no to the first.  If no one else will\ndefend you, you have to defend yourself.  \n[2]\n\nThe situation with patents is similar.  Business is a kind of\nritualized warfare.  Indeed, it evolved from actual warfare: most\nearly traders switched on the fly from merchants to pirates depending\non how strong you seemed.  In business there are certain rules\ndescribing how companies may and may not compete with one another,\nand someone deciding that they're going to play by their own rules\nis missing the point.  Saying \"I'm not going to apply for patents\njust because everyone else does\" is not like saying \"I'm not going\nto lie just because everyone else does.\"  It's more like saying\n\"I'm not going to use TCP/IP just because everyone else does.\" Oh\nyes you are.\n\nA closer comparison might be someone seeing a hockey game for the\nfirst time, realizing with shock that the players were deliberately\nbumping into one another, and deciding that one would on no account\nbe so rude when playing hockey oneself.\n\nHockey allows checking.  It's part of the game.  If your team refuses\nto do it, you simply lose.  So it is in business.  Under the present\nrules, patents are part of the game.\n\nWhat does that mean in practice?  We tell the startups we fund not\nto worry about infringing patents, because startups rarely get sued\nfor patent infringement.  There are only two reasons someone might\nsue you: for money, or to prevent you from competing with them.\nStartups are too poor to be worth suing for money. And in practice\nthey don't seem to get sued much by competitors, either.  They don't\nget sued by other startups because (a) patent suits are an expensive\ndistraction, and (b) since the other startups are as young as they\nare, their patents probably haven't issued yet. \n[3]\nNor do startups,\nat least in the software business, seem to get sued much by established\ncompetitors.  Despite all the patents Microsoft holds, I don't know\nof an instance where they sued a startup for patent infringement.\nCompanies like Microsoft and Oracle don't win by winning lawsuits.\nThat's too uncertain.  They win by locking competitors out of their\nsales channels.  If you do manage to threaten them, they're more\nlikely to buy you than sue you.\n\nWhen you read of big companies filing patent suits against smaller\nones, it's usually a big company on the way down, grasping at\nstraws.  For example, Unisys's attempts to enforce their patent on\nLZW compression.  When you see a big company threatening patent\nsuits, sell.  When a company starts fighting over IP, it's a sign\nthey've lost the real battle, for users.\n\nA company that sues competitors for patent infringement is like\na defender who has been beaten so thoroughly that he turns to plead\nwith the referee.  You don't do that if you can still reach the\nball, even if you genuinely believe you've been fouled.  So a company\nthreatening patent suits is a company in trouble.\n\nWhen we were working on Viaweb, a bigger company in the e-commerce\nbusiness was granted a patent on online ordering, or something like\nthat.  I got a call from a VP there asking if we'd like to license\nit.  I replied that I thought the patent was completely bogus, and\nwould never hold up in court.  \"Ok,\" he replied.  \"So, are you guys\nhiring?\"\n\nIf your startup grows big enough, however, you'll start to get sued,\nno matter what you do.  If you go public, for example, you'll be\nsued by multiple patent trolls who hope you'll pay them off to go\naway.  More on them later.\n\nIn other words, no one will sue you for patent infringement till\nyou have money, and once you have money, people will sue you whether\nthey have grounds to or not.  So I advise fatalism.  Don't waste\nyour time worrying about patent infringement.  You're probably\nviolating a patent every time you tie your shoelaces.  At the start,\nat least, just worry about making something great and getting lots\nof users.  If you grow to the point where anyone considers you worth\nattacking, you're doing well.\n\nWe do advise the companies we fund to apply for patents, but not\nso they can sue competitors.  Successful startups either get bought\nor grow into big companies.  If a startup wants to grow into a big\ncompany, they should apply for patents to build up the patent\nportfolio they'll need to maintain an armed truce with other big\ncompanies.  If they want to get bought, they should apply for patents\nbecause patents are part of the mating dance with acquirers.\n\nMost startups that succeed do it by getting bought, and most acquirers\ncare about patents.  Startup acquisitions are usually a build-vs-buy\ndecision for the acquirer.  Should we buy this little startup or\nbuild our own?  And two things, especially, make them decide not\nto build their own: if you already have a large and rapidly growing\nuser base, and if you have a fairly solid patent application on\ncritical parts of your software.\n\nThere's a third reason big companies should prefer buying to building:\nthat if they built their own, they'd screw it up.  But few big\ncompanies are smart enough yet to admit this to themselves.  It's\nusually the acquirer's engineers who are asked how hard it would\nbe for the company to build their own, and they overestimate their\nabilities.  \n[4]\nA patent seems to change the balance.  It gives the\nacquirer an excuse to admit they couldn't copy what you're doing.\nIt may also help them to grasp what's special about your technology.\n\nFrankly, it surprises me how small a role patents play in the\nsoftware business.  It's kind of ironic, considering all the dire\nthings experts say about software patents stifling innovation, but\nwhen one looks closely at the software business, the most striking\nthing is how little patents seem to matter.\n\nIn other fields, companies regularly sue competitors for patent\ninfringement.  For example, the airport baggage scanning business\nwas for many years a cozy duopoly shared between two companies,\nInVision and L-3.  In 2002 a startup called Reveal appeared, with\nnew technology that let them build scanners a third the size.  They\nwere sued for patent infringement before they'd even released a\nproduct.\n\nYou rarely hear that kind of story in our world.  The one example\nI've found is, embarrassingly enough, Yahoo, which filed a patent\nsuit against a gaming startup called Xfire in 2005.  Xfire doesn't\nseem to be a very big deal, and it's hard to say why Yahoo felt\nthreatened.  Xfire's VP of engineering had worked at Yahoo on similar\nstuff-- in fact, he was listed as an inventor on the patent Yahoo\nsued over-- so perhaps there was something personal about it.  My\nguess is that someone at Yahoo goofed.  At any rate they didn't\npursue the suit very vigorously.\n\nWhy do patents play so small a role in software?  I can think of\nthree possible reasons.\n\nOne is that software is so complicated that patents by themselves\nare not worth very much.  I may be maligning other fields here, but\nit seems that in most types of engineering you can hand the details\nof some new technique to a group of medium-high quality people and\nget the desired result.  For example, if someone develops a new\nprocess for smelting ore that gets a better yield, and you assemble\na team of qualified experts and tell them about it, they'll be able\nto get the same yield.  This doesn't seem to work in software.\nSoftware is so subtle and unpredictable that \"qualified experts\"\ndon't get you very far.\n\nThat's why we rarely hear phrases like \"qualified expert\" in the\nsoftware business.  What that level of ability can get you is, say,\nto make your software compatible with some other piece of software--\nin eight months, at enormous cost.  To do anything harder you need\nindividual brilliance.  If you assemble a team of qualified experts\nand tell them to make a new web-based email program, they'll get\ntheir asses kicked by a team of inspired nineteen year olds.\n\nExperts can implement, but they can't design.\nOr rather, expertise in implementation is the only kind most people,\nincluding the experts themselves, can measure. \n[5]\n\nBut design is a definite skill.  It's not just an airy intangible.\nThings always seem intangible when you don't understand them.\nElectricity seemed an airy intangible to most people in 1800.  Who\nknew there was so much to know about it?  So it is with design.\nSome people are good at it and some people are bad at it, and there's\nsomething very tangible they're good or bad at.\n\nThe reason design counts so much in software is probably that there\nare fewer constraints than on physical things.  Building physical\nthings is expensive and dangerous.  The space of possible choices\nis smaller; you tend to have to work as part of a larger group; and\nyou're subject to a lot of regulations.  You don't have any of that\nif you and a couple friends decide to create a new web-based\napplication.\n\nBecause there's so much scope for design in software, a successful\napplication tends to be way more than the sum of its patents.  What\nprotects little companies from being copied by bigger competitors\nis not just their patents, but the thousand little things the big\ncompany will get wrong if they try.\n\nThe second reason patents don't count for much in our world is that\nstartups rarely attack big companies head-on, the way Reveal did.\nIn the software business, startups beat established companies by\ntranscending them.  Startups don't build desktop word processing\nprograms to compete with Microsoft Word. \n[6]\nThey build Writely.\nIf this paradigm is crowded, just wait for the next one; they run\npretty frequently on this route.\n\nFortunately for startups, big companies are extremely good at denial.\nIf you take the trouble to attack them from an oblique angle, they'll\nmeet you half-way and maneuver to keep you in their blind spot.  To\nsue a startup would mean admitting it was dangerous, and that often\nmeans seeing something the big company doesn't want to see.  IBM\nused to sue its mainframe competitors regularly, but they didn't\nbother much about the microcomputer industry because they didn't\nwant to see the threat it posed.  Companies building web based apps\nare similarly protected from Microsoft, which even now doesn't want\nto imagine a world in which Windows is irrelevant.\n\nThe third reason patents don't seem to matter very much in software\nis public opinion-- or rather, hacker opinion.  In a recent interview,\nSteve Ballmer coyly left open the possibility of attacking Linux\non patent grounds.  But I doubt Microsoft would ever be so stupid.\nThey'd face the mother of all boycotts.  And not just from the\ntechnical community in general; a lot of their own people would\nrebel.\n\nGood hackers care a lot about matters of principle, and they are\nhighly mobile.  If a company starts misbehaving, smart people won't\nwork there.  For some reason this seems to be more true in software\nthan other businesses.  I don't think it's because hackers have\nintrinsically higher principles so much as that their skills are\neasily transferrable.  Perhaps we can split the difference and say\nthat mobility gives hackers the luxury of being principled.\n\nGoogle's \"don't be evil\" policy may for this reason be the most\nvaluable thing they've discovered.  It's very constraining in some\nways.  If Google does do something evil, they get doubly whacked\nfor it: once for whatever they did, and again for hypocrisy.  But\nI think it's worth it.  It helps them to hire the best people, and\nit's better, even from a purely selfish point of view, to be\nconstrained by principles than by stupidity.\n\n(I wish someone would get this point across to the present\nadministration.)\n\nI'm not sure what the proportions are of the preceding three\ningredients, but the custom among the big companies seems to be not\nto sue the small ones, and the startups are mostly too busy and too\npoor to sue one another.  So despite the huge number of software\npatents there's not a lot of suing going on.  With one exception:\npatent trolls.\n\nPatent trolls are companies consisting mainly of lawyers whose whole\nbusiness is to accumulate patents and threaten to sue companies who\nactually make things.  Patent trolls, it seems safe to say, are\nevil.  I feel a bit stupid saying that, because when you're saying\nsomething that Richard Stallman and Bill Gates would both agree\nwith, you must be perilously close to tautologies.\n\nThe CEO of Forgent, one of the most notorious patent trolls, says\nthat what his company does is \"the American way.\" Actually that's\nnot true. The American way is to make money by creating wealth, not by suing people. \n[7]\nWhat companies like Forgent do is actually the proto-industrial\nway.  In the period just before the industrial revolution, some of\nthe greatest fortunes in countries like England and France were\nmade by courtiers who extracted some lucrative right from the crown--\nlike the right to collect taxes on the import of silk-- and then\nused this to squeeze money from the merchants in that business.  So\nwhen people compare patent trolls to the mafia, they're more right\nthan they know, because the mafia too are not merely bad, but bad\nspecifically in the sense of being an obsolete business model.\n\nPatent trolls seem to have caught big companies by surprise.  In\nthe last couple years they've extracted hundreds of millions of\ndollars from them.  Patent trolls are hard to fight precisely because\nthey create nothing.  Big companies are safe from being sued by\nother big companies because they can threaten a counter-suit.  But\nbecause patent trolls don't make anything, there's nothing they can\nbe sued for.  I predict this loophole will get closed fairly quickly,\nat least by legal standards.  It's clearly an abuse of the system,\nand the victims are powerful.\n[8]\n\nBut evil as patent trolls are, I don't think they hamper innovation\nmuch.  They don't sue till a startup has made money, and by that\npoint the innovation that generated it has already happened.  I\ncan't think of a startup that avoided working on some problem because\nof patent trolls.\n\nSo much for hockey as the game is played now.  What about the more\ntheoretical question of whether hockey would be a better game without\nchecking?  Do patents encourage or discourage innovation?\n\nThis is a very hard question to answer in the general case.  People\nwrite whole books on the topic.  One of my main hobbies is the\nhistory of technology, and even though I've studied the subject for\nyears, it would take me several weeks of research to be able to say\nwhether patents have in general been a net win.\n\nOne thing I can say is that 99.9% of the people who express opinions\non the subject do it not based on such research, but out of a kind\nof religious conviction.  At least, that's the polite way of putting\nit; the colloquial version involves speech coming out of organs not\ndesigned for that purpose.\n\nWhether they encourage innovation or not, patents were at least\nintended to.  You don't get a patent for nothing.  In return for\nthe exclusive right to use an idea, you have to publish it,\nand it was largely to encourage such openness that patents were\nestablished.\n\nBefore patents, people protected ideas by keeping them secret.  With\npatents, central governments said, in effect, if you tell everyone\nyour idea, we'll protect it for you.  There is a parallel here to\nthe rise of civil order, which happened at roughly the same time.\nBefore central governments were powerful enough to enforce order,\nrich people had private armies.  As governments got more powerful,\nthey gradually compelled magnates to cede most responsibility for\nprotecting them.  (Magnates still have bodyguards, but no longer\nto protect them from other magnates.)\n\nPatents, like police, are involved in many abuses.  But in both\ncases the default is something worse. The choice is not \"patents\nor freedom?\" any more than it is \"police or freedom?\" The actual\nquestions are respectively \"patents or secrecy?\" and \"police or\ngangs?\"\n\nAs with gangs, we have some idea what secrecy would be like, because\nthat's how things used to be.  The economy of medieval Europe was\ndivided up into little tribes, each jealously guarding their\nprivileges and secrets.  In Shakespeare's time, \"mystery\" was\nsynonymous with \"craft.\"   Even today we can see an echo of the\nsecrecy of medieval guilds, in the now pointless secrecy of the\nMasons.\n\nThe most memorable example of medieval industrial secrecy is probably\nVenice, which forbade glassblowers to leave the city, and sent\nassassins after those who tried.  We might like to think we wouldn't\ngo so far, but the movie industry has already tried to pass laws\nprescribing three year prison terms just for putting movies on\npublic networks.  Want to try a frightening thought experiment? If\nthe movie industry could have any law they wanted, where would they\nstop?  Short of the death penalty, one assumes, but how close would\nthey get?\n\nEven worse than the spectacular abuses might be the overall decrease\nin efficiency that would accompany increased secrecy.  As anyone\nwho has dealt with organizations that operate on a \"need to know\"\nbasis can attest, dividing information up into little cells is\nterribly inefficient.  The flaw in the \"need to know\" principle is\nthat you don't know who needs to know something.  An idea\nfrom one area might spark a great discovery in another.  But the\ndiscoverer doesn't know he needs to know it.\n\nIf secrecy were the only protection for ideas, companies wouldn't\njust have to be secretive with other companies; they'd have to be\nsecretive internally.  This would encourage what is already the\nworst trait of big companies.\n\nI'm not saying secrecy would be worse than patents, just that we\ncouldn't discard patents for free.  Businesses would become more\nsecretive to compensate, and in some fields this might get ugly.\nNor am I defending the current patent system.  There is clearly a\nlot that's broken about it.   But the breakage seems to affect\nsoftware less than most other fields.\n\nIn the software business I know from experience whether patents\nencourage or discourage innovation, and the answer is the type that\npeople who like to argue about public policy least like to hear:\nthey don't affect innovation much, one way or the other.  Most\ninnovation in the software business happens in startups, and startups\nshould simply ignore other companies' patents.  At least, that's\nwhat we advise, and we bet money on that advice.\n\nThe only real role of patents, for most startups, is as an element\nof the mating dance with acquirers.  There patents do help a little.\nAnd so they do encourage innovation indirectly, in that they give\nmore power to startups, which is where, pound for pound, the most\ninnovation happens.  But even in the mating dance, patents are of\nsecondary importance.  It matters more to make something great and\nget a lot of users.\n\n\n\nNotes\n\n[1]\nYou have to be careful here, because a great discovery often\nseems obvious in retrospect.  One-click ordering, however, is not\nsuch a discovery.\n\n[2]\n\"Turn the other cheek\" skirts the issue; the critical question\nis not how to deal with slaps, but sword thrusts.\n\n[3]\nApplying for a patent is now very slow, but it might actually\nbe bad if that got fixed.  At the moment the time it takes to get\na patent is conveniently just longer than the time it takes a startup\nto succeed or fail.\n\n[4]\nInstead of the canonical \"could you build this?\" maybe the corp\ndev guys should be asking \"will you build this?\" or even \"why haven't\nyou already built this?\"\n\n[5]\nDesign ability is so hard to measure that you can't even trust\nthe design world's internal standards.  You can't assume that someone\nwith a degree in design is any good at design, or that an eminent\ndesigner is any better than his peers.  If that worked, any company\ncould build products as good as Apple's just by hiring \nsufficiently qualified designers.\n\n[6]\nIf anyone wanted to try, we'd be interested to hear from them.\nI suspect it's one of those things that's not as hard as everyone\nassumes.\n\n[7]\nPatent trolls can't even claim, like speculators, that they\n\"create\" liquidity.\n\n[8]\nIf big companies don't want to wait for the government to take\naction, there is a way to fight back themselves.  For a long time\nI thought there wasn't, because there was nothing to grab onto.\nBut there is one resource patent trolls need: lawyers.  Big technology\ncompanies between them generate a lot of legal business.  If they\nagreed among themselves never to do business with any firm employing\nanyone who had worked for a patent troll, either as an employee or\nas outside counsel, they could probably starve the trolls of the\nlawyers they need.\n\nThanks to Dan Bloomberg, Paul Buchheit, Sarah Harlin, \nJessica Livingston, and Peter Norvig\nfor reading drafts of this, to Joel Lehrer and Peter Eng for answering\nmy questions about patents, and to Ankur Pansari for inviting me\nto speak.\n\n", "March 2006, rev August 2009\n\nA couple days ago I found to my surprise that I'd been granted a\npatent.\nIt issued in 2003, but no one told me.  I wouldn't know about it\nnow except that a few months ago, while visiting Yahoo, I happened\nto run into a Big Cheese I knew from working there in the late\nnineties.  He brought up something called Revenue Loop, which Viaweb\nhad been working on when they bought us.\n\nThe idea is basically that you sort search results not in order of\ntextual \"relevance\" (as search engines did then) nor in order of\nhow much advertisers bid (as Overture did) but in order of the bid\ntimes the number of transactions.  Ordinarily you'd do this for\nshopping searches, though in fact one of the features of our scheme\nis that it automatically detects which searches are shopping searches.\n\nIf you just order the results in order of bids, you can make the\nsearch results useless, because the first results could be dominated\nby lame sites that had bid the most.  But if you order results by\nbid multiplied by transactions, far from selling out, you're getting\na better measure of relevance.  What could be a better sign that\nsomeone was satisfied with a search result than going to the site\nand buying something?\n\nAnd, of course, this algorithm automatically maximizes the revenue\nof the search engine.\n\nEveryone is focused on this type of approach now, but few were in\n1998.  In 1998 it was all about selling banner ads.  We didn't know\nthat, so we were pretty excited when we figured out what seemed to\nus the optimal way of doing shopping searches.\n\nWhen Yahoo was thinking of buying us, we had a meeting with Jerry\nYang in New York.  For him, I now realize, this was supposed to be\none of those meetings when you check out a company you've pretty\nmuch decided to buy, just to make sure they're ok guys.  We weren't\nexpected to do more than chat and seem smart and reasonable.  He\nmust have been dismayed when I jumped up to the whiteboard and\nlaunched into a presentation of our exciting new technology.\n\nI was just as dismayed when he didn't seem to care at all about it.\nAt the time I thought, \"boy, is this guy poker-faced.  We present\nto him what has to be the optimal way of sorting product search\nresults, and he's not even curious.\"  I didn't realize till much later\nwhy he didn't care.  In 1998, advertisers were overpaying enormously\nfor ads on web sites.  \nIn 1998, if advertisers paid the maximum that traffic was worth to\nthem, Yahoo's revenues would have decreased.\n\nThings are different now, of course.  Now this sort of thing is all\nthe rage.  So when I ran into the Yahoo exec I knew from the old\ndays in the Yahoo cafeteria a few months ago, the first thing he\nremembered was not (fortunately) all the fights I had with him, but\nRevenue Loop.\n\n\"Well,\" I said, \"I think we actually applied for a patent on it.\nI'm not sure what happened to the application after I left.\"\n\n\"Really?  That would be an important patent.\"\n\nSo someone investigated, and sure enough, that patent application\nhad continued in the pipeline for several years after, and finally\nissued in 2003.\n\nThe main thing that struck me on reading it, actually, is that\nlawyers at some point messed up my nice clear writing.  Some clever\nperson with a spell checker reduced one section to Zen-like incomprehensibility:\n\n  Also, common spelling errors will tend to get fixed. For example,\n  if users searching for \"compact disc player\" end up spending\n  considerable money at sites offering compact disc players, then\n  those pages will have a higher relevance for that search phrase,\n  even though the phrase \"compact disc player\" is not present on\n  those pages.\n\n(That \"compat disc player\" wasn't a typo, guys.)\n\nFor the fine prose of the original, see the provisional application\nof February 1998, back when we were still Viaweb and couldn't afford\nto pay lawyers to turn every \"a lot of\" into \"considerable.\"\n\n", "March 2006, rev August 2009\n\nYesterday one of the founders we funded asked me why we started \nY\nCombinator.  Or more precisely, he asked if we'd started YC mainly\nfor fun.\n\nKind of, but not quite.  It is enormously fun to be able to work\nwith Rtm and Trevor again.  I missed that after we sold Viaweb, and\nfor all the years after I always had a background process running,\nlooking for something we could do together.  There is definitely\nan aspect of a band reunion to Y Combinator.  Every couple days I\nslip and call it \"Viaweb.\"\n\nViaweb we started very explicitly to make money.  I was sick of\nliving from one freelance project to the next, and decided to just\nwork as hard as I could till I'd made enough to solve the problem\nonce and for all.  Viaweb was sometimes fun, but it wasn't designed\nfor fun, and mostly it wasn't.  I'd be surprised if any startup is.\nAll startups are mostly schleps.\n\nThe real reason we started Y Combinator is neither selfish nor\nvirtuous.  We didn't start it mainly to make money; we have no idea\nwhat our average returns might be, and won't know for years.  Nor\ndid we start YC mainly to help out young would-be founders, though\nwe do like the idea, and comfort ourselves occasionally with the\nthought that if all our investments tank, we will thus have been\ndoing something unselfish.  (It's oddly nondeterministic.)\n\nThe real reason we started Y Combinator is one probably only a\nhacker would understand.  We did it because it seems such a great\nhack.  There are thousands of smart people who could start companies\nand don't, and with a relatively small amount of force applied at\njust the right place, we can spring on the world a stream of new\nstartups that might otherwise not have existed.\n\nIn a way this is virtuous, because I think startups are a good\nthing.  But really what motivates us is the completely amoral desire\nthat would motivate any hacker who looked at some complex device\nand realized that with a tiny tweak he could make it run more\nefficiently.  In this case, the device is the world's economy, which\nfortunately happens to be open source.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJanuary 2006\n", "December 2005\n\nThe most impressive people I know are all terrible procrastinators.\nSo could it be that procrastination isn't always bad?\n\nMost people who write about procrastination write about how to cure\nit.  But this is, strictly speaking, impossible.  There are an\ninfinite number of things you could be doing.  No matter what you\nwork on, you're not working on everything else.  So the question\nis not how to avoid procrastination, but how to procrastinate well.\n\nThere are three variants of procrastination, depending on what you\ndo instead of working on something: you could work on (a) nothing,\n(b) something less important, or (c) something more important.  That\nlast type, I'd argue, is good procrastination.\n\nThat's the \"absent-minded professor,\" who forgets to shave, or eat,\nor even perhaps look where he's going while he's thinking about\nsome interesting question.   His mind is absent from the everyday\nworld because it's hard at work in another.\n\nThat's the sense in which the most impressive people I know are all\nprocrastinators.  They're type-C procrastinators:  they put off\nworking on small stuff to work on big stuff.\n\nWhat's \"small stuff?\"  Roughly, work that has zero chance of being\nmentioned in your obituary.  It's hard to say at the time what will\nturn out to be your best work (will it be your magnum opus on\nSumerian temple architecture, or the detective thriller you wrote\nunder a pseudonym?), but there's a whole class of tasks you can\nsafely rule out: shaving, doing your laundry, cleaning the house,\nwriting thank-you notes\u2014anything that might be called an errand.\n\nGood procrastination is avoiding errands to do real work.\n\nGood in a sense, at least.  The people who want you to do the errands\nwon't think it's good.  But you probably have to annoy them if you\nwant to get anything done.  The mildest seeming people, if they\nwant to do real work, all have a certain degree of ruthlessness\nwhen it comes to avoiding errands.\n\nSome errands, like replying to letters, go away if you\nignore them (perhaps taking friends with them).  Others, like mowing\nthe lawn, or filing tax returns, only get worse if you put them\noff.  In principle it shouldn't work to put off the second kind of\nerrand.  You're going to have to do whatever it is eventually.  Why\nnot (as past-due notices are always saying) do it now?\n\nThe reason it pays to put off even those errands is that real work\nneeds two things errands don't: big chunks of time, and the\nright mood.  If you get inspired by some project, it can be a net\nwin to blow off everything you were supposed to do for the next few\ndays to work on it.  Yes, those errands may cost you more time when\nyou finally get around to them.  But if you get a lot done during\nthose few days, you will be net more productive.\n\nIn fact, it may not be a difference in degree, but a difference in\nkind.  There may be types of work that can only be done in long,\nuninterrupted stretches, when inspiration hits, rather than dutifully\nin scheduled little slices.  Empirically it seems to be so.  When\nI think of the people I know who've done great things, I don't\nimagine them dutifully crossing items off to-do lists.  I imagine\nthem sneaking off to work on some new idea.\n\nConversely, forcing someone to perform errands synchronously is\nbound to limit their productivity.  The cost of an interruption is\nnot just the time it takes, but that it breaks the time on either\nside in half.  You probably only have to interrupt someone a couple\ntimes a day before they're unable to work on hard problems at all.\n\nI've wondered a lot about why \nstartups are most productive at the\nvery beginning, when they're just a couple guys in an apartment.\nThe main reason may be that there's no one to interrupt them yet.\nIn theory it's good when the founders finally get enough money to\nhire people to do some of the work for them.  But it may be better\nto be overworked than interrupted.  Once you dilute a startup with\nordinary office workers\u2014with type-B procrastinators\u2014the whole\ncompany starts to resonate at their frequency.  They're interrupt-driven,\nand soon you are too.\n\nErrands are so effective at killing great projects that a lot of\npeople use them for that purpose.  Someone who has decided to write\na novel, for example, will suddenly find that the house needs\ncleaning. People who fail to write novels don't do it by sitting\nin front of a blank page for days without writing anything.  They\ndo it by feeding the cat, going out to buy something they need for\ntheir apartment, meeting a friend for coffee, checking email.  \"I\ndon't have time to work,\" they say.  And they don't; they've made\nsure of that.\n\n(There's also a variant where one has no place to work.  The cure\nis to visit the places where famous people worked, and see how\nunsuitable they were.)\n\nI've used both these excuses at one time or another.  I've learned\na lot of tricks for making myself work over the last 20 years, but\neven now I don't win consistently.  Some days I get real work done.\nOther days are eaten up by errands.  And I know it's usually my\nfault: I let errands eat up the day, to avoid\nfacing some hard problem.\n\nThe most dangerous form of procrastination is unacknowledged type-B\nprocrastination, because it doesn't feel like procrastination.\nYou're \"getting things done.\"  Just the wrong things.\n\nAny advice about procrastination that concentrates on crossing\nthings off your to-do list is not only incomplete, but positively\nmisleading, if it doesn't consider the possibility that the to-do\nlist is itself a form of type-B procrastination.  In fact, possibility\nis too weak a word.  Nearly everyone's is.  Unless you're working\non the biggest things you could be working on, you're type-B\nprocrastinating, no matter how much you're getting done.\n\nIn his famous essay You and Your Research \n(which I recommend to\nanyone ambitious, no matter what they're working on), Richard Hamming\nsuggests that you ask yourself three questions:\n\n What are the most important problems in your field?\n\n Are you working on one of them?\n\n Why not?\n\nHamming was at Bell Labs when he started asking such questions.  In\nprinciple anyone there ought to have been able to work on the most\nimportant problems in their field.  Perhaps not everyone can make\nan equally dramatic mark on the world; I don't know; but whatever\nyour capacities, there are projects that stretch them.  So Hamming's\nexercise can be generalized to:\n\n  What's the best thing you could be working on, and why aren't\n  you?\n\nMost people will shy away from this question.  I shy away from it\nmyself; I see it there on the page and quickly move on to the next\nsentence.  Hamming used to go around actually asking people this,\nand it didn't make him popular.  But it's a question anyone ambitious\nshould face.\n\nThe trouble is, you may end up hooking a very big fish with this\nbait.  To do good work, you need to do more than find good projects.\nOnce you've found them, you have to get yourself to work on them,\nand that can be hard.  The bigger the problem, the harder it is to\nget yourself to work on it.\n\nOf course, the main reason people find it difficult to work on a\nparticular problem is that they don't \nenjoy it.  When you're young,\nespecially, you often find yourself working on stuff you don't\nreally like-- because it seems impressive, for example, or because\nyou've been assigned to work on it.  Most grad students are stuck\nworking on big problems they don't really like, and grad school is\nthus synonymous with procrastination.\n\nBut even when you like what you're working on, it's easier to get\nyourself to work on small problems than big ones.  Why?  Why is it\nso hard to work on big problems?  One reason is that you may not\nget any reward in the forseeable future.  If you work on something\nyou can finish in a day or two, you can expect to have a nice feeling\nof accomplishment fairly soon.  If the reward is indefinitely far\nin the future, it seems less real.\n\nAnother reason people don't work on big projects is, ironically,\nfear of wasting time.  What if they fail?  Then all the time they\nspent on it will be wasted.  (In fact it probably won't be, because\nwork on hard projects almost always leads somewhere.)\n\nBut the trouble with big problems can't be just that they promise\nno immediate reward and might cause you to waste a lot of time.  If\nthat were all, they'd be no worse than going to visit your in-laws.\nThere's more to it than that.  Big problems are terrifying.\nThere's an almost physical pain in facing them.  It's like having\na vacuum cleaner hooked up to your imagination.   All your initial\nideas get sucked out immediately, and you don't have any more, and\nyet the vacuum cleaner is still sucking.\n\nYou can't look a big problem too directly in the eye. You have to\napproach it somewhat obliquely.  But you have to adjust the angle\njust right: you have to be facing the big problem directly enough\nthat you catch some of the excitement radiating from it, but not\nso much that it paralyzes you.  You can tighten the angle once you\nget going, just as a sailboat can sail closer to the wind once it\ngets underway.\n\nIf you want to work on big things, you seem to have to trick yourself\ninto doing it.  You have to work on small things that could grow\ninto big things, or work on successively larger things, or split\nthe moral load with collaborators.  It's not a sign of weakness to\ndepend on such tricks.  The very best work has been done this way.\n\nWhen I talk to people who've managed to make themselves work on big\nthings, I find that all blow off errands, and all feel guilty about\nit.  I don't think they should feel guilty.  There's more to do\nthan anyone could.  So someone doing the best work they can is\ninevitably going to leave a lot of errands undone.  It seems a\nmistake to feel bad about that.\n\nI think the way to \"solve\" the problem of procrastination is to let\ndelight pull you instead of making a to-do list push you.  Work on\nan ambitious project you really enjoy, and sail as close to the\nwind as you can, and you'll leave the right things undone.\n\n\n\n\n\nThanks to Trevor Blackwell, Jessica Livingston, and Robert\nMorris for reading drafts of this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nNovember 2005\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nNovember 2005\n", "November 2005\n\nIn the next few years, venture capital funds will find themselves\nsqueezed from four directions.  They're already stuck with a seller's\nmarket, because of the huge amounts they raised at the end of the\nBubble and still haven't invested.  This by itself is not the end\nof the world.  In fact, it's just a more extreme version of the\nnorm\nin the VC business: too much money chasing too few deals.\n\nUnfortunately, those few deals now want less and less money, because\nit's getting so cheap to start a startup.  The four causes: open\nsource, which makes software free; Moore's law, which makes hardware\ngeometrically closer to free; the Web, which makes promotion free\nif you're good; and better languages, which make development a lot\ncheaper.\n\nWhen we started our startup in 1995, the first three were our biggest\nexpenses.  We had to pay $5000 for the Netscape Commerce Server,\nthe only software that then supported secure http connections.  We\npaid $3000 for a server with a 90 MHz processor and 32 meg of\nmemory.  And we paid a PR firm about $30,000 to promote our launch.\n\nNow you could get all three for nothing.  You can get the software\nfor free; people throw away computers more powerful than our first\nserver; and if you make something good you can generate ten times\nas much traffic by word of mouth online than our first PR firm got\nthrough the print media.\n\nAnd of course another big change for the average startup is that\nprogramming languages have improved-- or rather, the median language has.  At most startups ten years\nago, software development meant ten programmers writing code in\nC++.  Now the same work might be done by one or two using Python\nor Ruby.\n\nDuring the Bubble, a lot of people predicted that startups would\noutsource their development to India.  I think a better model for\nthe future is David Heinemeier Hansson, who outsourced his development\nto a more powerful language instead.  A lot of well-known applications\nare now, like BaseCamp, written by just one programmer.  And one\nguy is more than 10x cheaper than ten, because (a) he won't waste\nany time in meetings, and (b) since he's probably a founder, he can\npay himself nothing.\n\nBecause starting a startup is so cheap, venture capitalists now\noften want to give startups more money than the startups want to\ntake.  VCs like to invest several million at a time.  But as one\nVC told me after a startup he funded would only take about half a\nmillion, \"I don't know what we're going to do.  Maybe we'll just\nhave to give some of it back.\" Meaning give some of the fund back\nto the institutional investors who supplied it, because it wasn't\ngoing to be possible to invest it all.\n\nInto this already bad situation comes the third problem: Sarbanes-Oxley.\nSarbanes-Oxley is a law, passed after the Bubble, that drastically\nincreases the regulatory burden on public companies. And in addition\nto the cost of compliance, which is at least two million dollars a\nyear, the law introduces frightening legal exposure for corporate\nofficers.  An experienced CFO I know said flatly: \"I would not\nwant to be CFO of a public company now.\"\n\nYou might think that responsible corporate governance is an area\nwhere you can't go too far.  But you can go too far in any law, and\nthis remark convinced me that Sarbanes-Oxley must have.  This CFO\nis both the smartest and the most upstanding money guy I know.  If\nSarbanes-Oxley deters people like him from being CFOs of public  \ncompanies, that's proof enough that it's broken.\n\nLargely because of Sarbanes-Oxley, few startups go public now.  For\nall practical purposes, succeeding now equals getting bought.  Which\nmeans VCs are now in the business of finding promising little 2-3\nman startups and pumping them up into companies that cost $100\nmillion to acquire.   They didn't mean to be in this business; it's\njust what their business has evolved into.\n\nHence the fourth problem: the acquirers have begun to realize they\ncan buy wholesale.  Why should they wait for VCs to make the startups\nthey want more expensive?  Most of what the VCs add, acquirers don't\nwant anyway.  The acquirers already have brand recognition and HR\ndepartments.  What they really want is the software and the developers,\nand that's what the startup is in the early phase: concentrated\nsoftware and developers.\n\nGoogle, typically, seems to have been the first to figure this out.\n\"Bring us your startups early,\" said Google's speaker at the Startup School.  They're quite\nexplicit about it: they like to acquire startups at just the point\nwhere they would do a Series A round.  (The Series A round is the\nfirst round of real VC funding; it usually happens in the first\nyear.) It is a brilliant strategy, and one that other big technology\ncompanies will no doubt try to duplicate.  Unless they want to have \nstill more of their lunch eaten by Google.\n\nOf course, Google has an advantage in buying startups: a lot of the\npeople there are rich, or expect to be when their options vest.\nOrdinary employees find it very hard to recommend an acquisition;\nit's just too annoying to see a bunch of twenty year olds get rich\nwhen you're still working for salary.  Even if it's the right thing   \nfor your company to do.\n\nThe Solution(s)\n\nBad as things look now, there is a way for VCs to save themselves.\nThey need to do two things, one of which won't surprise them, and  \nanother that will seem an anathema.\n\nLet's start with the obvious one: lobby to get Sarbanes-Oxley  \nloosened.  This law was created to prevent future Enrons, not to\ndestroy the IPO market.  Since the IPO market was practically dead\nwhen it passed, few saw what bad effects it would have.  But now \nthat technology has recovered from the last bust, we can see clearly\nwhat a bottleneck Sarbanes-Oxley has become.\n\nStartups are fragile plants\u2014seedlings, in fact.  These seedlings\nare worth protecting, because they grow into the trees of the\neconomy.  Much of the economy's growth is their growth.  I think\nmost politicians realize that.  But they don't realize just how   \nfragile startups are, and how easily they can become collateral\ndamage of laws meant to fix some other problem.\n\nStill more dangerously, when you destroy startups, they make very\nlittle noise.  If you step on the toes of the coal industry, you'll\nhear about it.  But if you inadvertantly squash the startup industry,\nall that happens is that the founders of the next Google stay in \ngrad school instead of starting a company.\n\nMy second suggestion will seem shocking to VCs: let founders cash  \nout partially in the Series A round.  At the moment, when VCs invest\nin a startup, all the stock they get is newly issued and all the \nmoney goes to the company.  They could buy some stock directly from\nthe founders as well.\n\nMost VCs have an almost religious rule against doing this.  They\ndon't want founders to get a penny till the company is sold or goes\npublic.  VCs are obsessed with control, and they worry that they'll\nhave less leverage over the founders if the founders have any money.\n\nThis is a dumb plan.  In fact, letting the founders sell a little stock\nearly would generally be better for the company, because it would\ncause the founders' attitudes toward risk to be aligned with the\nVCs'.  As things currently work, their attitudes toward risk tend\nto be diametrically opposed: the founders, who have nothing, would\nprefer a 100% chance of $1 million to a 20% chance of $10 million,\nwhile the VCs can afford to be \"rational\" and prefer the latter.\n\nWhatever they say, the reason founders are selling their companies\nearly instead of doing Series A rounds is that they get paid up\nfront.  That first million is just worth so much more than the\nsubsequent ones.  If founders could sell a little stock early,\nthey'd be happy to take VC money and bet the rest on a bigger\noutcome.\n\nSo why not let the founders have that first million, or at least\nhalf million?  The VCs would get same number of shares for the   \nmoney.  So what if some of the money would go to the  \nfounders instead of the company?\n\nSome VCs will say this is\nunthinkable\u2014that they want all their money to be put to work\ngrowing the company.  But the fact is, the huge size of current VC\ninvestments is dictated by the structure\nof VC funds, not the needs of startups.  Often as not these large  \ninvestments go to work destroying the company rather than growing\nit.\n\nThe angel investors who funded our startup let the founders sell\nsome stock directly to them, and it was a good deal for everyone. \nThe angels made a huge return on that investment, so they're happy.\nAnd for us founders it blunted the terrifying all-or-nothingness\nof a startup, which in its raw form is more a distraction than a\nmotivator.\n\nIf VCs are frightened at the idea of letting founders partially\ncash out, let me tell them something still more frightening: you\nare now competing directly with Google.\n\n\n\n\n\n\nThanks to Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, and Robert Morris for reading drafts of this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nOctober 2005\n", "October 2005\n\nThe first Summer Founders Program has just finished.  We were\nsurprised how well it went.  Overall only about 10% of startups   \nsucceed, but if I had to guess now, I'd predict three or four of  \nthe eight startups we funded will make it.\n\nOf the startups that needed further funding, I believe all have\neither closed a round or are likely to soon.  Two have already\nturned down (lowball) acquisition offers.\n\nWe would have been happy if just one of the eight seemed promising\nby the end of the summer.  What's going on?  Did some kind of anomaly\nmake this summer's applicants especially good?  We worry about that,\nbut we can't think of one.  We'll find out this winter.\n\nThe whole summer was full of surprises.  The best was that the hypothesis we were testing seems to be\ncorrect.  Young hackers can start viable companies.  This is good\nnews for two reasons: (a) it's an encouraging thought, and (b) it \nmeans that Y Combinator, which is predicated on the idea, is not\nhosed.\n\nAge\n\nMore precisely, the hypothesis was that success in a startup depends\nmainly on how smart and energetic you are, and much less on how old\nyou are or how much business experience you have.  The results so\nfar bear this out.  The 2005 summer founders ranged in age from 18  \nto 28 (average 23), and there is no correlation between their ages\nand how well they're doing.\n\nThis should not really be surprising. Bill Gates and Michael Dell \nwere both 19 when they started the companies that made them famous.\nYoung founders are not a new phenomenon: the trend began as soon\nas computers got cheap enough for college kids to afford them.\n\nAnother of our hypotheses was that you can start a startup on less\nmoney than most people think.  Other investors were surprised to\nhear the most we gave any group was $20,000.  But we knew it was\npossible to start on that little because we started Viaweb on\n$10,000.\n\nAnd so it proved this summer.  Three months' funding is enough to\nget into second gear.  We had a demo day for potential investors\nten weeks in, and seven of the eight groups had a prototype ready\nby that time.  One, Reddit, had\nalready launched, and were able to give a demo of their live site.\n\nA researcher who studied the SFP startups said the one thing they \nhad in common was that they all worked ridiculously hard.  People\nthis age are commonly seen as lazy.  I think in some cases it's not\nso much that they lack the appetite for work, but that the work\nthey're offered is unappetizing.\n\nThe experience of the SFP suggests that if you let motivated people\ndo real work, they work hard, whatever their age.  As one of the\nfounders said \"I'd read that starting a startup consumed your life,  \nbut I had no idea what that meant until I did it.\"\n\nI'd feel guilty if I were a boss making people work this hard.  But\nwe're not these people's bosses.  They're working on their own\nprojects.  And what makes them work is not us but their competitors.\nLike good athletes, they don't work hard because the coach yells\nat them, but because they want to win.\n\nWe have less power than bosses, and yet the founders work harder  \nthan employees.  It seems like a win for everyone.  The only catch\nis that we get on average only about 5-7% of the upside, while an\nemployer gets nearly all of it.  (We're counting on it being 5-7%\nof a much larger number.)\n\nAs well as working hard, the groups all turned out to be extraordinarily\nresponsible.  I can't think of a time when one failed to do something\nthey'd promised to, even by being late for an appointment.  This\nis another lesson the world has yet to learn.  One of the founders\ndiscovered that the hardest part of arranging a meeting with\nexecutives at a big cell phone carrier was getting a rental company\nto rent him a car, because he was too young.\n\nI think the problem here is much the same as with the apparent\nlaziness of people this age.  They seem lazy because the work they're\ngiven is pointless, and they act irresponsible because they're not\ngiven any power.  Some of them, anyway.  We only have a sample size\nof about twenty, but it seems so far that if you let people in their\nearly twenties be their own bosses, they rise to the occasion.\n\nMorale\n\nThe summer founders were as a rule very idealistic.  They also  \nwanted very much to get rich.  These qualities might seem incompatible,\nbut they're not.  These guys want to get rich, but they want to do\nit by changing the world.  They wouldn't (well, seven of the eight\ngroups wouldn't) be interested in making money by speculating in\nstocks.  They want to make something people use.\n\nI think this makes them more effective as founders.  As hard as  \npeople will work for money, they'll work harder for a cause.  And   \nsince success in a startup depends so much on motivation, the\nparadoxical result is that the people likely to make the most money\nare those who aren't in it just for the money.\n\nThe founders of Kiko, for example,   \nare working on an Ajax calendar.  They want to get rich, but they\npay more attention to design than they would if that were their\nonly motivation.  You can tell just by looking at it.\n\nI never considered it till this summer, but this might be another\nreason startups run by hackers tend to do better than those run by\nMBAs.  Perhaps it's not just that hackers understand technology\nbetter, but that they're driven by more powerful motivations.\nMicrosoft, as I've said before, is a dangerously misleading example.  \nTheir mean corporate culture only works for monopolies.   \nGoogle is a better model.\n\nConsidering that the summer founders are the sharks in this ocean,\nwe were surprised how frightened most of them were of competitors.\nBut now that I think of it, we were just as frightened when we\nstarted Viaweb.  For the first year, our initial reaction to news \nof a competitor was always: we're doomed.  Just as a hypochondriac\nmagnifies his symptoms till he's convinced he has some terrible\ndisease, when you're not used to competitors you magnify them into\nmonsters.\n\nHere's a handy rule for startups: competitors are rarely as dangerous\nas they seem.  Most will self-destruct before you can destroy them.\nAnd it certainly doesn't matter how many of them there are, any\nmore than it matters to the winner of a marathon how many runners\nare behind him.\n\n\"It's a crowded market,\" I remember one founder saying worriedly.\n\n\"Are you the current leader?\" I asked.\n\n\"Yes.\"\n\n\"Is anyone able to develop software faster than you?\"\n\n\"Probably not.\"\n\n\"Well, if you're ahead now, and you're the fastest, then you'll\nstay ahead.  What difference does it make how many others there\nare?\"\n\nAnother group was worried when they realized they had to rewrite\ntheir software from scratch.  I told them it would be a bad sign\nif they didn't.  The main function of your initial version is to  \nbe rewritten.\n\nThat's why we advise groups to ignore issues like scalability,\ninternationalization, and heavy-duty security at first. [1] I can\nimagine an advocate of \"best practices\" saying these ought to be\nconsidered from the start.  And he'd be right, except that they\ninterfere with the primary function of software in a startup: to  \nbe a vehicle for experimenting with its own design.  Having to\nretrofit internationalization or scalability is a pain, certainly.  \nThe only bigger pain is not needing to, because your initial version\nwas too big and rigid to evolve into something users wanted.\n\nI suspect this is another reason startups beat big companies.\nStartups can be irresponsible and release version 1s that are light\nenough to evolve.  In big companies, all the pressure is in the   \ndirection of over-engineering.\n\nWhat Got Learned\n\nOne thing we were curious about this summer was where these groups  \nwould need help.  That turned out to vary a lot.  Some we helped\nwith technical advice-- for example, about how to set up an application\nto run on multiple servers.  Most we helped with strategy questions,\nlike what to patent, and what to charge for and what to give away.\nNearly all wanted advice about dealing with future investors: how  \nmuch money should they take and what kind of terms should they\nexpect?\n\nHowever, all the groups quickly learned how to deal with stuff like\npatents and investors.  These problems aren't intrinsically difficult,\njust unfamiliar.\n\nIt was surprising-- slightly frightening even-- how fast they\nlearned.  The weekend before the demo day for investors, we had a  \npractice session where all the groups gave their presentations.  \nThey were all terrible.  We tried to explain how to make them better,\nbut we didn't have much hope.  So on demo day I told the assembled\nangels and VCs that these guys were hackers, not MBAs, and so while\ntheir software was good, we should not expect slick presentations \nfrom them.\n\nThe groups then proceeded to give fabulously slick presentations. \nGone were the mumbling recitations of lists of features.   It was\nas if they'd spent the past week at acting school.  I still don't \nknow how they did it.\n\nPerhaps watching each others' presentations helped them see what\nthey'd been doing wrong.  Just as happens in college, the summer   \nfounders learned a lot from one another-- maybe more than they\nlearned from us.  A lot of the problems they face are the same,  \nfrom dealing with investors to hacking Javascript.\n\nI don't want to give the impression there were no problems this  \nsummer.  A lot went wrong, as usually happens with startups.  One\ngroup got an \"exploding\nterm-sheet\" from some VCs.  Pretty much all the groups who had\ndealings with big companies found that big companies do everything\ninfinitely slowly.  (This is to be expected.  If big companies\nweren't incapable, there would be no room for startups to exist.)\nAnd of course there were the usual nightmares associated with\nservers.  \n\nIn short, the disasters this summer were just the usual childhood\ndiseases.  Some of this summer's eight startups will   \nprobably die eventually; it would be extraordinary if all eight \nsucceeded.  But what kills them will not be dramatic, external    \nthreats, but a mundane, internal one: not getting enough done.\n\nSo far, though, the news is all good.  In fact, we were surprised\nhow much fun the summer was for us.  The main reason was how much\nwe liked the founders.  They're so earnest and hard-working.  They\nseem to like us too.  And this illustrates another advantage of\ninvesting over hiring: our relationship with them is way better   \nthan it would be between a boss and an employee.  Y Combinator ends\nup being more like an older brother than a parent.\n\nI was surprised how much time I spent making introductions.\nFortunately I discovered that when a startup needed to talk to\nsomeone, I could usually get to the right person by at most one\nhop.  I remember wondering, how did my friends get to be so eminent?\nand a second later realizing: shit, I'm forty.\n\nAnother surprise was that the three-month batch format,\nwhich we were forced into by the constraints of the summer, turned\nout to be an advantage.  When we started Y Combinator, we planned\nto invest the way other venture firms do: as proposals came in,     \nwe'd evaluate them and decide yes or no.  The SFP\nwas just an experiment to get things started.  But it worked so\nwell that we plan to do \nall \nour investing this way, one cycle in\nthe summer and one in winter.  It's more efficient for us, and\nbetter for the startups too.\n\nSeveral groups said our weekly dinners saved them from a common\nproblem afflicting startups: working so hard that one has no social\nlife.  (I remember that part all too well.)  This way, they were\nguaranteed a social event at least once a week.\n\nIndependence\n\nI've heard Y Combinator described as an \"incubator.\"  Actually we're\nthe opposite: incubators exert more control than ordinary VCs, and\nwe make a point of exerting less.  Among other things, incubators\nusually make you work in their office-- that's where the \nword \"incubator\" comes from.  That seems the wrong model.  If\ninvestors get too involved, they smother one of the most powerful \nforces in a startup: the feeling that it's your own company.\n\nIncubators were conspicuous failures during the Bubble.  There's  \nstill debate about whether this was because of the Bubble, or because\nthey're a bad idea.  My vote is they're a bad idea.  I think they \nfail because they select for the wrong people.  When we were starting\na startup, we would never have taken funding from an \"incubator.\"\nWe can find office space, thanks; just give us the money.  And  \npeople with that attitude are the ones likely to succeed in startups.\n\nIndeed, one quality all the founders shared this summer was a spirit\nof independence.  I've been wondering about that.  Are some people\njust a lot more independent than others, or would everyone be this\nway if they were allowed to?\n\nAs with most nature/nurture questions, the answer is probably: some\nof each.  But my main conclusion from the summer is that there's\nmore environment in the mix than most people realize.  I could see\nthat from how the founders' attitudes changed during the   \nsummer.  Most were emerging from twenty or so years of being told\nwhat to do.  They seemed a little surprised at having total freedom.\nBut they grew into it really quickly; some of these guys now seem\nabout four inches taller (metaphorically) than they did at the\nbeginning of the summer.\n\nWhen we asked the summer founders what surprised them most about\nstarting a company, one said \"the most shocking thing is that it \nworked.\"\n\nIt will take more experience to know for sure, but my guess is that\na lot of hackers could do this-- that if you put people in a position\nof independence, they develop the qualities they need.  Throw them\noff a cliff, and most will find on the way down that they have   \nwings.\n\nThe reason this is news to anyone is that the same forces work in\nthe other direction too. Most hackers are \nemployees, and this molds\nyou into someone to whom starting a startup seems impossible as\nsurely as starting a startup molds you into someone who can handle\nit.\n\nIf I'm right, \"hacker\" will mean something different in twenty years\nthan it does now. Increasingly it will mean the people who run the\ncompany.  Y Combinator is just accelerating a process that would\nhave happened anyway.  Power is shifting from the people who deal\nwith money to the people who create technology, and if our experience\nthis summer is any guide, this will be a good thing.\n\n\n\nNotes\n\n[1] By heavy-duty security I mean efforts to protect against truly\ndetermined attackers.\n\nThe image\nshows us, the 2005 summer founders, and Smartleaf\nco-founders Mark Nitzberg and Olin Shivers at the 30-foot table \nKate Courteau designed for us. Photo by Alex Lewin.\n\nThanks to Sarah Harlin, Steve Huffman, Jessica Livingston,\nZak Stone, and Aaron Swartz for reading drafts of this.\n\n\n\n", "August 2005\n\n(This essay is derived from a talk at Defcon 2005.)\n\nSuppose you wanted to get rid of economic inequality.  There are\ntwo ways to do it: give money to the poor, or take it away from the \nrich.  But they amount to the same thing, because if you want to\ngive money to the poor, you have to get it from somewhere.  You\ncan't get it from the poor, or they just end up where they started.\nYou have to get it from the rich.\n\nThere is of course a way to make the poor richer without simply\nshifting money from the rich.  You could help the poor become more\nproductive \u2014 for example, by improving access to education.  Instead\nof taking money from engineers and giving it to checkout clerks,\nyou could enable people who would have become checkout clerks to\nbecome engineers.\n\nThis is an excellent strategy for making the poor richer.  But the\nevidence of the last 200 years shows that it doesn't reduce economic\ninequality, because it makes the rich richer too.  If there\nare more engineers, then there are more opportunities to hire them\nand to sell them things.  Henry Ford couldn't have made a fortune  \nbuilding cars in a society in which most people were still subsistence\nfarmers; he would have had neither workers nor customers.\n\nIf you want to reduce economic inequality instead of just improving\nthe overall standard of living, it's not enough just to raise up  \nthe poor.  What if one of your newly minted engineers gets ambitious\nand goes on to become another Bill Gates?  Economic inequality will\nbe as bad as ever.  If you actually want to compress the gap between\nrich and poor, you have to push down on the top as well as pushing\nup on the bottom.\n\nHow do you push down on the top?  You could try to decrease the\nproductivity of the people who make the most money: make the best   \nsurgeons operate with their left hands, force popular actors to\novereat, and so on.  But this approach is hard to implement.  The\nonly practical solution is to let people do the best work they can,\nand then (either by taxation or by limiting what they can charge)\nto confiscate whatever you deem to be surplus.\n\nSo let's be clear what reducing economic inequality means.  It is   \nidentical with taking money from the rich.\n\nWhen you transform a mathematical expression into another form, you\noften notice new things.  So it is in this case.  Taking money from\nthe rich turns out to have consequences one might not foresee when\none phrases the same idea in terms of \"reducing inequality.\"\n\nThe problem is, risk and reward have to be proportionate.  A bet  \nwith only a 10% chance of winning has to pay more than one with a\n50% chance of winning, or no one will take it.  So if you lop off\nthe top of the possible rewards, you thereby decrease people's\nwillingness to take risks.\n\nTransposing into our original expression, we get: decreasing economic\ninequality means decreasing the risk people are willing to take.\n\nThere are whole classes of risks that are no longer worth taking    \nif the maximum return is decreased.  One reason high tax rates are\ndisastrous is that this class of risks includes starting new\ncompanies.\n\nInvestors\n\nStartups are intrinsically risky.  A startup\nis like a small boat\nin the open sea.  One big wave and you're sunk.  A competing product,\na downturn in the economy, a delay in getting funding or regulatory\napproval, a patent suit, changing technical standards, the departure\nof a key employee, the loss of a big account \u2014 any one of these can\ndestroy you overnight.  It seems only about 1 in 10 startups succeeds.\n[1]\n\nOur startup paid its first round of outside investors 36x.  Which   \nmeant, with current US tax rates, that it made sense to invest in\nus if we had better than a 1 in 24 chance of succeeding.  That  \nsounds about right.  That's probably roughly how we looked when we\nwere a couple of nerds with no business experience operating out\nof an apartment.\n\nIf that kind of risk doesn't pay, venture investing, as we know it,\ndoesn't happen.\n\nThat might be ok if there were other sources of capital for new\ncompanies.  Why not just have the government, or some large\nalmost-government organization like Fannie Mae, do the venture\ninvesting instead of private funds?\n\nI'll tell you why that wouldn't work. Because then you're asking\ngovernment or almost-government employees to do the one thing they \nare least able to do: take risks.\n\nAs anyone who has worked for the government knows, the important\nthing is not to make the right choices, but to make choices that\ncan be justified later if they fail.  If there is a safe option,\nthat's the one a bureaucrat will choose.   But that is exactly the  \nwrong way to do venture investing.  The nature of the business means\nthat you want to make terribly risky choices, if the upside looks\ngood enough.\n\nVCs are currently \npaid in a way that makes them \nfocus on the upside:\nthey get a percentage of the fund's gains.  And that helps overcome\ntheir understandable fear of investing in a company run by nerds\nwho look like (and perhaps are) college students.\n\nIf VCs weren't allowed to get rich, they'd behave like bureaucrats.\nWithout hope of gain, they'd have only fear of loss.  And so they'd\nmake the wrong choices.  They'd turn down the nerds in favor of the\nsmooth-talking MBA in a suit, because that investment would be\neasier to justify later if it failed.\n\nFounders\n\nBut even if you could somehow redesign venture funding to work\nwithout allowing VCs to become rich, there's another kind of investor\nyou simply cannot replace: the startups' founders and early employees.\n\nWhat they invest is their time and ideas.  But these are equivalent\nto money; the proof is that investors are willing (if forced) to\ntreat them as interchangeable, granting the same status to \"sweat   \nequity\" and the equity they've purchased with cash.\n\nThe fact that you're investing time doesn't change the relationship\nbetween risk and reward.  If you're going to invest your time in\nsomething with a small chance of succeeding, you'll only do it if\nthere is a proportionately large payoff.\n[2]\nIf large payoffs aren't allowed, you may as well play it safe.\n\nLike many startup founders, I did it to get rich.  But not because \nI wanted to buy expensive things.  What I wanted was security.  I   \nwanted to make enough money that I didn't have to worry about money.\nIf I'd been forbidden to make enough from a startup to do this, I\nwould have sought security by some other means: for example, by\ngoing to work for a big, stable organization from which it would\nbe hard to get fired.  Instead of busting my ass in a startup, I    \nwould have tried to get a nice, low-stress job at a big research \nlab, or tenure at a university.\n\nThat's what everyone does in societies where risk isn't rewarded.\nIf you can't ensure your own security, the next best thing is to\nmake a nest for yourself in some large organization where your\nstatus depends mostly on seniority.\n[3]\n\nEven if we could somehow replace investors, I don't see how we could\nreplace founders.  Investors mainly contribute money, which in\nprinciple is the same no matter what the source.  But the founders\ncontribute ideas.  You can't replace those.\n\nLet's rehearse the chain of argument so far.  I'm heading for a \nconclusion to which many readers will have to be dragged kicking   \nand screaming, so I've tried to make each link unbreakable.  Decreasing\neconomic inequality means taking money from the rich.  Since risk\nand reward are equivalent, decreasing potential rewards automatically\ndecreases people's appetite for risk.  Startups are intrinsically\nrisky.  Without the prospect of rewards proportionate to the risk,\nfounders will not invest their time in a startup.  Founders are\nirreplaceable.  So eliminating economic inequality means eliminating\nstartups.\n\nEconomic inequality is not just a consequence of startups.\nIt's the engine that drives them, in the same way a fall of water   \ndrives a water mill.  People start startups in the hope of becoming\nmuch richer than they were before.  And if your society tries to\nprevent anyone from being much richer than anyone else, it will\nalso prevent one person from being much richer at t2 than t1.\n\nGrowth\n\nThis argument applies proportionately.  It's not just that if you  \neliminate economic inequality, you get no startups.  To the extent \nyou reduce economic inequality, you decrease the number of startups.\n[4]\nIncrease taxes, and willingness to take risks decreases in\nproportion.\n\nAnd that seems bad for everyone.  New technology and new jobs both\ncome disproportionately from new companies.  Indeed, if you don't\nhave startups, pretty soon you won't have established companies\neither, just as, if you stop having kids, pretty soon you won't\nhave any adults.\n\nIt sounds benevolent to say we ought to reduce economic inequality. \nWhen you phrase it that way, who can argue with you?  Inequality\nhas to be bad, right?  It sounds a good deal less benevolent to say\nwe ought to reduce the rate at which new companies are founded.\nAnd yet the one implies the other.\n\nIndeed, it may be that reducing investors' appetite for risk doesn't\nmerely kill off larval startups, but kills off the most promising\nones especially.  Startups yield faster growth at greater risk than\nestablished companies.  Does this trend also hold among startups?\nThat is, are the riskiest startups the ones that generate most\ngrowth if they succeed?  I suspect the answer is yes.  And that's   \na chilling thought, because it means that if you cut investors'\nappetite for risk, the most beneficial startups are the first to \ngo.\n\nNot all rich people got that way from startups, of course.  What\nif we let people get rich by starting startups, but taxed away all\nother surplus wealth?  Wouldn't that at least decrease inequality?\n\nLess than you might think.  If you made it so that people could\nonly get rich by starting startups, people who wanted to get rich\nwould all start startups.  And that might be a great thing.  But I\ndon't think it would have much effect on the distribution of wealth.\nPeople who want to get rich will do whatever they have to.  If\nstartups are the only way to do it, you'll just get far more people\nstarting startups.  (If you write the laws very carefully, that is.\nMore likely, you'll just get a lot of people doing things that can\nbe made to look on paper like startups.)\n\nIf we're determined to eliminate economic inequality, there is still\none way out: we could say that we're willing to go ahead and do\nwithout startups.  What would happen if we did?\n\nAt a minimum, we'd have to accept lower rates of technological   \ngrowth.  If you believe that large, established companies could   \nsomehow be made to develop new technology as fast as startups, the\nball is in your court to explain how.  (If you can come up with a   \nremotely plausible story, you can make a fortune writing business\nbooks and consulting for large companies.)\n[5]\n\nOk, so we get slower growth.  Is that so bad?  Well, one reason\nit's bad in practice is that other countries might not agree to\nslow down with us.  If you're content to develop new technologies\nat a slower rate than the rest of the world, what happens is that\nyou don't invent anything at all.  Anything you might discover has\nalready been invented elsewhere.  And the only thing you can offer \nin return is raw materials and cheap labor.  Once you sink that\nlow, other countries can do whatever they like with you: install\npuppet governments, siphon off your best workers, use your women\nas prostitutes, dump their toxic waste on your territory \u2014 all the\nthings we do to poor countries now.  The only defense is to isolate\nyourself, as communist countries did in the twentieth century.  But\nthe problem then is, you have to become a police state to enforce \nit.\n\n\nWealth and Power\n\nI realize startups are not the main target of those who want to\neliminate economic inequality.   What they really dislike is the\nsort of wealth that becomes self-perpetuating through an alliance\nwith power. For example, construction firms that fund politicians'\ncampaigns in return for government contracts, or rich parents who   \nget their children into good colleges by sending them to expensive\nschools designed for that purpose.  But if you try to attack this type of wealth\nthrough economic policy, it's hard to hit without destroying\nstartups as collateral damage.\n\nThe problem here is not wealth, but corruption.  So why not go after\ncorruption?\n\nWe don't need to prevent people from being rich if we can prevent\nwealth from translating into power.  And there has been progress\non that front.  Before he died of drink in 1925, Commodore Vanderbilt's\nwastrel grandson Reggie ran down pedestrians on five separate   \noccasions, killing two of them.  By 1969, when Ted Kennedy drove  \noff the bridge at Chappaquiddick, the limit seemed to be down to  \none.  Today it may well be zero.  But what's changed is not variation\nin wealth.  What's changed is the ability to translate wealth into\npower.\n\nHow do you break the connection between wealth and power?  Demand   \ntransparency.  Watch closely how power is exercised, and demand an\naccount of how decisions are made.  Why aren't all police interrogations\nvideotaped?  Why did 36% of Princeton's class of 2007 come from\nprep schools, when only 1.7% of American kids attend them?  Why did\nthe US really invade Iraq?  Why don't government officials disclose\nmore about their finances, and why only during their term of office?\n\nA friend of mine who knows a lot about computer security says the\nsingle most important step is to log everything.  Back when he was\na kid trying to break into computers, what worried him most was the\nidea of leaving a trail.  He was more inconvenienced by the need \nto avoid that than by any obstacle deliberately put in his path.\n\nLike all illicit connections, the connection between wealth and     \npower flourishes in secret.  Expose all transactions, and you will\ngreatly reduce it.  Log everything.  That's a strategy that already\nseems to be working, and it doesn't have the side effect of making\nyour whole country poor.\n\nI don't think many people realize there is a connection between\neconomic inequality and risk.  I didn't fully grasp it till recently.\nI'd known for years of course that if one didn't score in a startup,\nthe other alternative was to get a cozy, tenured research job.  But\nI didn't understand the equation governing my behavior.  Likewise, \nit's obvious empirically that a country that doesn't let people get\nrich is headed for disaster, whether it's Diocletian's Rome or  \nHarold Wilson's Britain.  But I did not till recently understand\nthe role risk played.\n\nIf you try to attack wealth, you end up nailing risk as well, and  \nwith it growth.  If we want a fairer world, I think we're better  \noff attacking one step downstream, where wealth turns into power.\n\n\n\nNotes\n\n\n[1]\nSuccess here is defined from the initial investors' point of\nview: either an IPO, or an acquisition for more than the valuation\nat the last round of funding.  The conventional 1 in 10 success rate\nis suspiciously neat, but conversations with VCs suggest it's roughly\ncorrect for startups overall.  Top VC firms expect to do better.\n\n[2]\nI'm not claiming founders sit down and calculate the expected     \nafter-tax return from a startup.  They're motivated by examples of\nother people who did it.  And those examples do reflect after-tax returns.\n\n[3]\nConjecture: The variation in wealth in a (non-corrupt) \ncountry or organization\nwill be inversely proportional to the prevalence of systems of\nseniority.  So if you suppress variation in wealth, seniority will\nbecome correspondingly more important.  So far, I know of no\ncounterexamples, though in very corrupt countries you may get \nboth simultaneously.  (Thanks to Daniel Sobral for pointing\nthis out.)\n\n[4]\nIn a country with a truly feudal economy, you might be able to\nredistribute wealth successfully, because there are no startups to\nkill.\n\n[5]\nThe speed at which startups develop new techology is the other     \nreason they pay so well.  As I explained in \"How to Make Wealth\", what you do in a startup is compress a\nlifetime's worth of work into a few years.  It seems as\ndumb to discourage that as to discourage risk-taking.\n\n\nThanks to Chris Anderson, Trevor Blackwell, Dan Giffin,\nJessica Livingston, and Evan Williams for reading drafts of this\nessay, and to Langley Steinert, Sangam Pant, and Mike Moritz for\ninformation about venture investing.\n\n", "August 2005\n\nThirty years ago, one was supposed to work one's way up the corporate\nladder.  That's less the rule now.  Our generation wants to get\npaid up front.  Instead of developing a product for some big company\nin the expectation of getting job security in return, we develop\nthe product ourselves, in a startup, and sell it to the big company.\nAt the very least we want options.\n\nAmong other things, this shift has created the appearance of a rapid\nincrease in economic inequality.  But really the two cases are not\nas different as they look in economic statistics.\n\nEconomic statistics are misleading because they ignore the value\nof safe jobs.  An easy job from which one can't be fired is worth\nmoney; exchanging the two is one of the commonest forms of\ncorruption.  A sinecure is, in effect, an annuity.  Except sinecures\ndon't appear in economic statistics.  If they did, it would be clear\nthat in practice socialist countries have nontrivial disparities\nof wealth, because they usually have a class of powerful bureaucrats\nwho are paid mostly by seniority and can never be fired.\n\nWhile not a sinecure, a position on the corporate ladder was genuinely\nvaluable, because big companies tried not to fire people, and\npromoted from within based largely on seniority.  A position on the\ncorporate ladder had a value analogous to the \"goodwill\" that is a\nvery real element in the valuation of companies.  It meant one could\nexpect future high paying jobs.\n\nOne of main causes of the decay of the corporate ladder is the trend\nfor takeovers that began in the 1980s.  Why waste your time climbing\na ladder that might disappear before you reach the top?\n\nAnd, by no coincidence, the corporate ladder was one of the reasons\nthe early corporate raiders were so successful.  It's not only\neconomic statistics that ignore the value of safe jobs.  Corporate\nbalance sheets do too.  One reason it was profitable to carve up 1980s\ncompanies and sell them for parts was that they hadn't formally\nacknowledged their implicit debt to employees who had done good\nwork and expected to be rewarded with high-paying executive jobs\nwhen their time came.\n\nIn the movie Wall Street, Gordon Gekko\nridicules a company overloaded with vice presidents.  But the company\nmay not be as corrupt as it seems; those VPs' cushy jobs were\nprobably payment for work done earlier.\n\nI like the new model better.  For one thing, it seems a bad plan\nto treat jobs as rewards.  Plenty of good engineers got made into\nbad managers that way.  And the old system meant people had to deal\nwith a lot more corporate politics, in order to protect the work\nthey'd invested in a position on the ladder.\n\nThe big disadvantage of the new system is that it involves more risk.  If you develop ideas in a startup instead\nof within a big company, any number of random factors could sink\nyou before you can finish.  But maybe the older generation would\nlaugh at me for saying that the way we do things is riskier.  After\nall, projects within big companies were always getting cancelled\nas a result of arbitrary decisions from higher up.  My father's\nentire industry (breeder reactors) disappeared that way.\n\nFor better or worse, the idea of the corporate ladder is probably\ngone for good.  The new model seems more liquid, and more efficient.\nBut it is less of a change, financially, than one might think.  Our\nfathers weren't that stupid.\n\n\n\n", "August 2005\n\n(This essay is derived from a talk at Oscon 2005.)\n\nLately companies have been paying more attention to open source.\nTen years ago there seemed a real danger Microsoft would extend its\nmonopoly to servers.  It seems safe to say now that open source has\nprevented that.  A recent survey found 52% of companies are replacing\nWindows servers with Linux servers.\n[1]\n\nMore significant, I think, is which 52% they are.  At this point,\nanyone proposing to run Windows on servers should be prepared to\nexplain what they know about servers that Google, Yahoo, and Amazon\ndon't.\n\nBut the biggest thing business has to learn from open source is not\nabout Linux or Firefox, but about the forces that produced them.\nUltimately these will affect a lot more than what software you use.\n\nWe may be able to get a fix on these underlying forces by triangulating\nfrom open source and blogging.  As you've probably noticed, they\nhave a lot in common.\n\nLike open source, blogging is something people do themselves, for\nfree, because they enjoy it.  Like open source hackers, bloggers\ncompete with people working for money, and often win.  The method\nof ensuring quality is also the same: Darwinian.  Companies ensure\nquality through rules to prevent employees from screwing up.  But\nyou don't need that when the audience can communicate with one\nanother.  People just produce whatever they want; the good stuff\nspreads, and the bad gets ignored.  And in both cases, feedback\nfrom the audience improves the best work.\n\nAnother thing blogging and open source have in common is the Web.\nPeople have always been willing to do great work\nfor free,  but before the Web it was harder to reach an audience\nor collaborate on projects.\n\nAmateurs\n\nI think the most important of the new principles business has to learn is\nthat people work a lot harder on stuff they like.  Well, that's\nnews to no one.  So how can I claim business has to learn it?  When\nI say business doesn't know this, I mean the structure of business\ndoesn't reflect it.\n\nBusiness still reflects an older model, exemplified by the French\nword for working: travailler.  It has an English cousin, travail,\nand what it means is torture.\n[2]\n\nThis turns out not to be the last word on work, however.\nAs societies get richer, they learn something about\nwork that's a lot like what they learn about diet.  We know now that the\nhealthiest diet is the one our peasant ancestors were forced to\neat because they were poor.  Like rich food, idleness\nonly seems desirable when you don't get enough of it.  I think we were\ndesigned to work, just as we were designed to eat a certain amount\nof fiber, and we feel bad if we don't.\n\nThere's a name for people who work for the love of it: amateurs.\nThe word now has such bad connotations that we forget its etymology,\nthough it's staring us in the face.  \"Amateur\" was originally rather\na complimentary word.  But the thing to be in the twentieth century\nwas professional, which amateurs, by definition, are not.\n\nThat's why the business world was so surprised by one lesson from\nopen source: that people working for love often surpass those working\nfor money.   Users don't switch from Explorer to Firefox because\nthey want to hack the source.  They switch because it's a better\nbrowser.\n\nIt's not that Microsoft isn't trying.  They know controlling the\nbrowser is one of the keys to retaining their monopoly.  The problem\nis the same they face in operating systems: they can't pay people\nenough to build something better than a group of inspired hackers\nwill build for free.\n\nI suspect professionalism was always overrated-- not just in the\nliteral sense of working for money, but also connotations like\nformality and detachment.  Inconceivable as it would have seemed\nin, say, 1970, I think professionalism was largely a fashion,\ndriven by conditions that happened to exist in the twentieth century.\n\nOne of the most powerful of those was the existence of \"channels.\" Revealingly,\nthe same term was used for both products and information:  there\nwere distribution channels, and TV and radio channels.\n\nIt was the narrowness of such channels that made professionals\nseem so superior to amateurs.  There were only a few jobs as\nprofessional journalists, for example, so competition ensured the\naverage journalist was fairly good.  Whereas anyone can express\nopinions about current events in a bar.  And so the average person\nexpressing his opinions in a bar sounds like an idiot compared to\na journalist writing about the subject.\n\nOn the Web, the barrier for publishing your ideas is even lower.\nYou don't have to buy a drink, and they even let kids in.\nMillions of people are publishing online, and the average\nlevel of what they're writing, as you might expect, is not very\ngood.  This has led some in the media to conclude that blogs don't\npresent much of a threat-- that blogs are just a fad.\n\nActually, the fad is the word \"blog,\"  at least the way the print\nmedia now use it.  What they mean by \"blogger\" is not someone who\npublishes in a weblog format, but anyone who publishes online.\nThat's going to become a problem as the Web becomes the default\nmedium for publication.  So I'd\nlike to suggest an alternative word for someone who publishes online.\nHow about \"writer?\"\n\nThose in the print media who dismiss the writing online because of\nits low average quality are missing an important point: no one reads\nthe average blog.  In the old world of channels, it meant something\nto talk about average quality, because that's what you were getting\nwhether you liked it or not.\nBut now you can read any writer you want.  So the average\nquality of writing online isn't what the print media are competing\nagainst.  They're competing against the best writing online.  And, \nlike Microsoft, they're losing.\n\nI know that from my own experience as a reader.  Though most print\npublications are online, I probably\nread two or three articles on individual people's sites for every\none I read on the site of a newspaper or magazine.\n\nAnd when I read, say, New York Times stories, I never reach\nthem through the Times front page.   Most I find through aggregators\nlike Google News or Slashdot or Delicious. Aggregators show how\nmuch better \nyou can do than the channel.  The New York Times front page is\na list of articles written by people who work for the New York Times.  Delicious\nis a list of articles that are interesting.  And it's only now that\nyou can see the two side by side that you notice how little overlap there is.\n\nMost articles in the print media are boring.  For example, the\npresident notices that a majority of voters now think invading Iraq\nwas a mistake, so he makes an address to the nation to drum up\nsupport.  Where is the man bites dog in that?  I didn't hear the\nspeech, but I could probably tell you exactly what he said.  A\nspeech like that is, in the most literal sense, not news: there is\nnothing new in it.\n[3]\n\nNor is there anything new, except the names and places, in most\n\"news\" about things going wrong.  A child is abducted; there's a\ntornado; a ferry sinks; someone gets bitten by a shark; a small\nplane crashes.  And what do you learn about the world from these\nstories?  Absolutely nothing.  They're outlying data points; what\nmakes them gripping also makes them irrelevant.\n\nAs in software, when professionals produce such crap, it's not\nsurprising if amateurs can do better.  Live by the channel, die by\nthe channel: if you depend on an oligopoly, you sink into bad habits\nthat are hard to overcome when you suddenly get competition.\n[4]\n\nWorkplaces\n\nAnother thing blogs and open source software have in common is that\nthey're often made by people working at home.  That may not seem\nsurprising.  But it should be.  It's the architectural equivalent\nof a home-made aircraft shooting down an F-18.  Companies spend\nmillions to build office buildings for a single purpose: to be a\nplace to work.  And yet people working in their own homes,\nwhich aren't even designed to be workplaces, end up\nbeing more productive.\n\nThis proves something a lot of us have suspected.  The average\noffice is a miserable place to get work done.  And a lot of what\nmakes offices bad are the very qualities we associate with\nprofessionalism.  The sterility\nof offices is supposed to suggest efficiency.  But suggesting\nefficiency is a different thing from actually being efficient.\n\nThe atmosphere of the average workplace is to productivity what\nflames painted on the side of a car are to speed.  And it's not\njust the way offices look that's bleak.  The way people act is just\nas bad.\n\nThings are different in a startup.  Often as not a startup begins\nin an apartment.  Instead of matching beige cubicles\nthey have an assortment of furniture they bought used.  They work\nodd hours, wearing the most casual of clothing.  They look at\nwhatever they want online without worrying whether it's \"work safe.\"\nThe cheery, bland language of the office is replaced by wicked humor.  And\nyou know what?  The company at this stage is probably the most\nproductive it's ever going to be.\n\nMaybe it's not a coincidence.  Maybe some aspects of professionalism\nare actually a net lose.\n\nTo me the most demoralizing aspect of the traditional office is\nthat you're supposed to be there at certain times.  There are usually\na few people in a company who really have to, but the reason most\nemployees work fixed hours is that the company can't measure their\nproductivity.\n\nThe basic idea behind office hours is that if you can't make people\nwork, you can at least prevent them from having fun.  If employees\nhave to be in the building a certain number of hours a day, and are\nforbidden to do non-work things while there, then they must be\nworking.  In theory.  In practice they spend a lot of their time\nin a no-man's land, where they're neither working nor having fun.\n\nIf you could measure how much work people did, many companies\nwouldn't need any fixed workday. You could just say: this is what\nyou have to do.  Do it whenever you like, wherever you like.  If\nyour work requires you to talk to other people in the company, then\nyou may need to be here a certain amount.  Otherwise we don't care.\n\nThat may seem utopian, but it's what we told people who came to\nwork for our company.  There were no fixed office hours.  I never\nshowed up before 11 in the morning.  But we weren't saying this to\nbe benevolent.  We were saying: if you work here we expect you to\nget a lot done.  Don't try to fool us just by being here a lot.\n\nThe problem with the facetime model is not just that it's demoralizing, but\nthat the people pretending to work interrupt\nthe ones actually working.  I'm convinced the facetime model\nis the main reason large organizations have so many meetings.\nPer capita, large organizations accomplish very little.\nAnd yet all those people have to be on site at least eight hours a\nday.  When so much time goes in one end and so little achievement\ncomes out the other, something has to give.  And meetings are the\nmain mechanism for taking up the slack.\n\nFor one year I worked at a regular nine to five job, and I remember\nwell the strange, cozy feeling that comes over one during meetings.\nI was very aware, because of the novelty, that I was being paid for\nprogramming.  It seemed just amazing, as if there was a machine on\nmy desk that spat out a dollar bill every two minutes no matter\nwhat I did.  Even while I was in the bathroom!  But because the\nimaginary machine was always running, I felt I always ought to be\nworking. And so meetings felt wonderfully relaxing.  They\ncounted as work, just like programming, but they were so much easier.\nAll you had to do was sit and look attentive.\n\nMeetings are like an opiate with a network effect.  So is email,\non a smaller scale.  And in addition to the direct cost in time,\nthere's the cost in fragmentation-- breaking people's day up into\nbits too small to be useful.\n\nYou can see how dependent you've become on something by removing\nit suddenly.  So for big companies I propose the following experiment.\nSet aside one day where meetings are forbidden-- where everyone has to\nsit at their desk all day and work without interruption on\nthings they can do without talking to anyone else.\nSome amount of communication is necessary in most jobs, but I'm\nsure many employees could find eight hours worth of stuff they could\ndo by themselves.  You could call it \"Work Day.\"\n\nThe other problem with pretend work\nis that it often looks better than real work.  When I'm\nwriting or hacking I spend as much time just thinking as I do\nactually typing.  Half the time I'm sitting drinking a cup of tea,\nor walking around the neighborhood.  This is a critical phase--\nthis is where ideas come from-- and yet I'd feel guilty doing this\nin most offices, with everyone else looking busy.\n\nIt's hard to see how bad some practice is till you have something\nto compare it to.  And that's one reason open source, and even blogging\nin some cases, are so important.  They show us what real work looks like.\n\nWe're funding eight new startups at the moment.  A friend asked\nwhat they were doing for office space, and seemed surprised when I\nsaid we expected them to work out of whatever apartments they found\nto live in.  But we didn't propose that to save money.  We did it\nbecause we want their software to be good.  Working in crappy\ninformal spaces is one of the things startups do right without\nrealizing it.  As soon as you get into an office, work and life\nstart to drift apart.\n\nThat is one of the key tenets of professionalism. Work and life\nare supposed to be separate.  But that part, I'm convinced, is a \nmistake.\n\nBottom-Up\n\nThe third big lesson we can learn from open source and\nblogging is that ideas can bubble up from the bottom, instead of\nflowing down from the top.  Open source and blogging both work\nbottom-up: people make what they want, and the best stuff\nprevails.\n\nDoes this sound familiar?  It's the principle of a market economy.\nIronically, though open source and blogs are done for free, those\nworlds resemble market economies, while most companies, for all\ntheir talk about the value of free markets, are run internally like\ncommunist states.\n\nThere are two forces that together steer design: ideas about\nwhat to do next, and the enforcement of quality.  In the channel\nera, both flowed down from the top.  For example, newspaper editors\nassigned stories to reporters, then edited what they wrote.\n\nOpen source and blogging show us things don't have to work that\nway.  Ideas and even the enforcement of quality can flow bottom-up.\nAnd in both cases the results are not merely acceptable, but better.\nFor example, open source software is more reliable precisely because\nit's open source; anyone can find mistakes.\n\nThe same happens with writing.  As we got close to publication, I\nfound I was very worried about the essays in \nHackers\n& Painters\nthat hadn't been online.  Once an essay has had a couple thousand\npage views I feel reasonably confident about it.  But these had had \nliterally orders of magnitude less scrutiny.  It felt like\nreleasing software without testing it.\n\nThat's what all publishing used to be like.  If\nyou got ten people to read a manuscript, you were lucky.  But I'd\nbecome so used to publishing online that the old method now seemed\nalarmingly unreliable, like navigating by dead reckoning once you'd\ngotten used to a GPS.\n\nThe other thing I like about publishing online is that you can write\nwhat you want and publish when you want.  Earlier this year I wrote\nsomething that seemed suitable for a magazine, so\nI sent it to an editor I know.\nAs I was waiting to hear back, I found to my surprise that I was\nhoping they'd reject it.  Then I could put it online right away.\nIf they accepted it, it wouldn't be read by anyone for months, and\nin the meantime I'd have to fight word-by-word to save it from being\nmangled by some twenty five year old copy editor.\n[5]\n\nMany employees would like to build great things for the companies\nthey work for, but more often than not management won't let them.\nHow many of us have heard stories of employees going to management\nand saying, please let us build this thing to make money for you--\nand the company saying no?  The most famous example is probably Steve Wozniak,\nwho originally wanted to build microcomputers for his then-employer, HP.\nAnd they turned him down.  On the blunderometer, this episode ranks\nwith IBM accepting a non-exclusive license for DOS.  But I think this\nhappens all the time.  We just don't hear about it usually,\nbecause to prove yourself right you have to quit\nand start your own company, like Wozniak did.\n\nStartups\n\nSo these, I think, are the three big lessons open source and blogging\nhave to teach business: (1) that people work harder on stuff they\nlike, (2) that the standard office environment is very unproductive,\nand (3) that bottom-up often works better than top-down.\n\nI can imagine managers at this point saying: what is this guy talking\nabout?  What good does it do me to know that my programmers\nwould be more productive\nworking at home on their own projects?  I need their asses in here\nworking on version 3.2 of our software, or we're never going to\nmake the release date.\n\nAnd it's true, the benefit that specific manager could derive from\nthe forces I've described is near zero.  When I say business can\nlearn from open source, I don't mean any specific business can.  I\nmean business can learn about new conditions the same way a gene\npool does.  I'm not claiming companies can get smarter, just that\ndumb ones will die.\n\nSo what will business look like when it has assimilated the lessons\nof open source and blogging?  I think the big obstacle preventing\nus from seeing the future of business is the assumption that people\nworking for you have to be employees.  But think about what's going\non underneath:  the company has some money, and they pay it to the\nemployee in the hope that he'll make something worth more than they\npaid him.  Well, there are other ways to arrange that relationship.\nInstead of paying the guy money as a salary, why not give it to him\nas investment?  Then instead of coming to your office to work on\nyour projects, he can work wherever he wants on projects of his own.\n\nBecause few of us know any alternative, we have no idea how much\nbetter we could do than the traditional employer-employee relationship.\nSuch customs evolve with glacial slowness.  Our \nemployer-employee relationship still retains a big chunk of\nmaster-servant DNA.\n[6]\n\nI dislike being on either end of it.\nI'll work my ass off for a customer, but I resent being told what\nto do by a boss.  And being a boss is also horribly frustrating; \nhalf the time it's easier just to do stuff yourself than to get\nsomeone else to do it for you.\nI'd rather do almost anything than give or receive a\nperformance review.\n\nOn top of its unpromising origins, employment\nhas accumulated a lot of cruft over the years.  The list of what\nyou can't ask in job interviews is now so long that for convenience\nI assume it's infinite.  Within the\noffice you now have to walk on eggshells lest anyone \nsay or do\nsomething that makes the company prey to a lawsuit.  And God help\nyou if you fire anyone.\n\nNothing shows more clearly that employment is not an ordinary economic\nrelationship than companies being sued for firing people.  In any\npurely economic relationship you're free to do what you want.  If\nyou want to stop buying steel pipe from one supplier and start\nbuying it from another, you don't have to explain why.  No one can\naccuse you of unjustly switching pipe suppliers.  Justice implies\nsome kind of paternal obligation that isn't there in\ntransactions between equals.\n\nMost of the legal restrictions on employers are intended to protect\nemployees.  But you can't have action without an equal and opposite\nreaction.  You can't expect employers to have some kind of paternal\nresponsibility toward employees without putting employees in the\nposition of children.  And that seems a bad road to go down.\n\nNext time you're in a moderately large city, drop by the main post\noffice and watch the body language of the people working there.\nThey have the same sullen resentment as children made to do\nsomething they don't want to.  Their union has exacted pay\nincreases and work restrictions that would have been the envy of\nprevious generations of postal workers, and yet they don't seem any\nhappier for it.  It's demoralizing\nto be on the receiving end of a paternalistic relationship, no\nmatter how cozy the terms.  Just ask any teenager.\n\nI see the disadvantages of the employer-employee relationship because\nI've been on both sides of a better one: the investor-founder relationship.\nI wouldn't claim it's painless.  When I was running a\nstartup, the thought of our investors used to keep me up at night.\nAnd now that I'm an investor,\nthe thought of our startups keeps me\nup at night.  All the pain of whatever problem you're trying to\nsolve is still there.\nBut the pain hurts less when it isn't\nmixed with resentment.\n\nI had the misfortune to participate in what amounted to a controlled\nexperiment to prove that.  After Yahoo bought our startup I went\nto work for them.  I was doing exactly the same work, except with\nbosses.  And to my horror I started acting like a child.  The \nsituation pushed buttons I'd forgotten\nI had.\n\nThe big advantage of investment over employment, as the examples of open\nsource and blogging suggest, is that people working on projects of\ntheir own are enormously more productive.  And a\nstartup is a project\nof one's own in two senses, both of them important: it's creatively\none's own, and also economically ones's own.\n\nGoogle is a rare example of a big company in tune with the forces\nI've described. They've tried hard to make their offices less sterile\nthan the usual cube farm.  They give employees who do great work\nlarge grants of stock to simulate the rewards of a startup.  They\neven let hackers spend 20% of their time on their own projects.\n\nWhy not let people spend 100% of their time on their own projects,\nand instead of trying to approximate the value of what they create,\ngive them the actual market value?  Impossible?  That is in fact\nwhat venture capitalists do.\n\nSo am I claiming that no one is going to be an employee anymore--\nthat everyone should go and start a startup?  Of course not.\nBut more people could do it than do it now.\nAt the moment, even the smartest students leave school thinking\nthey have to get a job.  \nActually what they need to do is make\nsomething valuable.  A job is one way to do that, but the more\nambitious ones will ordinarily be better off taking money from an\ninvestor than an employer.\n\nHackers tend to think business is for MBAs.  But business\nadministration is not what you're doing in a startup.  What you're\ndoing is business creation.  And the first phase of that\nis mostly product creation-- that is, hacking.  That's the\nhard part.  It's a lot harder to create something people love than\nto take something people love and figure out how to make money from\nit.\n\nAnother thing that keeps people away from starting startups is the\nrisk.  Someone with kids and a mortgage should think twice before\ndoing it.  But most young hackers have neither.\n\nAnd as the example of open source and blogging suggests, you'll\nenjoy it more, even if you fail.  You'll be working on your own\nthing, instead of going to some office and doing what you're told.\nThere may be more pain in your own company, but it won't hurt as\nmuch.\n\nThat may be the greatest effect, in the long run, of the forces \nunderlying open source and blogging: finally ditching the old\npaternalistic employer-employee relationship, and replacing it with\na purely economic one, between equals.\n\n\n\n\nNotes\n\n[1]\nSurvey by Forrester Research reported in the cover story of\nBusiness Week, 31 Jan 2005.  Apparently someone believed you have to\nreplace the actual server in order to switch the operating system.\n\n[2]\nIt derives from the late Latin tripalium,\na torture device so called because it consisted of three stakes.\nI don't know how the stakes were used.  \"Travel\" has the same root.\n\n[3]\nIt would be much bigger news, in that sense, if the president\nfaced unscripted questions by giving a press conference.\n\n[4]\nOne measure of the incompetence of newspapers is that so many\nstill make you register to read stories.  I have yet to find a blog\nthat tried that.\n\n[5]\nThey accepted the article, but I took so long to\nsend them the final version that by the time I did the section of\nthe magazine they'd accepted it for had disappeared in a reorganization.\n\n[6]\nThe word \"boss\" is derived from the Dutch baas, meaning\n\"master.\"\n\nThanks to Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMay 2005\n", "April 2005\n\n\"Suits make a corporate comeback,\" says the New\nYork Times.  Why does this sound familiar?  Maybe because\nthe suit was also back in February,\n\nSeptember\n2004, June\n2004, March\n2004, September\n2003, \n\nNovember\n2002, \nApril 2002,\nand February\n2002.\n\n\n\nWhy do the media keep running stories saying suits are back?  Because\nPR firms tell \nthem to.  One of the most surprising things I discovered\nduring my brief business career was the existence of the PR industry,\nlurking like a huge, quiet submarine beneath the news.  Of the\nstories you read in traditional media that aren't about politics,\ncrimes, or disasters, more than half probably come from PR firms.\n\nI know because I spent years hunting such \"press hits.\"  Our startup spent\nits entire marketing budget on PR: at a time when we were assembling\nour own computers to save money, we were paying a PR firm $16,000\na month.  And they were worth it.  PR is the news equivalent of\nsearch engine optimization; instead of buying ads, which readers\nignore, you get yourself inserted directly into the stories.  [1]\n\nOur PR firm\nwas one of the best in the business.  In 18 months, they got press\nhits in over 60 different publications.  \nAnd we weren't the only ones they did great things for.  \nIn 1997 I got a call from another\nstartup founder considering hiring them to promote his company.  I\ntold him they were PR gods, worth every penny of their outrageous   \nfees.  But I remember thinking his company's name was odd.\nWhy call an auction site \"eBay\"?\n\n\nSymbiosis\n\nPR is not dishonest.  Not quite.  In fact, the reason the best PR\nfirms are so effective is precisely that they aren't dishonest.\nThey give reporters genuinely valuable information.  A good PR firm\nwon't bug reporters just because the client tells them to; they've\nworked hard to build their credibility with reporters, and they\ndon't want to destroy it by feeding them mere propaganda.\n\nIf anyone is dishonest, it's the reporters.  The main reason PR  \nfirms exist is that reporters are lazy.  Or, to put it more nicely,\noverworked.  Really they ought to be out there digging up stories\nfor themselves.  But it's so tempting to sit in their offices and\nlet PR firms bring the stories to them.  After all, they know good\nPR firms won't lie to them.\n\nA good flatterer doesn't lie, but tells his victim selective truths\n(what a nice color your eyes are). Good PR firms use the same\nstrategy: they give reporters stories that are true, but whose truth\nfavors their clients.\n\nFor example, our PR firm often pitched stories about how the Web  \nlet small merchants compete with big ones.  This was perfectly true.\nBut the reason reporters ended up writing stories about this\nparticular truth, rather than some other one, was that small merchants\nwere our target market, and we were paying the piper.\n\nDifferent publications vary greatly in their reliance on PR firms.\nAt the bottom of the heap are the trade press, who make most of\ntheir money from advertising and would give the magazines away for\nfree if advertisers would let them.  [2] The average\ntrade publication is a  bunch of ads, glued together by just enough\narticles to make it look like a magazine.  They're so desperate for\n\"content\" that some will print your press releases almost verbatim,\nif you take the trouble to write them to read like articles.\n\nAt the other extreme are publications like the New York Times\nand the Wall Street Journal.  Their reporters do go out and\nfind their own stories, at least some of the time.  They'll listen \nto PR firms, but briefly and skeptically.  We managed to get press   \nhits in almost every publication we wanted, but we never managed \nto crack the print edition of the Times.  [3]\n\nThe weak point of the top reporters is not laziness, but vanity.\nYou don't pitch stories to them.  You have to approach them as if\nyou were a specimen under their all-seeing microscope, and make it\nseem as if the story you want them to run is something they thought \nof themselves.\n\nOur greatest PR coup was a two-part one.  We estimated, based on\nsome fairly informal math, that there were about 5000 stores on the\nWeb.  We got one paper to print this number, which seemed neutral   \nenough.  But once this \"fact\" was out there in print, we could quote\nit to other publications, and claim that with 1000 users we had 20%\nof the online store market.\n\nThis was roughly true.  We really did have the biggest share of the\nonline store market, and 5000 was our best guess at its size.  But\nthe way the story appeared in the press sounded a lot more definite.\n\nReporters like definitive statements.  For example, many of the\nstories about Jeremy Jaynes's conviction say that he was one of the\n10 worst spammers.  This \"fact\" originated in Spamhaus's ROKSO list,\nwhich I think even Spamhaus would admit is a rough guess at the top\nspammers.  The first stories about Jaynes cited this source, but\nnow it's simply repeated as if it were part of the indictment.   \n[4]\n\nAll you can say with certainty about Jaynes is that he was a fairly\nbig spammer.  But reporters don't want to print vague stuff like\n\"fairly big.\"  They want statements with punch, like \"top ten.\" And\nPR firms give them what they want.\nWearing suits, we're told, will make us \n3.6\npercent more productive.\n\nBuzz\n\nWhere the work of PR firms really does get deliberately misleading is in\nthe generation of \"buzz.\"  They usually feed the same story to    \nseveral different publications at once.  And when readers see similar\nstories in multiple places, they think there is some important trend\nafoot.  Which is exactly what they're supposed to think.\n\nWhen Windows 95 was launched, people waited outside stores\nat midnight to buy the first copies.  None of them would have been\nthere without PR firms, who generated such a buzz in\nthe news media that it became self-reinforcing, like a nuclear chain\nreaction.\n\nI doubt PR firms realize it yet, but the Web makes it possible to  \ntrack them at work.  If you search for the obvious phrases, you\nturn up several efforts over the years to place stories about the  \nreturn of the suit.  For example, the Reuters article \n\nthat got picked up by USA\nToday in September 2004.  \"The suit is back,\" it begins.\n\nTrend articles like this are almost always the work of\nPR firms.  Once you know how to read them, it's straightforward to\nfigure out who the client is.  With trend stories, PR firms usually\nline up one or more \"experts\" to talk about the industry generally. \nIn this case we get three: the NPD Group, the creative director of\nGQ, and a research director at Smith Barney.  [5] When\nyou get to the end of the experts, look for the client. And bingo, \nthere it is: The Men's Wearhouse.\n\nNot surprising, considering The Men's Wearhouse was at that moment \nrunning ads saying \"The Suit is Back.\"  Talk about a successful\npress hit-- a wire service article whose first sentence is your own\nad copy.\n\nThe secret to finding other press hits from a given pitch\nis to realize that they all started from the same document back at\nthe PR firm.  Search for a few key phrases and the names of the\nclients and the experts, and you'll turn up other variants of this \nstory.\n\nCasual\nfridays are out and dress codes are in writes Diane E. Lewis\nin The Boston Globe.  In a remarkable coincidence, Ms. Lewis's\nindustry contacts also include the creative director of GQ.\n\nRipped jeans and T-shirts are out, writes Mary Kathleen Flynn in\nUS News & World Report.  And she too knows the \ncreative director of GQ.\n\nMen's suits\nare back writes Nicole Ford in Sexbuzz.Com (\"the ultimate men's\nentertainment magazine\").\n\nDressing\ndown loses appeal as men suit up at the office writes Tenisha\nMercer of The Detroit News.\n\n\nNow that so many news articles are online, I suspect you could find\na similar pattern for most trend stories placed by PR firms.  I\npropose we call this new sport \"PR diving,\" and I'm sure there are\nfar more striking examples out there than this clump of five stories.\n\nOnline\n\nAfter spending years chasing them, it's now second nature\nto me to recognize press hits for what they are.  But before we\nhired a PR firm I had no idea where articles in the mainstream media\ncame from.  I could tell a lot of them were crap, but I didn't\nrealize why.\n\nRemember the exercises in critical reading you did in school, where\nyou had to look at a piece of writing and step back and ask whether\nthe author was telling the whole truth?  If you really want to be\na critical reader, it turns out you have to step back one step\nfurther, and ask not just whether the author is telling the truth,\nbut why he's writing about this subject at all.\n\nOnline, the answer tends to be a lot simpler.  Most people who\npublish online write what they write for the simple reason that\nthey want to.  You\ncan't see the fingerprints of PR firms all over the articles, as\nyou can in so many print publications-- which is one of the reasons,\nthough they may not consciously realize it, that readers trust\nbloggers more than Business Week.\n\nI was talking recently to a friend who works for a\nbig newspaper.  He thought the print media were in serious trouble,\nand that they were still mostly in denial about it.  \"They think\nthe decline is cyclic,\" he said.  \"Actually it's structural.\"\n\nIn other words, the readers are leaving, and they're not coming\nback.\n\n\nWhy? I think the main reason is that the writing online is more honest.\nImagine how incongruous the New York Times article about\nsuits would sound if you read it in a blog:\n   The urge to look corporate-- sleek, commanding,\n  prudent, yet with just a touch of hubris on your well-cut sleeve--\n  is an unexpected development in a time of business disgrace.\n   \nThe problem\nwith this article is not just that it originated in a PR firm.\nThe whole tone is bogus.  This is the tone of someone writing down\nto their audience.\n\nWhatever its flaws, the writing you find online\nis authentic.  It's not mystery meat cooked up\nout of scraps of pitch letters and press releases, and pressed into \nmolds of zippy\njournalese.  It's people writing what they think.\n\nI didn't realize, till there was an alternative, just how artificial\nmost of the writing in the mainstream media was.  I'm not saying\nI used to believe what I read in Time and Newsweek.  Since high\nschool, at least, I've thought of magazines like that more as\nguides to what ordinary people were being\ntold to think than as  \nsources of information.  But I didn't realize till the last  \nfew years that writing for publication didn't have to mean writing\nthat way.  I didn't realize you could write as candidly and\ninformally as you would if you were writing to a friend.\n\nReaders aren't the only ones who've noticed the\nchange.  The PR industry has too.\nA hilarious article\non the site of the PR Society of America gets to the heart of the   \nmatter:\n   Bloggers are sensitive about becoming mouthpieces\n  for other organizations and companies, which is the reason they\n  began blogging in the first place.  \nPR people fear bloggers for the same reason readers\nlike them.  And that means there may be a struggle ahead.  As\nthis new kind of writing draws readers away from traditional media, we\nshould be prepared for whatever PR mutates into to compensate.  \nWhen I think   \nhow hard PR firms work to score press hits in the traditional   \nmedia, I can't imagine they'll work any less hard to feed stories\nto bloggers, if they can figure out how.\n\n\n\n\nNotes\n\n[1] PR has at least   \none beneficial feature: it favors small companies.  If PR didn't  \nwork, the only alternative would be to advertise, and only big\ncompanies can afford that.\n\n[2] Advertisers pay \nless for ads in free publications, because they assume readers \nignore something they get for free.  This is why so many trade\npublications nominally have a cover price and yet give away free\nsubscriptions with such abandon.\n\n[3] Different sections\nof the Times vary so much in their standards that they're\npractically different papers.  Whoever fed the style section reporter\nthis story about suits coming back would have been sent packing by\nthe regular news reporters.\n\n[4] The most striking\nexample I know of this type is the \"fact\" that the Internet worm   \nof 1988 infected 6000 computers. I was there when it was cooked up,\nand this was the recipe: someone guessed that there were about\n60,000 computers attached to the Internet, and that the worm might\nhave infected ten percent of them.\n\nActually no one knows how many computers the worm infected, because\nthe remedy was to reboot them, and this destroyed all traces.  But\npeople like numbers.  And so this one is now replicated\nall over the Internet, like a little worm of its own.\n\n[5] Not all were\nnecessarily supplied by the PR firm. Reporters sometimes call a few\nadditional sources on their own, like someone adding a few fresh \nvegetables to a can of soup.\n\n\nThanks to Ingrid Basset, Trevor Blackwell, Sarah Harlin, Jessica \nLivingston, Jackie McDonough, Robert Morris, and Aaron Swartz (who\nalso found the PRSA article) for reading drafts of this.\n\nCorrection: Earlier versions used a recent\nBusiness Week article mentioning del.icio.us as an example\nof a press hit, but Joshua Schachter tells me \nit was spontaneous.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nApril 2005\n", "March 2005\n\nAll the best hackers \nI know are gradually switching to Macs.  My\nfriend Robert said his whole research group at MIT recently bought\nthemselves Powerbooks.  These guys are not the graphic designers\nand grandmas who were buying Macs at Apple's low point in the\nmid 1990s.  They're about as hardcore OS hackers as you can get.\n\nThe reason, of course, is OS X.  Powerbooks are beautifully designed\nand run FreeBSD.  What more do you need to know?\n\nI got a Powerbook at the end of last year.   When my IBM Thinkpad's\nhard disk died soon after, it became my only laptop.  And when my\nfriend Trevor showed up at my house recently, he was carrying a\nPowerbook identical to mine.\n\nFor most of us, it's not a switch to Apple, but a return.  Hard as\nthis was to believe in the mid 90s, the Mac was in its time the\ncanonical hacker's computer.\n\nIn the fall of 1983,\nthe professor in one of my college CS classes got up and announced,\nlike a prophet, that there would soon be a computer with half a MIPS\nof processing power that would fit under an airline seat and cost\nso little that we could save enough to buy one from a summer job.\nThe whole room gasped.\nAnd when the Mac appeared, it was even better than we'd hoped.  It\nwas small and powerful and cheap, as promised.  But it was also\nsomething we'd never considered a computer could be: fabulously\nwell designed.\n\nI had to have one.  And I wasn't alone.  In the mid to late 1980s,\nall the hackers I knew were either writing software for the Mac,\nor wanted to.  Every futon sofa in Cambridge seemed to have the\nsame fat white book lying open on it.  If you turned it over, it\nsaid \"Inside Macintosh.\" \n\nThen came Linux and FreeBSD, and hackers, who follow the most\npowerful OS wherever it leads, found themselves switching to Intel\nboxes.  If you cared about design, you could buy a Thinkpad, which\nwas at least not actively repellent, if you could get the Intel and\nMicrosoft stickers \noff the front. [1]\n\nWith OS X, the hackers are back.  When I walked into the Apple store\nin Cambridge, it was like coming home.  Much\nwas changed, but there was still that Apple coolness in the air,\nthat feeling that the show was being run by someone who really\ncared, instead of random corporate deal-makers.\n\nSo what, the business world may say. Who cares if hackers like Apple\nagain?  How big is the hacker market, after all?\n\nQuite small, but important out of proportion to its size.  When it\ncomes to computers, what hackers are doing now, everyone will be\ndoing in ten years.  Almost all technology, from Unix to bitmapped\ndisplays to the Web, became popular first within CS departments and\nresearch labs, and gradually spread to the rest of the world.\n\nI remember telling my father back in 1986 that there was a new kind\nof computer called a Sun that was a serious Unix machine, but\nso small and cheap that you could\nhave one of your own to sit in front of, instead of sitting in front\nof a VT100 connected to a single central Vax.  Maybe, I suggested,\nhe should buy some stock in this company.  I think he really wishes\nhe'd listened.\n\nIn 1994 my friend Koling wanted to talk to his girlfriend in Taiwan,\nand to save long-distance bills he wrote some software that would  \nconvert sound to data packets that could be sent over the Internet.\nWe weren't sure at the time whether this was a proper use of the \nInternet, which was still then a quasi-government entity.  What he\nwas doing is now called VoIP, and it is a huge and rapidly growing\nbusiness.\n\nIf you want to know what ordinary people will be doing with computers\nin ten years, just walk around the CS department at a good university.\nWhatever they're doing, you'll be doing.\n\nIn the matter of \"platforms\" this tendency is even more pronounced,\nbecause novel software originates with \ngreat hackers, and they tend\nto write it first for whatever computer they personally use.  And\nsoftware sells hardware.  Many if not most of the initial sales of\nthe Apple II came from people who bought one to run VisiCalc.  And\nwhy did Bricklin and Frankston write VisiCalc for the Apple II?\nBecause they personally liked it.  They could have chosen any machine\nto make into a star.\n\nIf you want to attract hackers to write software that will sell\nyour hardware, you have to make it something that they themselves\nuse.  It's not enough to make it \"open.\"  It has to be open and\ngood.\n\nAnd open and good is what Macs are again, finally.  The intervening\nyears have created a situation that is, as far as I know, without\nprecedent: Apple is popular at the low end and the high end, but\nnot in the middle.  My seventy year old mother has a Mac laptop.\nMy friends with PhDs in computer science have Mac laptops. [2] And yet \nApple's overall market share is still small.\n\nThough unprecedented, I predict this situation is also temporary.\n\nSo Dad, there's this company called Apple. They make a new kind of\ncomputer that's as well designed as a Bang & Olufsen stereo system,\nand underneath is the best Unix machine you can buy.  Yes, the price\nto earnings ratio is kind of high, but I think a lot of people are\ngoing to want these.\n\n\n\n\nNotes\n\n[1] These horrible stickers are much like the intrusive ads popular\non pre-Google search engines.  They say to the customer: you are\nunimportant.  We care about Intel and Microsoft, not you.\n\n[2] Y Combinator\nis (we hope) visited mostly by\nhackers.  The proportions of OSes are: \nWindows 66.4%, Macintosh 18.8%, Linux 11.4%, and FreeBSD 1.5%.\nThe Mac number is\na big change from what it would have been five years ago.\n\n\n\n", "March 2005\n\n\n(In the process\nof answering an email, I accidentally wrote a tiny essay about writing.\nI usually spend weeks on an essay.  This one took  67 minutes\u201423\nof writing, and  44 of rewriting.)\n\nI think it's far more important to write well than most people\nrealize.  Writing doesn't just communicate ideas; it generates them.\nIf you're bad at writing and don't like to do it, you'll miss out\non most of the ideas writing would have generated.\n\nAs for how to write well, here's the short version: \nWrite a bad version\n1 as fast as you can; rewrite it over and over; cut out everything\nunnecessary; write in a conversational tone; develop a nose for\nbad writing, so you can see and fix it in yours; imitate writers\nyou like; if you can't get started, tell someone what you plan to\nwrite about, then write down what you said; expect\n80% of the ideas in an essay to happen after you start writing it,\nand 50% of those you start with to be wrong; be confident enough\nto cut; have friends you trust read your stuff and tell you which\nbits are confusing or drag; don't (always) make detailed outlines;\nmull ideas over for a few days before\nwriting; carry a small notebook or scrap paper with you; start writing \nwhen you think of the first \nsentence; if a deadline\nforces you to start before that, just say the most important sentence\nfirst; write about stuff you like; don't try to sound impressive; don't hesitate to change the topic on the fly;\nuse footnotes to contain digressions; use anaphora to knit\nsentences together; read your essays out loud to see (a) where you stumble\nover awkward phrases and (b) which bits are boring (the\nparagraphs you dread reading); try to tell the\nreader something new and useful; work in fairly big quanta of time;\nwhen you restart, begin by rereading what you have so far; when you\nfinish, leave yourself something easy to start with; accumulate\nnotes for topics you plan to cover at the bottom of the file; don't\nfeel obliged to cover any of them; write for a reader who won't\nread the essay as carefully as you do, just as pop songs are\ndesigned to sound ok on crappy car radios; \nif you say anything mistaken, fix it immediately;\nask friends which sentence you'll regret most; go back and tone\ndown harsh remarks; publish stuff online, because\nan audience makes you write more, and thus generate more\nideas; print out drafts instead of just looking at them\non the screen; use simple, germanic words; learn to distinguish\nsurprises from digressions; learn to recognize the approach of an\nending, and when one appears, grab it.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\n\nMarch 2005\n", "March 2005\n\nA couple months ago I got an email from a recruiter asking if I was\ninterested in being a \"technologist in residence\" at a new venture\ncapital fund.  I think the idea was to play Karl Rove to the VCs'\nGeorge Bush.\n\nI considered it for about four seconds.  Work for a VC fund?  Ick.\n\nOne of my most vivid memories from our startup is going to visit\nGreylock, the famous Boston VCs. They were the most arrogant\npeople I've met in my life.  And I've met a lot of arrogant people.\n[1]\n\nI'm not alone in feeling this way, of course.  Even a VC friend of\nmine dislikes VCs.  \"Assholes,\" he says.\n\nBut lately I've been learning more about how the VC world works,\n\nand a few days ago it hit me that there's a reason VCs are the way\nthey are.  It's not so much that the business attracts jerks, or\neven that the power they wield corrupts them.  The real problem is\nthe way they're paid.\n\nThe problem with VC funds is that they're funds.  Like the\nmanagers of mutual funds or hedge funds, VCs get paid a percentage\nof the money they manage: about 2% a year in management fees,\nplus a percentage of the gains.  So they want\nthe fund to be huge-- hundreds of millions of dollars, if possible.\nBut that means each partner ends up being responsible for investing\na lot of money.  And since one person can only manage so many deals,\neach deal has to be for multiple millions of dollars.\n\nThis turns out to explain nearly all the characteristics of VCs\nthat founders hate.\n\nIt explains why VCs take so agonizingly long to make up their minds,\nand why their due diligence feels like a body cavity search. [2]\nWith so much at stake, they have to be paranoid.\n\nIt explains why they steal your ideas.  Every founder knows that\nVCs will tell your secrets to your competitors if they end up\ninvesting in them.  It's not unheard of for VCs to meet you when\nthey have no intention of funding you, just to pick your brain for\na competitor.  This prospect makes naive founders clumsily secretive.\nExperienced founders treat it as a cost of doing business.  Either\nway it sucks.  But again, the only reason VCs are so sneaky is the\ngiant deals they do.  With so much at stake, they have to be devious.\n\nIt explains why VCs tend to interfere in the companies they invest\nin.  They want to be on your board not just so that they can advise\nyou, but so that they can watch you.  Often they even install a new\nCEO.  Yes, he may have extensive business experience.  But he's\nalso their man: these newly installed CEOs always play something  \nof the role of a political commissar in a Red Army unit.  With\nso much at stake, VCs can't resist micromanaging you.\n\nThe huge investments themselves are something founders would dislike,\nif they realized how damaging they can be.  VCs don't invest $x\nmillion because that's the amount you need, but because that's the\namount the structure of their business requires them to invest.  \nLike steroids, these sudden huge investments can do more harm than \ngood.  Google survived enormous VC funding because it could\nlegitimately absorb large amounts of money.  They had to buy a lot\nof servers and a lot of bandwidth to crawl the whole Web.  Less\nfortunate startups just end up hiring armies of people to sit around\nhaving meetings.\n\nIn principle you could take a huge VC investment, put it in treasury\nbills, and continue to operate frugally.  You just try it.\n\nAnd of course giant investments mean giant valuations.  They have\nto, or there's not enough stock left to keep the founders interested.\nYou might think a high valuation is a great thing.  Many founders \ndo.  But you can't eat paper.  You can't benefit from a high valuation\nunless you can somehow achieve what those in the business \n\ncall a \"liquidity event,\" and the higher   \nyour valuation, the narrower your options for doing that.  Many a   \nfounder would be happy to sell his company for $15 million, but VCs\nwho've just invested at a pre-money valuation of $8 million won't\nhear of that.  You're rolling the dice again, whether you like it\nor not.\n\nBack in 1997, one of our competitors raised $20 million in a single \nround of VC funding.  This was at the time more than the valuation\nof our entire company.  Was I worried?  Not at all: I was delighted.\nIt was like watching a car you're chasing turn down a street that\nyou know has no outlet.\n\nTheir smartest move at that point would have been to take every \npenny of the $20 million and use it to buy us.  We would have sold.\nTheir investors would have been furious of course.  But I think the  \nmain reason they never considered this was that they never imagined\nwe could be had so cheap.  They probably assumed we were on the\nsame VC gravy train they were.\n\nIn fact we only spent about $2 million in our entire existence.   \nAnd that gave us flexibility.  We could sell ourselves to Yahoo for\n$50 million, and everyone was delighted.  If our competitor had\ndone that, the last round of investors would presumably have lost\nmoney.  I assume they could have vetoed such a deal.  But no one  \nthose days was paying a lot more than Yahoo.  So unless their\nfounders could pull off an IPO (which would be difficult with Yahoo\nas a competitor), they had no choice but to ride the thing down.\n\nThe puffed-up companies that went public during the Bubble didn't\ndo it just because they were pulled into it by unscrupulous investment \nbankers.  Most were pushed just as hard from the other side by VCs\nwho'd invested at high valuations, leaving an IPO as the only way  \nout.  The only people dumber were retail investors.  So it was\nliterally IPO or bust.  Or rather, IPO then bust, or just bust.\n\nAdd up all the evidence of VCs' behavior, and the resulting personality\nis not attractive.  In fact, it's the classic villain: alternately\ncowardly, greedy, sneaky, and overbearing.\n\nI used to take it for granted that VCs were like this. Complaining  \nthat VCs were jerks used to seem as naive to me as complaining that\nusers didn't read the reference manual.  Of course VCs were jerks.\nHow could it be otherwise?\n\nBut I realize now that they're not intrinsically jerks.  VCs are  \nlike car salesmen or bureaucrats: the nature of their work\nturns them into jerks.\n\nI've met a few VCs I like.  Mike Moritz seems a good guy.  He even \nhas a sense of humor, which is almost unheard of among VCs.  From  \nwhat I've read about John Doerr, he sounds like a good guy too,  \nalmost a hacker.  But they work for the very best VC funds.  And \nmy theory explains why they'd tend to be different: just as the\nvery most popular kids don't have to persecute \nnerds, the very best\nVCs don't have to act like VCs.  They get the pick of all the best  \ndeals.  So they don't have to be so paranoid and sneaky, and they \ncan choose those rare companies, like Google, that will actually\nbenefit from the giant sums they're compelled to invest.\n\nVCs often complain that in their business there's too much money\nchasing too few deals.  Few realize that this also describes a flaw\nin the way funding works at the level of individual firms.\n\nPerhaps this was the sort of strategic insight I was supposed to   \ncome up with as a \"technologist in residence.\"  If so, the good\nnews is that they're getting it for free.  The bad news is it\nmeans that if you're not one of the very top funds, you're \ncondemned to be the bad guys.\n\n\n\nNotes\n\n[1] After Greylock booted founder Philip Greenspun out of ArsDigita,\nhe wrote a hilarious but also very informative\nessay about it.\n\n\n[2] Since most VCs aren't tech guys, the technology side of their\ndue diligence tends to be like a body cavity search by someone with\na faulty knowledge of human anatomy.  After a while we were quite\nsore from VCs attempting to probe our nonexistent database orifice.\n\nNo, we don't use Oracle.  We just store the data in files.  Our\nsecret is to use an OS that doesn't lose our data.  Which OS?\nFreeBSD.  Why do you use that instead of Windows NT?  Because it's\nbetter and it doesn't cost anything.  What, you're using a\nfreeware OS?\n\nHow many times that conversation was repeated.\nThen when we got to Yahoo, we found they used FreeBSD and stored\ntheir data in files too.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMarch 2005\n", "January 2005\n\n(I wrote this talk for a\nhigh school.  I never actually \ngave it, because the school authorities vetoed the plan to invite me.)\n\nWhen I said I was speaking at a high school, my friends were curious.\nWhat will you say to high school students?  So I asked them, what\ndo you wish someone had told you in high school?  Their answers\nwere remarkably similar.  So I'm going to tell you what we all wish\nsomeone had told us.\n\nI'll start by telling you something you don't have to know in high\nschool: what you want to do with your life.  People are always\nasking you this, so you think you're supposed to have an answer.\nBut adults ask this mainly as a conversation starter.   They want\nto know what sort of person you are, and this question is just to\nget you talking.  They ask it the way you might poke a hermit crab\nin a tide pool, to see what it does.\n\nIf I were back in high school and someone asked about my plans, I'd\nsay that my first priority was to learn what the options were.  You\ndon't need to be in a rush to choose your life's work.  What you   \nneed to do is discover what you like.  You have to work on stuff  \nyou like if you want to be good at what you do.\n\nIt might seem that nothing would be easier than deciding what you\nlike, but it turns out to be hard, partly because it's hard to get\nan accurate picture of most jobs.  Being a doctor is not the way\nit's portrayed on TV.  Fortunately you can also watch real doctors,\nby volunteering in hospitals. [1]\n\nBut there are other jobs you can't learn about, because no one is\ndoing them yet.  Most of the work I've done in the last ten years\ndidn't exist when I was in high school.  The world changes fast,  \nand the rate at which it changes is itself speeding up.  In such a\nworld it's not a good idea to have fixed plans.\n\nAnd yet every May, speakers all over the country fire up the Standard \nGraduation Speech, the theme of which is: don't give up on your\ndreams.  I know what they mean, but this is a bad way to put it,\nbecause it implies you're supposed to be bound by some plan you\nmade early on.  The computer world has a name for this: premature\noptimization.  And it is synonymous with disaster.  These speakers\nwould do better to say simply, don't give up.\n\nWhat they really mean is, don't get demoralized.  Don't think that   \nyou can't do what other people can.   And I agree you shouldn't  \nunderestimate your potential.  People who've done great things tend\nto seem as if they were a race apart.  And most biographies only   \nexaggerate this illusion, partly due to the worshipful attitude   \nbiographers inevitably sink into, and partly because, knowing how\nthe story ends, they can't help streamlining the plot till it seems\nlike the subject's life was a matter of destiny, the mere unfolding\nof some innate genius.   In fact I suspect if you had the sixteen\nyear old Shakespeare or Einstein in school with you, they'd seem\nimpressive, but not totally unlike your other friends.\n\nWhich is an uncomfortable thought.  If they were just like us, then\nthey had to work very hard to do what they did.  And that's one  \nreason we like to believe in genius.  It gives us an excuse for\nbeing lazy.  If these guys were able to do what they did only because\nof some magic Shakespeareness or Einsteinness, then it's not our\nfault if we can't do something as good.\n\nI'm not saying there's no such thing as genius.  But if you're\ntrying to choose between two theories and one gives you an excuse \nfor being lazy, the other one is probably right.\n\nSo far we've cut the Standard Graduation Speech down from \"don't\ngive up on your dreams\" to \"what someone else can do, you can do.\"\nBut it needs to be cut still further.  There is some variation\nin natural ability.  Most people overestimate its role, but it does  \nexist.  If I were talking to a guy four feet tall whose ambition \nwas to play in the NBA, I'd feel pretty stupid saying, you can\ndo anything if you really try. [2]\n\nWe need to cut the Standard Graduation Speech down to, \"what someone\nelse with your abilities can do, you can do; and don't underestimate\nyour abilities.\"  But as so often happens, the closer you get to\nthe truth, the messier your sentence gets.  We've taken a nice, \nneat (but wrong) slogan, and churned it up like a mud puddle.  It\ndoesn't make a very good speech anymore.  But worse still, it doesn't\ntell you what to do anymore.  Someone with your abilities?  What  \nare your abilities?\n\nUpwind\n\nI think the solution is to work in the other direction.  Instead\nof working back from a goal, work forward from promising situations.\nThis is what most successful people actually do anyway.\n\nIn the graduation-speech approach, you decide where you want to be\nin twenty years, and then ask: what should I do now to get there?  \nI propose instead that you don't commit to anything in the future,\nbut just look at the options available now, and choose those that\nwill give you the most promising range of options afterward.\n\nIt's not so important what you work on, so long as you're not wasting\nyour time.  Work on things that interest you and increase your\noptions, and worry later about which you'll take.\n\nSuppose you're a college freshman deciding whether to major in math   \nor economics.  Well, math will give you more options: you can go into\nalmost any field from math.  If you major in math it will be easy\nto get into grad school in economics, but if you major in economics\nit will be hard to get into grad school in math.\n\nFlying a glider is a good metaphor here.  Because a glider doesn't\nhave an engine, you can't fly into the wind without losing a lot\nof altitude.  If you let yourself get far downwind of good places    \nto land, your options narrow uncomfortably.  As a rule you want to\nstay upwind.  So I propose that as a replacement for \"don't give   \nup on your dreams.\"  Stay upwind.\n\nHow do you do that, though?  Even if math is upwind of economics,\nhow are you supposed to know that as a high school student?\n\nWell, you don't, and that's what you need to find out.   Look for smart people\nand hard problems.  Smart people tend to clump together, and if you\ncan find such a clump, it's probably worthwhile to join it.  But\nit's not straightforward to find these, because there is a lot of  \nfaking going on.\n\nTo a newly arrived undergraduate, all university departments look\nmuch the same.  The professors all seem forbiddingly intellectual\nand publish papers unintelligible to outsiders.  But while in some\nfields the papers are unintelligible because they're full of hard\nideas, in others they're deliberately written in an obscure way to\nseem as if they're saying something important.  This may seem a   \nscandalous proposition, but it has been experimentally verified,\nin the famous Social Text affair.  Suspecting that the papers\npublished by literary theorists were often just intellectual-sounding\nnonsense, a physicist deliberately wrote a paper full of\nintellectual-sounding nonsense, and submitted it to a literary\ntheory journal, which published it.\n\nThe best protection is always to be working on hard problems.   \nWriting novels is hard.  Reading novels isn't. \nHard means worry: if you're not worrying that\nsomething you're making will come out badly, or that you won't be \nable to understand something you're studying, then it isn't hard\nenough.  There has to be suspense.\n\nWell, this seems a grim view of the world, you may think.  What I'm\ntelling you is that you should worry?  Yes, but it's not as bad as\nit sounds.  It's exhilarating to overcome worries.  You don't see\nfaces much happier than people winning gold medals.  And you know\nwhy they're so happy?  Relief.\n\nI'm not saying this is the only way to be happy.  Just that some\nkinds of worry are not as bad as they sound.\n\nAmbition\n\nIn practice, \"stay upwind\" reduces to \"work on hard problems.\"  And  \nyou can start today.  I wish I'd grasped that in\nhigh school.\n\nMost people like to be good at what they do.  In the so-called real  \nworld this need is a powerful force.  But high school students\nrarely benefit from it, because they're given a fake thing to do.  \nWhen I was in high school, I let myself believe that my job was to \nbe a high school student.  And so I let my need to be good at what \nI did be satisfied by merely doing well in school.\n\nIf you'd asked me in high school what the difference was between\nhigh school kids and adults, I'd have said it was that adults had \nto earn a living.  Wrong.  It's that adults take responsibility for\nthemselves.  Making a living is only a small part of it.\nFar more important is to take intellectual responsibility for oneself.\n\nIf I had to go through high school again, I'd treat it like a day\njob.  I don't mean that I'd slack in school.  Working at something\nas a day job doesn't mean doing it badly.  It means not being defined\nby it.  I mean I wouldn't think of myself as a high school student,\njust as a musician with a day job as a waiter doesn't think of   \nhimself as a waiter. [3]   And when I wasn't working at my day job\nI'd start trying to do real work.\n\nWhen I ask people what they regret most about high school, they\nnearly all say the same thing: that they wasted so much time.  If\nyou're wondering what you're doing now that you'll regret most\nlater, that's probably it. [4]\n\nSome people say this is inevitable \u2014 that high school students\naren't capable of getting anything done yet.  But I don't think\nthis is true.  And the proof is that you're bored.  You probably\nweren't bored when you were eight.  When you're eight it's called\n\"playing\" instead of \"hanging out,\" but it's the same thing.  And\nwhen I was eight, I was rarely bored.  Give me a back yard and a\nfew other kids and I could play all day.\n\nThe reason this got stale in middle school and high school, I now\nrealize, is that I was ready for something else.  Childhood was\ngetting old.\n\nI'm not saying you shouldn't hang out with your friends \u2014 that you\nshould all become humorless little robots who do nothing but work.\nHanging out with friends is like chocolate cake.  You enjoy it more\nif you eat it occasionally than if you eat nothing but chocolate  \ncake for every meal.  No matter how much you like chocolate cake,\nyou'll be pretty queasy after the third meal of it.  And that's  \nwhat the malaise one feels in high school is: mental queasiness.\n[5]\n\nYou may be thinking, we have to do more than get good grades.  We\nhave to have extracurricular activities.  But you know\nperfectly well how bogus most of these are.  Collecting donations\nfor a charity is an admirable thing to do, but it's not hard.\nIt's not getting something done.  What I mean by getting something\ndone is learning how to write well, or how to program computers,\nor what life was really like in preindustrial societies, or how to   \ndraw the human face from life.  This sort of thing rarely translates\ninto a line item on a college application.\n\nCorruption\n\nIt's dangerous to design your life around getting into college,  \nbecause the people you have to impress to get into college are not \na very discerning audience.  At most colleges, it's not the professors\nwho decide whether you get in, but admissions officers, and they\nare nowhere near as smart.  They're the NCOs of the intellectual\nworld. They can't tell how smart you are.\nThe mere existence of prep schools is proof of that.\n\nFew parents\nwould pay so much for their kids to go to a school that didn't \nimprove their admissions prospects.  Prep schools openly say this\nis one of their aims.  But what that means, if you stop to \nthink about it, is that they can\nhack the admissions process: that they can take the very same kid\nand make him seem a more appealing candidate than he would if he  \nwent to the local public school. [6]\n\nRight now most of you feel your job in life is to be a promising\ncollege applicant.  But that means you're designing your life to\nsatisfy a process so mindless that there's a whole industry devoted\nto subverting it.  No wonder you become cynical.  The malaise you\nfeel is the same that a producer of reality TV shows or a tobacco \nindustry executive feels.  And you don't even get paid a lot.\n\nSo what do you do?  What you should not do is rebel.  That's what\nI did, and it was a mistake.  I didn't realize exactly what was   \nhappening to us, but I smelled a major rat.  And so I just gave up.\nObviously the world sucked, so why bother?\n\nWhen I discovered that one of our teachers was herself using Cliff's\nNotes, it seemed par for the course.  Surely it meant nothing to\nget a good grade in such a class.\n\nIn retrospect this was stupid.  It was like someone getting fouled\nin a soccer game and saying, hey, you fouled me, that's against the\nrules, and walking off the field in indignation.  Fouls happen. \nThe thing to do when you get fouled is not to lose your cool.  Just\nkeep playing.  \n\nBy putting you in this situation, society has fouled you.   Yes, \nas you suspect, a lot of the stuff you learn in your classes is   \ncrap.  And yes, as you suspect, the college admissions process is\nlargely a charade.  But like many fouls, this one was unintentional.\n[7] So just keep playing.\n\nRebellion is almost as stupid as obedience.  In either case you let\nyourself be defined by what they tell you to do.  The best plan, I\nthink, is to step onto an orthogonal vector.  Don't just do what \nthey tell you, and don't just refuse to.  Instead treat school as\na day job.  As day jobs go, it's pretty sweet.  You're done at 3\no'clock, and you can even work on your own stuff while you're there.\n\nCuriosity\n\nAnd what's your real job supposed to be?  Unless you're Mozart,   \nyour first task is to figure that out.  What are the great things\nto work on?  Where are the imaginative people?  And most importantly,\nwhat are you interested in?  The word \"aptitude\" is misleading,\nbecause it implies something innate.  The most powerful sort of\naptitude is a consuming interest in some question, and such interests\nare often acquired tastes.\n\nA distorted version of this idea has filtered into popular culture\nunder the name \"passion.\"  I recently saw an ad for waiters saying\nthey wanted people with a \"passion for service.\"  The real thing \nis not something one could have for waiting on tables.  And passion\nis a bad word for it. A better name would be curiosity.\n\nKids are curious, but the curiosity I mean has a different shape from kid\ncuriosity.  Kid curiosity is broad and shallow; they ask why at\nrandom about everything.  In most adults this curiosity dries up\nentirely.  It has to: you can't get anything done if you're always\nasking why about everything.  But in ambitious adults, instead of\ndrying up, curiosity becomes narrow and deep.  The mud flat morphs\ninto a well.\n\nCuriosity turns work into play.  For Einstein, relativity wasn't a\nbook full of hard stuff he had to learn for an exam.  It was a\nmystery he was trying to solve.  So it probably felt like less work\nto him to invent it than it would seem to someone now to learn it\nin a class.\n\nOne of the most dangerous illusions you get from school is the idea\nthat doing great things requires a lot of discipline.  Most subjects\nare taught in such a boring way that it's only by discipline that\nyou can flog yourself through them.  So I was surprised when, early\nin college, I read a quote by Wittgenstein saying that he had no \nself-discipline and had never been able to deny himself anything, \nnot even a cup of coffee.\n\nNow I know a number of people who do great work, and it's the same\nwith all of them.  They have little discipline.  They're all terrible\nprocrastinators and find it almost impossible to make themselves\ndo anything they're not interested in.  One still hasn't sent out\nhis half of the thank-you notes from his wedding, four years ago.\nAnother has 26,000 emails in her inbox.\n\nI'm not saying you can get away with zero self-discipline.  You \nprobably need about the amount you need to go running.  I'm often  \nreluctant to go running, but once I do, I enjoy it.  And if I don't  \nrun for several days, I feel ill.  It's the same with people who \ndo great things.  They know they'll feel bad if they don't work,\nand they have enough discipline to get themselves to their desks\nto start working.  But once they get started, interest takes over,\nand discipline is no longer necessary.\n\nDo you think Shakespeare was gritting his teeth and diligently\ntrying to write Great Literature?  Of course not.  He was having\nfun.  That's why he's so good.\n\nIf you want to do good work, what you need is a great curiosity   \nabout a promising question.   The critical moment for Einstein\nwas when he looked at Maxwell's equations and said, what the hell\nis going on here?\n\nIt can take years to zero in on a productive question, because it\ncan take years to figure out what a subject is really about.  To\ntake an extreme example, consider math.  Most people think they\nhate math, but the boring stuff you do in school under the name\n\"mathematics\" is not at all like what mathematicians do.\n\nThe great mathematician G. H.  Hardy said he didn't like math in \nhigh school either.  He only took it up because he was better at\nit than the other students.  Only later did he realize math was\ninteresting \u2014 only later did he start to ask questions instead of\nmerely answering them correctly.\n\nWhen a friend of mine used to grumble because he had to write a\npaper for school, his mother would tell him: find a way to make it\ninteresting.  That's what you need to do: find a question that makes\nthe world interesting.  People who do great things look at the same\nworld everyone else does, but notice some odd detail that's\ncompellingly mysterious.\n\nAnd not only in intellectual matters.  Henry Ford's great question \nwas, why do cars have to be a luxury item?  What would happen if\nyou treated them as a commodity?  Franz Beckenbauer's was, in effect,\nwhy does everyone have to stay in his position?  Why can't defenders\nscore goals too?\n\nNow\n\nIf it takes years to articulate great questions, what do you do now,\nat sixteen?  Work toward finding one.  Great questions don't appear\nsuddenly.  They gradually congeal in your head.  And what makes\nthem congeal is experience.  So the way to find great questions is\nnot to search for them \u2014 not to wander about thinking, what great  \ndiscovery shall I make?  You can't answer that; if you could, you'd \nhave made it.\n\nThe way to get a big idea to appear in your head is not to hunt for\nbig ideas, but to put in a lot of time on work that interests you,\nand in the process keep your mind open enough that a big idea can\ntake roost.  Einstein, Ford, and Beckenbauer all used this recipe.\nThey all knew their work like a piano player knows the keys.  So  \nwhen something seemed amiss to them, they had the confidence to\nnotice it.\n\nPut in time how and on what?  Just pick a project that seems\ninteresting: to master some chunk of material, or to make something,\nor to answer some question.  Choose a project that will take less\nthan a month, and make it something you have the means to finish.\nDo something hard enough to stretch you, but only just, especially \nat first.  If you're deciding between two projects, choose whichever \nseems most fun. If one blows up in your face, start another.  Repeat\ntill, like an internal combustion engine, the process becomes   \nself-sustaining, and each project generates the next one.  (This\ncould take years.)\n\nIt may be just as well not to do a project \"for school,\" if that\nwill restrict you or make it seem like work.  Involve your friends\nif you want, but not too many, and only if they're not flakes.  \nFriends offer moral support (few startups are started by one person),\nbut secrecy also has its advantages.  There's something pleasing\nabout a secret project.  And you can take more risks, because no  \none will know if you fail.\n\nDon't worry if a project doesn't seem to be on the path to some\ngoal you're supposed to have. Paths can bend a lot more than you\nthink.  So let the path grow out the project.  The most important\nthing is to be excited about it, because it's by doing that you \nlearn.\n\nDon't disregard unseemly motivations.  One of the most powerful is\nthe desire to be better than other people at something.  Hardy said\nthat's what got him started, and I think the only unusual thing  \nabout him is that he admitted it.  Another powerful motivator is\nthe desire to do, or know, things you're not supposed to.  Closely\nrelated is the desire to do something audacious.  Sixteen year olds\naren't supposed to write novels.  So if you try, anything you achieve\nis on the plus side of the ledger; if you fail utterly, you're doing\nno worse than expectations.  [8]\n\nBeware of bad models.  Especially when they excuse laziness.  When  \nI was in high school I used to write \"existentialist\" short stories\nlike ones I'd seen by famous writers.  My stories didn't have a lot\nof plot, but they were very deep.  And they were less work to write\nthan entertaining ones would have been.  I should have known that\nwas a danger sign.  And in fact I found my stories pretty boring;  \nwhat excited me was the idea of writing serious, intellectual stuff\nlike the famous writers.\n\nNow I have enough experience to realize that those famous writers\nactually sucked.  Plenty of famous people do; in the short term,\nthe quality of one's work is only a small component of fame.  \nI should have been less worried about doing something\nthat seemed cool, and just done something I liked.  That's the\nactual road to coolness anyway.\n\nA key ingredient in many projects, almost a project on its own, is \nto find good books.  Most books are bad.  Nearly all textbooks are\nbad. [9]  So don't assume a subject is to be learned from whatever\nbook on it happens to be closest.  You have to search actively for \nthe tiny number of good books.\n\nThe important thing is to get out there and do stuff.  Instead of\nwaiting to be taught, go out and learn.\n\nYour life doesn't have to be shaped by admissions officers.  It  \ncould be shaped by your own curiosity.  It is for all ambitious   \nadults.  And you don't have to wait to start.  In fact, you don't \nhave to wait to be an adult.  There's no switch inside you that\nmagically flips when you turn a certain age or graduate from some\ninstitution.  You start being an adult when you decide to take\nresponsibility for your life.  You can do that at any age.  [10]\n\nThis may sound like bullshit.  I'm just a minor, you may think, I\nhave no money, I have to live at home, I have to do what adults  \ntell me all day long.  Well, most adults labor under restrictions  \njust as cumbersome, and they manage to get things done.  If you\nthink it's restrictive being a kid, imagine having kids.\n\nThe only real difference between adults and high school kids is\nthat adults realize they need to get things done, and high school\nkids don't.  That realization hits most people around 23.  But I'm\nletting you in on the secret early.  So get to work.  Maybe you can\nbe the first generation whose greatest regret from high school isn't\nhow much time you wasted.\n\n\n\n\n\n\nNotes\n\n[1] A doctor friend warns that even this can give an inaccurate \npicture. \"Who knew how much time it would take up, how little\nautonomy one would have for endless years of training, and how\nunbelievably annoying it is to carry a beeper?\"\n\n[2] His best bet would probably be to become dictator and intimidate\nthe NBA into letting him play.  So far the closest anyone has come\nis Secretary of Labor.\n\n[3] A day job is one you take to pay the bills so you can do what\nyou really want, like play in a band, or invent relativity.\n\nTreating high school as a day job might actually make it easier for\nsome students to get good grades.  If you treat your classes\nas a game, you won't be demoralized if they seem pointless.\n\nHowever bad your classes, you need to get good grades in them to   \nget into a decent college.  And that is worth doing, because\nuniversities are where a lot of the clumps of smart people are these\ndays.\n\n[4] The second biggest regret was caring so much about unimportant\nthings.  And especially about what other people thought of them.\n\nI think what they really mean, in the latter case, is caring what\nrandom people thought of them.  Adults care just as much what other\npeople think, but they get to be more selective about the other\npeople.\n\nI have about thirty friends whose opinions I care about,\nand the opinion of the rest of the world barely affects me.  The\nproblem in high school is that your peers are chosen for you by    \naccidents of age and geography, rather than by you based on respect\nfor their judgement.\n\n[5] The key to wasting time is distraction.  Without distractions\nit's too obvious to your brain that you're not doing anything with\nit, and you start to feel uncomfortable.  If you want to measure \nhow dependent you've become on distractions, try this experiment:\nset aside a chunk of time on a weekend and sit alone and think.\nYou can have a notebook to write your thoughts down in, but nothing\nelse: no friends, TV, music, phone, IM, email, Web, games, books, \nnewspapers, or magazines.  Within an hour most people will feel a \nstrong craving for distraction.\n\n[6] I don't mean to imply that the only function of prep schools\nis to trick admissions officers.  They also generally provide a \nbetter education.  But try this thought experiment: suppose prep\nschools supplied the same superior education but had a tiny (.001)\nnegative effect on college admissions.  How many parents would still\nsend their kids to them?\n\nIt might also be argued that kids who went to prep schools, because\nthey've learned more, are better college candidates.  But\nthis seems empirically false.  What you learn in even the best high\nschool is rounding error compared to what you learn in college.  \nPublic school kids arrive at college with a slight disadvantage,  \nbut they start to pull ahead in the sophomore year.\n\n(I'm not saying public school kids are smarter than preppies, just\nthat they are within any given college.  That follows necessarily\nif you agree prep schools improve kids' admissions prospects.)\n\n[7] Why does society foul you?  Indifference, mainly.  There are\nsimply no outside forces pushing high school to be good.  The air\ntraffic control system works because planes would crash otherwise.\nBusinesses have to deliver because otherwise competitors would take\ntheir customers.  But no planes crash if your school sucks, and it\nhas no competitors.  High school isn't evil; it's random; but random\nis pretty bad.\n\n[8] And then of course there is money.  It's not a big factor in\nhigh school, because you can't do much that anyone wants.  But a\nlot of great things were created mainly to make money.  Samuel\nJohnson said \"no man but a blockhead ever wrote except for money.\"\n(Many hope he was exaggerating.)\n\n[9] Even college textbooks are bad.  When you get to college,\nyou'll find that (with a few stellar exceptions) the textbooks are\nnot written by the leading scholars in the field they describe.\nWriting college textbooks is unpleasant work, done mostly by people\nwho need the money.  It's unpleasant because the publishers exert\nso much control, and there are few things worse than close supervision\nby someone who doesn't understand what you're doing.  This phenomenon\nis apparently \neven worse in the production of high school textbooks.\n\n[10] Your teachers are always telling you to behave like adults.\nI wonder if they'd like it if you did.  You may be loud and\ndisorganized, but you're very docile compared to adults.  If you\nactually started acting like adults, it would be just as if a bunch\nof adults had been transposed into your bodies.  Imagine the reaction\nof an FBI agent or taxi driver or reporter to being told they had\nto ask permission to go the bathroom, and only one person could go\nat a time.  To say nothing of the things you're taught.  If a bunch\nof actual adults suddenly found themselves trapped in high school,\nthe first thing they'd do is form a union and renegotiate all the\nrules with the administration.\n\nThanks to Ingrid Bassett, Trevor Blackwell, \nRich Draves, Dan Giffin, Sarah\nHarlin, Jessica Livingston, Jackie McDonough, Robert Morris, Mark Nitzberg, Lisa \nRandall, and Aaron Swartz for reading drafts of this, and to many\nothers for talking to me about high school.\n\n", "November 2004\n\n(This is a new essay for the Japanese edition of \nHackers \n& Painters.\nIt tries to explain why Americans make some things well \nand others badly.)\n\nA few years ago an Italian friend of mine travelled by train from\nBoston to Providence.  She had only been in America for a\ncouple weeks and hadn't seen much of the country yet.  She arrived\nlooking astonished.  \"It's so ugly!\"\n\nPeople from other rich countries can scarcely imagine\nthe squalor of the man-made bits of America.  In travel books\nthey show you mostly natural environments: the Grand Canyon,\nwhitewater rafting, horses in a field.  If you see\npictures with man-made things in them, it will be either a\nview of the New York skyline shot from a discreet distance,\nor a carefully cropped image of a seacoast town in Maine.\n\nHow can it be, visitors must wonder.  How can the richest country\nin the world look like this?\n\nOddly enough, it may not be a coincidence.  Americans are good\nat some things and bad at others.  We're good at making\nmovies and software, and bad at making cars and cities.\nAnd I think we may be good at what we're good at for the same\nreason we're bad at what we're bad at.  We're impatient.\nIn America, if you want to do something, you don't worry that\nit might come out badly, or upset delicate social balances, or\nthat people might think you're getting above yourself.  If you\nwant to do something, as Nike says, just do it.\n\n\n\nThis works well in some fields and badly in others.  I suspect\nit works in movies and software because they're both messy  \nprocesses.  \"Systematic\"\nis the last word I'd use to describe the way \ngood programmers write software.\nCode is not something they assemble painstakingly after\ncareful planning, like the pyramids.  It's something they\nplunge into, working fast and constantly changing their minds,\nlike a charcoal sketch.\n\nIn software, paradoxical\nas it sounds, good craftsmanship means working fast.\nIf you work slowly and meticulously,\nyou merely end up with a very fine implementation of your initial,\nmistaken idea.\nWorking slowly and meticulously is\npremature optimization.  Better to get a\nprototype done fast, and see what new ideas\nit gives you.\n\nIt sounds like making movies works a lot like making software.\nEvery movie is a Frankenstein, full of imperfections\nand usually quite different from what was originally envisioned.  \nBut interesting, and finished fairly quickly.  \n\nI think we get away with this in movies and software\nbecause they're both malleable mediums.  Boldness pays.\n\nAnd if at the last minute two parts don't quite   \nfit, you can figure out some hack that will at least conceal\nthe problem.\n\nNot so with cars, or cities.  They are all too physical.\nIf the car business worked like software or movies, you'd\nsurpass your competitors by making a car that weighed only\nfifty pounds, or folded up to the size of a motorcycle when   \nyou wanted to park it.  But with physical products there are\nmore constraints.  You don't win by dramatic innovations\nso much as by good taste and attention to detail.\n\nThe trouble is, the very word \"taste\"\nsounds slightly ridiculous to American ears.\nIt seems pretentious, or frivolous, or even effeminate.\nBlue staters think it's \"subjective,\" and red staters \nthink it's for sissies.  So anyone in America\nwho really cares about design will be sailing upwind.\n\n\n\nTwenty years ago we used to hear that the problem with\nthe US car industry was the workers.\nWe don't hear that any more now that Japanese companies\nare building cars in the US.   The problem with\nAmerican cars is bad design.  You can see that just by\nlooking at them.\n\nAll that extra sheet metal on the AMC Matador wasn't\nadded by the workers.  The problem\nwith this car, as with American cars today, is that it was\ndesigned by marketing people instead of designers.\n\nWhy do the Japanese make better cars than us?  Some say it's\nbecause their culture encourages cooperation.  That may come\ninto it.   But in this case it seems more to the point that\ntheir culture prizes design and craftsmanship.\n\nFor centuries the Japanese have made finer things than we\nhave in the West.  When you look at swords they\nmade in 1200, you just can't believe the date on the label\nis right.\nPresumably their cars fit together more   \nprecisely than ours for the same reason their joinery always has.\nThey're obsessed with making things well.\n\nNot us.\nWhen we make something in America, our aim is just to get the   \njob done.  Once we reach that point, we take one of two routes.\nWe can stop there, and have something crude but\nserviceable, like a Vise-grip.  Or we can improve it,\nwhich usually means encrusting it with gratuitous ornament.\nWhen we want to make a car \"better,\"\nwe stick tail fins on it, or make it \nlonger, or make the  \nwindows smaller, depending on the current fashion.\n\nDitto for houses.  In America you can have either a flimsy box banged\ntogether out of two by fours and drywall, or a McMansion-- a\nflimsy box banged together out of two by fours and drywall,\nbut larger, more dramatic-looking, and full of expensive fittings.\nRich people don't get better design or craftsmanship;\nthey just get a larger, more conspicuous version of the\nstandard house.\n\nWe don't especially prize design or craftsmanship here.  What\nwe like is speed, and we're willing to do something in an ugly\nway to get it done fast.  In some\nfields, like software or movies, this is a net win.  \n\n\nBut it's not just that software and movies are malleable mediums.\nIn those businesses, the designers (though they're\nnot generally called that) have more power.   \nSoftware companies, at least successful ones, tend to be run\nby programmers.  And in the film industry, though producers\nmay second-guess directors, the director controls most of\nwhat appears on the screen.\nAnd so American software and movies, and Japanese cars, all\nhave this in common: the people in charge care about\ndesign-- the former because the designers are in charge, and the latter\nbecause the whole culture cares about design.\n\nI think most Japanese executives would be horrified at\nthe idea of making a bad car.  Whereas American executives,\nin their hearts, still believe the most important thing about\na car is the image it projects.\nMake a good car?  What's \"good?\"  It's so subjective.\nIf you want to know how to design a car, ask a focus group.\n\nInstead of relying on their own internal design compass\n(like Henry Ford did),\nAmerican car companies try to make what marketing people\nthink consumers want.  But it isn't working.  American cars continue\nto lose market share.  And the reason is that the customer\ndoesn't want what he thinks he wants.\n\nLetting focus groups design your cars for you  \nonly wins in the short term.  In the long term, it pays\nto bet on good design.  The focus group may say they want the\nmeretricious feature du jour, but what they want even more is\nto imitate sophisticated buyers, and they, though a\nsmall minority, really do care about good design.\nEventually the\npimps and drug dealers notice that the doctors and lawyers\nhave switched from Cadillac to Lexus, and do the same.\n\nApple is an interesting counterexample to the general\nAmerican trend.  If you want to buy a nice CD player, you'll\nprobably buy a Japanese one.  But if you want to buy an\nMP3 player, you'll probably buy an iPod.  What happened?\nWhy doesn't Sony dominate MP3 players?  Because Apple is\nin the consumer electronics business now, and unlike\nother American companies, they're obsessed with good design.  \nOr more precisely, their CEO is.\n\nI just got an iPod, and it's not just nice.  It's     \nsurprisingly nice.  For it to surprise me, it must be\nsatisfying expectations I didn't know I had.  No focus\ngroup is going to discover those.  Only a great   \ndesigner can.\n\n\n\nCars aren't the worst thing we make in America.\nWhere the just-do-it model fails most dramatically is in our cities-- or\nrather, exurbs.\nIf real estate developers operated on a large enough scale, if\nthey built whole towns, market forces would compel\nthem to build towns that didn't suck.  But they only build a\ncouple office buildings or suburban streets at a time, and the\nresult is so depressing that the inhabitants consider it a great\ntreat to fly to Europe and spend a couple weeks living what\nis, for people there, just everyday life. [1]\n\nBut the just-do-it model does have advantages.  It seems the clear\nwinner for generating wealth and technical innovations\n(which are practically the same thing).  I think speed is the reason.\nIt's hard to create wealth by making a commodity.  The\nreal value is in things that are new, and if you want to\nbe the first to make something, it helps to work fast.\nFor better or worse, the just-do-it model is fast,\nwhether you're Dan Bricklin writing the prototype of VisiCalc in\na weekend, or a real estate developer\nbuilding a block of shoddy condos in a month.\n\nIf I had to choose between the just-do-it model and the\ncareful model, I'd probably choose just-do-it.\nBut do we have to choose?  Could we have it both ways?\nCould Americans have nice\nplaces to live without undermining the impatient, individualistic spirit\nthat makes us good at software?  Could other countries\nintroduce more individualism into their technology companies\nand research labs without having it metastasize as strip malls?\nI'm optimistic.  It's harder to\nsay about other countries, but in the US, at least, I think \nwe can have both.\n\nApple is an encouraging example.  They've managed to preserve\nenough of the impatient, hackerly spirit you need to write\nsoftware.  And yet when\nyou pick up a new Apple laptop, well, it doesn't\nseem American.  It's too perfect.  It seems as if it\nmust have been made by a Swedish or a Japanese company.\n\nIn many technologies, version 2 has higher resolution.  Why\nnot in design generally?  I think we'll gradually see\nnational characters superseded\nby occupational characters: hackers in Japan will be allowed\nto behave with a willfulness \nthat would now seem unJapanese,\nand products in America will be designed with an\ninsistence on taste that would now seem unAmerican.\nPerhaps the most successful countries, in the future, will be\nthose most willing to ignore what are now considered\nnational characters, and do each kind of work in the way\nthat works best.  Race you.\n\n\n\nNotes\n\n[1] Japanese cities are ugly too, but for different reasons.\nJapan is prone to earthquakes, so buildings are traditionally\nseen as temporary; there is no grand tradition of  city planning\nlike the one Europeans inherited from Rome.  The other cause is\nthe notoriously corrupt relationship between the government\nand construction companies.\n\nThanks to Trevor Blackwell, Barry Eisler, Sarah Harlin,\nShiro Kawai, Jessica Livingston, Jackie McDonough, Robert Morris, \nand Eric Raymond\nfor reading drafts of this.\n\n\n", "\nNovember 2004, corrected June 2006\n\nOccam's razor says we should prefer the simpler of two explanations.\nI begin by reminding readers of this principle because I'm about\nto propose a theory that will offend both liberals and conservatives.\nBut Occam's razor means, in effect, that if you want to disagree\nwith it, you have a hell of a coincidence to explain.\n\nTheory: In US presidential elections, the more \ncharismatic candidate wins.\n\nPeople who write about politics, whether on the left or the right,\nhave a consistent bias: they take politics seriously.  When one\ncandidate beats another they look for political explanations.  The\ncountry is shifting to the left, or the right.  And that sort of\nshift can certainly be the result of a presidential election, which\nmakes it easy to believe it was the cause.\n\nBut when I think about why I voted for Clinton over the first George\nBush, it wasn't because I was shifting to the left.  Clinton just\nseemed more dynamic.  He seemed to want the job more.  Bush seemed\nold and tired.  I suspect it was the same for a lot of voters.\n\nClinton didn't represent any national shift leftward.\n[1]\nHe was\njust more charismatic than George Bush or (God help us) Bob Dole.\nIn 2000 we practically got a controlled experiment to prove it:\nGore had Clinton's policies, but not his charisma, and he suffered\nproportionally. \n[2]\nSame story in 2004. Kerry was smarter and more\narticulate than Bush, but rather a stiff.  And Kerry lost.\n\nAs I looked further back, I kept finding the same pattern.  \nPundits said Carter beat Ford\nbecause the country distrusted the Republicans after Watergate.\nAnd yet it also happened that Carter was famous for his big grin\nand folksy ways, and Ford for being a boring klutz.  Four years\nlater, pundits said the country had lurched to the right.  But\nReagan, a former actor, also happened to be even more charismatic\nthan Carter (whose grin was somewhat less cheery after four stressful\nyears in office).  In 1984 the charisma gap between Reagan and\nMondale was like that between Clinton and Dole, with similar results.\nThe first George Bush managed to win in 1988, though he would later\nbe vanquished by one of the most charismatic presidents ever, because\nin 1988 he was up against the notoriously uncharismatic\nMichael Dukakis.\n\nThese are the elections I remember personally, but apparently the\nsame pattern played out in 1964 and 1972.  The most recent\ncounterexample appears to be 1968, when Nixon beat the more charismatic Hubert\nHumphrey.  But when you examine that election, it tends to support\nthe charisma theory more than contradict it.  As Joe McGinnis\nrecounts in his famous book The Selling of the President 1968,\nNixon knew he had less charisma than Humphrey, and thus simply\nrefused to debate him on TV.  He knew he couldn't afford to let the\ntwo of them be seen side by side.\n\nNow a candidate probably couldn't get away with refusing to debate.\nBut in 1968 the custom of televised debates was still evolving.  In\neffect, Nixon won in 1968 because voters were never allowed to see\nthe real Nixon.  All they saw were carefully scripted campaign\nspots.\n\nOddly enough, the most recent true counterexample is probably 1960.\nThough this election is usually given as an example of the power\nof TV, Kennedy apparently would not have won without fraud by party\nmachines in Illinois and Texas.  But TV was still young in 1960;\nonly 87% of households had it.\n[3]\nUndoubtedly TV helped Kennedy,\nso historians are correct in regarding this election as a\nwatershed.  TV required a new kind of candidate. There would be no\nmore Calvin Coolidges.\n\nThe charisma theory may also explain why Democrats tend to lose\npresidential elections.  The core of the Democrats' ideology seems\nto be a belief in government.  Perhaps this tends to attract people\nwho are earnest, but dull.  Dukakis, Gore, and Kerry were so similar\nin that respect that they might have been brothers.  Good thing for\nthe Democrats that their screen lets through an occasional Clinton,\neven if some scandal results.  \n[4]\n\nOne would like to believe elections are won and lost on issues, if\nonly fake ones like Willie Horton.  And yet, if they are, we have\na remarkable coincidence to explain.  In every presidential election\nsince TV became widespread, the apparently more charismatic candidate\nhas won.  Surprising, isn't it, that voters' opinions on the issues\nhave lined up with charisma for 11 elections in a row?\n\nThe political commentators who come up with shifts to the left or\nright in their morning-after analyses are like the financial reporters\nstuck writing stories day after day about the random fluctuations\nof the stock market.  Day ends, market closes up or down, reporter\nlooks for good or bad news respectively, and writes that the market\nwas up on news of Intel's earnings, or down on fears of instability\nin the Middle East.  Suppose we could somehow feed these reporters\nfalse information about market closes, but give them all the other\nnews intact.  Does anyone believe they would notice the anomaly,\nand not simply write that stocks were up (or down) on whatever good\n(or bad) news there was that day?  That they would say, hey, wait\na minute, how can stocks be up with all this unrest in the Middle\nEast?\n\nI'm not saying that issues don't matter to voters.  Of course they\ndo.  But the major parties know so well which issues matter how\nmuch to how many voters, and adjust their message so precisely in\nresponse, that they tend to split the difference on the issues,\nleaving the election to be decided by the one factor they can't\ncontrol: charisma.\n\nIf the Democrats had been running a candidate as charismatic as\nClinton in the 2004 election, he'd have won.  And we'd be reading\nthat the election was a referendum on the war in Iraq, instead of\nthat the Democrats are out of touch with evangelical Christians in\nmiddle America.\n\nDuring the 1992 election, the Clinton campaign staff had a big sign\nin their office saying \"It's the economy, stupid.\" Perhaps it was\neven simpler than they thought.\n\n\n\n\n\nPostscript\n\nOpinions seem to be divided about the charisma theory.  Some say\nit's impossible, others say it's obvious.  This seems a good sign.\nPerhaps it's in the sweet spot midway between.\n\nAs for it being impossible, I reply: here's the data; here's the\ntheory; theory explains data 100%.   To a scientist, at least, that\nmeans it deserves attention, however implausible it seems.\n\nYou can't believe voters are so superficial that they just choose\nthe most charismatic guy?  My theory doesn't require that.  I'm not\nproposing that charisma is the only factor, just that it's the only\none left after the efforts of the two parties cancel one\nanother out.\n\nAs for the theory being obvious, as far as I know, no one has\nproposed it before.  Election forecasters are proud when they can\nachieve the same results with much more complicated models.\n\nFinally, to the people who say that the theory is probably true,\nbut rather depressing: it's not so bad as it seems.  The phenomenon\nis like a pricing anomaly; once people realize it's there, it will\ndisappear.  Once both parties realize it's a waste of time to\nnominate uncharismatic candidates, they'll tend to nominate only\nthe most charismatic ones.  And if the candidates are equally\ncharismatic, charisma will cancel out, and elections will be decided\non issues, as political commentators like to think they are now.\n\n\n\nNotes\n\n[1]\nAs Clinton himself discovered to his surprise when, in one of\nhis first acts as president, he tried to shift the military leftward.\nAfter a bruising fight he escaped with a face-saving compromise.\n\n[2]\nTrue, Gore won the popular vote. But politicians know the electoral\nvote decides the election, so that's what they campaign for. If Bush\nhad been campaigning for the popular vote he would presumably have\ngot more of it. (Thanks to judgmentalist for this point.)\n\n[3]\nSource: Nielsen Media Research.  Of the remaining 13%, 11 didn't\nhave TV because they couldn't afford it.  I'd argue that the missing\n11% were probably also the 11% most susceptible to charisma.\n\n[4]\nOne implication of this theory is that parties shouldn't be too\nquick to reject candidates with skeletons in their closets.\nCharismatic candidates will tend to have more skeletons than squeaky\nclean dullards, but in practice that doesn't seem to lose elections.\nThe current Bush, for example, probably did more drugs in his\ntwenties than any preceding president, and yet managed to get elected\nwith a base of evangelical Christians.  All you have to do is say\nyou've reformed, and stonewall about the details.\n\nThanks to Trevor Blackwell, Maria Daniels, Jessica Livingston,\nJackie McDonough, and Robert Morris for reading drafts of this, and\nto Eric Raymond for pointing out that I was wrong about 1968.\n\n\n\n\nComment on this essay.\n\n\n", "November 2004\n\n\nA lot of people are writing now about \nwhy Kerry lost.  Here I want to\nexamine a more specific question: why were the exit polls so \nwrong?\n\nIn Ohio, which Kerry ultimately\nlost 49-51, exit polls gave him a 52-48 victory.  And this wasn't just\nrandom error.  In every swing state they overestimated the Kerry vote.\nIn Florida, which Bush ultimately won 52-47, exit polls predicted\na dead heat.\n\n(These are not early numbers. They're from about midnight eastern time, \nlong after polls closed in Ohio and Florida.  And yet by the\nnext afternoon the exit poll numbers online corresponded to the returns.  \nThe only way I can imagine this happening is if those in\ncharge of the exit polls cooked the books after seeing the actual\nreturns.  But that's another issue.)\n\nWhat happened?  The source of the problem may be a variant of\nthe Bradley Effect.  \nThis term\nwas invented after Tom Bradley, the black mayor of Los Angeles, \nlost an election for governor of California despite a comfortable\nlead in the polls.  Apparently voters were afraid to say  \nthey planned to vote against him, lest their motives be\n(perhaps correctly) suspected.\n\nIt seems likely that something similar happened in exit polls this year.\nIn theory, exit polls ought to be very accurate.  \nYou're not asking people what they would do.  You're\nasking what they just did.\n\nHow can you get errors asking that?  Because some people don't\nrespond.  To get a truly random sample, pollsters ask, say, every\n20th person leaving the polling place who they voted for.  But not\neveryone wants to answer.  And the pollsters can't simply ignore\nthose who won't, or their sample isn't random anymore.  So what\nthey do, apparently, is note down the age and race and sex of the\nperson, and guess from that who they voted for.\n\nThis works so long as there is no correlation between who people\nvote for and whether they're willing to talk about it.  But this\nyear there may have been.  It may be that a significant number of \nthose who voted for\nBush didn't want to say so.\n\nWhy not?  Because people in the US are more conservative than they're\nwilling to admit.  The values of the elite in this country, at least\nat the moment, are NPR values.  The average person, as I think both\nRepublicans and Democrats would agree, is more socially conservative.  \nBut while some openly flaunt the fact that they don't share the\nopinions of the elite, others feel a little nervous about it, as \nif they had bad table manners.\n\nFor example, according to current NPR values, you \ncan't say anything that might be \nperceived as disparaging towards homosexuals.  To do  \nso is \"homophobic.\"  And yet a large number of Americans are deeply\nreligious, and the Bible is quite explicit on the subject of\nhomosexuality.  What are they to do?  I think what many do is keep \ntheir opinions, but keep them to themselves.\n\nThey know what they believe, but they also know what they're supposed\nto believe.\nAnd so when a stranger (for example, a pollster) asks\nthem their opinion about something like gay marriage, they will not\nalways say what they really think.\n\nWhen the values of the elite are liberal, polls will tend to\nunderestimate the conservativeness of ordinary voters.  This seems\nto me the leading theory to explain why the exit polls were so \nfar off this year.  NPR values   \nsaid one ought to vote for Kerry.  So all the people who voted for\nKerry felt virtuous for doing so, and were eager to tell pollsters\nthey had. No one who voted for Kerry did it as an act of quiet\ndefiance.\n\n\n\n\n", "October 2004\n\n\nAs E. B. White said, \"good writing is rewriting.\"  I didn't\nrealize this when I was in school.  In writing, as in math and \nscience, they only show you the finished product.\nYou don't see all the false starts.  This gives students a\nmisleading view of how things get made.\n\nPart of the reason it happens is that writers don't want   \npeople to see their mistakes.  But I'm willing to let people\nsee an early draft if it will show how much you have\nto rewrite to beat an essay into shape.\n\nBelow is the oldest version I can find of\nThe Age of the Essay   \n(probably the second or third day), with\ntext that ultimately survived in \nred and text that later\ngot deleted in gray.\nThere seem to be several categories of cuts: things I got wrong,\nthings that seem like bragging, flames,\ndigressions, stretches of awkward prose, and unnecessary words.\n\nI discarded more from the beginning.  That's\nnot surprising; it takes a while to hit your stride.  There\nare more digressions at the start, because I'm not sure where\nI'm heading.\n\nThe amount of cutting is about average.  I probably write\nthree to four words for every one that appears in the final\nversion of an essay.\n\n(Before anyone gets mad at me for opinions expressed here, remember\nthat anything you see here that's not in the final version is obviously\nsomething I chose not to publish, often because I disagree\nwith it.)\n\n\n\n\nRecently a friend said that what he liked about\nmy essays was that they weren't written the way\nwe'd been taught to write essays in school.  You\nremember: topic sentence, introductory paragraph,\nsupporting paragraphs, conclusion.  It hadn't\noccurred to me till then that those horrible things\nwe had to write in school were even connected to\nwhat I was doing now.  But sure enough, I thought,\nthey did call them \"essays,\" didn't they?\n\nWell, they're not.  Those things you have to write\nin school are not only not essays, they're one of the\nmost pointless of all the pointless hoops you have\nto jump through in school.  And I worry that they\nnot only teach students the wrong things about writing,\nbut put them off writing entirely.\n\nSo I'm going to give the other side of the story: what\nan essay really is, and how you write one.  Or at least,\nhow I write one.  Students be forewarned: if you actually write\nthe kind of essay I describe, you'll probably get bad\ngrades.  But knowing how it's really done should\nat least help you to understand the feeling of futility\nyou have when you're writing the things they tell you to.\n\n\nThe most obvious difference between real essays and\nthe things one has to write in school is that real\nessays are not exclusively about English literature.\nIt's a fine thing for schools to\n\nteach students how to\nwrite.  But for some bizarre reason (actually, a very specific bizarre\nreason that I'll explain in a moment),\n\nthe teaching of\nwriting has gotten mixed together with the study\nof literature.  And so all over the country, students are\nwriting not about how a baseball team with a small budget \nmight compete with the Yankees, or the role of color in\nfashion, or what constitutes a good dessert, but about\nsymbolism in Dickens.\n\nWith obvious \nresults.  Only a few people really\n\ncare about\nsymbolism in Dickens.  The teacher doesn't.\nThe students don't.  Most of the people who've had to write PhD\ndisserations about Dickens don't.  And certainly\n\nDickens himself would be more interested in an essay\nabout color or baseball.\n\nHow did things get this way?  To answer that we have to go back\nalmost a thousand years.  Between about 500 and 1000, life was\nnot very good in Europe.  The term \"dark ages\" is presently\nout of fashion as too judgemental (the period wasn't dark; \nit was just different), but if this label didn't already\nexist, it would seem an inspired metaphor.  What little\noriginal thought there was took place in lulls between\nconstant wars and had something of the character of\nthe thoughts of parents with a new baby.\nThe most amusing thing written during this\nperiod, Liudprand of Cremona's Embassy to Constantinople, is,\nI suspect, mostly inadvertantly so.\n\nAround 1000 Europe began to catch its breath.\nAnd once they\nhad the luxury of curiosity, one of the first things they discovered\nwas what we call \"the classics.\"\nImagine if we were visited  \nby aliens.  If they could even get here they'd presumably know a\nfew things we don't.  Immediately Alien Studies would become\nthe most dynamic field of scholarship: instead of painstakingly\ndiscovering things for ourselves, we could simply suck up\neverything they'd discovered.  So it was in Europe in 1200.\nWhen classical texts began to circulate in Europe, they contained\nnot just new answers, but new questions.  (If anyone proved\na theorem in christian Europe before 1200, for example, there\nis no record of it.)\n\nFor a couple centuries, some of the most important work\nbeing done was intellectual archaelogy.  Those were also\nthe centuries during which schools were first established.\nAnd since reading ancient texts was the essence of what\nscholars did then, it became the basis of the curriculum.\n\nBy 1700, someone who wanted to learn about\nphysics didn't need to start by mastering Greek in order to read Aristotle.  But schools\nchange slower than scholarship: the study of\nancient texts\nhad such prestige that it remained the backbone of \neducation\nuntil the late 19th century.  By then it was merely a tradition.\nIt did serve some purposes: reading a foreign language was difficult,\nand thus taught discipline, or at least, kept students busy;\nit introduced students to\ncultures quite different from their own; and its very uselessness\nmade it function (like white gloves) as a social bulwark.\nBut it certainly wasn't\ntrue, and hadn't been true for centuries, that students were\nserving apprenticeships in the hottest area of scholarship.\n\nClassical scholarship had also changed.  In the early era, philology\nactually mattered.  The texts that filtered into Europe were\nall corrupted to some degree by the errors of translators and\ncopyists.  Scholars had to figure out what Aristotle said\nbefore they could figure out what he meant.  But by the modern\nera such questions were answered as well as they were ever\ngoing to be.  And so the study of ancient texts became less\nabout ancientness and more about texts.\n\nThe time was then ripe for the question: if the study of\nancient texts is a valid field for scholarship, why not modern\ntexts?  The answer, of course, is that the raison d'etre\nof classical scholarship was a kind of intellectual archaelogy that\ndoes not need to be done in the case of contemporary authors.\nBut for obvious reasons no one wanted to give that answer.\nThe archaeological work being mostly done, it implied that\nthe people studying the classics were, if not wasting their\ntime, at least working on problems of minor importance.\n\nAnd so began the study of modern literature. There was some\ninitial resistance, but it didn't last long.\nThe limiting\nreagent in the growth of university departments is what\nparents will let undergraduates study.  If parents will let\ntheir children major in x, the rest follows straightforwardly.\nThere will be jobs teaching x, and professors to fill them.\nThe professors will establish scholarly journals and publish\none another's papers.  Universities with x departments will\nsubscribe to the journals.  Graduate students who want jobs\nas professors of x will write dissertations about it.  It may\ntake a good long while for the more prestigious universities\nto cave in and establish departments in cheesier xes,  but\nat the other end of the scale there are so many universities\ncompeting to attract students that the mere establishment of\na discipline requires little more than the desire to do it.\n\nHigh schools imitate universities.\nAnd so once university\nEnglish departments were established in the late nineteenth century,\nthe 'riting component of the 3 Rs \nwas morphed into English.\nWith the bizarre consequence that high school students now\nhad to write about English literature-- to write, without\neven realizing it, imitations of whatever\nEnglish professors had been publishing in their journals a\nfew decades before.   It's no wonder if this seems to the\nstudent a pointless exercise, because we're now three steps\nremoved from real work: the students are imitating English\nprofessors, who are imitating classical scholars, who are\nmerely the inheritors of a tradition growing out of what\nwas, 700 years ago, fascinating and urgently needed work.\n\nPerhaps high schools should drop English and just teach writing.\nThe valuable part of English classes is learning to write, and\nthat could be taught better by itself.  Students learn better\nwhen they're interested in what they're doing, and it's hard\nto imagine a topic less interesting than symbolism in Dickens.\nMost of the people who write about that sort of thing professionally\nare not really interested in it.  (Though indeed, it's been a\nwhile since they were writing about symbolism; now they're\nwriting about gender.)\n\nI have no illusions about how eagerly this suggestion will  \nbe adopted.  Public schools probably couldn't stop teaching\nEnglish even if they wanted to; they're probably required to by\nlaw.  But here's a related suggestion that goes with the grain\ninstead of against it: that universities establish a\nwriting major.  Many of the students who now major in English\nwould major in writing if they could, and most would\nbe better off.\n\nIt will be argued that it is a good thing for students to be\nexposed to their literary heritage.  Certainly.  But is that\nmore important than that they learn to write well?  And are\nEnglish classes even the place to do it?  After all,\nthe average public high school student gets zero exposure to  \nhis artistic heritage.  No disaster results.\nThe people who are interested in art learn about it for\nthemselves, and those who aren't don't.  I find that American\nadults are no better or worse informed about literature than\nart, despite the fact that they spent years studying literature\nin high school and no time at all studying art.  Which presumably\nmeans that what they're taught in school is rounding error \ncompared to what they pick up on their own.\n\nIndeed, English classes may even be harmful.  In my case they\nwere effectively aversion therapy.  Want to make someone dislike\na book?  Force him to read it and write an essay about it.\nAnd make the topic so intellectually bogus that you\ncould not, if asked, explain why one ought to write about it.\nI love to read more than anything, but by the end of high school\nI never read the books we were assigned.  I was so disgusted with\nwhat we were doing that it became a point of honor\nwith me to write nonsense at least as good at the other students'\nwithout having more than glanced over the book to learn the names\nof the characters and a few random events in it.\n\nI hoped this might be fixed in college, but I found the same\nproblem there.  It was not the teachers.  It was English.   \nWe were supposed to read novels and write essays about them.\nAbout what, and why?  That no one seemed to be able to explain.\nEventually by trial and error I found that what the teacher  \nwanted us to do was pretend that the story had really taken\nplace, and to analyze based on what the characters said and did (the\nsubtler clues, the better) what their motives must have been.\nOne got extra credit for motives having to do with class,\nas I suspect one must now for those involving gender and  \nsexuality.  I learned how to churn out such stuff well enough\nto get an A, but I never took another English class.\n\nAnd the books we did these disgusting things to, like those\nwe mishandled in high school, I find still have black marks\nagainst them in my mind.  The one saving grace was that   \nEnglish courses tend to favor pompous, dull writers like\nHenry James, who deserve black marks against their names anyway.\nOne of the principles the IRS uses in deciding whether to\nallow deductions is that, if something is fun, it isn't work.\nFields that are intellectually unsure of themselves rely on\na similar principle.  Reading P.G. Wodehouse or Evelyn Waugh or\nRaymond Chandler is too obviously pleasing to seem like\nserious work, as reading Shakespeare would have been before \nEnglish evolved enough to make it an effort to understand him. [sh]\nAnd so good writers (just you wait and see who's still in\nprint in 300 years) are less likely to have readers turned   \nagainst them by clumsy, self-appointed tour guides.\n\n\nThe other big difference between a real essay and the \nthings\nthey make you write in school is that a real essay doesn't \ntake a position and then defend it.  That principle,\nlike the idea that we ought to be writing about literature,   \nturns out to be another intellectual hangover of long\nforgotten origins.  It's often mistakenly believed that\nmedieval universities were mostly seminaries.  In fact they\nwere more law schools.  And at least in our tradition\nlawyers are advocates: they are\ntrained to be able to\ntake\neither side of an argument and make as good a case for it  \nas they can. \n\nWhether or not this is a good idea (in the case of prosecutors,\nit probably isn't), it tended to pervade\nthe atmosphere of\nearly universities.  After the lecture the most common form\nof discussion was the disputation.  This idea\nis at least\nnominally preserved in our present-day thesis defense-- indeed,\nin the very word thesis.  Most people treat the words \nthesis\nand dissertation as interchangeable, but originally, at least,\na thesis was a position one took and the dissertation was\nthe argument by which one defended it.\n\nI'm not complaining that we blur these two words together.\nAs far as I'm concerned, the sooner we lose the original\nsense of the word thesis, the better.  For many, perhaps most,  \ngraduate students, it is stuffing a square peg into a round\nhole to try to recast one's work as a single thesis.  And\nas for the disputation, that seems clearly a net lose.\nArguing two sides of a case may be a necessary evil in a\nlegal dispute, but it's not the best way to get at the truth,\nas I think lawyers would be the first to admit.\n\n\nAnd yet this principle is built into the very structure of  \nthe essays\nthey teach you to write in high school.  The topic\nsentence is your thesis, chosen in advance, the supporting \nparagraphs the blows you strike in the conflict, and the\nconclusion--- uh, what it the conclusion?  I was never sure  \nabout that in high school.  If your thesis was well expressed,\nwhat need was there to restate it?  In theory it seemed that\nthe conclusion of a really good essay ought not to need to   \nsay any more than QED.\nBut when you understand the origins\nof this sort of \"essay\", you can see where the\nconclusion comes from.  It's the concluding remarks to the \njury.\n\n\nWhat other alternative is there?  To answer that\nwe have to\nreach back into history again, though this time not so far.\nTo Michel de Montaigne, inventor of the essay.\nHe was\ndoing something quite different from what a\nlawyer does,\nand\nthe difference is embodied in the name.  Essayer is the French\nverb meaning \"to try\" (the cousin of our word assay),\n\nand an \"essai\" is an effort.\nAn essay is something you\nwrite in order\nto figure something out.\n\nFigure out what?  You don't know yet.  And so you can't begin with a\nthesis, because you don't have one, and may never have \none.  An essay doesn't begin with a statement, but with a  \nquestion.  In a real essay, you don't take a position and\ndefend it.  You see a door that's ajar, and you open it and\nwalk in to see what's inside.\n\nIf all you want to do is figure things out, why do you need\nto write anything, though?  Why not just sit and think?  Well,\nthere precisely is Montaigne's great discovery.  Expressing\nideas helps to form them.  Indeed, helps is far too weak a\nword.  90%\nof what ends up in my essays was stuff\nI only\nthought of when I sat down to write them.  That's why I\nwrite them.\n\nSo there's another difference between essays and\nthe things\nyou have to write in school.   In school\n\nyou are, in theory,\nexplaining yourself to someone else.  In the best case---if\nyou're really organized---you're just writing it down.\nIn a real essay you're writing for yourself.  You're\nthinking out loud.\n\nBut not quite.  Just as inviting people over forces you to\nclean up your apartment, writing something that you know\n\nother people will read forces you to think well.  So it\ndoes matter to have an audience.  The things I've written\njust for myself are no good.  Indeed, they're bad in\na particular way:\nthey tend to peter out.  When I run into\ndifficulties, I notice that I\ntend to conclude with a few vague\nquestions and then drift off to get a cup of tea.\n\nThis seems a common problem.\nIt's practically the standard\nending in blog entries--- with the addition of a \"heh\" or an \nemoticon, prompted by the all too accurate sense that\nsomething is missing.\n\nAnd indeed, a lot of\npublished essays peter out in this\nsame way.\nParticularly the sort written by the staff writers of newsmagazines.  Outside writers tend to supply\neditorials of the defend-a-position variety, which\nmake a beeline toward a rousing (and\nforeordained) conclusion.   But the staff writers feel\nobliged to write something more\nbalanced, which in\npractice ends up meaning blurry.\nSince they're\nwriting for a popular magazine, they start with the\nmost radioactively controversial questions, from which\n(because they're writing for a popular magazine)\nthey then proceed to recoil from\nin terror.\nGay marriage, for or\nagainst?  This group says one thing.  That group says\nanother.  One thing is certain: the question is a\ncomplex one.  (But don't get mad at us.  We didn't\ndraw any conclusions.)\n\nQuestions aren't enough.  An essay has to come up with answers.\nThey don't always, of course.  Sometimes you start with a  \npromising question and get nowhere.  But those you don't\npublish.  Those are like experiments that get inconclusive\nresults.   Something you publish ought to tell the reader  \nsomething he didn't already know.\n\n\nBut what you tell him doesn't matter, so long as   \nit's interesting.  I'm sometimes accused of meandering.\nIn defend-a-position writing that would be a flaw.\nThere you're not concerned with truth.  You already\nknow where you're going, and you want to go straight there,\nblustering through obstacles, and hand-waving\nyour way across swampy ground.  But that's not what\nyou're trying to do in an essay.  An essay is supposed to\nbe a search for truth.  It would be suspicious if it didn't\nmeander.\n\nThe Meander is a river in Asia Minor (aka\nTurkey).\nAs you might expect, it winds all over the place.\nBut does it\ndo this out of frivolity?   Quite the opposite.\nLike all rivers, it's rigorously following the laws of physics.\nThe path it has discovered,\nwinding as it is, represents\nthe most economical route to the sea.\n\nThe river's algorithm is simple.  At each step, flow down.\nFor the essayist this translates to: flow interesting.\nOf all the places to go next, choose\nwhichever seems\nmost interesting.\n\nI'm pushing this metaphor a bit.  An essayist\ncan't have\nquite as little foresight as a river.  In fact what you do\n(or what I do) is somewhere between a river and a roman\nroad-builder.  I have a general idea of the direction\nI want to go in, and\nI choose the next topic with that in mind.  This essay is\nabout writing, so I do occasionally yank it back in that\ndirection, but it is not all the sort of essay I\nthought I was going to write about writing.\n\nNote too that hill-climbing (which is what this algorithm is\ncalled) can get you in trouble.\nSometimes, just\nlike a river,\nyou\nrun up against a blank wall.  What\nI do then is just \nwhat the river does: backtrack.\nAt one point in this essay\nI found that after following a certain thread I ran out\nof ideas.  I had to go back n\nparagraphs and start over\nin another direction.  For illustrative purposes I've left\nthe abandoned branch as a footnote.\n\n\nErr on the side of the river.  An essay is not a reference\nwork.  It's not something you read looking for a specific\nanswer, and feel cheated if you don't find it.  I'd much\nrather read an essay that went off in an unexpected but\ninteresting direction than one that plodded dutifully along\na prescribed course.\n\nSo what's interesting?  For me, interesting means surprise.\nDesign, as Matz\nhas said, should follow the principle of\nleast surprise.\nA button that looks like it will make a\nmachine stop should make it stop, not speed up.  Essays\nshould do the opposite.  Essays should aim for maximum\nsurprise.\n\nI was afraid of flying for a long time and could only travel\nvicariously.  When friends came back from faraway places,\nit wasn't just out of politeness that I asked them about\ntheir trip.\nI really wanted to know.  And I found that\nthe best way to get information out of them was to ask\nwhat surprised them.  How was the place different from what\nthey expected?  This is an extremely useful question.\nYou can ask it of even\nthe most unobservant people, and it will\nextract information they didn't even know they were\nrecording. \n\nIndeed, you can ask it in real time.  Now when I go somewhere\nnew, I make a note of what surprises me about it.  Sometimes I\neven make a conscious effort to visualize the place beforehand,\nso I'll have a detailed image to diff with reality.\n\n\nSurprises are facts\nyou didn't already \nknow.\nBut they're\nmore than that.  They're facts\nthat contradict things you\nthought you knew.  And so they're the most valuable sort of\nfact you can get.  They're like a food that's not merely\nhealthy, but counteracts the unhealthy effects of things\nyou've already eaten.\n\n\nHow do you find surprises?  Well, therein lies half\nthe work of essay writing.  (The other half is expressing\nyourself well.)   You can at least\nuse yourself as a\nproxy for the reader.  You should only write about things\nyou've thought about a lot.  And anything you come across\nthat surprises you, who've thought about the topic a lot,\nwill probably surprise most readers.\n\nFor example, in a recent essay I pointed out that because\nyou can only judge computer programmers by working with\nthem, no one knows in programming who the heroes should\nbe.\nI\ncertainly\ndidn't realize this when I started writing\nthe \nessay, and even now I find it kind of weird.  That's\nwhat you're looking for.\n\nSo if you want to write essays, you need two ingredients:\nyou need\na few topics that you think about a lot, and you\nneed some ability to ferret out the unexpected.\n\nWhat should you think about?  My guess is that it\ndoesn't matter.  Almost everything is\ninteresting if you get deeply\nenough into it.  The one possible exception\nare\nthings\nlike working in fast food, which\nhave deliberately had all\nthe variation sucked out of them.\nIn retrospect, was there\nanything interesting about working in Baskin-Robbins?\nWell, it was interesting to notice\nhow important color was\nto the customers.  Kids a certain age would point into\nthe case and say that they wanted yellow.  Did they want\nFrench Vanilla or Lemon?  They would just look at you\nblankly.  They wanted yellow.  And then there was the\nmystery of why the perennial favorite Pralines n' Cream\nwas so appealing. I'm inclined now to\nthink it was the salt.\nAnd the mystery of why Passion Fruit tasted so disgusting.\nPeople would order it because of the name, and were always\ndisappointed.  It should have been called In-sink-erator\nFruit.\nAnd there was\nthe difference in the way fathers and\nmothers bought ice cream for their kids.\nFathers tended to\nadopt the attitude of\nbenevolent kings bestowing largesse,\nand mothers that of\nharried bureaucrats,\ngiving in to\npressure against their better judgement.\nSo, yes, there does seem to be material, even in\nfast food.\n\nWhat about the other half, ferreting out the unexpected?\nThat may require some natural ability.  I've noticed for\na long time that I'm pathologically observant.  ....\n\n[That was as far as I'd gotten at the time.]\n\n\n\nNotes\n\n[sh] In Shakespeare's own time, serious writing meant theological\ndiscourses, not the bawdy plays acted over on the other  \nside of the river among the bear gardens and whorehouses.\n\nThe other extreme, the work that seems formidable from the moment\nit's created (indeed, is deliberately intended to be)\nis represented by Milton.  Like the Aeneid, Paradise Lost is a\nrock imitating a butterfly that happened to get fossilized.\nEven Samuel Johnson seems to have balked at this, on the one  \nhand paying Milton the compliment of an extensive biography,\nand on the other writing of Paradise Lost that \"none who read it\never wished it longer.\"\n\n\n\n\n\n", "September 2004\n\n(This essay is derived from an invited talk at ICFP 2004.)\n\nI had a front row seat for the Internet Bubble,\nbecause I worked at Yahoo during 1998 and 1999.  One day,\nwhen the stock was trading around $200, I sat down and calculated\nwhat I thought the price should be. The \nanswer I got was $12.  I went to\nthe next cubicle and told my friend Trevor.  \"Twelve!\" he said.\nHe tried to sound indignant, but he didn't quite manage it.  He\nknew as well as I did that our valuation was crazy.\n\nYahoo was a special case.  It was not just our price to earnings\nratio that was bogus.  Half our earnings were too.  Not in\nthe Enron way, of course.  The finance guys seemed\nscrupulous about reporting earnings.  What made our\nearnings bogus was that Yahoo was, in effect, the center of\na Ponzi scheme.  Investors looked at Yahoo's earnings\nand said to themselves, here is proof that Internet companies can make\nmoney.  So they invested in new\nstartups that promised to be the next Yahoo.  And as soon as these startups\ngot the money, what did they do with it?\nBuy millions of dollars worth of advertising on Yahoo to promote\ntheir brand.  Result: a capital investment in a startup this\nquarter shows up as Yahoo earnings next quarter\u2014stimulating\nanother round of investments in startups.\n\nAs in a Ponzi scheme, what seemed to be the returns of this system\nwere simply the latest round of investments in it.\nWhat made it not a Ponzi scheme was that it was unintentional.  \nAt least, I think it was.  The venture capital business is pretty incestuous,\nand there were presumably people in a position, if not to create\nthis situation, to realize what was happening and to milk it.\n\nA year later the game was up.  Starting in January 2000, Yahoo's\nstock price began to crash, ultimately losing 95% of its\nvalue.\n\nNotice, though, that even with all the fat trimmed off its market\ncap, Yahoo was still worth a lot.  Even at the morning-after\nvaluations of March and April 2001, the people at Yahoo had managed\nto create a company worth about $8 billion in just six years.\n\nThe fact is, despite all the nonsense we heard\nduring the Bubble about the \"new economy,\" there was a\ncore of truth.  You need\nthat to get a really big bubble: you need to have something\nsolid at the center, so that even smart people are sucked in.\n(Isaac Newton and Jonathan Swift both lost money\nin the South Sea Bubble of 1720.)\n\nNow the pendulum has swung the other way.  Now anything that\nbecame fashionable during the Bubble is ipso facto unfashionable.\nBut that's a mistake\u2014an even bigger mistake than believing\nwhat everyone was saying in 1999.  Over the long term,\nwhat the Bubble got right will be more important than what\nit got wrong.\n\n1. Retail VC\n\nAfter the excesses of the Bubble, it's now\nconsidered dubious to take companies public before they have earnings.\nBut there is nothing intrinsically wrong with\nthat idea.  Taking a company public at an early stage is simply\nretail VC: instead of going to venture capital firms for the last round of\nfunding, you go to the public markets.\n\nBy the end of the Bubble, companies going public with no\nearnings were being derided as \"concept stocks,\" as if it\nwere inherently stupid to invest in them.\nBut investing in concepts isn't stupid; it's what VCs do,\nand the best of them are far from stupid.\n\nThe stock of a company that doesn't yet have earnings is  \nworth something.\nIt may take a while for the market to learn\nhow to value such companies, just as it had to learn to\nvalue common stocks in the early 20th century.   But markets\nare good at solving that kind of problem.  I wouldn't be\nsurprised if the market ultimately did a better\njob than VCs do now.\n\nGoing public early will not be the right plan\nfor every company.\nAnd it can of course be\ndisruptive\u2014by distracting the management, or by making the early\nemployees suddenly rich.  But just as the market will learn\nhow to value startups, startups will learn how to minimize\nthe damage of going public.\n\n2. The Internet\n\nThe Internet genuinely is a big deal.  That was one reason\neven smart people were fooled by the Bubble.  Obviously \nit was going to have a huge effect.  Enough of an effect to\ntriple the value of Nasdaq companies in two years?  No, as it\nturned out.  But it was hard to say for certain at the time. [1]\n\nThe same thing happened during the Mississippi and South Sea Bubbles.\nWhat drove them was the invention of organized public finance\n(the South Sea Company, despite its name, was really a competitor\nof the Bank of England).  And that did turn out to be\na big deal, in the long run.\n\nRecognizing an important trend turns out to be easier than \nfiguring out how to profit from it.  The mistake\ninvestors always seem to make is to take the trend too literally.\nSince the Internet was the big new thing, investors supposed\nthat the more Internettish the company, the better.  Hence\nsuch parodies as Pets.Com.\n\nIn fact most of the money to be made from big trends is made\nindirectly.  It was not the railroads themselves that \nmade the most money during the railroad boom, but the companies\non either side, like Carnegie's steelworks, which made the rails,\nand Standard Oil, which used railroads to get oil to the East Coast,\nwhere it could be shipped to Europe.\n\nI think the Internet will have great effects,\nand that what we've seen so far is nothing compared to what's\ncoming.  But most of the winners will only indirectly be\nInternet companies; for every Google there will be ten\nJetBlues.\n\n3. Choices\n\nWhy will the Internet have great effects?  The general   \nargument is that new forms of communication always do.  They happen\nrarely (till industrial times there were just speech, writing, and printing),\nbut when they do, they always cause a big splash.\n\nThe specific argument, or one of them, is the Internet gives us  \nmore choices.  In the \"old\" economy,\nthe high cost of presenting information to people meant they\nhad only a narrow range of options to choose from.  The tiny,\nexpensive pipeline to consumers was tellingly named \"the channel.\"\nControl the channel and you\ncould feed them what you wanted, on your terms.  And it\nwas not just big corporations that depended\non this principle.  So, in their way, did\nlabor unions, the traditional news media,\nand the art and literary establishments.\nWinning depended not on doing good work, but on gaining control\nof some bottleneck.\n\nThere are signs that this is changing.\nGoogle has over 82 million unique users a month and\nannual revenues of about three billion dollars. [2]\nAnd yet have you ever seen\na Google ad?\nSomething is going on here.\n\nAdmittedly, Google is an extreme case.  It's very easy for\npeople to switch to a new search engine.  It costs little\neffort and no money to try a new one, and it's easy to\nsee if the results are better.  And so Google doesn't have\nto advertise.  In a business like theirs, being the best is\nenough.\n\nThe exciting thing about the Internet is that it's\nshifting everything in that direction.\nThe hard part, if you want to win by making the best stuff,\nis the beginning.  Eventually everyone\nwill learn by word of mouth that you're the best,\nbut how do you survive to that point?  And it is in this crucial\nstage that the Internet has the most effect.  First, the\nInternet lets anyone find you at almost zero cost.\nSecond, it dramatically speeds up the rate at which\nreputation spreads by word of mouth.  Together these mean that in many\nfields the rule will be: Build it, and they will come.\nMake something great and put it online.\nThat is a big change from the recipe for winning in the\npast century.\n\n4. Youth\n\nThe aspect of the Internet Bubble that the press seemed most\ntaken with was the youth of some of the startup founders.\nThis too is a trend that will last.\nThere is a huge standard deviation among 26 year olds.  Some\nare fit only for entry level jobs, but others are\nready to rule the world if they can find someone to handle\nthe paperwork for them.\n\nA 26 year old may not be very good at managing people or\ndealing with the SEC.  Those require experience.\nBut those are also commodities, which can be handed off to\nsome lieutenant.  The most important quality in a CEO is his\nvision for the company's future.  What will they build next?\nAnd in that department, there are 26 year olds who can\ncompete with anyone.\n\nIn 1970 a company president meant someone in his fifties, at\nleast.   If he had technologists working for him, they were \ntreated like a racing stable: prized, but not powerful.  But \nas technology has grown more important, the power of nerds\nhas grown to reflect it.  Now it's not enough for a CEO to\nhave someone smart he can ask about technical matters.   Increasingly,\nhe has to be that person himself.\n\nAs always, business has clung to old forms.  VCs still seem\nto want to install a legitimate-looking \ntalking head as the CEO.  But increasingly the founders of\nthe company are the real powers, and the grey-headed man\ninstalled by the VCs more like a\nmusic group's manager than a general.\n\n5. Informality\n\nIn New York, the Bubble had dramatic consequences:\nsuits went out of fashion.  They made one seem old.  So in\n1998 powerful New York types were suddenly wearing\nopen-necked shirts and khakis and oval wire-rimmed glasses,\njust like guys in Santa Clara.\n\nThe pendulum has swung back a bit, driven in part by a panicked\nreaction by the clothing industry.  But I'm betting on the\nopen-necked shirts.  And this is not as frivolous a question\nas it might seem.  Clothes are important, as all nerds can sense,\nthough they may not realize it consciously.\n\nIf you're a nerd, you can understand how important clothes are\nby asking yourself how you'd feel about a company\nthat made you wear a suit and tie to work.  The idea sounds\nhorrible, doesn't it?  In fact, horrible far out of proportion\nto the mere discomfort of wearing such clothes.  A company that\nmade programmers wear suits would have something deeply wrong\nwith it.\n\nAnd what would be wrong would be that how one presented oneself\ncounted more than the quality of one's ideas.  That's\nthe problem with formality.  Dressing up is not so much bad in\nitself.  The problem is the receptor it binds to: dressing\nup is inevitably a substitute\nfor good ideas.   It is no coincidence that technically\ninept business types are known as \"suits.\"\n\nNerds don't just happen to dress informally.  They do it too\nconsistently.  Consciously or not, they dress informally as\na prophylactic measure against stupidity.\n\n6. Nerds\n\nClothing is only the most visible battleground in the war\nagainst formality.  Nerds tend to eschew formality of any sort.\nThey're not impressed by one's job title, for example,\nor any of the other appurtenances of authority.\n\nIndeed, that's practically the definition of a nerd.  I found\nmyself talking recently to someone from Hollywood who was planning\na show about nerds.  I thought it would be useful if I\nexplained what a nerd was.  What I came up with was: someone who\ndoesn't expend any effort on marketing himself.\n\nA nerd, in other words, is someone who concentrates on substance.\nSo what's the connection between nerds and technology? Roughly\nthat you can't fool mother nature. In technical matters, you\nhave to get the right answers.  If your software miscalculates\nthe path of a space probe, you can't finesse your way out of\ntrouble by saying that your code is patriotic, or avant-garde,\nor any of the other dodges people use in nontechnical\nfields.\n\nAnd as technology becomes increasingly important in the\neconomy, nerd culture is \nrising with it.  Nerds are already\na lot cooler than they were when I was a kid.  When I was in\ncollege in the mid-1980s, \"nerd\" was still an insult.  People\nwho majored in computer science generally tried to conceal it.\nNow women ask me where they can meet nerds.  (The answer that\nsprings to mind is \"Usenix,\" but that would be like drinking\nfrom a firehose.)\n\nI have no illusions about why nerd culture is becoming\nmore accepted.  It's not because people are\nrealizing that substance is more important than marketing.\nIt's because the nerds are getting \nrich.  But that is not going\nto change.\n\n7. Options\n\nWhat makes the nerds rich, usually, is stock options.  Now there\nare moves afoot to make it harder for companies to grant   \noptions.  To the extent there's some genuine accounting abuse \ngoing on, by all means correct it.  But don't kill the golden  \ngoose.  Equity is the fuel that drives technical innovation.\n\nOptions are a good idea because (a) they're fair, and (b) they\nwork.  Someone who goes to work for a company is (one hopes)   \nadding to its value, and it's only fair to give them a share\nof it.  And as a purely practical measure, people work a lot\nharder when they have options.  I've seen that first hand.\n\nThe fact that a few crooks during the Bubble robbed their\ncompanies by granting themselves options doesn't mean options\nare a bad idea.  During the railroad boom, some executives\nenriched themselves by selling watered stock\u2014by issuing more\nshares than they said were outstanding.  But that doesn't  \nmake common stock a bad idea.  Crooks just use whatever\nmeans are available.\n\nIf there is a problem with options, it's that they reward\nslightly the wrong thing.  Not surprisingly, people do what you\npay them to. If you pay them by the hour, they'll work a lot of\nhours.  If you pay them by the volume of work done, they'll\nget a lot of work done (but only as you defined work).\nAnd if you pay them to raise the\nstock price, which is what options amount to, they'll raise\nthe stock price.\n\nBut that's not quite what you want.  What you want is to\nincrease the actual value of the company, not its market cap.\nOver time the two inevitably meet, but not always as quickly\nas options vest.  Which means options tempt employees, if\nonly unconsciously, to \"pump and dump\"\u2014to do things\nthat will make the company seem valuable.\nI found that when I was at Yahoo, I couldn't help thinking,   \n\"how will this sound to investors?\"  when I should have been\nthinking \"is this a good idea?\"\n\nSo maybe the standard option deal needs to be tweaked slightly.\nMaybe options should be replaced with something tied more\ndirectly to earnings.  It's still early days.\n\n8. Startups\n\nWhat made the options valuable, for the most part, is\nthat they were options on the stock of \nstartups.  Startups   \nwere not of course a creation of the Bubble, but they\nwere more visible during the Bubble than ever before.\n\nOne thing most people did learn about for the first time\nduring the Bubble was the startup\ncreated with the intention of selling it.\nOriginally a\nstartup meant a small company that hoped to grow into a\nbig one.  But increasingly startups are evolving into a\nvehicle for developing technology on spec.\n\nAs I wrote in\nHackers & Painters, employees seem to be most\nproductive when they're paid in proportion to the wealth\nthey generate.  And the advantage of a startup\u2014indeed,   \nalmost its raison d'etre\u2014is that it offers something\notherwise impossible to obtain: a way of measuring that.\n\nIn many businesses, it just makes more sense for companies\nto get technology by buying startups rather than developing   \nit in house.  You pay more, but there is less risk,\nand risk is what big companies don't want.  It makes the\nguys developing the technology more accountable, because they\nonly get paid if they build the winner.  And you end up   \nwith better technology, created faster, because things are\nmade in the innovative atmosphere of startups instead of \nthe bureaucratic atmosphere of big companies.\n\nOur startup, Viaweb, was built to be sold.  We were open\nwith investors about that from the start.  And we were     \ncareful to create something that could slot easily into a\nlarger company.  That is the pattern for the future.\n\n9. California\n\nThe Bubble was a California phenomenon.  When I showed up\nin Silicon Valley in 1998, I felt like an immigrant from\nEastern Europe arriving in America in 1900.  Everyone\nwas so cheerful and healthy and rich.  It seemed a new\nand improved world.\n\nThe press, ever eager to exaggerate small trends, now gives  \none the impression that Silicon Valley is a ghost town.\nNot at all.  When I drive down 101 from the airport,\nI still feel a buzz of energy, as if there were a giant\ntransformer nearby.  Real estate is still more expensive\nthan just about anywhere else in the country.  The people     \nstill look healthy, and the weather is still fabulous.\nThe future is there.\n(I say \"there\" because I moved back to the East Coast after\nYahoo.  I still wonder if this was a smart idea.)\n\nWhat makes the Bay Area superior is the attitude of the\npeople.  I notice that when I come home to Boston.\nThe first thing I see when I walk out of the airline terminal\nis the fat, grumpy guy in\ncharge of the taxi line.  I brace myself for rudeness:\nremember, you're back on the East Coast now.\n\nThe atmosphere varies from city to city, and fragile\norganisms like startups are exceedingly sensitive to such variation.\nIf it hadn't already been hijacked as a new euphemism\nfor liberal, the word to describe the atmosphere in\nthe Bay Area would be \"progressive.\"  People there are trying\nto build the future.\nBoston has MIT and Harvard, but it also has a lot of\ntruculent, unionized employees like the police who\nrecently held the Democratic National Convention for   \nransom, and a lot of people trying to be\n Thurston Howell.\nTwo sides of an obsolete coin.\n\nSilicon Valley may not be the next Paris or London, but it\nis at least the next Chicago.  For the next fifty years,   \nthat's where new wealth will come from.\n\n10. Productivity\n\nDuring the Bubble, optimistic analysts used to justify high\nprice to earnings ratios by saying that technology was going \nto increase productivity dramatically.  They were wrong about\nthe specific companies, but not so wrong about the underlying\nprinciple.  I think one of the big trends we'll see in the\ncoming century is a huge increase in productivity.\n\nOr more precisely, a huge increase in variation in\nproductivity.  Technology is a lever.  It doesn't add;     \nit multiplies.  If the present range of productivity is  \n0 to 100, introducing a multiple of 10 increases the range\nfrom 0 to 1000.\n\nOne upshot of which is that the companies of the future may\nbe surprisingly small.  I sometimes daydream about how big\nyou could grow a company (in revenues) without ever having\nmore than ten people.  What would happen if you outsourced\neverything except product development?  If you tried this experiment,\nI think you'd be surprised at how far you could get. \nAs Fred Brooks pointed out, small groups are\nintrinsically more productive, because the\ninternal friction in a group grows as the\nsquare of its size.\n\nTill quite recently, running a major company\nmeant managing an army of workers.  Our standards about how\nmany employees a company should have are still influenced by\nold patterns.  Startups are perforce small, because they can't\nafford to hire a lot of people.  But I think it's a big mistake for\ncompanies to loosen their belts as revenues increase.  The\nquestion is not whether you can afford the extra salaries.   \nCan you afford the loss in productivity that comes from making\nthe company bigger?\n\nThe prospect of technological leverage will of course raise the\nspecter of unemployment.  I'm surprised people still worry about\nthis.\nAfter centuries of supposedly job-killing innovations,\nthe number of jobs is within ten percent of the number of people\nwho want them.  This can't be a coincidence.  There must be some\nkind of balancing mechanism.\n\nWhat's New\n\nWhen one looks over these trends, is there any overall theme?\nThere does seem to be: that in the coming century, good ideas\nwill count for more.  That 26\nyear olds with good ideas will increasingly have an edge over 50\nyear olds with powerful connections.  That doing good work will\nmatter more than dressing up\u2014or advertising, which is the\nsame thing for companies.  That people\nwill be rewarded a bit more in proportion to the value of what\nthey create.\n\nIf so, this is good news indeed.\nGood ideas always tend to win eventually.  The problem is,\nit can take a very long time.\nIt took decades for relativity to be accepted, and the\ngreater part of a century to establish that central planning didn't work.\nSo even a small increase in the\nrate at which good ideas win would be a momentous\nchange\u2014big enough, probably, to justify a name like\nthe \"new economy.\"\n\n\n\n\n\nNotes\n\n[1] Actually it's hard to say now.  As Jeremy Siegel points\nout, if the value of a stock is its future earnings, you \ncan't tell if it was overvalued till you see what the earnings\nturn out to be.   While certain famous Internet stocks were\nalmost certainly overvalued in 1999, it is still hard to say for sure\nwhether, e.g., the Nasdaq index was.\n\nSiegel, Jeremy J.  \"What Is an Asset Price Bubble?  An\nOperational Definition.\"  European Financial Management,\n9:1, 2003.\n\n[2] The number of users comes from a 6/03 Nielsen\nstudy quoted on Google's site.  (You'd think they'd have\nsomething more recent.)   The revenue estimate is based on\nrevenues of $1.35 billion for the first half of 2004, as\nreported in their IPO filing.\n\nThanks to Chris Anderson, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, and Robert Morris for reading drafts of this.\n\n\n", "September 2004\n\nRemember the essays you had to write in high school?\nTopic sentence, introductory paragraph,\nsupporting paragraphs, conclusion.  The conclusion being,\nsay, that Ahab in Moby Dick was a Christ-like figure.\n\nOy.  So I'm going to try to give the other side of the\nstory: what an essay really is, and how you write one.\nOr at least, how I write one.\n\nMods\n\nThe most obvious difference between real essays and\nthe things one has to write in school is that real\nessays are not exclusively about English literature.\nCertainly schools should teach students how to\nwrite.  But due to a series of historical accidents\nthe teaching of\nwriting has gotten mixed together with the study\nof literature.  And so all over the country students are\nwriting not about how a baseball team with a small budget\nmight compete with the Yankees, or the role of color in\nfashion, or what constitutes a good dessert, but about\nsymbolism in Dickens.\n\nWith the result that writing is made to seem boring and\npointless.  Who cares about symbolism in Dickens?\nDickens himself would be more interested in an essay\nabout color or baseball.\n\nHow did things get this way?  To answer that we have to go back\nalmost a thousand years.  Around 1100, Europe at last began to\ncatch its breath after centuries of chaos, and once they\nhad the luxury of curiosity they rediscovered\nwhat we call \"the classics.\"  The effect was rather as if\nwe were visited by beings from another solar system.\nThese earlier civilizations were so much more sophisticated\nthat for the next several centuries the main work of\nEuropean scholars, in almost every field, was to assimilate\nwhat they knew.\n\nDuring this period the study of ancient texts acquired great\nprestige.  It seemed the essence of what scholars did.  As\nEuropean scholarship gained momentum it became less and less important;\nby 1350\nsomeone who wanted to learn about science could find better\nteachers than Aristotle in his own era. [1]\nBut schools change slower than scholarship.  In the\n19th century the study of ancient texts was still the backbone\nof the curriculum.\n\nThe time was then ripe for the question: if the study of\nancient texts is a valid field for scholarship, why not modern\ntexts?  The answer, of course, is that the original raison d'etre\nof classical scholarship was a kind of intellectual archaeology that\ndoes not need to be done in the case of contemporary authors.\nBut for obvious reasons no one wanted to give that answer.\nThe archaeological work being mostly done, it implied that\nthose studying the classics were, if not wasting their\ntime, at least working on problems of minor importance.\n\nAnd so began the study of modern literature.  There was a good\ndeal of resistance at first.\nThe first courses in English literature\nseem to have been offered by the newer colleges, particularly\nAmerican ones.  Dartmouth, the University of Vermont, Amherst,\nand University College, London\ntaught English literature in the 1820s.\n\nBut Harvard didn't have a professor of English literature until\n1876, and Oxford not till 1885. (Oxford had a chair of Chinese before\nit had one of English.) [2]\n\nWhat tipped the scales, at least in the US, seems to have\nbeen the idea that professors should do research as well\nas teach.  This idea (along with the PhD, the department, and\nindeed the whole concept of the modern university) was imported\nfrom Germany in the late 19th century. Beginning at\nJohns Hopkins in 1876, the new model spread rapidly.\n\nWriting was one of the casualties.  Colleges had long taught\nEnglish composition.  But how do you do research on composition?\nThe professors who taught math could be required to do original\nmath, the professors who taught history could be required to\nwrite scholarly articles about history, but what about the  \nprofessors who taught rhetoric or composition?  What should they\ndo research on?  The closest thing seemed to be English literature. [3]\n\nAnd so in the late 19th century the teaching of writing was inherited\nby English professors.  This had two drawbacks:\n(a) an expert on literature need not himself be a good writer,\nany more than an art historian has to be a good painter, and (b)\nthe subject of writing now tends to be literature, since that's\nwhat the professor is interested in.\n\nHigh schools imitate universities.  The seeds of our miserable\nhigh school experiences were sown in 1892, when\nthe National Education Association\n\"formally recommended that literature\nand composition be unified in the high school course.\" [4]\nThe 'riting component of the 3 Rs then morphed into English,\nwith the bizarre consequence that high school students now\nhad to write about English literature-- to write, without\neven realizing it, imitations of whatever\nEnglish professors had been publishing in their journals a   \nfew decades before.\n\nIt's no wonder if this seems to the\nstudent a pointless exercise, because we're now three steps\nremoved from real work: the students are imitating English\nprofessors, who are imitating classical scholars, who are\nmerely the inheritors of a tradition growing out of what\nwas, 700 years ago, fascinating and urgently needed work.\n\nNo Defense\n\nThe other big difference between a real essay and the things\nthey make you write in school is that a real essay doesn't\ntake a position and then defend it.  That principle,\nlike the idea that we ought to be writing about literature,\nturns out to be another intellectual hangover of long\nforgotten origins.\n\nIt's often mistakenly believed that\nmedieval universities were mostly seminaries.  In fact they\nwere more law schools.  And at least in our tradition\nlawyers are advocates, trained to take\neither side of an argument and make as good a case for it\nas they can.\nWhether cause or effect, this spirit pervaded\nearly universities.  The study of rhetoric, the art of arguing\npersuasively, was a third of the undergraduate curriculum. [5]\nAnd after the lecture the most common form\nof discussion was the disputation.  This is at least\nnominally preserved in our present-day thesis defense:\nmost people treat the words thesis\nand dissertation as interchangeable, but originally, at least,\na thesis was a position one took and the dissertation was\nthe argument by which one defended it.\n\nDefending a position may be a necessary evil in a\nlegal dispute, but it's not the best way to get at the truth,\nas I think lawyers would be the first to admit.  It's not\njust that you miss subtleties this way.\nThe real problem is that you can't change the question.\n\nAnd yet this principle is built into the very structure of\nthe things they teach you to write in high school.  The topic  \nsentence is your thesis, chosen in advance, the supporting\nparagraphs the blows you strike in the conflict, and the\nconclusion-- uh, what is the conclusion?  I was never sure\nabout that in high school.  It seemed as if we were just\nsupposed to restate what we said in the first paragraph,\nbut in different enough words that no one could tell.\nWhy bother?\nBut when you understand the origins\nof this sort of \"essay,\" you can see where the\nconclusion comes from.  It's the concluding remarks to the   \njury.\n\nGood writing should be convincing, certainly, but it\nshould be convincing because you got the right answers,\nnot because you did a good job of arguing.  When I give a \ndraft of an essay to friends, there are two things\nI want to know: which parts bore them, and which seem   \nunconvincing.  The boring bits can usually be fixed by   \ncutting.  But I don't try to fix the unconvincing bits by\narguing more cleverly.  I need to talk the matter over.\n\nAt the very least I must have explained something badly.  In\nthat case, in the course of the conversation I'll be forced\nto come up a with a clearer explanation, which I can just\nincorporate in the essay.  More often than not I have\nto change what I was saying as well.\nBut the aim is never to be convincing per se.\nAs the reader gets smarter, convincing and true become identical,\nso if I can convince smart readers I must be near the truth.\n\nThe sort of writing that attempts to persuade may be\na valid (or at least inevitable) form, but it's historically\ninaccurate to call it an essay.  An essay is \nsomething else.\n\nTrying\n\nTo understand what a real essay is, we have to\nreach back into history again, though this time not so far.\nTo Michel de Montaigne, who in 1580 published a book of\nwhat he called \"essais.\" He was\ndoing something quite different from what lawyers do, and\nthe difference is embodied in the name.  Essayer is the French\nverb meaning \"to try\"\nand an essai is an attempt.  An essay is something you\nwrite to try to figure something out.\n\nFigure out what?  You don't know yet.  And so you can't begin with a\nthesis, because you don't have one, and may never have\none.  An essay doesn't begin with a statement, but with a\nquestion.  In a real essay, you don't take a position and\ndefend it.  You notice a door that's ajar, and you open it and\nwalk in to see what's inside.\n\nIf all you want to do is figure things out, why do you need\nto write anything, though?  Why not just sit and think?  Well,\nthere precisely is Montaigne's great discovery.  Expressing    \nideas helps to form them.  Indeed, helps is far too weak a\nword.  Most of what ends up in my essays I only\nthought of when I sat down to write them.  That's why I   \nwrite them.\n\nIn the things you write in school you are, in theory,\nmerely explaining yourself to the reader.\nIn a real essay you're writing for yourself.\nYou're thinking out loud.\n\nBut not quite.\nJust as inviting people over forces you to\nclean up your apartment, writing something that\nother people will read forces you to think well.  So it\ndoes matter to have an audience.  The things I've written\njust for myself are no good.\nThey tend to peter out.  When I run into\ndifficulties, I find I conclude with a few vague\nquestions and then drift off to get a cup of tea.\n\nMany published essays peter out in the same way.\nParticularly the sort written by the staff writers \nof newsmagazines.  Outside writers tend to supply\neditorials of the defend-a-position variety, which\nmake a beeline toward a rousing (and\nforeordained) conclusion.   But the staff writers feel\nobliged to write something \"balanced.\"\nSince they're writing for a popular magazine, they start with the\nmost radioactively controversial questions, from which-- because\nthey're writing for a popular magazine-- they\nthen proceed to recoil in terror.\nAbortion, for or against?\nThis group says one thing.  That group says\nanother.  One thing is certain: the question is a\ncomplex one.  (But don't get mad at us.  We didn't\ndraw any conclusions.)\n\nThe River\n\nQuestions aren't enough.  An essay has to come up with answers.\nThey don't always, of course.  Sometimes you start with a\npromising question and get nowhere.  But those you don't   \npublish.  Those are like experiments that get inconclusive\nresults.   An essay you publish ought to tell the reader       \nsomething he didn't already know.\n\nBut what you tell him doesn't matter, so long as    \nit's interesting.  I'm sometimes accused of meandering.\nIn defend-a-position writing that would be a flaw.\nThere you're not concerned with truth.  You already\nknow where you're going, and you want to go straight there,\nblustering through obstacles, and hand-waving\nyour way across swampy ground.  But that's not what\nyou're trying to do in an essay.  An essay is supposed to\nbe a search for truth.  It would be suspicious if it didn't\nmeander.\n\nThe Meander (aka Menderes) is a river in Turkey.\nAs you might expect, it winds all over the place.\nBut it doesn't do this out of frivolity.\nThe path it has discovered is the most\neconomical route to the sea. [6]\n\nThe river's algorithm is simple.  At each step, flow down.\nFor the essayist this translates to: flow interesting.   \nOf all the places to go next, choose the most interesting.\nOne can't have quite as little foresight as a river.  I always\nknow generally what I want to write about.\nBut not the\nspecific conclusions I want to reach; from paragraph to\nparagraph I let the ideas take their course.\n\nThis doesn't always work.  Sometimes, like a river,\none runs up against a wall.  Then I do the same thing the river does:\nbacktrack.  At one point in this essay\nI found that after following a certain thread I ran out\nof ideas.  I had to go back seven paragraphs and start over\nin another direction.\n\nFundamentally an essay is a train of thought-- but a cleaned-up\ntrain of thought, as dialogue is cleaned-up conversation.\nReal thought, like real conversation, is full of false starts.\nIt would be exhausting to read.  You need to \ncut and fill to\nemphasize the central thread, like an\nillustrator inking over a pencil drawing.  But don't\nchange so much that you lose the spontaneity of the original.\n\nErr on the side of the river.  An essay is not a reference\nwork.  It's not something you read looking for a specific\nanswer, and feel cheated if you don't find it.  I'd much\nrather read an essay that went off in an unexpected but\ninteresting direction than one that plodded dutifully along\na prescribed course.\n\nSurprise\n\nSo what's interesting?  For me, interesting means surprise.\nInterfaces, as Geoffrey James has said, should follow the principle of\nleast astonishment.   A button that looks like it will make a\nmachine stop should make it stop, not speed up.  Essays    \nshould do the opposite.  Essays should aim for maximum\nsurprise.\n\nI was afraid of flying for a long time and could only travel\nvicariously.  When friends came back from faraway places,\nit wasn't just out of politeness that I asked\nwhat they saw.  I really wanted to know.  And I found\nthe best way to get information out of them was to ask\nwhat surprised them.  How was the place different from what\nthey expected?  This is an extremely useful question.\nYou can ask it of the most unobservant people, and it will \nextract information they didn't even know they were\nrecording.\n\nSurprises are things that you not only didn't know, but that\ncontradict things you\nthought you knew.  And so they're the most valuable sort of\nfact you can get.  They're like a food that's not merely\nhealthy, but counteracts the unhealthy effects of things\nyou've already eaten.\n\nHow do you find surprises?  Well, therein lies half\nthe work of essay writing.  (The other half is expressing\nyourself well.)   The trick is to use yourself as a\nproxy for the reader.  You should only write about things\nyou've thought about a lot.  And anything you come across\nthat surprises you, who've thought about the topic a lot,\nwill probably surprise most readers.\n\nFor example, in a recent \nessay I pointed out that because\nyou can only judge computer programmers by working with\nthem, no one knows who the best programmers are overall.\nI didn't realize this when I began\nthat essay, and even now I find it kind of weird.  That's\nwhat you're looking for.\n\nSo if you want to write essays, you need two ingredients:\na few topics you've thought about a lot, and\nsome ability to ferret out the unexpected.\n\nWhat should you think about?  My guess is that it\ndoesn't matter-- that anything can be interesting if you get deeply\nenough into it.  One possible exception might be things\nthat have deliberately had all the variation sucked out of them,\nlike working in fast food.  In retrospect, was there\nanything interesting about working at Baskin-Robbins?\nWell, it was interesting how important color was\nto the customers.  Kids a certain age would point into\nthe case and say that they wanted yellow.  Did they want \nFrench Vanilla or Lemon?  They would just look at you   \nblankly.  They wanted yellow.  And then there was the  \nmystery of why the perennial favorite Pralines 'n' Cream   \nwas so appealing.  (I think now it was the salt.)\n\nAnd the difference in the way fathers and\nmothers bought ice cream for their kids: the fathers\nlike benevolent kings bestowing largesse, the mothers\nharried, giving in to pressure.\nSo, yes, there does seem to be some material even in\nfast food.\n\nI didn't notice those things at the time, though.  At sixteen\nI was about as observant as a lump of rock.  I can see more now in\nthe fragments of memory I preserve of that age than I could see\nat the time from having it all happening live, right in front of me.\n\nObservation\n\nSo the ability to ferret out the unexpected must not merely be an\ninborn one.  It must be something you can learn.\nHow do you learn it?\n\nTo some extent it's like learning history.\nWhen you first read\nhistory, it's just a whirl of names\nand dates.  \nNothing seems to stick.  But the more you learn, the more hooks you have\nfor new facts to stick onto-- which means\nyou accumulate knowledge at an exponential rate.  Once you\nremember that Normans conquered\nEngland in 1066, it will catch your attention when you hear\nthat other Normans conquered southern Italy at about the same time.\nWhich will make you wonder about Normandy, and take note\nwhen a third book mentions that Normans\nwere not, like most of what is now\ncalled France, tribes that flowed in as the Roman empire collapsed,\nbut Vikings (norman = north man) who arrived\nfour centuries later in 911.  Which makes\nit easier to remember that Dublin was also established by\nVikings in the 840s.  Etc, etc squared.\n\nCollecting surprises is a similar process.\nThe more anomalies you've seen, the more easily you'll notice\nnew ones.   Which means, oddly enough, that as you grow older,\nlife should become more and more surprising.  When I was a\nkid, I used to think adults had it all figured out.\nI had it backwards.  Kids are the ones who have it all figured  \nout.  They're just mistaken.\n\nWhen it comes to surprises, the rich get richer.  But\n(as with wealth) there\nmay be habits of mind that will help the process along.  It's\ngood to have a habit of asking questions, especially questions\nbeginning with Why.\nBut not in the random way that three year\nolds ask why.  There are an infinite number of questions.\nHow do you find the fruitful ones?\n\nI find it especially\nuseful to ask why about things that seem wrong.\nFor example, why should there be a connection between\nhumor and misfortune?  Why do we find it funny when a\ncharacter, even one we like, slips on a banana peel?\nThere's a whole essay's worth of surprises there for sure.\n\nIf you want to notice things that seem wrong, you'll find a\ndegree of skepticism helpful.  I take it as an axiom\nthat we're only achieving 1% of what we could.\nThis helps counteract the rule that gets beaten into our\nheads as children: that things are the way they are because\nthat is how things have to be.\nFor example, everyone I've talked to while writing this essay  \nfelt the same about\nEnglish classes-- that the whole process seemed pointless.\nBut none of us had the balls at the time to hypothesize that\nit was, in fact, all a mistake.\nWe all thought there was just something we weren't getting.\n\nI have a hunch you want to pay attention not just to things\nthat seem wrong, but things that seem wrong in a humorous way.  \nI'm always pleased when I see someone laugh as they\nread a draft of an essay.  But why should I be?  I'm aiming\nfor good ideas.  Why should good ideas be funny?\nThe connection may be surprise.\nSurprises make us laugh, and surprises are what\none wants to deliver.\n\nI write down things that surprise me in notebooks.  I never\nactually get around to reading them and using\nwhat I've written, but I do tend to\nreproduce the same thoughts later.  So the main value\nof notebooks may be what writing things down leaves in your\nhead.\n\nPeople trying to be cool will find themselves at a disadvantage\nwhen collecting surprises.  To be surprised is to be mistaken.\nAnd the essence of cool, as any fourteen year old could tell\nyou, is nil admirari.  When you're mistaken, don't\ndwell on it; just act like nothing's wrong and maybe no one\nwill notice.\n\nOne of the keys to coolness is to avoid situations where\ninexperience may make you look foolish. \nIf you want to find surprises you should do the opposite.\nStudy lots of different things,\nbecause some of the most interesting surprises are unexpected\nconnections between different fields.  For example, \njam, bacon, pickles, and cheese, which are among the most pleasing\nof foods, were all originally intended as methods of preservation.\nAnd so were books and paintings.\n\nWhatever you study, include history-- but social and economic\nhistory, not political history.  History seems to me so important\nthat it's misleading to treat it as a mere field of study.\nAnother way to describe it is all the data we have so far.\n\nAmong other things, studying history gives one confidence that\nthere are good ideas waiting to be discovered right under our noses.\nSwords evolved during the Bronze Age out of daggers, which\n(like their flint predecessors) had a hilt separate from the\nblade.  Because swords are longer\nthe hilts kept breaking off.  But it took five hundred years\nbefore someone thought of casting hilt and blade as one\npiece.\n\nDisobedience\n\nAbove all, make a habit of paying\nattention to things you're not supposed to, either because \nthey're \"inappropriate,\" \nor not important, or not what you're\nsupposed to be working on.  If you're curious about something,\ntrust your instincts.\nFollow the threads that attract your\nattention.  If there's something you're really interested\nin, you'll find they have an uncanny way of leading back to\nit anyway, just as the conversation of people who are especially\nproud of something always tends to lead back to it.\n\nFor example, I've always been fascinated by comb-overs, especially\nthe extreme sort that\nmake a man look as if he's wearing a beret made of his own hair.\nSurely this is a lowly sort of thing to be interested in-- the\nsort of superficial quizzing\nbest left to teenage girls.  And yet there is something underneath.\nThe key question, I realized, is how does the comber-over not\nsee how odd he looks?\nAnd the answer is that he got to look that way incrementally.\nWhat began as combing his hair a little carefully over a\nthin patch has gradually, over 20 years, grown into a monstrosity.\nGradualness is very powerful.  And that power can be\nused for constructive purposes too: just as you can trick\nyourself into looking like a freak, you can trick yourself into\ncreating something so grand that you would never have dared to\nplan such a thing.  Indeed, this is just how most good\nsoftware gets created.  You start by writing a stripped-down\nkernel (how hard can it be?) and gradually it grows\ninto a complete operating system.  Hence the next leap: could\nyou do the same thing in painting, or in a novel?\n\nSee what you can extract from a frivolous question?\nIf there's one piece of advice I would give about writing essays,\nit would be: don't do as you're told.\nDon't believe what you're supposed to.\nDon't write the\nessay readers expect; one learns nothing from\nwhat one expects.\nAnd\ndon't write the way they taught you to in school.\n\nThe most important sort of disobedience is to write\nessays at all.  Fortunately, this sort of disobedience shows\nsigns of becoming \nrampant. \nIt used to be that only a tiny\nnumber of officially approved writers were allowed to\nwrite essays.  Magazines published few of them, and judged\nthem less by what they said than who wrote them;\na magazine might publish a story by an\nunknown writer if it was good enough, but if they published\nan essay on x it had to be by someone who was at least\nforty and whose job title had x in it.  Which is a problem,\nbecause there are a lot of things insiders can't say precisely\nbecause they're insiders.\n\nThe Internet is changing that.\nAnyone can publish an essay on the Web, and it gets judged, as any\nwriting should, by what it says, not who wrote it.\nWho are you to write about x?  You are whatever you wrote.\n\nPopular magazines made the period between the spread\nof literacy and the arrival of TV the golden age of the\nshort story.\nThe Web may well make this the golden age of the essay.\nAnd that's certainly not something I realized when\nI started writing this.\n\n\n\nNotes\n\n[1] I'm thinking of Oresme (c. 1323-82).  But it's hard to pick\na date, because there was a sudden drop-off in scholarship\njust as Europeans finished assimilating classical science.\nThe cause may have been the plague of 1347; the trend in\nscientific progress matches the population curve.\n\n[2] Parker, William R. \"Where Do College English Departments\nCome From?\" College English 28 (1966-67), pp. 339-351.\nReprinted in Gray, Donald J. (ed). The Department of\nEnglish at Indiana University Bloomington 1868-1970. Indiana\nUniversity Publications.\n\nDaniels, Robert V. The University of Vermont: The First\nTwo Hundred Years. University of Vermont, 1991.\n\nMueller, Friedrich M. Letter to the Pall Mall\nGazette. 1886/87. Reprinted in Bacon, Alan (ed).\nThe Nineteenth-Century\nHistory of English Studies. Ashgate, 1998.\n\n[3] I'm compressing the story a bit.\nAt first\nliterature took a back seat to philology, which (a) seemed more \nserious and (b) was popular in Germany, where many of the\nleading scholars of that generation had been trained.\n\nIn some cases the writing teachers were transformed\nin situ into English professors.\nFrancis James Child, who had been Boylston Professor\nof Rhetoric at Harvard since 1851,\nbecame in 1876 the university's first professor of English.\n\n[4] Parker, op. cit., p. 25.\n\n[5] The undergraduate curriculum or trivium (whence\n\"trivial\") consisted of Latin grammar, rhetoric, and logic.  \nCandidates for masters' degrees went on to study the\nquadrivium of arithmetic, geometry, music, and astronomy.\nTogether these were the seven liberal arts.\n\nThe study of rhetoric was inherited directly from Rome, where\nit was considered the most important\nsubject.  It would not be far from the truth to say that  \neducation in the classical world\nmeant training landowners' sons\nto speak well enough to defend their interests\nin political and legal disputes.\n\n[6] Trevor Blackwell points out that this\nisn't strictly true, because the outside  \nedges of curves erode faster.\n\n\nThanks to Ken Anderson, Trevor Blackwell, Sarah Harlin, Jessica\nLivingston, Jackie McDonough, and Robert Morris for reading drafts of\nthis.\n\n\n", "August 2004\n\nIn a recent talk I said something that upset a lot of\npeople: that you could get smarter programmers to work on\na Python project than you could to work on a Java project.\n\nI didn't mean by this that Java programmers are dumb.  I\nmeant that Python programmers are smart. It's a lot of\nwork to learn a new programming language.  And people don't\nlearn Python because it will get them a job; they learn it\nbecause they genuinely like to program and aren't satisfied with the languages they\nalready know.\n\nWhich makes them exactly the kind of programmers\ncompanies should want to hire.  Hence what, for lack of a better\nname, I'll call the Python paradox: if a company chooses to write\nits software in a comparatively esoteric language, they'll be able \nto hire better programmers, because they'll attract only those\nwho cared enough to learn it.  And for \nprogrammers the paradox is even more pronounced: the language\nto learn, if you want to get a good job, is a language that\npeople don't learn merely to get a job.\n\nOnly a few companies have been smart enough to realize this \nso far.  But there is a kind of selection going on here too: they're \nexactly the companies programmers would\nmost like to work for.  Google, for example.  When they     \nadvertise Java programming jobs, they also want Python experience.\n\nA friend of mine who knows nearly all the widely used languages\nuses Python for most of his projects.  He says the main reason\nis that he likes the way source code looks.  That may seem\na frivolous reason to choose one language over another.\nBut it is not so frivolous as it sounds: when you program,\nyou spend more time reading code than writing it.\nYou push blobs of source code around the way a sculptor does\nblobs of clay.  So a language that makes source code ugly is\nmaddening to an exacting programmer, as clay full of lumps\nwould be to a sculptor.\n\nAt the mention of ugly source code, people will of course think\nof Perl.  But the superficial ugliness of Perl is not the sort\nI mean.  Real ugliness is not harsh-looking\nsyntax, but having to build programs out of the wrong\nconcepts.  Perl may look like a cartoon character swearing,\nbut there are \ncases where it surpasses Python conceptually.\n\nSo far, anyway. Both languages are of course \nmoving targets.  But they\nshare, along with Ruby (and Icon, and Joy, and J, and Lisp,\nand Smalltalk) the fact that\nthey're created by, and used by, people who really care about\nprogramming.   And those tend to be the ones who do it well.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nJuly 2004\n", "May 2004\n\nWhen people care enough about something to do it well, those who\ndo it best tend to be far better than everyone else.  There's a\nhuge gap between Leonardo and second-rate contemporaries like\nBorgognone.  You see the same gap between Raymond Chandler and the\naverage writer of detective novels.  A top-ranked professional chess\nplayer could play ten thousand games against an ordinary club player\nwithout losing once.\n\nLike chess or painting or writing novels, making money is a very\nspecialized skill.   But for some reason we treat this skill\ndifferently.  No one complains when a few people surpass all the\nrest at playing chess or writing novels, but when a few people make\nmore money than the rest, we get editorials saying this is wrong.\n\nWhy?  The pattern of variation seems no different than for any other\nskill.  What causes people to react so strongly when the skill is\nmaking money?\n\nI think there are three reasons we treat making money as different:\nthe misleading model of wealth we learn as children; the disreputable\nway in which, till recently, most fortunes were accumulated; and\nthe worry that great variations in income are somehow bad for\nsociety.  As far as I can tell, the first is mistaken, the second\noutdated, and the third empirically false.  Could it be that, in a\nmodern democracy, variation in income is actually a sign of health?\n\nThe Daddy Model of Wealth\n\nWhen I was five I thought electricity was created by electric\nsockets.  I didn't realize there were power plants out there\ngenerating it.  Likewise, it doesn't occur to most kids that wealth\nis something that has to be generated.  It seems to be something\nthat flows from parents.\n\nBecause of the circumstances in which they encounter it, children\ntend to misunderstand wealth.  They confuse it with money.  They\nthink that there is a fixed amount of it.  And they think of it as\nsomething that's distributed by authorities (and so should be\ndistributed equally), rather than something that has to be created\n(and might be created unequally).\n\nIn fact, wealth is not money.  Money is just a convenient way of\ntrading one form of wealth for another.  Wealth is the underlying\nstuff\u2014the goods and services we buy.  When you travel to a\nrich or poor country, you don't have to look at people's bank\naccounts to tell which kind you're in.  You can see\nwealth\u2014in buildings and streets, in the clothes and the health\nof the people.\n\nWhere does wealth come from?  People make it.  This was easier to\ngrasp when most people lived on farms, and made many of the things\nthey wanted with their own hands.  Then you could see in the house,\nthe herds, and the granary the wealth that each family created.  It\nwas obvious then too that the wealth of the world was not a fixed\nquantity that had to be shared out, like slices of a pie.  If you\nwanted more wealth, you could make it.\n\nThis is just as true today, though few of us create wealth directly\nfor ourselves (except for a few vestigial domestic tasks).  Mostly\nwe create wealth for other people in exchange for money, which we\nthen trade for the forms of wealth we want. \n[1]\n\nBecause kids are unable to create wealth, whatever they have has\nto be given to them.  And when wealth is something you're given,\nthen of course it seems that it should be distributed equally.\n[2]\nAs in most families it is.  The kids see to that.  \"Unfair,\" they\ncry, when one sibling gets more than another.\n\nIn the real world, you can't keep living off your parents.  If you\nwant something, you either have to make it, or do something of\nequivalent value for someone else, in order to get them to give you\nenough money to buy it.  In the real world, wealth is (except for\na few specialists like thieves and speculators) something you have\nto create, not something that's distributed by Daddy.  And since\nthe ability and desire to create it vary from person to person,\nit's not made equally.\n\nYou get paid by doing or making something people want, and those\nwho make more money are often simply better at doing what people\nwant.  Top actors make a lot more money than B-list actors.  The\nB-list actors might be almost as charismatic, but when people go\nto the theater and look at the list of movies playing, they want\nthat extra oomph that the big stars have.\n\nDoing what people want is not the only way to get money, of course.\nYou could also rob banks, or solicit bribes, or establish a monopoly.\nSuch tricks account for some variation in wealth, and indeed for\nsome of the biggest individual fortunes, but they are not the root\ncause of variation in income.  The root cause of variation in income,\nas Occam's Razor implies, is the same as the root cause of variation\nin every other human skill.\n\nIn the United States, the CEO of a large public company makes about\n100 times as much as the average person. \n[3]\nBasketball players\nmake about 128 times as much, and baseball players 72 times as much.\nEditorials quote this kind of statistic with horror.  But I have\nno trouble imagining that one person could be 100 times as productive\nas another.  In ancient Rome the price of slaves varied by\na factor of 50 depending on their skills. \n[4]\nAnd that's without\nconsidering motivation, or the extra leverage in productivity that\nyou can get from modern technology.\n\nEditorials about athletes' or CEOs' salaries remind me of early\nChristian writers, arguing from first principles about whether the\nEarth was round, when they could just walk outside and check.\n[5]\nHow much someone's work is worth is not a policy question.  It's\nsomething the market already determines.\n\n\"Are they really worth 100 of us?\" editorialists ask.  Depends on\nwhat you mean by worth.  If you mean worth in the sense of what\npeople will pay for their skills, the answer is yes, apparently.\n\nA few CEOs' incomes reflect some kind of wrongdoing.  But are there\nnot others whose incomes really do reflect the wealth they generate?\nSteve Jobs saved a company that was in a terminal decline.  And not\nmerely in the way a turnaround specialist does, by cutting costs;\nhe had to decide what Apple's next products should be.  Few others\ncould have done it.  And regardless of the case with CEOs, it's\nhard to see how anyone could argue that the salaries of professional\nbasketball players don't reflect supply and demand.\n\nIt may seem unlikely in principle that one individual could really\ngenerate so much more wealth than another.  The key to this mystery\nis to revisit that question, are they really worth 100 of us?\nWould a basketball team trade one of their players for 100\nrandom people?  What would Apple's next product look like if you\nreplaced Steve Jobs with a committee of 100 random people? \n[6]\nThese\nthings don't scale linearly.  Perhaps the CEO or the professional\nathlete has only ten times (whatever that means) the skill and\ndetermination of an ordinary person.  But it makes all the difference\nthat it's concentrated in one individual.\n\nWhen we say that one kind of work is overpaid and another underpaid,\nwhat are we really saying?  In a free market, prices are determined\nby what buyers want.  People like baseball more than  poetry, so\nbaseball players make more than poets.  To say that a certain kind\nof work is underpaid is thus identical with saying that people want\nthe wrong things.\n\nWell, of course people want the wrong things.  It seems odd to be\nsurprised by that.  And it seems even odder to say that it's\nunjust that certain kinds of work are underpaid. \n[7]\nThen\nyou're saying that it's unjust that people want the wrong things.\nIt's  lamentable that people prefer reality TV and corndogs to\nShakespeare and steamed vegetables, but unjust?  That seems like\nsaying that blue is heavy, or that up is circular.\n\nThe appearance of the word \"unjust\" here is the unmistakable spectral\nsignature of the Daddy Model.  Why else would this idea occur in\nthis odd context?  Whereas if the speaker were still operating on\nthe Daddy Model, and saw wealth as something that flowed from a\ncommon source and had to be shared out, rather than something\ngenerated by doing what other people wanted, this is exactly what\nyou'd get on noticing that some people made much more than others.\n\nWhen we talk about \"unequal distribution of income,\" we should\nalso ask, where does that income come from?\n[8]\nWho made the wealth\nit represents?  Because to the extent that income varies simply\naccording to how much wealth people create, the distribution may\nbe unequal, but it's hardly unjust.\n\nStealing It\n\nThe second reason we tend to find great disparities of wealth\nalarming is that for most of human history the usual way to accumulate\na fortune was to steal it: in pastoral societies by cattle raiding;\nin agricultural societies by appropriating others' estates in times\nof war, and taxing them in times of peace.\n\nIn conflicts, those on the winning side would receive the estates\nconfiscated from the losers.  In England in the 1060s, when William\nthe Conqueror distributed the estates of the defeated Anglo-Saxon\nnobles to his followers, the conflict was military.  By the 1530s,\nwhen Henry VIII distributed the estates of the monasteries to his\nfollowers, it was mostly political. \n[9]\nBut the principle was the\nsame.  Indeed, the same principle is at work now in Zimbabwe.\n\nIn more organized societies, like China, the ruler and his officials\nused taxation instead of confiscation.  But here too we see the\nsame principle: the way to get rich was not to create wealth, but\nto serve a ruler powerful enough to appropriate it.\n\nThis started to change in Europe with the rise of the middle class.\nNow we think of the middle class as people who are neither rich nor\npoor, but originally they were a distinct group.  In a feudal\nsociety, there are just two classes: a warrior aristocracy, and the\nserfs who work their estates.  The middle class were a new, third\ngroup who lived in towns and supported themselves by manufacturing\nand trade.\n\nStarting in the tenth and eleventh centuries, petty nobles and\nformer serfs banded together in towns that gradually became powerful\nenough to ignore the local feudal lords. \n[10]\nLike serfs, the middle\nclass made a living largely by creating wealth.  (In port cities\nlike Genoa and Pisa, they also engaged in piracy.) But unlike serfs\nthey had an incentive to create a lot of it.  Any wealth a serf\ncreated belonged to his master.  There was not much point in making\nmore than you could hide.  Whereas the independence of the townsmen\nallowed them to keep whatever wealth they created.\n\nOnce it became possible to get rich by creating wealth, society as\na whole started to get richer very rapidly.  Nearly everything we\nhave was created by the middle class.  Indeed, the other two classes\nhave effectively disappeared in industrial societies, and their\nnames been given to either end of the middle class.  (In the original\nsense of the word, Bill Gates is middle class.)\n\nBut it was not till the Industrial Revolution that wealth creation\ndefinitively replaced corruption as the best way to get rich.  In\nEngland, at least, corruption only became unfashionable (and in\nfact only started to be called \"corruption\") when there started to\nbe other, faster ways to get rich.\n\nSeventeenth-century England was much like the third world today,\nin that government office was a recognized route to wealth.  The\ngreat fortunes of that time still derived more from what we would\nnow call corruption than from commerce. \n[11]\nBy the nineteenth\ncentury that had changed.  There continued to be bribes, as there\nstill are everywhere, but politics had by then been left to men who\nwere driven more by vanity than greed.  Technology had made it\npossible to create wealth faster than you could steal it.  The\nprototypical rich man of the nineteenth century was not a courtier\nbut an industrialist.\n\nWith the rise of the middle class, wealth stopped being a zero-sum\ngame.  Jobs and Wozniak didn't have to make us poor to make themselves\nrich.  Quite the opposite: they created things that made our lives\nmaterially richer.  They had to, or we wouldn't have paid for them.\n\nBut since for most of the world's history the main route to wealth\nwas to steal it, we tend to be suspicious of rich people.  Idealistic\nundergraduates find their unconsciously preserved child's model of\nwealth confirmed by eminent writers of the past.  It is a case of\nthe mistaken meeting the outdated.\n\n\"Behind every great fortune, there is a crime,\" Balzac wrote.  Except\nhe didn't.  What he actually said was that a great fortune with no\napparent cause was probably due to a crime well enough executed\nthat it had been forgotten.  If we were talking about Europe in\n1000, or most of the third world today, the standard misquotation\nwould be spot on.  But Balzac lived in nineteenth-century France,\nwhere the Industrial Revolution was well advanced.  He knew you\ncould make a fortune without stealing it.  After all, he did himself,\nas a popular novelist.\n[12]\n\nOnly a few countries (by no coincidence, the richest ones) have\nreached this stage.  In most, corruption still has the upper hand.\nIn most, the fastest way to get wealth is by stealing it.  And so\nwhen we see increasing differences in income in a rich country,\nthere is a tendency to worry that it's sliding back toward becoming\nanother Venezuela.  I think the opposite is happening. I think\nyou're seeing a country a full step ahead of Venezuela.\n\nThe Lever of Technology\n\nWill technology increase the gap between rich and poor?  It will\ncertainly increase the gap between the productive and the unproductive.\nThat's the whole point of technology.   With a tractor an energetic\nfarmer could plow six times as much land in a day as he could with\na team of horses.  But only if he mastered a new kind of farming.\n\nI've seen the lever of technology grow visibly in my own time.  In\nhigh school I made money by mowing lawns and scooping ice cream at\nBaskin-Robbins.  This was the only kind of work available at the\ntime.  Now high school kids could write software or design web\nsites.  But only some of them will; the rest will still be scooping\nice cream.\n\nI remember very vividly when in 1985 improved technology made it\npossible for me to buy a computer of my own.  Within months I was\nusing it to make money as a freelance programmer.  A few years\nbefore, I couldn't have done this.  A few years before, there was\nno such thing as a freelance programmer.  But Apple created\nwealth, in the form of powerful, inexpensive computers, and programmers\nimmediately set to work using it to create more.\n\nAs this example suggests, the rate at which technology increases\nour productive capacity is probably exponential, rather than linear.\nSo we should expect to see ever-increasing variation in individual\nproductivity as time goes on.   Will that increase the gap between\nrich and the poor?  Depends which gap you mean.\n\nTechnology should increase the gap in income, but it seems to\ndecrease other gaps.  A hundred years ago, the rich led a different\nkind of life from ordinary people.  They lived in houses\nfull of servants, wore elaborately uncomfortable clothes, and\ntravelled about in carriages drawn by teams of horses which themselves\nrequired their own houses and servants.  Now, thanks to technology,\nthe rich live more like the average person.\n\nCars are a good example of why.  It's possible to buy expensive,\nhandmade cars that cost hundreds of thousands of dollars.  But there\nis not much point.  Companies make more money by building a large\nnumber of ordinary cars than a small number of expensive ones.  So\na company making a mass-produced car can afford to spend a lot more\non its design.  If you buy a custom-made car, something will always\nbe breaking.  The only point of buying one now is to advertise that\nyou can.\n\nOr consider watches.  Fifty years ago, by spending a lot of money\non a watch you could get better performance.  When watches had\nmechanical movements, expensive watches kept better time.  Not any\nmore.  Since the invention of the quartz movement, an ordinary Timex\nis more accurate than a Patek Philippe costing hundreds of thousands\nof dollars.\n[13]\nIndeed, as with expensive cars, if you're determined\nto spend a lot of money on a watch, you have to put up with some\ninconvenience to do it: as well as keeping worse time, mechanical\nwatches have to be wound.\n\nThe only thing technology can't cheapen is brand.  Which is precisely\nwhy we hear ever more about it.  Brand is the residue left as the\nsubstantive differences between rich and poor evaporate.  But what\nlabel you have on your stuff is a much smaller matter than having\nit versus not having it.  In 1900, if you kept a carriage, no one\nasked what year or brand it was.  If you had one, you were rich.\nAnd if you weren't rich, you took the omnibus or walked.  Now even\nthe poorest Americans drive cars, and it is only because we're so\nwell trained by advertising that we can even recognize the especially\nexpensive ones.\n[14]\n\nThe same pattern has played out in industry after industry.  If\nthere is enough demand for something, technology will make it cheap\nenough to sell in large volumes, and the mass-produced versions\nwill be, if not better, at least more convenient.\n[15]\nAnd there\nis nothing the rich like more than convenience.  The rich people I\nknow drive the same cars, wear the same clothes, have the same kind\nof furniture, and eat the same foods as my other friends.  Their\nhouses are in different neighborhoods, or if in the same neighborhood\nare different sizes, but within them life is similar.  The houses\nare made using the same construction techniques and contain much\nthe same objects.  It's inconvenient to do something expensive and\ncustom.\n\nThe rich spend their time more like everyone else too.  Bertie\nWooster seems long gone.  Now, most people who are rich enough not\nto work do anyway.  It's not just social pressure that makes them;\nidleness is lonely and demoralizing.\n\nNor do we have the social distinctions there were a hundred years\nago.   The novels and etiquette manuals of that period read now\nlike descriptions of some strange tribal society.  \"With respect\nto the continuance of friendships...\" hints Mrs. Beeton's Book\nof Household Management (1880), \"it may be found necessary, in\nsome cases, for a mistress to relinquish, on assuming the responsibility\nof a household, many of those commenced in the earlier part of her\nlife.\" A woman who married a rich man was expected to drop friends\nwho didn't.  You'd seem a barbarian if you behaved that way today.\nYou'd also have a very boring life.  People still tend to segregate\nthemselves somewhat, but much more on the basis of education than\nwealth.\n[16]\n\nMaterially and socially, technology seems to be decreasing the gap\nbetween the rich and the poor, not increasing it.  If Lenin walked\naround the offices of a company like Yahoo or Intel or Cisco, he'd\nthink communism had won.  Everyone would be wearing the same clothes,\nhave the same kind of office (or rather, cubicle) with the same\nfurnishings, and address one another by their first names instead\nof by honorifics.  Everything would seem exactly as he'd predicted,\nuntil he looked at their bank accounts.  Oops.\n\nIs it a problem if technology increases that gap?  It doesn't seem\nto be so far.  As it increases the gap in income, it seems to\ndecrease most other gaps.\n\nAlternative to an Axiom\n\nOne often hears a policy criticized on the grounds that it would\nincrease the income gap between rich and poor.  As if it were an\naxiom that this would be bad.  It might be true that increased\nvariation in income would be bad, but I don't see how we can say\nit's axiomatic.\n\nIndeed, it may even be false, in industrial democracies.  In a\nsociety of serfs and warlords, certainly, variation in income is a\nsign of an underlying problem.  But serfdom is not the only cause\nof variation in income.  A 747 pilot doesn't make 40 times as much\nas a checkout clerk because he is a warlord who somehow holds her\nin thrall.  His skills are simply much more valuable.\n\nI'd like to propose an alternative idea: that in a modern society,\nincreasing variation in income is a sign of health.  Technology\nseems to increase the variation in productivity at faster than\nlinear rates.  If we don't see corresponding variation in income,\nthere are three possible explanations: (a) that technical innovation\nhas stopped, (b) that the people who would create the most wealth\naren't doing it, or (c) that they aren't getting paid for it.\n\nI think we can safely say that (a) and (b) would be bad.  If you\ndisagree, try living for a year using only the resources available\nto the average Frankish nobleman in 800, and report back to us.\n(I'll be generous and not send you back to the stone age.)\n\nThe only option, if you're going to have an increasingly prosperous\nsociety without increasing variation in income, seems to be (c),\nthat people will create a lot of wealth without being paid for it.\nThat Jobs and Wozniak, for example, will cheerfully work 20-hour\ndays to produce the Apple computer for a society that allows them,\nafter taxes, to keep just enough of their income to match what they\nwould have made working 9 to 5 at a big company.\n\nWill people create wealth if they can't get paid for it?  Only if\nit's fun.  People will write operating systems for free.  But they\nwon't install them, or take support calls, or train customers to\nuse them.  And at least 90% of the work that even the highest tech\ncompanies do is of this second, unedifying kind.\n\nAll the unfun kinds of wealth creation slow dramatically in a society\nthat confiscates private fortunes.  We can confirm this empirically.\nSuppose you hear a strange noise that you think may be due to a\nnearby fan.  You turn the fan off, and the noise stops.  You turn\nthe fan back on, and the noise starts again.  Off, quiet.  On,\nnoise.  In the absence of other information, it would seem the noise\nis caused by the fan.\n\nAt various times and places in history, whether you could accumulate\na fortune by creating wealth has been turned on and off.  Northern\nItaly in 800, off (warlords would steal it).  Northern Italy in\n1100, on.  Central France in 1100, off (still feudal).  England in\n1800, on.  England in 1974, off (98% tax on investment income).\nUnited States in 1974, on.  We've even had a twin study: West\nGermany, on;  East Germany, off.  In every case, the creation of\nwealth seems to appear and disappear like the noise of a fan as you\nswitch on and off the prospect of keeping it.\n\nThere is some momentum involved.  It probably takes at least a\ngeneration to turn people into East Germans (luckily for England).\nBut if it were merely a fan we were studying, without all the extra\nbaggage that comes from the controversial topic of wealth, no one\nwould have any doubt that the fan was causing the noise.\n\nIf you suppress variations in income, whether by stealing private\nfortunes, as feudal rulers used to do, or by taxing them away, as\nsome modern governments have done, the result always seems to be\nthe same.    Society as a whole ends up poorer.\n\nIf I had a choice of living in a society where I was materially\nmuch better off than I am now, but was among the poorest, or in one\nwhere I was the richest, but much worse off than I am now, I'd take\nthe first option.  If I had children, it would arguably be immoral\nnot to.  It's absolute poverty you want to avoid, not relative\npoverty.  If, as the evidence so far implies, you have to have one\nor the other in your society, take relative poverty.\n\nYou need rich people in your society not so much because in spending\ntheir money they create jobs, but because of what they have to do\nto get rich.  I'm not talking about the trickle-down effect\nhere.  I'm not saying that if you let Henry Ford get rich, he'll\nhire you as a waiter at his next party.  I'm saying that he'll make\nyou a tractor to replace your horse.\n\n\n\nNotes\n\n[1]\nPart of the reason this subject is so contentious is that some\nof those most vocal on the subject of wealth\u2014university\nstudents, heirs, professors, politicians, and journalists\u2014have\nthe least experience creating it.  (This phenomenon will be familiar\nto anyone who has overheard conversations about sports in a bar.)\n\nStudents are mostly still on the parental dole, and have not stopped\nto think about where that money comes from.  Heirs will be on the\nparental dole for life.  Professors and politicians live within\nsocialist eddies of the economy, at one remove from the creation\nof wealth, and are paid a flat rate regardless of how hard they\nwork.  And journalists as part of their professional code segregate\nthemselves from the revenue-collecting half of the businesses they\nwork for (the ad sales department).  Many of these people never\ncome face to face with the fact that the money they receive represents\nwealth\u2014wealth that, except in the case of journalists, someone\nelse created earlier.  They live in a world in which income is\ndoled out by a central authority according to some abstract notion\nof fairness (or randomly, in the case of heirs), rather than given\nby other people in return for something they wanted, so it may seem\nto them unfair that things don't work the same in the rest of the\neconomy.\n\n(Some professors do create a great deal of wealth for\nsociety.  But the money they're paid isn't a quid pro quo.\nIt's more in the nature of an investment.)\n\n[2]\nWhen one reads about the origins of the Fabian Society, it\nsounds like something cooked up by the high-minded Edwardian\nchild-heroes of Edith Nesbit's The Wouldbegoods.\n\n[3]\nAccording to a study by the Corporate Library, the median total\ncompensation, including salary, bonus, stock grants, and the exercise\nof stock options, of S&P 500 CEOs in 2002 was $3.65 million.\nAccording to Sports Illustrated, the average NBA player's\nsalary during the 2002-03 season was $4.54 million, and the average\nmajor league baseball player's salary at the start of the 2003\nseason was $2.56 million.  According to the Bureau of Labor\nStatistics, the mean annual wage in the US in 2002 was $35,560.\n\n[4]\nIn the early empire the price of an ordinary adult slave seems\nto have been about 2,000 sestertii (e.g. Horace, Sat. ii.7.43).\nA servant girl cost 600 (Martial vi.66), while Columella (iii.3.8)\nsays that a skilled vine-dresser was worth 8,000.  A doctor, P.\nDecimus Eros Merula, paid 50,000 sestertii for his freedom (Dessau,\nInscriptiones 7812).  Seneca (Ep. xxvii.7) reports\nthat one Calvisius Sabinus paid 100,000 sestertii apiece for slaves\nlearned in the Greek classics.  Pliny (Hist. Nat. vii.39)\nsays that the highest price paid for a slave up to his time was\n700,000 sestertii, for the linguist (and presumably teacher) Daphnis,\nbut that this had since been exceeded by actors buying their own\nfreedom.\n\nClassical Athens saw a similar variation in prices.  An ordinary\nlaborer was worth about 125 to 150 drachmae.  Xenophon (Mem.\nii.5) mentions prices ranging from 50 to 6,000 drachmae (for the\nmanager of a silver mine).\n\nFor more on the economics of ancient slavery see:\n\nJones, A. H. M., \"Slavery in the Ancient World,\" Economic History\nReview, 2:9 (1956), 185-199, reprinted in Finley, M. I. (ed.),\nSlavery in Classical Antiquity, Heffer, 1964.\n\n[5]\nEratosthenes (276\u2014195 BC) used shadow lengths in different\ncities to estimate the Earth's circumference.  He was off by only\nabout 2%.\n\n[6]\nNo, and Windows, respectively.\n\n[7]\nOne of the biggest divergences between the Daddy Model and\nreality is the valuation of hard work.  In the Daddy Model, hard\nwork is in itself deserving.  In reality, wealth is measured by\nwhat one delivers, not how much effort it costs.  If I paint someone's\nhouse, the owner shouldn't pay me extra for doing it with a toothbrush.\n\nIt will seem to someone still implicitly operating on the Daddy\nModel that it is unfair when someone works hard and doesn't get\npaid much.  To help clarify the matter, get rid of everyone else\nand put our worker on a desert island, hunting and gathering fruit.\nIf he's bad at it he'll work very hard and not end up with much\nfood.  Is this unfair?  Who is being unfair to him?\n\n[8]\nPart of the reason for the tenacity of the Daddy Model may be\nthe dual meaning of \"distribution.\" When economists talk about\n\"distribution of income,\" they mean statistical distribution.  But\nwhen you use the phrase frequently, you can't help associating it\nwith the other sense of the word (as in e.g. \"distribution of alms\"),\nand thereby subconsciously seeing wealth as something that flows\nfrom some central tap.  The word \"regressive\" as applied to tax\nrates has a similar effect, at least on me; how can anything\nregressive be good?\n\n[9]\n\"From the beginning of the reign Thomas Lord Roos was an assiduous\ncourtier of the young Henry VIII and was soon to reap the rewards.\nIn 1525 he was made a Knight of the Garter and given the Earldom\nof Rutland.  In the thirties his support of the breach with Rome,\nhis zeal in crushing the Pilgrimage of Grace, and his readiness to\nvote the death-penalty in the succession of spectacular treason\ntrials that punctuated Henry's erratic matrimonial progress made\nhim an obvious candidate for grants of monastic property.\"\n\nStone, Lawrence, Family and Fortune: Studies in Aristocratic\nFinance in the Sixteenth and Seventeenth Centuries, Oxford\nUniversity Press, 1973, p. 166.\n\n[10]\nThere is archaeological evidence for large settlements earlier,\nbut it's hard to say what was happening in them.\n\nHodges, Richard and David Whitehouse, Mohammed, Charlemagne and\nthe Origins of Europe, Cornell University Press, 1983.\n\n[11]\nWilliam Cecil and his son Robert were each in turn the most\npowerful minister of the crown, and both used their position to\namass fortunes among the largest of their times.  Robert in particular\ntook bribery to the point of treason.  \"As Secretary of State and\nthe leading advisor to King James on foreign policy, [he] was a\nspecial recipient of favour, being offered large bribes by the Dutch\nnot to make peace with Spain, and large bribes by Spain to make\npeace.\" (Stone, op. cit., p. 17.)\n\n[12]\nThough Balzac made a lot of money from writing, he was notoriously\nimprovident and was troubled by debts all his life.\n\n[13]\nA Timex will gain or lose about .5 seconds per day.  The most\naccurate mechanical watch, the Patek Philippe 10 Day Tourbillon,\nis rated at -1.5 to +2 seconds.  Its retail price is about $220,000.\n\n[14]\nIf asked to choose which was more expensive, a well-preserved\n1989 Lincoln Town Car ten-passenger limousine ($5,000) or a 2004\nMercedes S600 sedan ($122,000), the average Edwardian might well\nguess wrong.\n\n[15]\nTo say anything meaningful about income trends, you have to\ntalk about real income, or income as measured in what it can buy.\nBut the usual way of calculating real income ignores much of the\ngrowth in wealth over time, because it depends on a consumer price\nindex created by bolting end to end a series of numbers that are\nonly locally accurate, and that don't include the prices of new\ninventions until they become so common that their prices stabilize.\n\nSo while we might think it was very much better to live in a world\nwith antibiotics or air travel or an electric power grid than\nwithout, real income statistics calculated in the usual way will\nprove to us that we are only slightly richer for having these things.\n\nAnother approach would be to ask, if you were going back to the\nyear x in a time machine, how much would you have to spend on trade\ngoods to make your fortune?  For example, if you were going back\nto 1970 it would certainly be less than $500, because the processing\npower you can get for $500 today would have been worth at least\n$150 million in 1970.  The function goes asymptotic fairly quickly,\nbecause for times over a hundred years or so you could get all you\nneeded in present-day trash.  In 1800 an empty plastic drink bottle\nwith a screw top would have seemed a miracle of workmanship.\n\n[16]\nSome will say this amounts to the same thing, because the rich\nhave better opportunities for education.  That's a valid point.  It\nis still possible, to a degree, to buy your kids' way into top\ncolleges by sending them to private schools that in effect hack the\ncollege admissions process.\n\nAccording to a 2002 report by the National Center for Education\nStatistics, about 1.7% of American kids attend private, non-sectarian\nschools.  At Princeton, 36% of the class of 2007 came from such\nschools.  (Interestingly, the number at Harvard is significantly\nlower, about 28%.)  Obviously this is a huge loophole.  It does at\nleast seem to be closing, not widening.\n\nPerhaps the designers of admissions processes should take a lesson\nfrom the example of computer security, and instead of just assuming\nthat their system can't be hacked, measure the degree to which it\nis.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMay 2004\n", "April 2004\n\nTo the popular press, \"hacker\" means someone who breaks\ninto computers.  Among programmers it means a good programmer.\nBut the two meanings are connected.  To programmers,\n\"hacker\" connotes mastery in the most literal sense: someone\nwho can make a computer do what he wants\u2014whether the computer\nwants to or not.\n\nTo add to the confusion, the noun \"hack\" also has two senses.  It can\nbe either a compliment or an insult.  It's called a hack when\nyou do something in an ugly way.  But when you do something\nso clever that you somehow beat the system, that's also\ncalled a hack.  The word is used more often in the former than\nthe latter sense, probably because ugly solutions are more\ncommon than brilliant ones.\n\nBelieve it or not, the two senses of \"hack\" are also\nconnected.  Ugly and imaginative solutions have something in\ncommon: they both break the rules.  And there is a gradual\ncontinuum between rule breaking that's merely ugly (using\nduct tape to attach something to your bike) and rule breaking\nthat is brilliantly imaginative (discarding Euclidean space).\n\nHacking predates computers.  When he\nwas working on the Manhattan Project, Richard Feynman used to\namuse himself by breaking into safes containing secret documents.\nThis tradition continues today.\nWhen we were in grad school, a hacker friend of mine who spent too much\ntime around MIT had\nhis own lock picking kit.\n(He now runs a hedge fund, a not unrelated enterprise.)\n\nIt is sometimes hard to explain to authorities why one would\nwant to do such things.\nAnother friend of mine once got in trouble with the government for\nbreaking into computers.  This had only recently been declared\na crime, and the FBI found that their usual investigative\ntechnique didn't work.  Police investigation apparently begins with\na motive.  The usual motives are few: drugs, money, sex,\nrevenge.  Intellectual curiosity was not one of the motives on\nthe FBI's list.  Indeed, the whole concept seemed foreign to\nthem.\n\nThose in authority tend to be annoyed by hackers'\ngeneral attitude of disobedience.  But that disobedience is\na byproduct of the qualities that make them good programmers.\nThey may laugh at the CEO when he talks in generic corporate\nnewspeech, but they also laugh at someone who tells them\na certain problem can't be solved.\nSuppress one, and you suppress the other.\n\nThis attitude is sometimes affected.  Sometimes young programmers\nnotice the eccentricities of eminent hackers and decide to\nadopt some of their own in order to seem smarter.\nThe fake version is not merely\nannoying; the prickly attitude of these posers\ncan actually slow the process of innovation.\n\nBut even factoring in their annoying eccentricities,\nthe disobedient attitude of hackers is a net win.  I wish its\nadvantages were better understood.\n\nFor example, I suspect people in Hollywood are\nsimply mystified by\nhackers' attitudes toward copyrights.  They are a perennial\ntopic of heated discussion on Slashdot.\nBut why should people who program computers\nbe so concerned about copyrights, of all things?\n\nPartly because some companies use mechanisms to prevent\ncopying.  Show any hacker a lock and his first thought is\nhow to pick it.  But there is a deeper reason that\nhackers are alarmed by measures like copyrights and patents.\nThey see increasingly aggressive measures to protect\n\"intellectual property\"\nas a threat to the intellectual\nfreedom they need to do their job.\nAnd they are right.\n\nIt is by poking about inside current technology that\nhackers get ideas for the next generation.  No thanks,\nintellectual homeowners may say, we don't need any\noutside help.  But they're wrong.\nThe next generation of computer technology has\noften\u2014perhaps more often than not\u2014been developed by outsiders.\n\nIn 1977 there was no doubt some group within IBM developing\nwhat they expected to be\nthe next generation of business computer.  They were mistaken.\nThe next generation of business computer was\nbeing developed on entirely different lines by two long-haired\nguys called Steve in a garage in Los Altos.  At about the\nsame time, the powers that be\nwere cooperating to develop the\nofficial next generation operating system, Multics.\nBut two guys who thought Multics excessively complex went off\nand wrote their own.  They gave it a name that\nwas a joking reference to Multics: Unix.\n\nThe latest intellectual property laws impose\nunprecedented restrictions on the sort of poking around that\nleads to new ideas. In the past, a competitor might use patents\nto prevent you from selling a copy of something they\nmade, but they couldn't prevent you from\ntaking one apart to see how it worked.   The latest\nlaws make this a crime.  How are we\nto develop new technology if we can't study current\ntechnology to figure out how to improve it?\n\nIronically, hackers have brought this on themselves.\nComputers are responsible for the problem.  The control systems\ninside machines used to be physical: gears and levers and cams.\nIncreasingly, the brains (and thus the value) of products is\nin software. And by this I mean software in the general sense:\ni.e. data.  A song on an LP is physically stamped into the\nplastic.  A song on an iPod's disk is merely stored on it.\n\nData is by definition easy to copy.  And the Internet\nmakes copies easy to distribute.  So it is no wonder\ncompanies are afraid.  But, as so often happens, fear has\nclouded their judgement.  The government has responded\nwith draconian laws to protect intellectual property.\nThey probably mean well. But\nthey may not realize that such laws will do more harm\nthan good.\n\nWhy are programmers so violently opposed to these laws?\nIf I were a legislator, I'd be interested in this\nmystery\u2014for the same reason that, if I were a farmer and suddenly\nheard a lot of squawking coming from my hen house one night,\nI'd want to go out and investigate.  Hackers are not stupid,\nand unanimity is very rare in this world.\nSo if they're all squawking,   \nperhaps there is something amiss.\n\nCould it be that such laws, though intended to protect America,\nwill actually harm it?  Think about it.  There is something\nvery American about Feynman breaking into safes during\nthe Manhattan Project.  It's hard to imagine the authorities\nhaving a sense of humor about such things over\nin Germany at that time.  Maybe it's not a coincidence.\n\nHackers are unruly.  That is the essence of hacking.  And it\nis also the essence of Americanness.  It is no accident\nthat Silicon Valley\nis in America, and not France, or Germany,\nor England, or Japan. In those countries, people color inside\nthe lines.\n\nI lived for a while in Florence.  But after I'd been there\na few months I realized that what I'd been unconsciously hoping\nto find there was back in the place I'd just left.\nThe reason Florence is famous is that in 1450, it was New York.\nIn 1450 it was filled with the kind of turbulent and ambitious\npeople you find now in America.  (So I went back to America.)\n\nIt is greatly to America's advantage that it is\na congenial atmosphere for the right sort of unruliness\u2014that\nit is a home not just for the smart, but for smart-alecks.\nAnd hackers are invariably smart-alecks.  If we had a national\nholiday, it would be April 1st.  It says a great deal about\nour work that we use the same word for a brilliant or a\nhorribly cheesy solution.   When we cook one up we're not\nalways 100% sure which kind it is.  But as long as it has\nthe right sort of wrongness, that's a promising sign.\nIt's odd that people\nthink of programming as precise and methodical.  Computers\nare precise and methodical.  Hacking is something you do\nwith a gleeful laugh.\n\nIn our world some of the most characteristic solutions\nare not far removed from practical\njokes.  IBM was no doubt rather surprised by the consequences\nof the licensing deal for DOS, just as the hypothetical\n\"adversary\" must be when Michael Rabin solves a problem by\nredefining it as one that's easier to solve.\n\nSmart-alecks have to develop a keen sense of how much they\ncan get away with.  And lately hackers \nhave sensed a change\nin the atmosphere.\nLately hackerliness seems rather frowned upon.\n\nTo hackers the recent contraction in civil liberties seems\nespecially ominous.  That must also mystify outsiders. \nWhy should we care especially about civil\nliberties?  Why programmers, more than\ndentists or salesmen or landscapers?\n\nLet me put the case in terms a government official would appreciate.\nCivil liberties are not just an ornament, or a quaint\nAmerican tradition.  Civil liberties make countries rich.\nIf you made a graph of\nGNP per capita vs. civil liberties, you'd notice a definite\ntrend.  Could civil liberties really be a cause, rather\nthan just an effect?  I think so.  I think a society in which\npeople can do and say what they want will also tend to\nbe one in which the most efficient solutions win, rather than\nthose sponsored by the most influential people.\nAuthoritarian countries become corrupt;\ncorrupt countries become poor; and poor countries are weak. \nIt seems to me there is\na Laffer curve for government power, just as for\ntax revenues.  At least, it seems likely enough that it\nwould be stupid to try the experiment and find out.  Unlike\nhigh tax rates, you can't repeal totalitarianism if it\nturns out to be a mistake.\n\nThis is why hackers worry.  The government spying on people doesn't\nliterally make programmers write worse code.  It just leads\neventually to a world in which bad ideas win.  And because\nthis is so important to hackers, they're especially sensitive\nto it.  They can sense totalitarianism approaching from a\ndistance, as animals can sense an approaching  \nthunderstorm.\n\nIt would be ironic if, as hackers fear, recent measures\nintended to protect national security and intellectual property\nturned out to be a missile aimed right at what makes   \nAmerica successful.  But it would not be the first time that\nmeasures taken in an atmosphere of panic had\nthe opposite of the intended effect.\n\nThere is such a thing as Americanness.\nThere's nothing like living abroad to teach you that.   \nAnd if you want to know whether something will nurture or squash\nthis quality, it would be hard to find a better focus\ngroup than hackers, because they come closest of any group\nI know to embodying it.  Closer, probably,  than\nthe men running our government,\nwho for all their talk of patriotism\nremind me more of Richelieu or Mazarin\nthan Thomas Jefferson or George Washington.\n\nWhen you read what the founding fathers had to say for\nthemselves, they sound more like hackers.\n\"The spirit of resistance to government,\"\nJefferson wrote, \"is so valuable on certain occasions, that I wish\nit always to be kept alive.\"\n\nImagine an American president saying that today.\nLike the remarks of an outspoken old grandmother, the sayings of\nthe founding fathers have embarrassed generations of\ntheir less confident successors.  They remind us where we come from.\nThey remind us that it is the people who break rules that are\nthe source of America's wealth and power.\n\nThose in a position to impose rules naturally want them to be\nobeyed.  But be careful what you ask for. You might get it.\n\n\n\n\n\nThanks to Ken Anderson, Trevor Blackwell, Daniel Giffin, \nSarah Harlin,  Shiro Kawai, Jessica Livingston, Matz, \nJackie McDonough, Robert Morris, Eric Raymond, Guido van Rossum,\nDavid Weinberger, and\nSteven Wolfram for reading drafts of this essay.\n\n\n(The image shows Steves Jobs and Wozniak \nwith a \"blue box.\"\nPhoto by Margret Wozniak. Reproduced by permission of Steve\nWozniak.)\n\n\n", "January 2004\n\n\nHave you ever seen an old photo of yourself and\nbeen embarrassed at the way you looked?   Did we actually\ndress like that?  We did.  And we had no idea how\nsilly we looked.\nIt's the nature of fashion to be invisible, in the\nsame way the movement of the earth is invisible to all\nof us riding on it.\n\nWhat scares me is that there are moral fashions too.\nThey're just as arbitrary, and just as invisible to most people.\nBut they're much more dangerous.\nFashion is mistaken for good design; \nmoral fashion is mistaken for good.\nDressing oddly gets you laughed at.  Violating\nmoral fashions can get you fired, ostracized, imprisoned, or\neven killed.\n\nIf you could travel back in a time machine, one thing\nwould be true no matter where you went: you'd have to watch\nwhat you said.  \nOpinions we consider harmless could have \ngotten you in big trouble.\nI've already said at least one thing that would have gotten me in big\ntrouble in most of Europe in the seventeenth century,\nand did get Galileo in big trouble when he said\nit \u0097 that the earth moves. [1]\n\n\nIt seems to be a constant throughout history: In every\nperiod, people believed things that were just ridiculous,\nand believed them so strongly that you would have gotten in\nterrible trouble for saying otherwise.\n\nIs our time any different?\nTo anyone who has read any amount of history, the answer is\nalmost certainly no.   It would be a remarkable coincidence if ours\nwere the first era to get everything just right.\n\nIt's tantalizing to think we believe\nthings that people in the future will find ridiculous.\nWhat would someone coming back to visit us in a time machine\nhave to be careful not to say?\nThat's what I want to study here.\nBut\nI want to do more than just shock everyone with\nthe heresy du jour.  I want to find general\nrecipes for discovering what you can't say, in any era.\n\nThe Conformist Test\n\nLet's start with a test:  \nDo you have any opinions that you would be reluctant to express\nin front of a group of your peers?\n\nIf the answer is no,\nyou might want to stop and think about that.  If everything\nyou believe is something you're supposed to believe, could\nthat possibly be a coincidence?  Odds are it isn't.  Odds are\nyou just think what you're told.\n\nThe other alternative would be that you independently considered\nevery question and came up with the exact same answers that\nare now considered acceptable.  That seems unlikely, because\nyou'd also have to make the same mistakes.  Mapmakers\ndeliberately put slight mistakes in their maps so they can\ntell when someone copies them.  If another map has the same\nmistake, that's very convincing evidence.\n\nLike every other era in history, our moral map almost certainly\ncontains a few mistakes.  And anyone who makes the same mistakes\nprobably didn't do it by accident.  It would be\nlike someone claiming they had independently decided in\n1972 that bell-bottom jeans were a good idea.\n\nIf you believe everything you're supposed to now, how can\nyou be sure you wouldn't also have believed everything you\nwere supposed to if you had grown up among the plantation\nowners of the pre-Civil War South, or in Germany in the 1930s \u0097 or\namong the Mongols in 1200, for that matter?  Odds are you\nwould have.\n\nBack in the era of terms like \"well-adjusted,\" the idea\nseemed to be that there was something wrong with\nyou if you thought things you didn't dare say out loud.\nThis seems backward.  Almost certainly, there\nis something wrong with you if you don't think things\nyou don't dare say out loud.\n\nTrouble\n\nWhat can't we say?  One way to find these ideas is simply to look\nat things people do say, and get in trouble for.  [2]\n\nOf course, we're not just looking for things we can't say.   \nWe're looking for things we can't say that are true, or at least\nhave enough chance of being true that the question\nshould remain open.  But many of the\nthings people get in trouble for saying probably\ndo make it over this second, lower threshold.  No one\ngets in trouble for saying\nthat 2 + 2 is 5, or that people in Pittsburgh are ten feet tall.\nSuch obviously false statements might be treated as jokes, or\nat worst as evidence of insanity, but they are not likely to\nmake anyone mad.  The statements that make people mad are\nthe ones they worry might be believed.\nI suspect the statements that make people maddest\nare those they worry might be true.\n\nIf Galileo had said that people in Padua were ten feet tall,\nhe would have been regarded as a harmless eccentric.  Saying   \nthe earth orbited the sun was another matter.  The church knew\nthis would set people thinking.\n\nCertainly, as we look back on the past, this rule of thumb works\nwell.  A lot of the statements people got in trouble for seem\nharmless now.  So it's likely that visitors from the\nfuture would agree with at least some of the statements that\nget people in trouble today.  Do we have no Galileos?  Not\nlikely.\n\nTo find them,\nkeep track of opinions that get\npeople in trouble, and start asking, could this be true?\nOk, it may be heretical (or whatever modern equivalent), but\nmight it also be true?\n\nHeresy\n\nThis won't get us all the answers, though.  What if no one\nhappens to have gotten in trouble for a particular idea yet?\nWhat if some idea would be so radioactively controversial that\nno one would dare express it in public?   How can we find these too?\n\nAnother approach is to follow that word, heresy.  In every period\nof history, there seem to have been labels that got applied to \nstatements to shoot them down before anyone had a chance to ask\nif they were true or not.  \"Blasphemy\", \"sacrilege\", and \"heresy\"\nwere such\nlabels for a good part of western history, as in more recent times\n\"indecent\", \"improper\", and \"unamerican\" have been.   By now these\nlabels have lost their sting.  They always do.\nBy now they're mostly used ironically.\nBut in their time,\nthey had real force.\n\nThe word \"defeatist\", for example, has no particular political\nconnotations now.\nBut in Germany in 1917 it was a weapon, used by Ludendorff in\na purge of those who favored a negotiated peace.\nAt the start of World War II it was used\nextensively by Churchill and his supporters to silence their\nopponents.\nIn 1940, any argument against Churchill's aggressive policy was \"defeatist\".\nWas it right or wrong?  Ideally, no one got far enough to ask\nthat.\n\n\nWe have such labels today, of course, quite a lot of them,\nfrom the all-purpose \"inappropriate\" to the dreaded \"divisive.\"\nIn any period, it should be easy to figure out what such labels are,\nsimply by looking at what people call ideas they disagree\nwith besides untrue.  When a politician says his opponent is\nmistaken, that's a straightforward criticism, but when he\nattacks a statement as \"divisive\" or \"racially insensitive\"\ninstead of arguing that it's false, we should start paying\nattention.\n\nSo another way to figure out which of our taboos future generations\nwill laugh at is to start with the\nlabels.  Take a label \u0097 \"sexist\", for example \u0097 and try to think\nof some ideas that would be called that.  Then for each ask, might\nthis be true?\n\nJust start listing ideas at random?  Yes, because they\nwon't really be random.  The ideas that come to mind first\nwill be the most plausible ones.  They'll be things you've already  \nnoticed but didn't let yourself think.\n\nIn 1989 some clever researchers tracked\nthe eye movements of radiologists as they scanned chest images for\nsigns of lung cancer. [3]  They found that even when the radiologists\nmissed a cancerous lesion, their eyes had usually paused at the site of it.\nPart of their brain knew there was something there; it just\ndidn't percolate all the way up into conscious knowledge. \nI think many interesting heretical thoughts are already mostly   \nformed in our minds.  If we turn off our self-censorship\ntemporarily, those will be the first to emerge.\n\nTime and Space\n\nIf we could look into the future it would be obvious which\nof our taboos they'd laugh at.\nWe can't do that, but we can do something almost as good: we can\nlook into the past.  Another way to figure out what we're\ngetting wrong is to look at what used to be acceptable\nand is now unthinkable.\n\nChanges between the past and the present sometimes do represent\nprogress.  In a field like physics,\nif we disagree with past generations it's because we're\nright and they're wrong.  But this becomes rapidly less true as   \nyou move away from the certainty of the hard sciences.  By the time\nyou get to social questions, many changes are just fashion.\nThe age of consent fluctuates like hemlines.\n\nWe may imagine that we are a great deal smarter and more virtuous than\npast generations, but the more history you read, the less likely\nthis seems.  People in past times were much like us.  Not heroes,\nnot barbarians.  Whatever their ideas were, they were ideas\nreasonable people could believe.\n\nSo here is another source of interesting heresies.  Diff present\nideas against those of various past cultures, and see what you   \nget. [4]\nSome will be\nshocking by present standards.  Ok, fine; but which might also be true?\n\nYou don't have to look into the past to find big differences.   \nIn our own time, different societies have wildly varying ideas\nof what's ok and what isn't.\nSo you can try diffing other cultures' ideas against ours as well.\n(The best way to do that is to visit them.)\n\nAny idea that's considered harmless in a significant\npercentage of times and places, and yet is taboo in ours,\nis a  candidate for something we're mistaken\nabout.\n\nFor example, at the high water mark of political correctness\nin the early 1990s, Harvard distributed to its\nfaculty and staff a brochure saying, among other things, that it\nwas inappropriate to compliment a colleague or student's\nclothes.  No more \"nice shirt.\"\nI think this principle is rare among the world's cultures, past or present.\nThere are probably more where it's considered especially\npolite to compliment someone's clothing than where it's considered\nimproper.\n\nOdds are this is, in a mild form, an example of one of\nthe taboos a visitor from the future would\nhave to be careful to avoid if he happened to set his time machine for\nCambridge, Massachusetts, 1992. [5]\n\nPrigs\n\nOf course, if they have time machines in the future they'll\nprobably have a separate reference manual just for Cambridge.\nThis has always been a fussy place, a town of i dotters and\nt crossers, where you're liable to get both your grammar and   \nyour ideas corrected in the same conversation.   And that\nsuggests another way to find taboos.  Look for prigs,\nand see what's inside their heads.\n\nKids' heads are repositories of all our taboos.\nIt seems fitting to us that kids' ideas should be bright and clean.\nThe picture we give them of the world is \nnot merely simplified, to suit their developing minds, \nbut sanitized as well, to suit our\nideas of what kids ought to think. [6]\n\nYou can see this on a small scale in the matter of\ndirty words.  A lot of my friends are starting to have children\nnow, and they're all trying \nnot to use words like\n\"fuck\" and \"shit\" within baby's hearing, lest baby start using \nthese words too.\nBut these\nwords are part of the language, and adults use them all the\ntime.  So parents are giving their kids an inaccurate idea of \nthe language by not using\nthem.  Why do they do this?  Because they don't think it's\nfitting that kids should use the whole language.  We like\nchildren to seem innocent. [7]\n\nMost adults, likewise, deliberately give kids a misleading\nview of the world.\nOne of the most obvious\nexamples is Santa Claus.  We think it's cute for little kids to\nbelieve in Santa Claus.  I myself think it's cute for little\nkids to believe in Santa Claus.  But one wonders, do we tell\nthem this stuff for their sake, or for ours?\n\nI'm not arguing for or against this idea here.  It is probably\ninevitable that parents should want to dress up their kids'\nminds in cute little baby outfits.  I'll probably do it myself.\nThe important thing for our purposes is that, as a result,\na well brought-up teenage kid's brain is a more\nor less complete collection of all our taboos \u0097 and in mint\ncondition, because they're untainted by experience.  \nWhatever we think that will later turn out to be ridiculous, \nit's almost certainly inside that head.\n\nHow do we get at these ideas?  By the following thought experiment.\nImagine a kind of latter-day Conrad character\nwho has worked for a time as a mercenary in Africa, for a time\nas a doctor in Nepal, for a time as the manager of a\nnightclub in Miami.  The specifics don't matter \u0097 just\nsomeone who has\nseen a lot.  Now imagine comparing what's inside this guy's head\nwith what's inside the head\nof a well-behaved sixteen year old girl from\nthe suburbs.  What does he think that\nwould shock her?\nHe knows the world; she knows, or at least embodies, present\ntaboos.  Subtract one from the other, and the result is what\nwe can't say.\n\n\nMechanism\n\nI can think of one more way to figure out what we can't\nsay: to look at how taboos are created.   How do moral\nfashions arise, and why are they adopted?\nIf we can understand this mechanism, we\nmay be able to see it at work in our own time.\n\nMoral fashions don't seem to be created the way ordinary\nfashions are.  Ordinary fashions seem to arise by accident when\neveryone imitates the whim of some influential person.\nThe fashion for broad-toed shoes in\nlate fifteenth century Europe began because Charles VIII of\nFrance had six toes on one foot.  The fashion for the\nname Gary began when the actor Frank Cooper adopted the name\nof a tough mill town in Indiana.  Moral fashions more often\nseem to be created deliberately.  When there's something we\ncan't say, it's often because some group doesn't want us to.\n\nThe prohibition will be strongest when the group is nervous. \nThe irony of Galileo's situation was that he got in trouble\nfor repeating Copernicus's ideas.  Copernicus himself didn't.\nIn fact, Copernicus was a canon of a cathedral, and dedicated his\nbook to the pope.  But by Galileo's time the church was in\nthe throes of the Counter-Reformation and was much more\nworried about unorthodox ideas.\n\nTo launch a taboo, a group has to be poised halfway between\nweakness and power.  A confident group doesn't need taboos\nto protect it.  It's not considered improper to\nmake disparaging remarks about Americans, or the English.\nAnd yet a group has to be powerful enough to enforce a\ntaboo.  Coprophiles, as of this writing, don't seem to be\nnumerous or energetic enough to have had their\ninterests promoted to a lifestyle.\n\nI suspect the biggest source of moral taboos will turn out to\nbe power struggles in which one side only barely has\nthe upper hand.  That's where you'll find a group\npowerful enough to enforce taboos, but weak enough to need them.\n\nMost struggles, whatever they're really about, will be cast\nas struggles between competing ideas.\nThe English Reformation was at bottom a struggle for wealth and power,\nbut it ended up being\ncast as a struggle to preserve the souls\nof Englishmen from the corrupting influence of Rome.\nIt's easier to get people to fight for an idea.\nAnd whichever side wins, their\nideas will also be considered to have triumphed, as if God\nwanted to signal his agreement by selecting that side as the victor.\n\nWe often like to think of World War II as a triumph\nof freedom over totalitarianism.  We conveniently forget that\nthe Soviet Union was also one of the winners.\n\nI'm not saying that struggles are never about ideas,\njust that they will always be made to seem to be about\nideas, whether they are or not.   And just as there is nothing\nso unfashionable as the last, discarded fashion, there is\nnothing so wrong as the principles of the most recently\ndefeated opponent.\n\nRepresentational art is only now\nrecovering from the approval of both Hitler and Stalin. [8]\n\nAlthough moral fashions tend to arise from different sources\nthan fashions in clothing, the mechanism of their adoption seems\nmuch the same.  The early adopters will be driven by ambition:\nself-consciously cool people who want to distinguish themselves\nfrom the common herd.  As the fashion becomes established they'll\nbe joined by a second, much larger group, driven by fear. [9] This\nsecond group adopt the fashion not because they want to stand\nout but because they are afraid of standing out.\n\nSo if you want to figure out what we can't say, look at the\nmachinery of fashion and try to predict what it would make\nunsayable.  What groups are powerful but nervous, and what\nideas would they like to suppress?  What ideas were tarnished by\nassociation when they ended up on the losing side of a recent\nstruggle?  If a self-consciously cool person wanted to differentiate\nhimself from preceding fashions (e.g. from his parents), \nwhich of their ideas would he tend to reject?\nWhat are conventional-minded people afraid of saying?\n\nThis technique won't find us all the things we can't say.\nI can think of some that aren't the result of\nany recent struggle. Many of our taboos are rooted\ndeep in the past.  But this approach, combined with the\npreceding four, will turn up a good number of unthinkable\nideas.\n\nWhy\n\nSome would ask, why would one want to do this?  Why deliberately\ngo poking around among nasty, disreputable ideas?  Why look \nunder rocks?\n\nI do it, first of all, for the same reason I did look under\nrocks as a kid: plain curiosity.  And I'm especially curious about\nanything that's forbidden.  Let me see and decide for myself.\n\nSecond, I do it because I don't like the idea of being mistaken.\nIf, like other eras, we believe things that will later seem ridiculous,\nI want to know what they are so that I, at least, can avoid\nbelieving them.\n\nThird, I do it because it's good for the brain.  To do good work\nyou need a brain that can go anywhere.  And you especially need a\nbrain that's in the habit of going where it's not supposed to.\n\nGreat work tends to grow out of ideas\nthat others have overlooked, and no idea is so overlooked as one that's\nunthinkable.\nNatural selection, for example.\nIt's so simple.  Why didn't anyone think of it before?  Well,\nthat is all too obvious.  Darwin himself was careful to tiptoe\naround the implications of his theory.  He wanted to spend his\ntime thinking about biology, not arguing with people who accused\nhim of being an atheist.\n\nIn the sciences, especially, it's a great advantage to be able to\nquestion assumptions.\nThe m.o. of scientists, or at least of the\ngood ones, is precisely that: look for places where\nconventional wisdom is broken, and then try to pry apart the\ncracks and see what's underneath.  That's where new theories come\nfrom.\n\nA good scientist, in other words, does not merely ignore\nconventional wisdom, but makes a special effort to break it.\nScientists go looking for trouble.\nThis should be the m.o. of any scholar, but \nscientists seem much more willing to look under rocks. [10]\n\nWhy?  It could\nbe that the scientists are simply smarter; most physicists could,\nif necessary, make it through a PhD program in French literature,\nbut few professors of French literature could make it through\na PhD program in physics.  Or it could be because it's clearer\nin the sciences whether theories are true or false, and this\nmakes scientists bolder.  (Or it could be that, because it's\nclearer in the sciences whether theories are true or false, you\nhave to be smart to get jobs as a scientist, rather than just a\ngood politician.)\n\nWhatever the reason, there seems a clear correlation between\nintelligence and willingness to consider shocking ideas.\nThis isn't just because smart people actively work to find holes in\nconventional thinking.  I think conventions also have\nless hold over them to start with.\nYou can see that in the\nway they dress.\n\nIt's not only in the sciences that heresy pays off.\nIn any competitive field, you can\nwin big by seeing things that others daren't.  \nAnd in every\nfield there are probably heresies few dare utter.  Within\nthe US car industry there is a lot of hand-wringing now\nabout declining market share.\nYet the cause is so obvious that any observant outsider could\nexplain it in a second: they make bad cars.  And they have for\nso long that by now the US car brands are antibrands \u0097 something\nyou'd buy a car despite, not because of.  Cadillac stopped\nbeing the Cadillac of cars in about 1970.  And yet I suspect\nno one dares say this. [11]  Otherwise these companies would have\ntried to fix the problem.\n\nTraining yourself to think unthinkable thoughts has advantages\nbeyond the thoughts themselves.  It's like stretching.\nWhen you stretch before running, you put your body into positions\nmuch more extreme\nthan any it will assume during the run.\nIf you can think things\nso outside the box that they'd make people's hair stand on end,\nyou'll have no trouble with the small trips outside the box that\npeople call innovative.\n\nPensieri Stretti\n\nWhen you find something you can't say, what do you do with it?\nMy advice is, don't say it.   Or at least, pick your battles.\n\nSuppose in the future there is a movement to ban\nthe color yellow. Proposals to paint anything yellow are\ndenounced as \"yellowist\", as is anyone suspected of liking the  \ncolor.  People who like orange are tolerated but viewed with\nsuspicion.  Suppose you realize there is nothing\nwrong with yellow.  If you go around saying this, you'll be\ndenounced as a yellowist too, and you'll find yourself having a   \nlot of arguments with anti-yellowists.\nIf your aim in life is to rehabilitate the color yellow, that may\nbe what you want.\nBut if you're mostly interested in\nother questions, being labelled as a yellowist will just be\na distraction.  Argue with idiots, and you become an idiot.\n\nThe most important thing is to be able to think what you\nwant, not to say what you want.  And if you feel you have to\nsay everything you think, it may inhibit you from thinking  \nimproper thoughts.  I think it's better to follow the opposite\npolicy.  Draw a sharp line between your thoughts and your\nspeech.  Inside your head, anything is allowed.\nWithin my head I make a point of encouraging the most outrageous\nthoughts I can imagine. \nBut, as in\na secret society, nothing that happens within the building\nshould be told to outsiders.  The first rule of Fight\nClub is, you do not talk about Fight Club.\n\nWhen Milton was going to visit Italy in the 1630s,\nSir Henry Wootton, who had been ambassador to Venice, told him\nhis motto should be\n\"i pensieri stretti & il viso sciolto.\"  Closed thoughts\nand an open face.  Smile at everyone, and don't tell them\nwhat you're thinking.   This was wise advice.\nMilton was an argumentative fellow, and the Inquisition\nwas a bit restive at that time.  But I think the difference \nbetween Milton's situation and ours is only a matter of\ndegree.\nEvery era has its heresies, and if you don't get imprisoned for them you\nwill at least get in enough trouble that it becomes a complete\ndistraction.\n\nI admit it seems cowardly to keep quiet.\nWhen I read about the harassment to which\nthe Scientologists subject their critics [12], or that pro-Israel groups\nare \"compiling dossiers\" on those who speak out against Israeli\nhuman rights abuses [13], or about people being sued for\nviolating the DMCA [14], part of me wants\nto say, \"All right, you bastards, bring it on.\"\nThe problem is, there are so many things you can't say.\nIf you said them all you'd \nhave no time left for your real work.\nYou'd have to turn into Noam Chomsky.  [15]\n\nThe trouble with keeping your thoughts secret, though,\nis that you lose the advantages of discussion.  Talking\nabout an idea leads to more ideas.\nSo the optimal plan, if you can manage it,\nis to have a few trusted\nfriends you can speak openly to.  This is not just a\nway to develop ideas; it's also a good\nrule of thumb for choosing friends.  The people\nyou can say heretical things to without getting jumped on\nare also the most interesting to know.\n\nViso Sciolto?\n\nI don't think we need\nthe viso sciolto so much as the pensieri stretti.\nPerhaps the best policy is to make it plain that you don't\nagree with whatever zealotry is current in your time, but\nnot to be too specific about what you disagree with.  Zealots\nwill try to draw you out, but you don't have to answer them.\nIf they try to force you to treat a question on their\nterms by asking \"are you with us or against us?\" you can\nalways just answer \"neither\".\n\nBetter still, answer \"I haven't decided.\"\nThat's what Larry Summers\ndid when a group tried to put\nhim in this position.  Explaining himself later, he said\n\"I don't do litmus tests.\" [16]\nA lot of the\nquestions people get hot about are actually quite complicated.\nThere is no prize for getting the answer quickly.\n\nIf the anti-yellowists seem to be getting out of hand and\nyou want to fight back, there are ways\nto do it without getting yourself accused of being a\nyellowist.  Like skirmishers in\nan ancient army, you want to avoid directly engaging the\nmain body of the enemy's troops.  Better to harass them\nwith arrows from a distance.\n\nOne way to do this is to ratchet the debate up one level of\nabstraction.\nIf you argue against censorship in general, you can avoid being\naccused of whatever heresy is contained\nin the book or film that someone is trying to censor.\nYou can attack labels with meta-labels: labels that refer\nto the use of labels to prevent discussion.\nThe spread of the term \"political correctness\" meant the beginning of\nthe end of political correctness, because it enabled one to\nattack the phenomenon as a whole without being accused of any\nof the specific heresies it sought to suppress.\n\nAnother way to counterattack is with metaphor.  Arthur Miller\nundermined the House Un-American Activities Committee\nby writing a play, \"The Crucible,\" about the Salem witch trials.\nHe never referred directly to the committee and so gave them\nno way to reply.\nWhat could HUAC do, defend the Salem witch trials?  And yet\nMiller's metaphor stuck so well that to this day the activities\nof the committee are often described as a \"witch-hunt.\"\n\nBest of all, probably, is humor.  Zealots, whatever their   \ncause, invariably lack a sense of humor.\nThey can't reply in kind to jokes.\nThey're as unhappy on the territory of\nhumor as a mounted knight on a skating rink.\nVictorian prudishness, for example, seems to have been defeated\nmainly by treating it as a joke.  Likewise its reincarnation as\npolitical correctness.\n\"I am glad that I\nmanaged to write 'The Crucible,'\" Arthur Miller wrote,\n\"but looking back I have often wished I'd\nhad the temperament to do an absurd comedy, which is what the\nsituation deserved.\" [17]\n\nABQ\n\nA Dutch friend says\nI should use Holland as an example of a tolerant society.\nIt's true they have a long tradition of\ncomparative open-mindedness.  For centuries the low countries were the place\nto go to say things you couldn't say anywhere else,\nand this helped to make the region a center of scholarship and industry\n(which have been closely tied for longer than most people realize).\nDescartes, though claimed by the French, did much of his thinking in\nHolland.\n\nAnd yet, I wonder.  The Dutch seem to live their lives up to their\nnecks in rules and regulations.  There's so much you can't do there;\nis there really nothing\nyou can't say?\n\nCertainly the fact that they value open-mindedness is no guarantee.\nWho thinks they're not open-minded?  Our hypothetical prim miss from\nthe suburbs thinks she's open-minded.  Hasn't she been\ntaught to be?  Ask anyone, and they'll say the same thing: they're\npretty open-minded, though they draw the line at things that are really\nwrong.  (Some tribes\nmay avoid \"wrong\" as\njudgemental, and may instead use a more neutral sounding euphemism\nlike \"negative\" or \"destructive\".)\n\nWhen people are bad at math, they know it, because they get the\nwrong answers on tests.  But when people are bad at open-mindedness\nthey don't know it.  In fact they tend to think the opposite.\nRemember, it's the nature of fashion to be invisible.  It wouldn't\nwork otherwise.  Fashion doesn't\nseem like fashion to someone in the grip of it.  It just seems like\nthe right thing to do.  It's only by looking from a distance that\nwe see oscillations in people's idea of the right thing to do, and\ncan identify them as fashions.\n\nTime gives us such distance for free.  Indeed, the arrival of new\nfashions makes old fashions easy to see, because they\nseem so ridiculous by contrast.  From one end of a pendulum's\nswing, the other end seems especially far away.\n\nTo see fashion in your own time, though, requires a conscious effort.\nWithout time to give you distance, you have to create distance yourself.\nInstead of being part of the mob, stand\nas far away from it as you can and watch what it's\ndoing.  And pay especially close attention whenever an idea is being\nsuppressed.  Web filters for children and employees often ban\nsites containing pornography, violence, and hate speech.  What\ncounts as pornography and violence?  And what, exactly, is\n\"hate speech?\" This sounds like a phrase out of 1984.\n\nLabels like that are probably the biggest external clue.\nIf a statement is false,\nthat's the worst thing you can say about it.  You don't\nneed to say that it's heretical.  And if it isn't false, it\nshouldn't be suppressed.  So when you see statements being\nattacked as x-ist or y-ic (substitute your current values of\nx and y), whether in 1630 or 2030, that's a sure sign that\nsomething is wrong.  When you hear such labels being used,\nask why.\n\nEspecially if you hear yourself using them.  It's not just\nthe mob you need to learn to watch from a distance.  You need to be\nable to watch your own thoughts from a distance.  That's not\na radical idea, by the way; it's the main difference between\nchildren and adults.  When a child gets angry because he's\ntired, he doesn't know what's happening.  An adult can\ndistance himself enough from the\nsituation to say \"never mind, I'm just tired.\"  I don't\nsee why one couldn't, by a similar process, learn to\nrecognize and discount the effects of moral fashions.\n\nYou have to take that extra step if you want to think clearly.\nBut it's harder, because now you're working against social customs \ninstead of with them.  Everyone encourages you to grow up to the \npoint where you can discount your own bad moods.  Few encourage   \nyou to continue to the point where you can discount society's bad\nmoods.\n\nHow can you see the wave, when you're the water?  Always be\nquestioning.  That's the only defence.  What can't you say?  And why?\n\n\n\nNotes\n\nThanks to Sarah Harlin, Trevor Blackwell, Jessica Livingston,\nRobert Morris, Eric Raymond and Bob van der Zwaan for reading drafts of this\nessay, and to Lisa Randall, Jackie McDonough, Ryan Stanley and Joel Rainey \nfor conversations about heresy.\nNeedless to say they bear no blame for opinions\nexpressed in it, and especially for opinions not\nexpressed in it.\n\n\n", "August 2003\n\n\nWe may be able to improve the accuracy of Bayesian spam filters\nby having them follow links to see what's\nwaiting at the other end.  Richard Jowsey of\ndeath2spam now does\nthis in borderline cases, and reports that it works well.\n\nWhy only do it in borderline cases?  And why only do it once?\n\nAs I mentioned in Will Filters Kill Spam?,\nfollowing all the urls in\na spam would have an amusing side-effect.  If popular email clients\ndid this in order to filter spam, the spammer's servers\nwould take a serious pounding.  The more I think about this,\nthe better an idea it seems.  This isn't just amusing; it\nwould be hard to imagine a more perfectly targeted counterattack\non spammers.\n\nSo I'd like to suggest an additional feature to those\nworking on spam filters: a \"punish\" mode which,\nif turned on, would spider every url\nin a suspected spam n times, where n could be set by the user. [1]\n\nAs many people have noted, one of the problems with the\ncurrent email system is that it's too passive.  It does\nwhatever you tell it.  So far all the suggestions for fixing\nthe problem seem to involve new protocols.  This one  \nwouldn't.\n\nIf widely used, auto-retrieving spam filters would make\nthe email system rebound.  The huge volume of the\nspam, which has so far worked in the spammer's favor,\nwould now work against him, like a branch snapping back in   \nhis face.   Auto-retrieving spam filters would drive the\nspammer's \ncosts up, \nand his sales down:  his bandwidth usage\nwould go through the roof, and his servers would grind to a\nhalt under the load, which would make them unavailable\nto the people who would have responded to the spam.\n\nPump out a million emails an hour, get a\nmillion hits an hour on your servers.\n\n\nWe would want to ensure that this is only done to\nsuspected spams.  As a rule, any url sent to millions of\npeople is likely to be a spam url, so submitting every http\nrequest in every email would work fine nearly all the time.\nBut there are a few cases where this isn't true: the urls\nat the bottom of mails sent from free email services like\nYahoo Mail and Hotmail, for example.\n\nTo protect such sites, and to prevent abuse, auto-retrieval\nshould be combined with blacklists of spamvertised sites.\nOnly sites on a blacklist would get crawled, and\nsites would be blacklisted\nonly after being inspected by humans. The lifetime of a spam\nmust be several hours at least, so\nit should be easy to update such a list in time to\ninterfere with a spam promoting a new site. [2]\n\nHigh-volume auto-retrieval would only be practical for users\non high-bandwidth\nconnections, but there are enough of those to cause spammers\nserious trouble.   Indeed, this solution neatly\nmirrors the problem.  The problem with spam is that in\norder to reach a few gullible people the spammer sends \nmail to everyone.  The non-gullible recipients\nare merely collateral damage.  But the non-gullible majority\nwon't stop getting spam until they can stop (or threaten to\nstop) the gullible\nfrom responding to it.  Auto-retrieving spam filters offer\nthem a way to do this.\n\nWould that kill spam?  Not quite.  The biggest spammers\ncould probably protect their servers against auto-retrieving \nfilters.  However, the easiest and cheapest way for them\nto do it would be to include working unsubscribe links in   \ntheir mails.  And this would be a necessity for smaller fry,\nand for \"legitimate\" sites that hired spammers to promote\nthem.  So if auto-retrieving filters became widespread,\nthey'd become auto-unsubscribing filters.\n\nIn this scenario, spam would, like OS crashes, viruses, and\npopups, become one of those plagues that only afflict people\nwho don't bother to use the right software.\n\n\n\n\nNotes\n\n[1] Auto-retrieving filters will have to follow redirects,\nand should in some cases (e.g. a page that just says\n\"click here\") follow more than one level of links.\nMake sure too that\nthe http requests are indistinguishable from those of\npopular Web browsers, including the order and referrer.\n\nIf the response\ndoesn't come back within x amount of time, default to\nsome fairly high spam probability.\n\nInstead of making n constant, it might be a good idea to\nmake it a function of the number of spams that have been\nseen mentioning the site.  This would add a further level of\nprotection against abuse and accidents.\n\n[2] The original version of this article used the term\n\"whitelist\" instead of \"blacklist\".  Though they were\nto work like blacklists, I preferred to call them whitelists\nbecause it might make them less vulnerable to legal attack.\nThis just seems to have confused readers, though.\n\nThere should probably be multiple blacklists.  A single point\nof failure would be vulnerable both to attack and abuse.\n\n\n\n\nThanks to Brian Burton, Bill Yerazunis, Dan Giffin,\nEric Raymond, and Richard Jowsey for reading drafts of this.\n\n", "May 2003\n\n(This essay is derived from a guest lecture at Harvard, which incorporated\nan earlier talk at Northeastern.)\n\nWhen I finished grad school in computer science I went\nto art school to study painting.  A lot of people seemed surprised\nthat someone interested in computers would also be interested in painting.\nThey seemed to think that\nhacking and painting were very different kinds of work-- that\nhacking was cold, precise, and methodical, and that\npainting was the frenzied expression of some primal urge.\n\nBoth of these images are wrong.  Hacking and painting have a\nlot in common.  In fact, of all the different types of people I've\nknown, hackers and painters are among the most alike.\n\nWhat hackers and painters have in common is that they're\nboth makers.  Along with composers, architects, and writers,\nwhat hackers and painters are trying to do is make good things.\nThey're not doing research per se, though if in the course of\ntrying to make good things they discover some new technique,\nso much the better.\n\n\n\nI've never liked the term \"computer science.\"  The main\nreason I don't like it is that there's no such thing.\nComputer science is a\ngrab bag of tenuously related areas thrown together\nby an accident of history, like Yugoslavia.\nAt one end you have people who are really mathematicians,\nbut call what they're doing computer science so they can get DARPA grants.\nIn the middle you have people working on\nsomething like the natural history of computers-- studying the\nbehavior of algorithms for routing data through\nnetworks, for example.  And then at the other extreme you\nhave the hackers, who are trying to\nwrite interesting software, and for whom computers are just a\nmedium of expression, as concrete is for architects or\npaint for painters.  It's as if\nmathematicians, physicists, and architects all had to be in\nthe same department.\n\nSometimes what the hackers do is called \"software engineering,\"\nbut this term is just as misleading.\nGood software designers are no more engineers than architects are.\nThe border between architecture and engineering is not sharply\ndefined, but it's there.\nIt falls between what and how: architects decide what to do,\nand engineers figure out how to do it.\n\nWhat and how should not be kept too separate.  You're\nasking for trouble if you try to decide what to do without\nunderstanding how to do it.\nBut hacking can certainly be more than just deciding how to\nimplement some spec.  At its best, it's creating the spec-- though\nit turns out the best way to do that is to implement it.\n\n\n\nPerhaps one day\n\"computer science\" will, like Yugoslavia, get broken up into its\ncomponent parts.  That might be a good thing.  Especially if it\nmeant independence for my native land, hacking.\n\nBundling all these different types of work together in one\ndepartment may be convenient administratively, but it's confusing\nintellectually. That's the other reason I don't like the name\n\"computer science.\"  Arguably the people in the middle are doing\nsomething like an experimental science.  But the people at either\nend, the hackers and the mathematicians, are not actually doing science.\n\nThe mathematicians don't seem bothered by this.  They happily\nset to work proving theorems like the other mathematicians\nover in the math department, and probably soon stop noticing\nthat the building they work in says ``computer science'' on the\noutside.  But for the hackers this label is a problem.\nIf what they're doing is called science, it makes them feel they\nought to be acting scientific.\nSo instead of doing what they really want to do, which is   \nto design beautiful software, hackers in universities and\nresearch labs feel they ought to be writing research papers.\n\nIn the best case, the papers are just a formality.  Hackers write\ncool software, and then write a paper about it, and the paper\nbecomes a proxy for the achievement represented by the software.\nBut often this mismatch causes problems.  It's easy to\ndrift away from building beautiful things toward building ugly\nthings that make more suitable subjects for research papers.\n\nUnfortunately, beautiful things don't always make the\nbest subjects for papers.\nNumber one, research must be original-- and\nas anyone who has written a PhD dissertation knows, the way to\nbe sure that you're exploring virgin territory is to to stake\nout a piece of ground that no one wants.  Number two, research must be\nsubstantial-- and awkward systems yield meatier papers,\nbecause you can write about the obstacles you have to overcome\nin order to get things done.  Nothing yields meaty problems like\nstarting with the wrong assumptions.  Most of AI is an example\nof this rule; if you assume that knowledge can be represented\nas a list of predicate logic expressions whose arguments represent\nabstract concepts, you'll have a lot of\npapers to write about how to make this work.  As Ricky Ricardo\nused to say, \"Lucy, you got a lot of explaining to do.\"\n\nThe way to create something beautiful is often to make subtle\ntweaks to something that already exists, or to combine existing\nideas in a slightly new way.  This kind of work is hard to\nconvey in a research paper.\n\n\n\nSo why do universities and research labs continue to judge\nhackers by publications?\nFor the same reason that \"scholastic aptitude\"\ngets measured by simple-minded standardized tests, or\nthe productivity of programmers gets measured in lines of code.\nThese tests\nare easy to apply, and there is nothing so tempting as an easy test\nthat kind of works.\n\nMeasuring what hackers are actually trying to do, designing\nbeautiful software, would be much more difficult.  You need\na good sense of design to judge \ngood design.  And\nthere is no correlation, except possibly\na negative \none, between people's ability to recognize good\ndesign and their confidence that they can.\n\nThe only external test is time.  Over time, beautiful\nthings tend to thrive, and ugly\nthings tend to get discarded.  Unfortunately, the amounts of time\ninvolved can be longer than human lifetimes.  Samuel Johnson\nsaid it took a hundred years for a writer's reputation to\nconverge.  You have to wait for the writer's\ninfluential friends to die, and then for all their followers\nto die.\n\nI think hackers just have to resign themselves to having a large random\ncomponent in their reputations.  In this they are no different\nfrom other makers.  In fact, they're lucky by comparison.   \nThe influence of fashion is not nearly so great in hacking as it\nis in painting.\n\n\n\nThere are worse things than having people misunderstand your\nwork.  A worse danger is that you\nwill yourself misunderstand your work.  Related fields are\nwhere you go looking for ideas.  If you find yourself in the computer science\ndepartment, there is a natural temptation to believe, for example,\nthat hacking is the applied version of what theoretical computer\nscience is the theory of.   All\nthe time I was in graduate school I had an uncomfortable feeling\nin the back of my mind that I ought to know more theory,\nand that it was very remiss of me to have forgotten all that\nstuff within three weeks of the final exam.\n\nNow I realize I was\nmistaken.  Hackers need to understand the theory of computation\nabout as much as painters need to understand paint chemistry.\nYou need to know how to calculate time and\nspace complexity and about\nTuring completeness.  You might also want to remember at\nleast the concept of a state machine, in case you have to write\na parser or a regular expression library.  Painters in fact   \nhave to remember a good deal more about paint chemistry than \nthat.\n\nI've found that the best sources of ideas\nare not the other fields that have the word \"computer\" in\ntheir names, but the other fields inhabited by makers.\nPainting has been a much richer source of ideas than the\ntheory of computation.\n\nFor example, I was taught in college\nthat one ought to figure out a program\ncompletely on paper\nbefore even going near a computer.  I found that I did not\nprogram this way.  I found that I liked to program\nsitting in front of a computer, not a piece of paper.  Worse\nstill, instead of patiently writing out a complete program\nand assuring myself it was correct, I tended to just spew\nout code that was hopelessly broken, and gradually beat it into\nshape.  Debugging, I was taught, was a kind of final pass where\nyou caught typos and oversights.  The way I worked, it\nseemed like programming consisted of debugging.\n\nFor a long time I felt bad about this, just as I once\nfelt bad that I didn't hold my pencil the way they taught me\nto in elementary school.\nIf I had only looked over at\nthe other makers, the painters or the architects, I would\nhave realized that there was a name for what I was doing:\nsketching.  As far as I can tell, the\nway they taught me to program in college was all wrong.\nYou should figure out programs as you're writing them,\njust as writers and painters and architects do.\n\nRealizing this has real implications for software design.\nIt means that a programming language should, above all, be\nmalleable.  A programming language is for \nthinking of\nprograms, not for expressing programs you've already thought\nof.  It should be a pencil, not a pen.  Static typing would\nbe a fine idea if people actually did write programs the way\nthey taught me to in college.  But that's not how any of the  \nhackers I know write programs.  We need a language that lets us\nscribble and smudge and smear, not a language where you have\nto sit with a teacup of types balanced on your knee and make\npolite conversation with a strict old aunt of a compiler.\n\n\n\nWhile we're on the subject of static typing, identifying with\nthe makers will save us from another problem that afflicts\nthe sciences: math envy.  Everyone in the sciences\nsecretly believes that mathematicians are smarter than they are.  \nI think mathematicians also believe this.  At any rate,\nthe result is that scientists tend to make their\nwork look as mathematical as possible.  In a field like\nphysics this probably doesn't do much harm, but the further you\nget from the natural sciences, the more of a problem it\nbecomes.\n\nA page of formulas just looks so impressive.\n(Tip: for extra impressiveness, use Greek variables.)  And\nso there is a great temptation to work on problems you\ncan treat formally, rather than problems that are, say,\nimportant.\n\nIf hackers identified with other makers, like writers and\npainters, they wouldn't feel tempted to do      \nthis.  Writers and painters don't suffer from math envy.\nThey feel as if they're doing something completely unrelated.\nSo are hackers, I think.\n\n\n\nIf universities and research labs keep hackers from doing\nthe kind of work they want to do,\nperhaps the place for them is in companies.\nUnfortunately, most companies won't let hackers do what they\nwant either.  Universities and research labs force hackers\nto be scientists, and companies force them to be engineers.\n\nI only discovered this myself quite recently.  When Yahoo bought\nViaweb, they asked me what I wanted to do.  I had never\nliked the business side very much, and said that I just wanted to\nhack.  When I got to Yahoo, I found that what hacking meant\nto them was implementing software, not designing it.  Programmers\nwere seen as technicians who translated the visions (if\nthat is the word) of product managers into code.\n\nThis seems to be the\ndefault plan in big companies.  They do it because\nit decreases the standard deviation of the outcome.\nOnly a small percentage of hackers can actually design software,\nand it's hard for the\npeople running a company to pick these out.  So instead of\nentrusting the future of the software to\none brilliant hacker, most companies set things up so that it is\ndesigned by committee, and the hackers merely\nimplement the design.\n\nIf you want to make money at some point, remember this,\nbecause this is one of the reasons startups win.  Big companies want\nto decrease the standard deviation of design outcomes because they\nwant to avoid disasters.  But when you damp oscillations, you\nlose the high points as well as the low.  This is not a problem for\nbig companies, because they don't win by making great\nproducts.  Big companies win by sucking less than other big companies.\n\nSo if you can figure out a way to get in a\ndesign war with a company big enough that its software is   \ndesigned by product managers, they'll never be able to keep up\nwith you.  These opportunities are not easy to find, though.\nIt's hard to engage a big company in a design war,\njust as it's hard to engage an opponent inside a castle in hand\nto hand combat.  It would be pretty easy to write a better\nword processor than Microsoft Word, for example, but Microsoft,\nwithin the castle of their operating system monopoly,\nprobably wouldn't even notice if you did.\n\nThe place to fight design wars is in new markets, where no one\nhas yet managed to establish any fortifications.  That's where\nyou can win big by taking the bold approach to design, and\nhaving the same people both design and implement the product.  \nMicrosoft themselves did this at the start.  So did Apple.\nAnd Hewlett-Packard.  I suspect almost every successful startup\nhas.\n\n\n\nSo one way to build great software is to start your own\nstartup.  There are two problems with this, though.  One is\nthat in a startup you have to do so much besides write software.\nAt Viaweb I considered myself lucky if I\ngot to hack a quarter of the time.  And the things I had to   \ndo the other three quarters of the time ranged from tedious\nto terrifying.  I have a benchmark for this, because I\nonce had to leave a board meeting to have\nsome cavities filled.  I remember sitting back in the\ndentist's chair, waiting for the drill, and feeling like\nI was on vacation.\n\nThe other problem with startups is that there is not much\noverlap between the kind of software that makes money and the\nkind that's interesting to write.  Programming languages\nare interesting to write, and Microsoft's first product was\none, in fact, but no one will pay for programming languages\nnow.  If you want to make money, you tend to be forced to work\non problems that are too nasty for anyone to solve for free.\n\nAll makers face this problem.  Prices are\ndetermined by supply and demand, and there is just not as much\ndemand for things that are fun to work on as there is for\nthings that solve the mundane problems of individual customers.\nActing in off-Broadway plays just doesn't pay as well as\nwearing a gorilla suit in someone's booth at a\ntrade show.  Writing novels doesn't pay as well as writing\nad copy for garbage disposals.\nAnd hacking programming languages doesn't pay as well\nas figuring out how to connect some company's\nlegacy database to their Web server.\n\n\n\nI think the answer to this problem, in the case of software,\nis a concept known to nearly all makers: the day job.\nThis phrase began with musicians, who\nperform at night.  More generally, it means that you have one\nkind of work you do for money, and another for love.\n\nNearly all makers have day jobs early in their careers.\nPainters and writers notoriously do.  If you're lucky\nyou can get a day job that's closely\nrelated to your real work.  Musicians often\nseem to work in record stores.  A hacker working on some\nprogramming language or operating system might likewise be able to\nget a day job using it.  [1]\n\nWhen I say that the answer is for hackers to have day jobs, \nand work on beautiful software on the side, I'm not proposing\nthis as a new idea.  This is what open-source hacking is all   \nabout.  What I'm saying is that open-source is probably the right\nmodel, because it has been independently confirmed by all the  \nother makers.\n\nIt seems surprising to me that any employer would be reluctant\nto let hackers work on open-source projects.\nAt Viaweb, we would have been reluctant to hire anyone\nwho didn't.  When we interviewed\nprogrammers, the main\nthing we cared about was what kind of software they\nwrote in their spare time.\nYou can't do anything really well unless\nyou love it, and if you love to hack you'll inevitably\nbe working on projects of your own. [2]\n\n\n\nBecause hackers are makers rather than scientists,\nthe right place to look for metaphors is not in the\nsciences, but among other kinds of makers.  What else can painting\nteach us about hacking?\n\nOne thing we can learn, or at least confirm, from the\nexample of painting is how to learn to hack.  You learn to\npaint mostly by doing it.\nDitto for hacking.  Most hackers don't learn to hack by\ntaking college courses in programming.  They learn to hack\nby writing programs of their own at age thirteen.  Even in   \ncollege classes, you learn to hack mostly by hacking. [3]\n\nBecause painters leave a trail of work behind them, you\ncan watch them learn by doing.  If you look at the work\nof a painter in chronological order, you'll find that each  \npainting builds on things that have been learned in previous\nones.  When there's something in\na painting that works very well, you can usually find version \n1 of it in a smaller form in some earlier painting.\n\nI think most makers work this way.  Writers and architects seem\nto as well.  Maybe it would be good for hackers\nto act more like painters, and regularly start over from scratch,\ninstead of continuing to work for years on one project, and\ntrying to incorporate all their later ideas as revisions.\n\nThe fact that hackers learn to hack by doing it is another\nsign of how different hacking is from the sciences.  Scientists\ndon't learn science by doing it, but by doing labs and problem sets.\nScientists start out doing work that's perfect, in the sense\nthat they're just trying to reproduce work someone else has \nalready done for them.\nEventually, they get\nto the point where they can do original work.\nWhereas hackers, from the start, are doing original work; it's\njust very bad.  So hackers start original, and get good, and\nscientists start good, and get original.\n\n\n\n\nThe other way makers learn is from examples.\nFor a painter, a museum is a reference library of techniques.\nFor hundreds of years it has been part of the traditional\neducation of painters to copy the works of the great masters,\nbecause copying forces you to look closely\nat the way a painting is made.\n\nWriters do this too.\nBenjamin Franklin learned to write by summarizing the points   \nin the essays of Addison and Steele and then trying to\nreproduce them.  Raymond Chandler did the same thing\nwith detective stories.\n\nHackers, likewise, can learn to program by looking at \ngood programs-- not just at what they do, but the source\ncode too.  One of the less publicized benefits\nof the open-source movement is that it has made it easier\nto learn to program.  When I learned to program, we had to rely\nmostly on examples in books.  The one big chunk of\ncode available then was Unix, but even this was not   \nopen source.  Most of the people who read the source\nread it in illicit photocopies of John Lions' book, which\nthough written in 1977 was not allowed to be published\nuntil 1996.\n\n\n\nAnother example we can take from painting is the way that\npaintings are created by gradual refinement.  Paintings usually\nbegin with a sketch.\nGradually the details get filled in.\nBut it is not merely a process of filling in. Sometimes   \nthe original plans turn out to be mistaken.\nCountless paintings,\nwhen you look at them in xrays, turn out to have limbs that\nhave been moved or facial features that have been readjusted.\n\nHere's a case where we can learn from painting.  I think hacking\nshould work this way too.  It's unrealistic\nto expect that the specifications for a program will be\nperfect. You're\nbetter off if you admit this up front, and write programs in\na way that allows specifications to change on the fly.\n\n(The structure of large companies makes this hard for them\nto do, so here is another place where startups have an advantage.)\n\nEveryone by now presumably knows about the danger of premature\noptimization.  I think we should be just as worried about\npremature design-- deciding too early what\na program should do.\n\nThe right tools can help us avoid\nthis danger.\nA good programming language should, like oil paint, make it\neasy to change your mind.  Dynamic typing is a win here because\nyou don't have to\ncommit to specific data representations up front.\nBut the key to flexibility, I think, is to make the language\nvery abstract.\nThe easiest program to change is one that's very short.\n\n\n\n\nThis sounds like a paradox, but a great painting\nhas to be better than it has to be.\nFor example, when Leonardo\npainted the portrait of Ginevra de Benci\nin the National Gallery, he put a juniper bush behind her head.\nIn it he carefully\npainted each individual leaf.  Many painters might have thought,\nthis is just something to put in the background to frame\nher head.  No one will look that closely at it.\n\nNot Leonardo.  How hard he worked on part of a painting didn't\ndepend at all on how closely he expected anyone to look at it.\nHe was like Michael Jordan.  Relentless.\n\nRelentlessness wins because, in the aggregate, unseen details\nbecome visible.\nWhen people walk by the portrait of Ginevra de Benci,\ntheir attention is often immediately arrested by it,\neven before they look at the label and notice that it says\nLeonardo da Vinci.  All those unseen details combine to produce\nsomething that's just stunning, like a thousand barely audible\nvoices all singing in tune.\n\nGreat software, likewise, requires a fanatical devotion to\nbeauty.  If you look inside good software, you find that\nparts no one is ever supposed to see are beautiful too.\nI'm not claiming I write great software, but I\nknow that when it comes to code I behave in a way that would\nmake me eligible for prescription drugs if I approached everyday\nlife the same way.\nIt drives me crazy to see code that's badly indented,\nor that uses ugly variable names.\n\n\n\nIf a hacker were a mere implementor, turning a spec into code, then\nhe could just work his way through it from one end to the other like\nsomeone digging a ditch.  But if the hacker is a creator, we have\nto take inspiration into account.\n\nIn hacking, like painting,\nwork comes in cycles.  Sometimes you get excited about some\nnew project and you want to work sixteen hours a day on it. \nOther times nothing seems interesting.\n\nTo do good work you have to take these cycles into\naccount, because they're affected by how you react to them.\nWhen you're driving a\ncar with a manual transmission on a hill, you have to back off\nthe clutch sometimes to avoid stalling.  Backing\noff can likewise prevent ambition from stalling.\nIn both painting and hacking there are some\ntasks that are terrifyingly ambitious, and others that are\ncomfortingly routine.  It's a good idea to save some easy\ntasks for moments when you would otherwise stall.\n\nIn hacking, this can literally mean saving up bugs.\nI like debugging: it's the\none time that hacking is as straightforward as   \npeople think it is.  You have a\ntotally constrained problem, and all you have to do is solve\nit.  Your program is supposed to do x.  Instead it does y.\nWhere does it go wrong? You know you're going to win\nin the end.  It's as relaxing as painting a wall.\n\n\n\nThe example of painting can teach us not only how to manage our\nown work, but how to work together.  A lot of the\ngreat art of the past is the work of multiple hands, though\nthere may only be one name on the wall next to it in the\nmuseum.  Leonardo was an apprentice in the workshop of\nVerrocchio and painted one of the angels in his Baptism of\nChrist.  This sort of thing was the rule, not the exception.\nMichelangelo was considered especially dedicated for insisting\non painting all the figures on the ceiling of the Sistine\nChapel himself.\n\nAs far as I know, when painters worked together on a painting,\nthey never worked on the same parts.  It was common\nfor the master to paint the principal figures and for assistants\nto paint the others and the background.  But you never had\none guy painting over the work of another.\n\nI think this is the right model for collaboration in software\ntoo.  Don't push it too far.  When a piece of code is\nbeing hacked by three or four different people, no one of whom\nreally owns it, it will end up being like a common-room.  It will\ntend to feel bleak and abandoned, and accumulate cruft.\nThe right\nway to collaborate, I think, is to divide projects into sharply\ndefined modules, each with a definite owner, and with interfaces\nbetween them that are as carefully designed and, if possible,\nas articulated as programming languages.\n\n\n\nLike painting, most software is intended for\na human audience.  And so hackers, like painters, must have\nempathy to do really great work.  You have to be able to see\nthings from the user's point of view.\n\nWhen I was a kid I was always being told to look at things from\nsomeone else's point of view.  What this always meant in\npractice was to do what someone else wanted, instead of what\nI wanted.  This of course gave empathy a bad name, and I made a\npoint of not cultivating it.\n\nBoy, was I wrong.  It turns out that looking at things from \nother people's point of view is practically the secret of\nsuccess.  It doesn't necessarily mean being self-sacrificing.\nFar from it.  Understanding how someone else sees things\ndoesn't imply that you'll act in his interest; in some\nsituations-- in war, for example-- you want to do exactly\nthe opposite. [4]\n\nMost makers make things for a human audience.\nAnd to engage an audience you have to understand what they need.\nNearly all the greatest paintings are paintings of people,\nfor example, because people are what people are interested in.\n\nEmpathy is probably the single most important difference\nbetween a good hacker and a great one.  Some hackers\nare quite smart, but when it comes to empathy are\npractically solipsists.  It's hard for such      \npeople to design great software [5], because they can't\nsee things from the user's point of view.\n\nOne way to tell how good people are at empathy is to watch\nthem explain a technical question to someone without a technical\nbackground.  We probably all know people who, though otherwise smart,\nare just comically bad at this.  If someone asks them at\na dinner party what a programming language is, they'll\nsay something like ``Oh, a high-level language is what\nthe compiler uses as input to generate object code.''\nHigh-level language?  Compiler?  Object code?  Someone who \ndoesn't know what a programming language is obviously doesn't\nknow what these things are, either.\n\nPart of what software has to do is explain itself.  So to   \nwrite good software you have to understand how little users   \nunderstand.\nThey're going to walk up to the software with no preparation, and\nit had better do what they guess it will, because they're\nnot going to read the manual.  The best system I've ever seen \nin this respect was the original Macintosh, in 1985.\nIt did what software almost never does: it just worked. [6]\n\nSource code, too, should explain itself.  If I could get people to\nremember just one quote about programming, it would be the\none at the beginning of Structure and Interpretation of Computer\nPrograms.\n\nPrograms should be written for people to read, and\nonly incidentally for machines to execute.\n\nYou need to have \nempathy not just for your users, but for your readers.  It's in  \nyour interest, because you'll be one of them.\nMany a hacker has written a program only to\nfind on returning to it six months later that he has no idea   \nhow it works.  I know several people who've sworn off Perl after\nsuch experiences. [7]\n\nLack of empathy is associated with intelligence, to the point\nthat there is even something of a fashion for it in some places.\nBut I don't think there's any correlation.\nYou can do well in math and\nthe natural sciences without having to learn empathy, and people in these\nfields tend to be smart, so the two qualities have come to be\nassociated.  But there are plenty of dumb people who are bad at\nempathy too.  Just listen to the people who call in with questions on\ntalk shows.  They ask whatever it is they're asking in\nsuch a roundabout way\nthat the hosts often have to rephrase the question for them.\n\n\n\nSo, if hacking works like painting and writing, is it as cool?\nAfter all, you only get one life.\nYou might as well spend it working on something great.\n\nUnfortunately, the question is hard to answer.  There is always\na big time lag in prestige.  It's like light from a distant star.\nPainting has prestige now because of great work people did five hundred\nyears ago.  At the time, no one thought\nthese paintings were as important as we do today.  It would have\nseemed very odd to people at the time that Federico da Montefeltro,\nthe Duke of Urbino, would one day be known mostly as the guy\nwith the strange nose in a painting \nby Piero della Francesca.\n\nSo while I admit that hacking doesn't seem as cool as painting now,\nwe should remember that painting itself didn't seem as cool in\nits glory days as it does now.\n\nWhat we can say with some confidence is that these are the glory\ndays of hacking.  In most fields the great work is done early on.\nThe paintings made between 1430 and 1500 are still unsurpassed.\nShakespeare appeared just as professional theater was being born,\n\nand pushed the medium\nso far that every playwright since has had to live in his shadow.\nAlbrecht Durer did the same thing with engraving, and Jane Austen\nwith the novel.\n\nOver and over we see the same pattern.  A new medium appears, and\npeople are so excited about it that they explore most of its\npossibilities in the first couple generations.   Hacking seems\nto be in this phase now.\n\nPainting was not, in Leonardo's time, as cool as his work\nhelped make it.\nHow cool hacking turns out to be will depend on what we can\ndo with this new medium.  \n\n\n\n\n\n\nNotes\n", "May 2003\n\nIf Lisp is so great, why don't more people use it?  I was    \nasked this question by a student in the audience at a \ntalk I gave recently.  Not for the first time, either.\n\nIn languages, as in so many things, there's not much     \ncorrelation between popularity and quality.  Why does   \nJohn Grisham (King of Torts sales rank, 44) outsell\nJane Austen (Pride and Prejudice sales rank, 6191)?\nWould even Grisham claim that it's because he's a better\nwriter?\n\nHere's the first sentence of Pride and Prejudice:\n\nIt is a truth universally acknowledged, that a single man \nin possession of a good fortune must be in want of a\nwife.\n\n\"It is a truth universally acknowledged?\"  Long words for\nthe first sentence of a love story.\n\nLike Jane Austen, Lisp looks hard.  Its syntax, or lack\nof syntax, makes it look completely unlike \nthe languages\nmost people are used to.  Before I learned Lisp, I was afraid\nof it too.  I recently came across a notebook from 1983\nin which I'd written:\n\nI suppose I should learn Lisp, but it seems so foreign.\n\nFortunately, I was 19 at the time and not too resistant to learning\nnew things.  I was so ignorant that learning\nalmost anything meant learning new things.\n\nPeople frightened by Lisp make up other reasons for not\nusing it.  The standard\nexcuse, back when C was the default language, was that Lisp\nwas too slow.  Now that Lisp dialects are among\nthe faster\nlanguages available, that excuse has gone away.\nNow the standard excuse is openly circular: that other languages\nare more popular.\n\n(Beware of such reasoning.  It gets you Windows.)\n\nPopularity is always self-perpetuating, but it's especially\nso in programming languages. More libraries\nget written for popular languages, which makes them still\nmore popular.  Programs often have to work with existing programs,\nand this is easier if they're written in the same language,\nso languages spread from program to program like a virus.\nAnd managers prefer popular languages, because they give them \nmore leverage over developers, who can more easily be replaced.\n\nIndeed, if programming languages were all more or less equivalent,\nthere would be little justification for using any but the most\npopular.  But they aren't all equivalent, not by a long\nshot.  And that's why less popular languages, like Jane Austen's \nnovels, continue to survive at all.  When everyone else is reading \nthe latest John Grisham novel, there will always be a few people \nreading Jane Austen instead.\n\n", "April 2003\n\n(This essay is derived from a keynote talk at PyCon 2003.)\n\nIt's hard to predict what\nlife will be like in a hundred years.  There are only a few\nthings we can say with certainty.  We know that everyone will\ndrive flying cars,\nthat zoning laws will be relaxed to allow buildings\nhundreds of stories tall, that it will be dark most of the\ntime, and that women will all be trained in the martial arts.  \nHere I want to zoom in on one detail of this\npicture.  What kind of programming language will they use to\nwrite the software controlling those flying cars?\n\nThis is worth thinking about not so\nmuch because we'll actually get to use these languages as because,\nif we're lucky, we'll use languages on the path from this\npoint to that.\n\n\n\nI think that, like species, languages will form evolutionary trees,\nwith dead-ends branching off all over.  We can see this\nhappening already.\nCobol, for all its sometime popularity, does not seem to have any\nintellectual descendants.  It is an evolutionary dead-end-- a\nNeanderthal language.\n\nI predict a similar fate for Java.  People\nsometimes send me mail saying, \"How can you say that Java\nwon't turn out to be a successful language?  It's already\na successful language.\"  And I admit that it is, if you\nmeasure success by shelf space taken up by books on it\n(particularly individual books on it), or by\nthe number of undergrads who believe they have to\nlearn it to get a job.  When I say Java won't\nturn out to be a successful language, I mean something more\nspecific:  that Java\nwill turn out to be an evolutionary dead-end, like Cobol.\n\nThis is just a guess.  I may be wrong.  My point here is not to dis Java,\nbut to raise the issue of evolutionary\ntrees and get people asking, where on the tree is language X?\nThe reason to ask this question isn't just so that\nour ghosts can say, in a\nhundred years, I told you so.  It's because staying close to  \nthe main branches is a useful heuristic for finding languages that will\nbe good to program in now.\n\nAt any given time, you're probably happiest on\nthe main branches of an evolutionary tree.\nEven when there were still plenty of Neanderthals, \nit must have sucked to be one.  The\nCro-Magnons would have been constantly coming over and\nbeating you up and stealing your food.\n\nThe reason I want to\nknow what languages will be like in a hundred years is so that\nI know what branch of the tree to bet on now.\n\n\n\nThe evolution of languages differs from the evolution of species\nbecause branches can converge.  The Fortran branch, for example,\nseems to be merging with the descendants\nof Algol.  In theory this is possible for species too, but it's\nnot likely to have happened to any bigger than a cell.\n\nConvergence\nis more likely for languages partly because the space of\npossibilities is smaller, and partly because mutations\nare not random.  Language designers deliberately incorporate\nideas from other languages.\n\nIt's especially useful for language designers to think\nabout where the evolution of programming languages is likely\nto lead, because they can steer accordingly. \nIn that case, \"stay on a main branch\" becomes more than a\nway to choose a good language.\nIt becomes a heuristic for making the right decisions about\nlanguage design.\n\n\n\nAny programming language can be divided into\ntwo parts:  some set of fundamental operators that play the role\nof axioms, and the rest of the language, which could in principle\nbe written in terms of these fundamental operators.\n\nI think the fundamental operators are the most important factor in a\nlanguage's long term survival.  The rest you can change.  It's\nlike the rule that in buying a house you should consider\nlocation first of all.  Everything else you can fix later, but you\ncan't fix the location.\n\nI think it's important not just that the axioms be well chosen, \nbut that there be few of them.  Mathematicians have always felt \nthis way about axioms-- the fewer, the better-- and I think they're\nonto something.\n\nAt the very least, it has to be a useful exercise to look closely\nat the core of a language to see if there are any axioms that\ncould be weeded out.  I've found in my long career as a slob that\ncruft breeds cruft, and I've seen this happen in software as\nwell as under beds and in the corners of rooms.\n\nI have a hunch that\nthe main branches of the evolutionary tree pass through the languages\nthat have the smallest, cleanest cores.\nThe more of a language you can write in itself,\nthe better.\n\n\n\nOf course, I'm making a big assumption in even asking what\nprogramming languages will be like in a hundred years.\nWill we even be writing programs in a hundred years?  Won't\nwe just tell computers what we want them to do?\n\nThere hasn't been a lot of progress in that department\nso far.\nMy guess is that a hundred years from now people will\nstill tell computers what to do using programs we would recognize\nas such.  There may be tasks that we\nsolve now by writing programs and which in a hundred years\nyou won't have to write programs to solve, but I think\nthere will still be a good deal of\nprogramming of the type that we do today.\n\nIt may seem presumptuous to think anyone can predict what\nany technology will look like in a hundred years.  But\nremember that we already have almost fifty years of history behind us.\nLooking forward a hundred years is a graspable idea\nwhen we consider how slowly languages have evolved in the\npast fifty.\n\nLanguages evolve slowly because they're not really technologies.\nLanguages are notation.  A program is a formal description of \nthe problem you want a computer to solve for you.  So the rate\nof evolution in programming languages is more like the\nrate of evolution in mathematical notation than, say,\ntransportation or communications.\nMathematical notation does evolve, but not with the giant\nleaps you see in technology.\n\n\n\nWhatever computers are made of in a hundred years, it seems  \nsafe to predict they will be much faster than\nthey are now.  If Moore's Law continues to put out, they will be 74\nquintillion (73,786,976,294,838,206,464) times faster.  That's kind of\nhard to imagine.  And indeed, the most likely prediction in the\nspeed department may be that Moore's Law will stop working.\nAnything that is supposed to double every eighteen months seems\nlikely to run up against some kind of fundamental limit eventually.\nBut I have no trouble believing that computers will be very much\nfaster. Even if they only end up being a paltry million\ntimes faster, that should change the ground rules for programming\nlanguages substantially.  Among other things, there\nwill be more room for what\nwould now be considered slow languages, meaning languages\nthat don't yield very efficient code.\n\nAnd yet some applications will still demand speed.\nSome of the problems we want to solve with\ncomputers are created by computers; for example, the\nrate at which you have to process video images depends\non the rate at which another computer can\ngenerate them.  And there is another class of problems\nwhich inherently have an unlimited capacity to soak up cycles:\nimage rendering, cryptography, simulations.\n\nIf some applications can be increasingly inefficient while\nothers continue to demand all the speed the hardware can\ndeliver, faster computers will mean that languages have\nto cover an ever wider range of efficiencies.  We've seen\nthis happening already.  Current implementations of some\npopular new languages are shockingly wasteful by the\nstandards of previous decades.\n\nThis isn't just something that happens with programming\nlanguages.  It's a general historical trend.  As technologies improve,\neach generation can do things that the previous generation\nwould have considered wasteful.  People thirty years ago would\nbe astonished at how casually we make long distance phone calls.\nPeople a hundred years ago would be even more astonished that \na package would one day travel from Boston to New York via Memphis.\n\n\n\nI can already tell you what's going to happen to all those extra\ncycles that faster hardware is going to give us in the   \nnext hundred years.  They're nearly all going to be wasted.\n\nI learned to program when computer power was scarce.\nI can remember taking all the spaces out of my Basic programs\nso they would fit into the memory of a 4K TRS-80.  The\nthought of all this stupendously inefficient software\nburning up cycles doing the same thing over and over seems\nkind of gross to me.  But I think my intuitions here are wrong.  I'm\nlike someone who grew up poor, and can't bear to spend money\neven for something important, like going to the doctor.\n\nSome kinds of waste really are disgusting.  SUVs, for example, would\narguably be gross even if they ran on a fuel which would never\nrun out and generated no pollution.  SUVs are gross because they're\nthe solution to a gross problem. (How to make minivans look more\nmasculine.)\nBut not all waste is bad.  Now that we have the infrastructure\nto support it, counting the minutes of your long-distance\ncalls starts to seem niggling.   If you have the\nresources, it's more elegant to think of all phone calls as\none kind of thing, no matter where the other person is.\n\nThere's good waste, and bad waste.  I'm interested\nin good waste-- the kind where, by spending more, we can get  \nsimpler designs.  How will we take advantage of the opportunities\nto waste cycles that we'll get from new, faster hardware?\n\nThe desire for speed is so deeply engrained in us, with \nour puny computers, that it will take a conscious effort\nto overcome it.  In language design, we should be consciously seeking out\nsituations where we can trade efficiency for even the\nsmallest increase in convenience.\n\n\n\nMost data structures exist because of speed.  For example,\nmany languages today have both strings and lists.  Semantically, strings\nare more or less a subset of lists in which the elements are\ncharacters.  So why do you need a separate data type?\nYou don't, really.  Strings only\nexist for efficiency.  But it's lame to clutter up the semantics\nof the language with hacks to make programs run faster.\nHaving strings in a language seems to be a case of\npremature optimization.\n\nIf we think of the core of a language as a set of axioms,  \nsurely it's gross to have additional axioms that add no expressive\npower, simply for the sake of efficiency.  Efficiency is\nimportant, but I don't think that's the right way to get it.\n\nThe right way to solve that problem, I think, is to separate\nthe meaning of a program from the implementation details. \nInstead of having both lists and strings, have just lists,\nwith some way to give the compiler optimization advice that \nwill allow it to lay out strings as contiguous bytes if\nnecessary.\n\nSince speed doesn't matter in most of a program, you won't\nordinarily need to bother with\nthis sort of micromanagement.\nThis will be more and more true as computers get faster.\n\n\n\nSaying less about implementation should also make programs\nmore flexible.\nSpecifications change while a program is being written, and this is not\nonly inevitable, but desirable.\n\nThe word \"essay\" comes\nfrom the French verb \"essayer\", which means \"to try\".\nAn essay, in the original sense, is something you\nwrite to try to figure something out.  This happens in\nsoftware too.  I think some of the best programs were essays,\nin the sense that the authors didn't know when they started\nexactly what they were trying to write.\n\nLisp hackers already know about the value of being flexible\nwith data structures.  We tend to write the first version of\na program so that it does everything with lists.  These\ninitial versions can be so shockingly inefficient that it\ntakes a conscious effort not to think about what they're\ndoing, just as, for me at least, eating a steak requires a\nconscious effort not to think where it came from.\n\nWhat programmers in a hundred years will be looking for, most of\nall, is a language where you can throw together an unbelievably\ninefficient version 1 of a program with the least possible\neffort.  At least, that's how we'd describe it in present-day\nterms.  What they'll say is that they want a language that's\neasy to program in.\n\nInefficient software isn't gross.  What's gross is a language\nthat makes programmers do needless work.  Wasting programmer time\nis the true inefficiency, not wasting machine time.  This will\nbecome ever more clear as computers get faster.\n\n\n\nI think getting rid of strings is already something we\ncould bear to think about.  We did it in Arc, and it seems\nto be a win;  some operations that would be awkward to\ndescribe as regular expressions can be described\neasily as recursive functions.\n\nHow far will this flattening of data structures go?  I can think\nof possibilities that shock even me, with my conscientiously broadened\nmind.  Will we get rid of arrays, for example?  After all, they're\njust a subset of hash tables where the keys are vectors of\nintegers.   Will we replace hash tables themselves with lists?\n\nThere are more shocking prospects even than that.  The Lisp\nthat McCarthy described in 1960, for example, didn't\nhave numbers.  Logically, you don't need to have a separate notion\nof numbers, because you can represent them as lists:  the integer\nn could be represented as a list of n elements.  You can do math this\nway.  It's just unbearably inefficient.\n\nNo one actually proposed implementing numbers as lists in\npractice.  In fact, McCarthy's 1960 paper was not, at the time,\nintended to be implemented at all.  It was a theoretical exercise,\nan attempt to create a more elegant alternative to the Turing\nMachine.  When someone did, unexpectedly, take this paper and\ntranslate it into a working Lisp interpreter, numbers certainly\nweren't represented as lists; they were represented in binary,\nas in every other language.\n\nCould a programming language go so far as to get rid of numbers\nas a fundamental data type?  I ask this not so much as a serious\nquestion as as a way to play chicken with the future.  It's like\nthe hypothetical case of an irresistible force meeting an \nimmovable object-- here, an unimaginably inefficient\nimplementation meeting unimaginably great resources.\nI don't see why not.  The future is pretty long.  If there's\nsomething we can do to decrease the number of axioms in the core\nlanguage, that would seem to be the side to bet on as t approaches\ninfinity.  If the idea still seems unbearable in a hundred years,\nmaybe it won't in a thousand.\n\nJust to be clear about this, I'm not proposing that all numerical\ncalculations would actually be carried out using lists.  I'm proposing\nthat the core language, prior to any additional notations about\nimplementation, be defined this way.  In practice any program\nthat wanted to do any amount of math would probably represent\nnumbers in binary, but this would be an optimization, not part of\nthe core language semantics.\n\n\n\nAnother way to burn up cycles is to have many layers of\nsoftware between the application and the hardware.  This too is\na trend we see happening already: many recent languages are\ncompiled into byte code.  Bill Woods once told me that,\nas a rule of thumb, each layer of interpretation costs a\nfactor of 10 in speed.  This extra cost buys you flexibility.\n\nThe very first version of Arc was an extreme case of this sort\nof multi-level slowness, with corresponding benefits.  It\nwas a classic \"metacircular\" interpreter written\non top of Common Lisp, with a definite family resemblance\nto the eval function defined in McCarthy's original Lisp paper.\nThe whole thing was only a couple hundred lines of\ncode, so it was very easy to understand and change.  The \nCommon Lisp we used, CLisp, itself runs on top\nof a byte code interpreter.  So here we had two levels of\ninterpretation, one of them (the top one) shockingly inefficient,\nand the language was usable.  Barely usable, I admit, but\nusable.\n\nWriting software as multiple layers is a powerful technique\neven within applications.  Bottom-up programming means writing\na program as a series of layers, each of which serves as a\nlanguage for the one above.  This approach tends to yield\nsmaller, more flexible programs.  It's also the best route to   \nthat holy grail, reusability.  A language is by definition\nreusable.  The more\nof your application you can push down into a language for writing\nthat type of application, the more of your software will be \nreusable.\n\nSomehow the idea of reusability got attached\nto object-oriented programming in the 1980s, and no amount of\nevidence to the contrary seems to be able to shake it free.  But\nalthough some object-oriented software is reusable, what makes\nit reusable is its bottom-upness, not its object-orientedness.\nConsider libraries: they're reusable because they're language,\nwhether they're written in an object-oriented style or not.\n\nI don't predict the demise of object-oriented programming, by the\nway.  Though I don't think it has much to offer good programmers,\nexcept in certain specialized domains, it is irresistible to   \nlarge organizations.  Object-oriented programming\noffers a sustainable way to write spaghetti code.  It lets you accrete\nprograms as a series of patches.\n\nLarge organizations\nalways tend to develop software this way, and I expect this\nto be as true in a hundred years as it is today.\n\n\n\n\nAs long as we're talking about the future, we had better\ntalk about parallel computation, because that's where this \nidea seems to live.  That is, no matter when you're talking, parallel\ncomputation seems to be something that is going to happen\nin the future.\n\nWill the future ever catch up with it?  People have been\ntalking about parallel computation as something imminent \nfor at least 20\nyears, and it hasn't affected programming practice much so far.\nOr hasn't it?  Already\nchip designers have to think about it, and so must\npeople trying to write systems software on multi-cpu computers.\n\nThe real question is, how far up the ladder of abstraction will\nparallelism go?\nIn a hundred years will it affect even application programmers?  Or\nwill it be something that compiler writers think about, but\nwhich is usually invisible in the source code of applications?\n\nOne thing that does seem likely is that most opportunities for\nparallelism will be wasted.  This is a special case of my more   \ngeneral prediction that most of the extra computer power we're\ngiven will go to waste.  I expect that, as with the stupendous\nspeed of the underlying hardware, parallelism will be something\nthat is available if you ask for it explicitly, but ordinarily\nnot used.  This implies that the kind of parallelism we have in\na hundred years will not, except in special applications, be\nmassive parallelism.  I expect for\nordinary programmers it will be more like being able to fork off\nprocesses that all end up running in parallel.\n\nAnd this will, like asking for specific implementations of data\nstructures, be something that you do fairly late in the life of a\nprogram, when you try to optimize it.  Version 1s will ordinarily\nignore any advantages to be got from parallel computation, just\nas they will ignore advantages to be got from specific representations\nof data.\n\nExcept in special kinds of applications, parallelism won't\npervade the programs that are written in a hundred years.  It would be\npremature optimization if it did.\n\n\n\nHow many programming languages will there\nbe in a hundred years?  There seem to be a huge number of new\nprogramming languages lately.  Part of the reason is that\nfaster hardware has allowed programmers to make different\ntradeoffs between speed and convenience, depending on the\napplication.  If this is a real trend, the hardware we'll  \nhave in a hundred years should only increase it.\n\nAnd yet there may be only a few widely-used languages in a\nhundred years.  Part of the reason I say this\nis optimism: it seems that, if you did a really good job,\nyou could make a language that was ideal for writing a   \nslow version 1, and yet with the right optimization advice\nto the compiler, would also yield very fast code when necessary.\nSo, since I'm optimistic, I'm going to predict that despite\nthe huge gap they'll have between acceptable and maximal\nefficiency, programmers in a hundred years will have languages \nthat can span most of it.\n\nAs this gap widens, profilers will become increasingly important.\nLittle attention is paid to profiling now.  Many people still\nseem to believe that the way to get fast applications is to\nwrite compilers that generate fast code.  As the gap between    \nacceptable and maximal performance widens, it will become\nincreasingly clear that the way to get fast applications is   \nto have a good guide from one to the other.\n\nWhen I say there may only be a few languages, I'm not including\ndomain-specific \"little languages\".  I think such embedded languages\nare a great idea, and I expect them to proliferate.  But I expect\nthem to be written as thin enough skins that users can see\nthe general-purpose language underneath.\n\n\n\nWho will design the languages of the future?  One of the most exciting\ntrends in the last ten years has been the rise of open-source  \nlanguages like Perl, Python, and Ruby.\nLanguage design is being taken over by hackers.  The results\nso far are messy, but encouraging.  There are some stunningly  \nnovel ideas in Perl, for example. Many are stunningly bad, but\nthat's always true of ambitious efforts.  At its current rate\nof mutation, God knows what Perl might evolve into in a hundred\nyears.\n\nIt's not true that those who can't do, teach (some of the best\nhackers I know are professors), but it is true that there are a\nlot of things that those who teach can't do.  Research imposes\nconstraining caste restrictions.  In any academic\nfield there are topics that are ok to work on and others that\naren't.  Unfortunately the distinction between acceptable and\nforbidden topics is usually based on how intellectual\nthe work sounds when described in research papers, rather than\nhow important it is for getting good results.  The extreme case\nis probably literature; people studying literature rarely  \nsay anything that would be of the slightest use to those\nproducing it.\n\nThough the situation is better in the sciences,\nthe overlap between the kind of work you're allowed to do and the\nkind of work that yields good languages is distressingly small.\n(Olin Shivers has grumbled eloquently\nabout this.)  For example, types seem to be an inexhaustible source\nof research papers, despite the fact that static typing\nseems to preclude true macros-- without which, in my opinion, no\nlanguage is worth using.\n\nThe trend is not merely toward languages being developed\nas open-source projects rather than \"research\", but toward\nlanguages being designed by the application programmers who need\nto use them, rather than by compiler writers.  This seems a good\ntrend and I expect it to continue.\n\n\n\n\nUnlike physics in a hundred years, which is almost necessarily\nimpossible to predict, I think it may be possible in principle\nto design a language now that would appeal to users in a hundred\nyears.\n\nOne way to design a language is to just write down the program\nyou'd like to be able to write, regardless of whether there \nis a compiler that can translate it or hardware that can run it.\nWhen you do this you can assume unlimited resources.  It seems\nlike we ought to be able to imagine unlimited resources as well\ntoday as in a hundred years.\n\nWhat program would one like to write?  Whatever is least work.\nExcept not quite: whatever would be least work if your ideas about\nprogramming weren't already influenced by the languages you're \ncurrently used to.  Such influence can be so pervasive that   \nit takes a great effort to overcome it.  You'd think it would\nbe obvious to creatures as lazy as us how to express a program\nwith the least effort.  In fact, our ideas about what's possible\ntend to be so limited by whatever language we think in  that\neasier formulations of programs seem very surprising.  They're\nsomething you have to discover, not something you naturally\nsink into.\n\nOne helpful trick here\nis to use the length of the program as an approximation for\nhow much work it is to write.  Not the length in characters,\nof course, but the length in distinct syntactic elements-- basically,\nthe size of the parse tree.  It may not be quite true that\nthe shortest program is the least work to write, but it's\nclose enough that you're better off aiming for the solid\ntarget of brevity than the fuzzy, nearby one of least work.\nThen the algorithm for language design becomes: look at a program\nand ask, is there any way to write this that's shorter?\n\nIn practice, writing programs in an imaginary hundred-year\nlanguage will work to varying degrees depending\non how close you are to the core.  Sort routines you can\nwrite now.  But it would be\nhard to predict now what kinds of libraries might be needed in\na hundred years.  Presumably many libraries will be for domains that\ndon't even exist yet.  If SETI@home works, for example, we'll  \nneed libraries for communicating with aliens.  Unless of course\nthey are sufficiently advanced that they already communicate\nin XML.\n\nAt the other extreme, I think you might be able to design the\ncore language today.  In fact, some might argue that it was already\nmostly designed in 1958.\n\n\n\nIf the hundred year language were available today, would we\nwant to program in it?  One way to answer this question is to\nlook back.  If present-day programming languages had been available\nin 1960, would anyone have wanted to use them?\n\nIn some ways, the answer is no.  Languages today assume\ninfrastructure that didn't exist in 1960.  For example, a language\nin which indentation is significant, like Python, would not\nwork very well on printer terminals.  But putting such problems\naside-- assuming, for example, that programs were all just\nwritten on paper-- would programmers of the 1960s have liked\nwriting programs in the languages we use now?\n\nI think so.\nSome of the less imaginative ones,\nwho had artifacts of early languages built into their ideas of  \nwhat a program was, might have had trouble.  (How can you manipulate\ndata without doing pointer arithmetic?  How can you implement \nflow charts without gotos?)  But I think the smartest programmers\nwould have had no trouble making the most of present-day\nlanguages, if they'd had them.\n\nIf we had the hundred-year language now, it would at least make a\ngreat pseudocode.  What about using it to write software?   \nSince the hundred-year language\nwill need to generate fast code for some applications, presumably\nit could generate code efficient enough to run acceptably well\non our hardware.  We might have to give more optimization advice\nthan users in a hundred years, but it still might be a net win.\n\n\n\nNow we have two ideas that, if you combine them, suggest interesting\npossibilities: (1) the hundred-year language could, in principle, be\ndesigned today, and (2) such a language, if it existed, might be good to\nprogram in today.  When you see these ideas laid out like that,\nit's hard not to think, why not try writing the hundred-year language\nnow?\n\nWhen you're working on language design, I think it is good to\nhave such a target and to keep it consciously in mind.  When you\nlearn to drive, one of the principles they teach you is to\nalign the car not by lining up the hood with the stripes painted\non the road, but by aiming at some point in the distance.  Even\nif all you care about is what happens in the next ten feet, this\nis the right answer.  I\nthink we can and should do the same thing with programming languages.\n\n\n\n\nNotes\n\nI believe Lisp Machine Lisp was the first language to embody\nthe principle that declarations (except those of dynamic variables)\nwere merely optimization advice,\nand would not change the meaning of a correct program.  Common Lisp\nseems to have been the first to state this explicitly.\n\nThanks to Trevor Blackwell, Robert Morris, and Dan Giffin for\nreading drafts of this, and to Guido van Rossum, Jeremy Hylton, and the\nrest of the Python crew for inviting me to speak at PyCon.\n\n\n", "February 2003\n\nWhen we were in junior high school, my friend Rich and I made a map\nof the school lunch tables according to popularity. This was easy\nto do, because kids only ate lunch with others of about the same\npopularity. We graded them from A to E. A tables were full of\nfootball players and cheerleaders and so on. E tables contained the\nkids with mild cases of Down's Syndrome, what in the language of\nthe time we called \"retards.\"\n\nWe sat at a D table, as low as you could get without looking\nphysically different. We were not being especially candid to grade\nourselves as D. It would have taken a deliberate lie to say otherwise.\nEveryone in the school knew exactly how popular everyone else was,\nincluding us.\n\nMy stock gradually rose during high school. Puberty finally arrived;\nI became a decent soccer player; I started a scandalous underground\nnewspaper.  So I've seen a good part of the popularity landscape.\n\nI know a lot of people who were nerds in school, and they all tell\nthe same story: there is a strong correlation between being smart\nand being a nerd, and an even stronger inverse correlation between\nbeing a nerd and being popular. Being smart seems to make you\nunpopular.\n\nWhy? To someone in school now, that may seem an odd question to\nask. The mere fact is so overwhelming that it may seem strange to\nimagine that it could be any other way. But it could. Being smart\ndoesn't make you an outcast in elementary school. Nor does it harm\nyou in the real world. Nor, as far as I can tell, is the problem\nso bad in most other countries. But in a typical American secondary\nschool, being smart is likely to make your life difficult.  Why?\n\n\n\n\nThe key to this mystery is to rephrase the question slightly. Why\ndon't smart kids make themselves popular? If they're so smart, why\ndon't they figure out how popularity works and beat the system,\njust as they do for standardized tests?\n\nOne argument says that this would be impossible, that the smart\nkids are unpopular because the other kids envy them for being smart,\nand nothing they could do could make them popular. I wish. If the\nother kids in junior high school envied me, they did a great job\nof concealing it. And in any case, if being smart were really an\nenviable quality, the girls would have broken ranks. The guys that\nguys envy, girls like.\n\nIn the schools I went to, being smart just didn't matter much. Kids\ndidn't admire it or despise it. All other things being equal, they\nwould have preferred to be on the smart side of average rather than the\ndumb side, but intelligence counted far less than, say, physical\nappearance, charisma, or athletic ability.\n\nSo if intelligence in itself is not a factor in popularity, why are\nsmart kids so consistently unpopular? The answer, I think, is that\nthey don't really want to be popular.\n\nIf someone had told me that at the time, I would have laughed at\nhim. Being unpopular in school makes kids miserable, some of them\nso miserable that they commit suicide. Telling me that I didn't\nwant to be popular would have seemed like telling someone dying of\nthirst in a desert that he didn't want a glass of water. Of course\nI wanted to be popular.\n\nBut in fact I didn't, not enough. There was something else I wanted\nmore: to be smart. Not simply to do well in school, though that\ncounted for something, but to design beautiful rockets, or to write\nwell, or to understand how to program computers. In general, to\nmake great things.\n\nAt the time I never tried to separate my wants and weigh them\nagainst one another. If I had, I would have seen that being smart\nwas more important. If someone had offered me the chance to be\nthe most popular kid in school, but only at the price of being of\naverage intelligence (humor me here), I wouldn't have taken it.\n\nMuch as they suffer from their unpopularity, I don't think many\nnerds would. To them the thought of average intelligence is unbearable.\nBut most kids would take that deal. For half of them, it would be\na step up. Even for someone in the eightieth percentile (assuming,\nas everyone seemed to then, that intelligence is a scalar), who\nwouldn't drop thirty points in exchange for being loved and admired\nby everyone?\n\nAnd that, I think, is the root of the problem. Nerds serve two\nmasters. They want to be popular, certainly, but they want even\nmore to be smart. And popularity is not something you can do in\nyour spare time, not in the fiercely competitive environment of an\nAmerican secondary school.\n\n\n\n\nAlberti, arguably the archetype of the Renaissance Man, writes that\n\"no art, however minor, demands less than total dedication if you\nwant to excel in it.\"\nI wonder if anyone in the world works harder\nat anything than American school kids work at popularity. Navy SEALs\nand neurosurgery residents seem slackers by comparison. They\noccasionally take vacations; some even have hobbies. An American\nteenager may work at being popular every waking hour, 365 days a\nyear.\n\nI don't mean to suggest they do this consciously. Some of them truly\nare little Machiavellis, but what I really mean here is that teenagers\nare always on duty as conformists.\n\nFor example, teenage kids pay a great deal of attention to clothes.\nThey don't consciously dress to be popular. They dress to look good.\nBut to who? To the other kids. Other kids' opinions become their\ndefinition of right, not just for clothes, but for almost everything\nthey do, right down to the way they walk. And so every effort they\nmake to do things \"right\" is also, consciously or not, an effort\nto be more popular.\n\nNerds don't realize this. They don't realize that it takes work to\nbe popular. In general, people outside some very demanding field\ndon't realize the extent to which success depends on constant (though\noften unconscious) effort. For example, most people seem to consider\nthe ability to draw as some kind of innate quality, like being tall.\nIn fact, most people who \"can draw\" like drawing, and have spent\nmany hours doing it; that's why they're good at it. Likewise, popular\nisn't just something you are or you aren't, but something you make\nyourself.\n\nThe main reason nerds are unpopular is that they have other things\nto think about. Their attention is drawn to books or the natural\nworld, not fashions and parties. They're like someone trying to\nplay soccer while balancing a glass of water on his head. Other\nplayers who can focus their whole attention on the game beat them\neffortlessly, and wonder why they seem so incapable.\n\nEven if nerds cared as much as other kids about popularity, being\npopular would be more work for them. The popular kids learned to\nbe popular, and to want to be popular, the same way the nerds learned\nto be smart, and to want to be smart: from their parents. While the\nnerds were being trained to get the right answers, the popular kids\nwere being trained to please.\n\n\n\n\nSo far I've been finessing the relationship between smart and nerd,\nusing them as if they were interchangeable. In fact it's only the\ncontext that makes them so. A nerd is someone who isn't socially\nadept enough. But \"enough\" depends on where you are. In a typical\nAmerican school, standards for coolness are so high (or at least,\nso specific) that you don't have to be especially awkward to look\nawkward by comparison.\n\nFew smart kids can spare the attention that popularity requires.\nUnless they also happen to be good-looking, natural athletes, or\nsiblings of popular kids, they'll tend to become nerds. And that's\nwhy smart people's lives are worst between, say, the ages of eleven\nand seventeen. Life at that age revolves far more around popularity\nthan before or after.\n\nBefore that, kids' lives are dominated by their parents, not by\nother kids. Kids do care what their peers think in elementary school,\nbut this isn't their whole life, as it later becomes.\n\nAround the age of eleven, though, kids seem to start treating their\nfamily as a day job. They create a new world among themselves, and\nstanding in this world is what matters, not standing in their family.\nIndeed, being in trouble in their family can win them points in the\nworld they care about.\n\nThe problem is, the world these kids create for themselves is at\nfirst a very crude one. If you leave a bunch of eleven-year-olds\nto their own devices, what you get is Lord of the Flies. Like\na lot of American kids, I read this book in school. Presumably it\nwas not a coincidence. Presumably someone wanted to point out to\nus that we were savages, and that we had made ourselves a cruel and\nstupid world. This was too subtle for me. While the book seemed\nentirely believable, I didn't get the additional message. I wish\nthey had just told us outright that we were savages and our world\nwas stupid.\n\n\n\n\nNerds would find their unpopularity more bearable if it merely\ncaused them to be ignored. Unfortunately, to be unpopular in school\nis to be actively persecuted.\n\nWhy? Once again, anyone currently in school might think this a\nstrange question to ask. How could things be any other way? But\nthey could be. Adults don't normally persecute nerds. Why do teenage\nkids do it?\n\nPartly because teenagers are still half children, and many\nchildren are just intrinsically cruel. Some torture nerds for the\nsame reason they pull the legs off spiders. Before you develop a\nconscience, torture is amusing.\n\nAnother reason kids persecute nerds is to make themselves feel\nbetter. When you tread water, you lift yourself up by pushing water\ndown. Likewise, in any social hierarchy, people unsure of their own\nposition will try to emphasize it by maltreating those they think\nrank below. I've read that this is why poor whites in the United\nStates are the group most hostile to blacks.\n\nBut I think the main reason other kids persecute nerds is that it's\npart of the mechanism of popularity. Popularity is only partially\nabout individual attractiveness. It's much more about alliances.\nTo become more popular, you need to be constantly doing things that\nbring you close to other popular people, and nothing brings people\ncloser than a common enemy.\n\nLike a politician who wants to distract voters from bad times at\nhome, you can create an enemy if there isn't a real one. By singling\nout and persecuting a nerd, a group of kids from higher in the\nhierarchy create bonds between themselves. Attacking an outsider\nmakes them all insiders. This is why the worst cases of bullying\nhappen with groups. Ask any nerd: you get much worse treatment from\na group of kids than from any individual bully, however sadistic.\n\nIf it's any consolation to the nerds, it's nothing personal. The\ngroup of kids who band together to pick on you are doing the same\nthing, and for the same reason, as a bunch of guys who get together\nto go hunting. They don't actually hate you. They just need something\nto chase.\n\nBecause they're at the bottom of the scale, nerds are a safe target\nfor the entire school. If I remember correctly, the most popular\nkids don't persecute nerds; they don't need to stoop to such things.\nMost of the persecution comes from kids lower down, the nervous\nmiddle classes.\n\nThe trouble is, there are a lot of them. The distribution of\npopularity is not a pyramid, but tapers at the bottom like a pear.\nThe least popular group is quite small. (I believe we were the only\nD table in our cafeteria map.) So there are more people who want\nto pick on nerds than there are nerds.\n\nAs well as gaining points by distancing oneself from unpopular kids,\none loses points by being close to them. A woman I know says that\nin high school she liked nerds, but was afraid to be seen talking\nto them because the other girls would make fun of her. Unpopularity\nis a communicable disease; kids too nice to pick on nerds will still\nostracize them in self-defense.\n\nIt's no wonder, then, that smart kids tend to be unhappy in middle\nschool and high school. Their other interests leave them little\nattention to spare for popularity, and since popularity resembles\na zero-sum game, this in turn makes them targets for the whole\nschool. And the strange thing is, this nightmare scenario happens\nwithout any conscious malice, merely because of the shape of the\nsituation.\n\n\n\n\nFor me the worst stretch was junior high, when kid culture was new\nand harsh, and the specialization that would later gradually separate\nthe smarter kids had barely begun. Nearly everyone I've talked to\nagrees: the nadir is somewhere between eleven and fourteen.\n\nIn our school it was eighth grade, which was ages twelve and thirteen\nfor me. There was a brief sensation that year when one of our\nteachers overheard a group of girls waiting for the school bus, and\nwas so shocked that the next day she devoted the whole class to an\neloquent plea not to be so cruel to one another.\n\nIt didn't have any noticeable effect. What struck me at the time\nwas that she was surprised. You mean she doesn't know the kind of\nthings they say to one another? You mean this isn't normal?\n\nIt's important to realize that, no, the adults don't know what the\nkids are doing to one another. They know, in the abstract, that\nkids are monstrously cruel to one another, just as we know in the\nabstract that people get tortured in poorer countries. But, like\nus, they don't like to dwell on this depressing fact, and they don't\nsee evidence of specific abuses unless they go looking for it.\n\nPublic school teachers are in much the same position as prison\nwardens. Wardens' main concern is to keep the prisoners on the\npremises. They also need to keep them fed, and as far as possible\nprevent them from killing one another. Beyond that, they want to\nhave as little to do with the prisoners as possible, so they leave\nthem to create whatever social organization they want. From what\nI've read, the society that the prisoners create is warped, savage,\nand pervasive, and it is no fun to be at the bottom of it.\n\nIn outline, it was the same at the schools I went to. The most\nimportant thing was to stay on the premises. While there, the\nauthorities fed you, prevented overt violence, and made some effort\nto teach you something. But beyond that they didn't want to have\ntoo much to do with the kids. Like prison wardens, the teachers\nmostly left us to ourselves. And, like prisoners, the culture we\ncreated was barbaric.\n\n\n\n\nWhy is the real world more hospitable to nerds? It might seem that\nthe answer is simply that it's populated by adults, who are too\nmature to pick on one another. But I don't think this is true.\nAdults in prison certainly pick on one another. And so, apparently,\ndo society wives; in some parts of Manhattan, life for women sounds\nlike a continuation of high school, with all the same petty intrigues.\n\nI think the important thing about the real world is not that it's\npopulated by adults, but that it's very large, and the things you\ndo have real effects. That's what school, prison, and ladies-who-lunch\nall lack. The inhabitants of all those worlds are trapped in little\nbubbles where nothing they do can have more than a local effect.\nNaturally these societies degenerate into savagery. They have no\nfunction for their form to follow.\n\nWhen the things you do have real effects, it's no longer enough\njust to be pleasing. It starts to be important to get the right\nanswers, and that's where nerds show to advantage. Bill Gates will\nof course come to mind. Though notoriously lacking in social skills,\nhe gets the right answers, at least as measured in revenue.\n\nThe other thing that's different about the real world is that it's\nmuch larger. In a large enough pool, even the smallest minorities\ncan achieve a critical mass if they clump together. Out in the real\nworld, nerds collect in certain places and form their own societies\nwhere intelligence is the most important thing. Sometimes the current\neven starts to flow in the other direction: sometimes, particularly\nin university math and science departments, nerds deliberately\nexaggerate their awkwardness in order to seem smarter. John Nash\nso admired Norbert Wiener that he adopted his habit of touching the\nwall as he walked down a corridor.\n\n\n\n\nAs a thirteen-year-old kid, I didn't have much more experience of\nthe world than what I saw immediately around me. The warped little\nworld we lived in was, I thought, the world. The world seemed cruel\nand boring, and I'm not sure which was worse.\n\nBecause I didn't fit into this world, I thought that something must\nbe wrong with me. I didn't realize that the reason we nerds didn't\nfit in was that in some ways\nwe were a step ahead. We were already thinking about\nthe kind of things that matter in the real world, instead of spending\nall our time playing an exacting but mostly pointless game like the\nothers.\n\nWe were a bit like an adult would be if he were thrust back into\nmiddle school. He wouldn't know the right clothes to wear, the right\nmusic to like, the right slang to use. He'd seem to the kids a\ncomplete alien. The thing is, he'd know enough not to care what\nthey thought. We had no such confidence.\n\nA lot of people seem to think it's good for smart kids to be thrown\ntogether with \"normal\" kids at this stage of their lives. Perhaps.\nBut in at least some cases the reason the nerds don't fit in really\nis that everyone else is crazy. I remember sitting in the audience\nat a \"pep rally\" at my high school, watching as the cheerleaders\nthrew an effigy of an opposing player into the audience to be torn\nto pieces. I felt like an explorer witnessing some bizarre tribal\nritual.\n\n\n\n\nIf I could go back and give my thirteen year old self some advice,\nthe main thing I'd tell him would be to stick his head up and look\naround. I didn't really grasp it at the time, but the whole world\nwe lived in was as fake as a Twinkie. Not just school, but the\nentire town. Why do people move to suburbia? To have kids! So no\nwonder it seemed boring and sterile. The whole place was a giant\nnursery, an artificial town created explicitly for the purpose of\nbreeding children.\n\nWhere I grew up, it felt as if there was nowhere to go, and nothing\nto do. This was no accident. Suburbs are deliberately designed to\nexclude the outside world, because it contains things that could\nendanger children.\n\nAnd as for the schools, they were just holding pens within this\nfake world. Officially the purpose of schools is to teach kids. In\nfact their primary purpose is to keep kids locked up in one\nplace for a big chunk of the day so adults can get things done. And\nI have no problem with this: in a specialized industrial society,\nit would be a disaster to have kids running around loose.\n\nWhat bothers me is not that the kids are kept in prisons, but that\n(a) they aren't told about it, and (b) the prisons are run mostly\nby the inmates. Kids are sent off to spend six years memorizing\nmeaningless facts in a world ruled by a caste of giants who run\nafter an oblong brown ball, as if this were the most natural thing\nin the world. And if they balk at this surreal cocktail, they're\ncalled misfits.\n\n\n\n\nLife in this twisted world is stressful for the kids. And not just\nfor the nerds. Like any war, it's damaging even to the winners.\n\nAdults can't avoid seeing that teenage kids are tormented. So why\ndon't they do something about it? Because they blame it on puberty.\nThe reason kids are so unhappy, adults tell themselves, is that\nmonstrous new chemicals, hormones, are now coursing through their\nbloodstream and messing up everything. There's nothing wrong with\nthe system; it's just inevitable that kids will be miserable at\nthat age.\n\nThis idea is so pervasive that even the kids believe it, which\nprobably doesn't help. Someone who thinks his feet naturally hurt\nis not going to stop to consider the possibility that he is wearing\nthe wrong size shoes.\n\nI'm suspicious of this theory that thirteen-year-old kids are\nintrinsically messed up. If it's physiological, it should be\nuniversal. Are Mongol nomads all nihilists at thirteen? I've read\na lot of history, and I have not seen a single reference\nto this supposedly universal fact before the twentieth century.\nTeenage apprentices in the Renaissance seem to have been cheerful\nand eager. They got in fights and played tricks on one another of\ncourse (Michelangelo had his nose broken by a bully), but they\nweren't crazy.\n\nAs far as I can tell, the concept of the hormone-crazed teenager\nis coeval with suburbia. I don't think this is a coincidence. I\nthink teenagers are driven crazy by the life they're made to lead.\nTeenage apprentices in the Renaissance were working dogs. Teenagers\nnow are neurotic lapdogs. Their craziness is the craziness of the\nidle everywhere.\n\n\n\n\nWhen I was in school, suicide was a constant topic among the smarter\nkids. No one I knew did it, but several planned to, and\nsome may have tried. Mostly this was just a pose. Like other\nteenagers, we loved the dramatic, and suicide seemed very dramatic.\nBut partly it was because our lives were at times genuinely miserable.\n\nBullying was only part of the problem. Another problem, and possibly\nan even worse one, was that we never had anything real to work on.\nHumans like to work; in most of the world, your work is your identity.\nAnd all the work we did was \npointless, or seemed so at the time.\n\nAt best it was practice for real work we might do far in the future,\nso far that we didn't even know at the time what we were practicing\nfor. More often it was just an arbitrary series of hoops to jump\nthrough, words without content designed mainly for testability.\n(The three main causes of the Civil War were....\nTest: List the three main causes of the Civil War.)\n\nAnd there was no way to opt out. The adults had agreed among\nthemselves that this was to be the route to college. The only way\nto escape this empty life was to submit to it.\n\n\n\n\nTeenage kids used to have a more active role in society. In\npre-industrial times, they were all apprentices of one sort or\nanother, whether in shops or on farms or even on warships. They\nweren't left to create their own societies. They were junior members\nof adult societies.\n\nTeenagers seem to have respected adults more then, because\nthe adults were the visible experts in the skills they were trying\nto learn. Now most kids have little idea what their parents do in\ntheir distant offices, and see no connection (indeed, there is\nprecious little) between schoolwork and the work they'll do as\nadults.\n\nAnd if teenagers respected adults more, adults also had more use\nfor teenagers. After a couple years' training, an apprentice could\nbe a real help. Even the newest apprentice could be made to carry\nmessages or sweep the workshop.\n\nNow adults have no immediate use for teenagers. They would be in\nthe way in an office. So they drop them off at school on their way\nto work, much as they might drop the dog off at a kennel if they  \nwere going away for the weekend.\n\nWhat happened? We're up against a hard one here. The cause of this\nproblem is the same as the cause of so many present ills: specialization.\nAs jobs become more specialized, we have to train longer for them.\nKids in pre-industrial times started working at about 14 at\nthe latest; kids on farms, where most people lived, began far  \nearlier. Now kids who go to college don't start working full-time \ntill 21 or 22. With some degrees, like MDs and PhDs, you may not\nfinish your training till 30.\n\nTeenagers now are useless, except as cheap labor in industries like\nfast food, which evolved to exploit precisely this fact. In almost\nany other kind of work, they'd be a net loss. But they're also too \nyoung to be left unsupervised. Someone has to watch over them, and\nthe most efficient way to do this is to collect them together in\none place. Then a few adults can watch all of them.\n\nIf you stop there, what you're describing is literally a prison,\nalbeit a part-time one. The problem is, many schools practically\ndo stop there. The stated purpose of schools is to educate the kids.\nBut there is no external pressure to do this well. And so most\nschools do such a bad job of teaching that the kids don't really\ntake it seriously-- not even the smart kids. Much of the time we\nwere all, students and teachers both, just going through the motions.\n\nIn my high school French class we were supposed to read Hugo's Les\nMiserables. I don't think any of us knew French well enough to make\nour way through this enormous book. Like the rest of the class, I   \njust skimmed the Cliff's Notes. When we were given a test on the\nbook, I noticed that the questions sounded odd. They were full of   \nlong words that our teacher wouldn't have used. Where had these   \nquestions come from? From the Cliff's Notes, it turned out. The \nteacher was using them too. We were all just pretending.\n\nThere are certainly great public school teachers.  The energy and \nimagination of my fourth grade teacher, Mr. Mihalko, made that  \nyear something his students still talk about, thirty years later.\nBut teachers like him were individuals swimming\nupstream. They couldn't fix the system.\n\n\n\n\nIn almost any group of people you'll find hierarchy.\nWhen groups of adults form in the real world, it's generally for  \nsome common purpose, and the leaders end up being those who are best\nat it. The problem with most schools is, they have no purpose. \nBut hierarchy there must be.\nAnd so the kids make one out of nothing.\n\nWe have a phrase to describe what happens when rankings have to be\ncreated without any meaningful criteria. We say that the situation\ndegenerates into a popularity contest. And that's exactly what\nhappens in most American schools.\nInstead of depending on some real test, one's rank\ndepends mostly on one's ability to increase one's rank. It's\nlike the court of Louis XIV. There is no external opponent, so the\nkids become one another's opponents.\n\nWhen there is some real external test of skill, it isn't painful\nto be at the bottom of the hierarchy. A rookie on a football team\ndoesn't resent the skill of the veteran; he hopes to be like him\none day and is happy to have the chance to learn from him.\nThe veteran may in turn feel a sense of\nnoblesse oblige.\nAnd most importantly, their status depends on how well they\ndo against opponents, not on whether they can push the other down.\n\nCourt hierarchies are another thing entirely. This type of society\ndebases anyone who enters it. There is neither admiration at the \nbottom, nor noblesse oblige at the top. It's kill or be killed.\n\nThis is the sort of society that gets created\nin American\nsecondary schools. And it happens because these schools have no\nreal purpose beyond keeping the kids all in one place for a certain\nnumber of hours each day. What I didn't realize at the time, and\nin fact didn't realize till very recently, is that the twin horrors\nof school life, the cruelty and the boredom, both have the same  \ncause.\n\n\n\n\nThe mediocrity of American public schools has worse consequences\nthan just making kids unhappy for six years. It breeds a rebelliousness\nthat actively drives kids away from the things they're supposed to\nbe learning.\n\nLike many nerds, probably, it was years after high school before I\ncould bring myself to read anything we'd been assigned then.\nAnd I lost more than books. I mistrusted words like \"character\" and   \n\"integrity\" because they had been so debased by adults. As they\nwere used then, these words all seemed to mean the same thing:\nobedience. The kids who got praised for these qualities tended to \nbe at best dull-witted prize bulls, and at worst facile schmoozers.\nIf that was what character and integrity were, I wanted no part of\nthem.\n\nThe word I most misunderstood was \"tact.\" As used by adults, it\nseemed to mean keeping your mouth shut.\nI assumed it was derived from the same root as\n\"tacit\" and \"taciturn,\" and that it literally meant being quiet. I\nvowed that I would never be tactful; they were never going to shut\nme up. In fact, it's derived from the same root as \"tactile,\" and\nwhat it means is to have a deft touch. Tactful is the opposite of\nclumsy. I don't think I learned this until college.\n\n\n\nNerds aren't the only losers in the popularity rat race. Nerds are\nunpopular because they're distracted. There are other kids who\ndeliberately opt out because they're so disgusted with the whole  \nprocess.\n\nTeenage kids, even rebels, don't like to be alone, so when kids opt\nout of the system, they tend to do it as a group. At the schools I\nwent to, the focus of rebellion was drug use, specifically marijuana.\nThe kids in this tribe wore black concert t-shirts and were called\n\"freaks.\"\n\nFreaks and nerds were allies, and there was a good deal of overlap\nbetween them. Freaks were on the whole smarter than other kids,\nthough never studying (or at least never appearing to) was an   \nimportant tribal value. I was more in the nerd camp, but I was\nfriends with a lot of freaks.\n\nThey used drugs, at least at first, for the social bonds they\ncreated. It was something to do together, and because the drugs \nwere illegal, it was a shared badge of rebellion.\n\nI'm not claiming that bad schools are the whole reason kids get\ninto trouble with drugs. After a while, drugs have their own momentum.\nNo doubt some of the freaks ultimately used drugs to escape from  \nother problems-- trouble at home, for example. But, in my school\nat least, the reason most kids started using drugs was rebellion.\nFourteen-year-olds didn't start smoking pot because they'd heard\nit would help them forget their problems. They started because they\nwanted to join a different tribe.\n\nMisrule breeds rebellion; this is not a new idea. And yet the\nauthorities still for the most part act as if drugs were themselves\nthe cause of the problem.\n\n\n\n\nThe real problem is the emptiness of school life. We won't see\nsolutions till adults realize that. The adults who\nmay realize it first are the ones who were themselves nerds in  \nschool. Do you want your kids to be as unhappy in eighth grade as\nyou were? I wouldn't. Well, then, is there anything we can do to\nfix things? Almost certainly. There is nothing inevitable about the\ncurrent system. It has come about mostly by default.\n\nAdults, though, are busy. Showing up for school plays is one thing.\nTaking on the educational bureaucracy is another. Perhaps a few\nwill have the energy to try to change things. I suspect the hardest  \npart is realizing that you can.\n\nNerds still in school should not hold their breath. Maybe one day\na heavily armed force of adults will show up in helicopters to      \nrescue you, but they probably won't be coming this month. Any     \nimmediate improvement in nerds' lives is probably going to have to\ncome from the nerds themselves.\n\nMerely understanding the situation they're in should make it less \npainful. Nerds aren't losers. They're just playing a different game,\nand a game much closer to the one played in the real world. Adults\nknow this. It's hard to find successful adults now who don't claim\nto have been nerds in high school.\n\nIt's important for nerds to realize, too, that school is not life.\nSchool is a strange, artificial thing, half sterile and half feral.\nIt's all-encompassing, like life, but it isn't the real thing. It's\nonly temporary, and if you look, you can see beyond it even while\nyou're still in it.\n\nIf life seems awful to kids, it's neither because hormones are \nturning you all into monsters (as your parents believe), nor because\nlife actually is awful (as you believe). It's because the adults,\nwho no longer have any economic use for you, have abandoned you to\nspend years cooped up together with nothing real to do.  Any society\nof that type is awful to live in.\nYou don't have\nto look any further to explain why teenage kids are unhappy.\n\nI've said some harsh things in this essay, but really the thesis\nis an optimistic one-- that several problems we take for granted\nare in fact not insoluble after all. Teenage kids are not inherently\nunhappy monsters. That should be encouraging news to kids and adults\nboth.\n\n\n\n\nThanks to Sarah Harlin, Trevor Blackwell, Robert Morris,\nEric Raymond, and Jackie Weicker for reading drafts of this essay,\nand Maria Daniels for scanning photos.\n\n\n", "January 2003\n\n(This article was given as a talk at the 2003 Spam Conference.\nIt describes the work I've done to improve the performance of\nthe algorithm described in A Plan for Spam,\nand what I plan to do in the future.)\n\nThe first discovery I'd like to present here is an algorithm for\nlazy evaluation of research papers.  Just\nwrite whatever you want and don't cite any previous work, and\nindignant readers will send you references to all the papers you\nshould have cited.   I discovered this algorithm\nafter ``A Plan for Spam'' [1] was on Slashdot.\n\nSpam filtering is a subset of text classification,\nwhich is a well established field, but the first papers about\nBayesian\nspam filtering per se seem to have been two\ngiven at the same conference in 1998,\none by Pantel and Lin [2],\nand another by a group from\nMicrosoft Research [3].\n\nWhen I heard about this work I was a bit surprised.  If\npeople had been onto Bayesian filtering four years ago,\nwhy wasn't everyone using it?\nWhen I read the papers I found out why.  Pantel and Lin's filter was the\nmore effective of the two, but it\nonly caught 92% of spam, with 1.16% false positives.\n\nWhen I tried writing a Bayesian spam filter,\nit caught 99.5% of spam with less than .03% false\npositives [4].\nIt's always alarming when two people\ntrying the same experiment get widely divergent results.\nIt's especially alarming here because those two sets of numbers\nmight yield opposite conclusions.\nDifferent users have different requirements, but I think for\nmany people a filtering rate of 92% with 1.16% false positives means\nthat filtering is not an acceptable solution, whereas\n99.5% with less than .03% false positives means that it is.\n\nSo why did we get such different numbers?\nI haven't tried to reproduce Pantel and Lin's results, but\nfrom reading the paper I see five things that probably account\nfor the difference.\n\nOne is simply that they trained their filter on very little\ndata: 160 spam and 466 nonspam mails.\nFilter performance should still be climbing with data\nsets that small.  So their numbers may not even be an accurate\nmeasure of the performance of their algorithm, let alone of\nBayesian spam filtering in general.\n\nBut I think the most important difference is probably\nthat they ignored message headers.  To anyone who has worked\non spam filters, this will seem a perverse decision.\nAnd yet in the very first filters I tried writing, I ignored the\nheaders too.  Why?  Because I wanted to keep the problem neat.\nI didn't know much about mail headers then, and they seemed to me\nfull of random stuff.  There is a lesson here for filter\nwriters: don't ignore data.  You'd think this lesson would\nbe too obvious to mention, but I've had to learn it several times.\n\nThird, Pantel and Lin stemmed the tokens, meaning they reduced e.g. both\n``mailing'' and ``mailed'' to the root ``mail''.   They may\nhave felt they were forced to do this by the small size\nof their corpus, but if so this is a kind of premature \noptimization.\n\nFourth, they calculated probabilities differently.\nThey used all the tokens, whereas I only\nuse the 15 most significant.  If you use all the tokens\nyou'll tend to miss longer spams, the type where someone tells you their life\nstory up to the point where they got rich from some multilevel\nmarketing scheme.  And such an algorithm\nwould be easy for spammers to spoof: just add a big\nchunk of random text to counterbalance the spam terms.\n\nFinally, they didn't bias against false positives.\nI think\nany spam filtering algorithm ought to have a convenient\nknob you can twist to decrease the\nfalse positive rate at the expense of the filtering rate.\nI do this by counting the occurrences\nof tokens in the nonspam corpus double.  \n\n\nI don't think it's a good idea to treat spam filtering as\na straight text classification problem.  You can use\ntext classification techniques, but solutions can and should\nreflect the fact that the text is email, and spam\nin particular.  Email is not just text; it has structure.\nSpam filtering is not just classification, because\nfalse positives are so much worse than false negatives\nthat you should treat them as a different kind of error.\nAnd the source of error is not just random variation, but\na live human spammer working actively to defeat your filter.\n\nTokens\n\nAnother project I heard about\nafter the Slashdot article was Bill Yerazunis' \nCRM114 [5].\nThis is the counterexample to the design principle I\njust mentioned.  It's a straight text classifier,\nbut such a stunningly effective one that it manages to filter\nspam almost perfectly without even knowing that's\nwhat it's doing.\n\nOnce I understood how CRM114 worked, it seemed\ninevitable that I would eventually have to move from filtering based\non single words to an approach like this.  But first, I thought,\nI'll see how far I can get with single words.  And the answer is,\nsurprisingly far.\n\nMostly I've been working on smarter tokenization.  On\ncurrent spam, I've been able to achieve filtering rates that\napproach CRM114's.  These techniques are mostly orthogonal to Bill's;\nan optimal solution might incorporate both.\n\n``A Plan for Spam'' uses a very simple\ndefinition of a token.  Letters, digits, dashes, apostrophes,\nand dollar signs are constituent characters, and everything\nelse is a token separator.  I also ignored case.\n\nNow I have a more complicated definition of a token:\n\n Case is preserved.\n\n Exclamation points are constituent characters.\n\n Periods and commas are constituents if they occur\n between two digits.  This lets me get ip addresses\n and prices intact.\n\n A price range like $20-25 yields two tokens,\n $20 and $25.\n\n Tokens that occur within the\n To, From, Subject, and Return-Path lines, or within urls,\n get marked accordingly.  E.g. ``foo'' in the Subject line\n becomes ``Subject*foo''.  (The asterisk could\n be any character you don't allow as a constituent.)\n\nSuch measures increase the filter's vocabulary, which\nmakes it more discriminating.  For example, in the current\nfilter, ``free'' in the Subject line\nhas a spam probability of 98%, whereas the same token\nin the body has a spam probability of only 65%.\n\nHere are some of the current probabilities [6]:\n\n\nSubject*FREE      0.9999\nfree!!            0.9999\nTo*free           0.9998\nSubject*free      0.9782\nfree!             0.9199\nFree              0.9198\nUrl*free          0.9091\nFREE              0.8747\nFrom*free         0.7636\nfree              0.6546\n\nIn the Plan for Spam filter, all these tokens would have had the\nsame probability, .7602.  That filter recognized about 23,000\ntokens.  The current one recognizes about 187,000.\n\nThe disadvantage of having a larger universe of tokens\nis that there is more\nchance of misses.\nSpreading your corpus out over more tokens\nhas the same effect as making it smaller.\nIf you consider exclamation points as\nconstituents, for example, then you could end up\nnot having a spam probability for free with seven exclamation\npoints, even though you know that free with just two   \nexclamation points has a probability of 99.99%.\n\nOne solution to this is what I call degeneration.  If you\ncan't find an exact match for a token,\ntreat it as if it were a less specific\nversion.  I consider terminal exclamation\npoints, uppercase letters, and occurring in one of the\nfive marked contexts as making a token more specific.\nFor example, if I don't find a probability for\n``Subject*free!'', I look for probabilities for\n``Subject*free'', ``free!'', and ``free'', and take whichever one\nis farthest from .5.\n\nHere are the alternatives [7]\nconsidered if the filter sees ``FREE!!!'' in the\nSubject line and doesn't have a probability for it.\n\n\nSubject*Free!!!\nSubject*free!!!\nSubject*FREE!\nSubject*Free!\nSubject*free!\nSubject*FREE\nSubject*Free\nSubject*free\nFREE!!!\nFree!!!\nfree!!!\nFREE!\nFree!\nfree!\nFREE\nFree\nfree              \n\nIf you do this, be sure to consider versions with initial\ncaps as well as all uppercase and all lowercase.  Spams\ntend to have more sentences in imperative mood, and in\nthose the first word is a verb.  So verbs with initial caps\nhave higher spam probabilities than they would in all \nlowercase.  In my filter, the spam probability of ``Act''\nis 98% and for ``act'' only 62%.\n\nIf you increase your filter's vocabulary, you can end up\ncounting the same word multiple times, according to your old\ndefinition of ``same''.\nLogically, they're not the\nsame token anymore.  But if this still bothers you, let\nme add from experience that the words you seem to be\ncounting multiple times tend to be exactly the ones you'd\nwant to.\n\nAnother effect of a larger vocabulary is that when you\nlook at an incoming mail you find more interesting tokens,\nmeaning those with probabilities far from .5.  I use the\n15 most interesting to decide if mail is spam.\nBut you can run into a problem when you use a fixed number\nlike this.  If you find a lot of maximally interesting tokens,\nthe result can end up being decided by whatever random factor\ndetermines the ordering of equally interesting tokens.\nOne way to deal with this is to treat some\nas more interesting than others.\n\nFor example, the\ntoken ``dalco'' occurs 3 times in my spam corpus and never\nin my legitimate corpus.  The token ``Url*optmails''\n(meaning ``optmails'' within a url) occurs 1223 times.\nAnd yet, as I used to calculate probabilities for tokens,\nboth would have the same spam probability, the threshold of .99.\n\nThat doesn't feel right.  There are theoretical\narguments for giving these two tokens substantially different\nprobabilities (Pantel and Lin do), but I haven't tried that yet.\nIt does seem at least that if we find more than 15 tokens\nthat only occur in one corpus or the other, we ought to\ngive priority to the ones that occur a lot.  So now\nthere are two threshold values.  For tokens that occur only\nin the spam corpus, the probability is .9999 if they\noccur more than 10 times and .9998 otherwise.  Ditto\nat the other end of the scale for tokens found\nonly in the legitimate corpus.\n\nI may later scale token probabilities substantially,\nbut this tiny amount of scaling at least ensures that \ntokens get sorted the right way.\n\nAnother possibility would be to consider not\njust 15 tokens, but all the tokens over a certain\nthreshold of interestingness.  Steven Hauser does this\nin his statistical spam filter [8].\nIf you use a threshold, make it very high, or\nspammers could spoof you by packing messages with\nmore innocent words.\n\nFinally, what should one do\nabout html?  I've tried the whole spectrum of options, from\nignoring it to parsing it all.  Ignoring html is a bad idea,\nbecause it's full of useful spam signs.  But if you parse \nit all, your filter might degenerate into a mere html   \nrecognizer.  The most effective approach\nseems to be the middle course, to notice some tokens but not\nothers.  I look at a, img, and font tags, and ignore the\nrest.  Links and images you should certainly look at, because\nthey contain urls.\n\nI could probably be smarter about dealing with html, but I\ndon't think it's worth putting a lot of time into this.\nSpams full of html are easy to filter.  The smarter\nspammers already avoid it.  So\nperformance in the future should not depend much on how\nyou deal with html.\n\nPerformance\n\nBetween December 10 2002 and January 10 2003 I got about\n1750 spams.  \nOf these, 4 got through.  That's a filtering\nrate of about 99.75%.\n\nTwo of the four spams I missed got through because they\nhappened to use words that occur often in my legitimate\nemail.\n\nThe third was one of those that exploit\nan insecure cgi script to send mail to third parties.\nThey're hard to filter based just\non the content because the headers are innocent and   \nthey're careful about the words they use.  Even so I can\nusually catch them.  This one squeaked by with a\nprobability of .88, just under the threshold of .9.\n\nOf course, looking at multiple token sequences\nwould catch it easily.  ``Below is the result of\nyour feedback form'' is an instant giveaway.\n\nThe fourth spam was what I call\na spam-of-the-future, because this is what I expect spam to\nevolve into: some completely neutral\ntext followed by a url.  In this case it was was from\nsomeone saying they had finally finished their homepage\nand would I go look at it.  (The page was of course an    \nad for a porn site.)\n\nIf the spammers are careful about the headers and use a\nfresh url, there is nothing in spam-of-the-future for filters\nto notice.  We can of course counter by sending a\ncrawler to look at the page.  But that might not be necessary.\nThe response rate for spam-of-the-future must\nbe low, or everyone would be doing it.\nIf it's low enough,\nit won't pay for spammers to send it, and we won't \nhave to work too hard on filtering it.\n\nNow for the really shocking news: during that same one-month\nperiod I got three false positives.\n\nIn a way it's\na relief to get some false positives.  When I wrote ``A Plan\nfor Spam'' I hadn't had any, and I didn't know what they'd\nbe like.  Now that I've had a few, I'm relieved to find\nthey're not as bad as I feared.\nFalse positives yielded by statistical\nfilters turn out to be mails that sound a lot like spam, and\nthese tend to be the ones you would least mind missing [9].\n\nTwo of the false positives were newsletters\nfrom companies I've bought things from.  I never\nasked to receive them, so arguably they\nwere spams, but I count them as false positives because\nI hadn't been deleting them as spams before.  The reason\nthe filters caught them was that both companies in   \nJanuary switched to commercial email senders\ninstead of sending the mails from their own servers,  \nand both the headers and the bodies became much spammier.\n\nThe third false positive was a bad one, though.  It was \nfrom someone in Egypt and written in all uppercase.  This was\na direct result of making tokens case sensitive; the Plan\nfor Spam filter wouldn't have caught it.\n\nIt's hard to say what the overall false positive rate is,\nbecause we're up in the noise, statistically.\nAnyone who has worked on filters (at least, effective filters) will\nbe aware of this problem.\nWith some emails it's\nhard to say whether they're spam or not, and these are\nthe ones you end up looking at when you get filters       \nreally tight.  For example, so far the filter has\ncaught two emails that were sent to my address because\nof a typo, and one sent to me in the belief that I was \nsomeone else.  Arguably, these are neither my spam\nnor my nonspam mail.\n\nAnother false positive was from a vice president at Virtumundo.\nI wrote to them pretending to be a customer,\nand since the reply came back through Virtumundo's \nmail servers it had the most incriminating\nheaders imaginable.  Arguably this isn't a real false\npositive either, but a sort of Heisenberg uncertainty\neffect: I only got it because I was writing about spam  \nfiltering.\n\nNot counting these, I've had a total of five false positives\nso far, out of about 7740 legitimate emails, a rate of .06%.\nThe other two were a notice that something I bought\nwas back-ordered, and a party reminder from Evite.\n\nI don't think this number can be trusted, partly\nbecause the sample is so small, and partly because\nI think I can fix the filter not to catch\nsome of these.\n\nFalse positives seem to me a different kind of error from\nfalse negatives.\nFiltering rate is a measure of performance.  False\npositives I consider more like bugs.  I approach improving the\nfiltering rate as optimization, and decreasing false\npositives as debugging.\n\nSo these five false positives are my bug list.  For example, \nthe mail from Egypt got nailed because the uppercase text\nmade it look to the filter like a Nigerian spam.\nThis really is kind of a bug.  As with\nhtml, the email being all uppercase is really conceptually one\nfeature, not one for each word.  I need to handle case in a\nmore sophisticated way.\n\nSo what to make of this .06%?  Not much, I think.  You could\ntreat it as an upper bound, bearing in mind the small sample size.\nBut at this stage it is more a measure of the bugs\nin my implementation than some intrinsic false positive rate\nof Bayesian filtering.\n\nFuture\n\nWhat next?  Filtering is an optimization problem,\nand the key to optimization is profiling.  Don't\ntry to guess where your code is slow, because you'll\nguess wrong.  Look at where your code is slow,\nand fix that.  In filtering, this translates to:   \nlook at the spams you miss, and figure out what you\ncould have done to catch them.\n\nFor example, spammers are now working aggressively to   \nevade filters, and one of the things they're doing is\nbreaking up and misspelling words to prevent filters from\nrecognizing them.  But working on this is not my first\npriority, because I still have no trouble catching these\nspams [10].\n\nThere are two kinds of spams I currently do\nhave trouble with.\nOne is the type that pretends to be an email from \na woman inviting you to go chat with her or see her profile on a dating\nsite.  These get through because they're the one type of\nsales pitch you can make without using sales talk.  They use\nthe same vocabulary as ordinary email.\n\nThe other kind of spams I have trouble filtering are those\nfrom companies in e.g. Bulgaria offering contract programming \nservices.   These get through because I'm a programmer too, and\nthe spams are full of the same words as my real mail.\n\nI'll probably focus on the personal ad type first.  I think if\nI look closer I'll be able to find statistical differences\nbetween these and my real mail.  The style of writing is\ncertainly different, though it may take multiword filtering\nto catch that.\nAlso, I notice they tend to repeat the url,\nand someone including a url in a legitimate mail wouldn't do that [11].\n\nThe outsourcing type are going to be hard to catch.  Even if \nyou sent a crawler to the site, you wouldn't find a smoking\nstatistical gun.\nMaybe the only answer is a central list of\ndomains advertised in spams [12].  But there can't be that\nmany of this type of mail.  If the only\nspams left were unsolicited offers of contract programming\nservices from Bulgaria, we could all probably move on to\nworking on something else.\n\nWill statistical filtering actually get us to that point?\nI don't know.  Right now, for me personally, spam is\nnot a problem.  But spammers haven't yet made a serious\neffort to spoof statistical filters.  What will happen when they do?\n\nI'm not optimistic about filters that work at the\nnetwork level [13].\nWhen there is a static obstacle worth getting past, spammers\nare pretty efficient at getting past it.  There\nis already a company called Assurance Systems that will\nrun your mail through Spamassassin and tell you whether \nit will get filtered out.\n\nNetwork-level filters won't be completely useless.\nThey may be enough to kill all the \"opt-in\"\nspam, meaning spam from companies like Virtumundo and\nEqualamail who claim that they're really running opt-in lists.\nYou can filter those based just on the headers, no\nmatter what they say in the body.  But anyone willing to\nfalsify headers or use open relays, presumably including\nmost porn spammers, should be able to get some message past\nnetwork-level filters if they want to.  (By no means the\nmessage they'd like to send though, which is something.)\n\nThe kind of filters I'm optimistic about are ones that\ncalculate probabilities based on each individual user's mail.\nThese can be much more effective, not only in\navoiding false positives, but in filtering too: for example,\nfinding the recipient's email address base-64 encoded anywhere in\na message is a very good spam indicator.\n\nBut the real advantage of individual filters is that they'll all be\ndifferent.  If everyone's filters have different probabilities,\nit will make the spammers' optimization loop, what programmers\nwould call their edit-compile-test cycle, appallingly slow.  \nInstead of just tweaking a spam till it gets through a copy of\nsome filter they have on their desktop, they'll have to do a\ntest mailing for each tweak.  It would be like programming in\na language without an interactive toplevel, \nand I wouldn't wish that\non anyone.\n\n\n\nNotes\n\n[1]\nPaul Graham.  ``A Plan for Spam.'' August 2002.\nhttp://paulgraham.com/spam.html.\n\nProbabilities in this algorithm are\ncalculated using a degenerate case of Bayes' Rule.  There are\ntwo simplifying assumptions: that the probabilities\nof features (i.e. words) are independent, and that we know\nnothing about the prior probability of an email being\nspam.\n\nThe first assumption is widespread in text classification.\nAlgorithms that use it are called ``naive Bayesian.''\n\nThe second assumption I made because the proportion of spam in\nmy incoming mail fluctuated so much from day to day (indeed,\nfrom hour to hour) that the overall prior ratio seemed\nworthless as a predictor.  If you assume that P(spam) and\nP(nonspam) are both .5, they cancel out and you can\nremove them from the formula.\n\nIf you were doing Bayesian filtering in a situation where  \nthe ratio of spam to nonspam was consistently very high or\n(especially) very low, you could probably improve filter\nperformance by incorporating prior probabilities.  To do\nthis right you'd have to track ratios by time of day, because\nspam and legitimate mail volume both have distinct daily\npatterns.\n\n[2]\nPatrick Pantel and Dekang Lin. ``SpamCop-- A Spam\nClassification & Organization Program.''  Proceedings of AAAI-98\nWorkshop on Learning for Text Categorization.\n\n[3]\nMehran Sahami, Susan Dumais, David Heckerman and Eric Horvitz.\n``A Bayesian Approach to Filtering Junk E-Mail.'' Proceedings of AAAI-98\nWorkshop on Learning for Text Categorization.\n\n[4] At the time I had zero false positives out of about 4,000 \nlegitimate emails.  If the next legitimate email was\na false positive, this would give us .03%.  These false positive\nrates are untrustworthy, as I explain later. I quote\na number here only to emphasize that whatever the false positive rate\nis, it is less than 1.16%.\n\n\n[5] Bill Yerazunis. ``Sparse Binary Polynomial Hash Message\nFiltering and The CRM114 Discriminator.''  Proceedings of 2003\nSpam Conference.\n\n[6] In ``A Plan for Spam'' I used thresholds of .99 and .01.\nIt seems justifiable to use thresholds proportionate to the\nsize of the corpora.  Since I now have on the order of 10,000 of each\ntype of mail, I use .9999 and .0001.\n\n[7] There is a flaw here I should probably fix.  Currently,\nwhen ``Subject*foo'' degenerates to just ``foo'', what that means is\nyou're getting the stats for occurrences of ``foo'' in\nthe body or header lines other than those I mark.\nWhat I should do is keep track of statistics for ``foo''\noverall as well as specific versions, and degenerate from\n``Subject*foo'' not to ``foo'' but to ``Anywhere*foo''.  Ditto for\ncase: I should degenerate from uppercase to any-case, not\nlowercase.\n\nIt would probably be a win to do this with prices\ntoo, e.g. to degenerate from ``$129.99'' to ``$--9.99'', ``$--.99'',\nand ``$--''.\n\nYou could also degenerate from words to their stems,\nbut this would probably only improve filtering rates early on \nwhen you had small corpora.\n\n[8] Steven Hauser.  ``Statistical Spam Filter Works for Me.''\nhttp://www.sofbot.com.\n\n[9] False positives are not all equal, and we should remember\nthis when comparing techniques for stopping spam.\nWhereas many of the false positives caused by filters\nwill be near-spams that you wouldn't mind missing,\nfalse positives caused by blacklists, for example, will be just\nmail from people who chose the wrong ISP.  In both\ncases you catch mail that's near spam, but for blacklists nearness\nis physical, and for filters it's textual.\n\n\n[10] If spammers get good enough at obscuring tokens   \nfor this to be a problem, we can respond by simply removing\nwhitespace, periods, commas, etc.  and using a dictionary to\npick the words out of the resulting sequence.\nAnd of course finding words this way that weren't visible in\nthe original text would in itself be evidence of spam.\n\nPicking out the words won't be trivial.  It will require \nmore than just reconstructing word boundaries; spammers\nboth add (``xHot nPorn cSite'') and omit (``P#rn'') letters.\nVision research may be useful here, since human vision is\nthe limit that such tricks will approach.\n\n[11] \nIn general, spams are more repetitive than regular email.   \nThey want to pound that message home.  I currently don't\nallow duplicates in the top 15 tokens, because\nyou could get a false positive if the sender happens to use\nsome bad word multiple times. (In my current filter, ``dick'' has\na spam probabilty of .9999, but it's also a name.)\nIt seems we should at least notice duplication though,\nso I may try allowing up to two of each token, as Brian Burton does in\nSpamProbe.\n\n[12]  This is what approaches like Brightmail's will\ndegenerate into once spammers are pushed into using mad-lib\ntechniques to generate everything else in the message.\n\n[13]\nIt's sometimes argued that we should be working on filtering\nat the network level, because it is more efficient.  What people\nusually mean when they say this is: we currently filter at the\nnetwork level, and we don't want to start over from scratch.\nBut you can't dictate the problem to fit your solution.\n\nHistorically, scarce-resource arguments have been the losing\nside in debates about software design.\nPeople only tend to use them to justify choices\n(inaction in particular) made for other reasons.\n\nThanks to Sarah Harlin, Trevor Blackwell, and\nDan Giffin for reading drafts of this paper, and to Dan again\nfor most of the infrastructure that this filter runs on.\n\n\n\nRelated:\n\n", "January 2003\n\n(This article is derived from a keynote talk at the fall 2002 meeting\nof NEPLS.)\n\nVisitors to this country are often surprised to find that\nAmericans like to begin a conversation by asking \"what do you do?\"\nI've never liked this question.  I've rarely had a\nneat answer to it.  But I think I have finally solved the problem.\nNow, when someone asks me what I do, I look them straight\nin the eye and say \"I'm designing a \nnew dialect of Lisp.\"   \nI recommend this answer to anyone who doesn't like being asked what\nthey do.  The conversation will turn immediately to other topics.\n\nI don't consider myself to be doing research on programming languages.\nI'm just designing one, in the same way that someone might design\na building or a chair or a new typeface.\nI'm not trying to discover anything new.  I just want\nto make a language that will be good to program in.  In some ways,\nthis assumption makes life a lot easier.\n\nThe difference between design and research seems to be a question\nof new versus good.  Design doesn't have to be new, but it has to  \nbe good.  Research doesn't have to be good, but it has to be new.\nI think these two paths converge at the top: the best design\nsurpasses its predecessors by using new ideas, and the best research\nsolves problems that are not only new, but actually worth solving.\nSo ultimately we're aiming for the same destination, just approaching\nit from different directions.\n\nWhat I'm going to talk about today is what your target looks like\nfrom the back.  What do you do differently when you treat\nprogramming languages as a design problem instead of a research topic?\n\n\n\nThe biggest difference is that you focus more on the user.\nDesign begins by asking, who is this\nfor and what do they need from it?  A good architect,\nfor example, does not begin by creating a design that he then\nimposes on the users, but by studying the intended users and figuring\nout what they need.\n\nNotice I said \"what they need,\" not \"what they want.\"  I don't mean\nto give the impression that working as a designer means working as \na sort of short-order cook, making whatever the client tells you\nto.  This varies from field to field in the arts, but\nI don't think there is any field in which the best work is done by\nthe people who just make exactly what the customers tell them to.\n\nThe customer is always right in\nthe sense that the measure of good design is how well it works\nfor the user.  If you make a novel that bores everyone, or a chair\nthat's horribly uncomfortable to sit in, then you've done a bad\njob, period.  It's no defense to say that the novel or the chair  \nis designed according to the most advanced theoretical principles.\n\nAnd yet, making what works for the user doesn't mean simply making\nwhat the user tells you to.  Users don't know what all the choices\nare, and are often mistaken about what they really want.\n\nThe answer to the paradox, I think, is that you have to design\nfor the user, but you have to design what the user needs, not simply  \nwhat he says he wants.\nIt's much like being a doctor.  You can't just treat a patient's\nsymptoms.  When a patient tells you his symptoms, you have to figure\nout what's actually wrong with him, and treat that.\n\nThis focus on the user is a kind of axiom from which most of the\npractice of good design can be derived, and around which most design\nissues center.\n\n\n\nIf good design must do what the user needs, who is the user?  When\nI say that design must be for users, I don't mean to imply that good \ndesign aims at some kind of  \nlowest common denominator.  You can pick any group of users you\nwant.  If you're designing a tool, for example, you can design it\nfor anyone from beginners to experts, and what's good design\nfor one group might be bad for another.  The point\nis, you have to pick some group of users.  I don't think you can\neven talk about good or bad design except with\nreference to some intended user.\n\nYou're most likely to get good design if the intended users include\nthe designer himself.  When you design something\nfor a group that doesn't include you, it tends to be for people\nyou consider to be less sophisticated than you, not more sophisticated.\n\nThat's a problem, because looking down on the user, however benevolently,\nseems inevitably to corrupt the designer.\nI suspect that very few housing\nprojects in the US were designed by architects who expected to live\nin them.   You can see the same thing\nin programming languages.  C, Lisp, and Smalltalk were created for\ntheir own designers to use.  Cobol, Ada, and Java, were created   \nfor other people to use.\n\nIf you think you're designing something for idiots, the odds are\nthat you're not designing something good, even for idiots.\n\n\n\n\nEven if you're designing something for the most sophisticated\nusers, though, you're still designing for humans.  It's different \nin research.  In math you\ndon't choose abstractions because they're\neasy for humans to understand; you choose whichever make the\nproof shorter.  I think this is true for the sciences generally.\nScientific ideas are not meant to be ergonomic.\n\nOver in the arts, things are very different.  Design is\nall about people.  The human body is a strange\nthing, but when you're designing a chair,\nthat's what you're designing for, and there's no way around it.\nAll the arts have to pander to the interests and limitations\nof humans.   In painting, for example, all other things being\nequal a painting with people in it will be more interesting than\none without.  It is not merely an accident of history that\nthe great paintings of the Renaissance are all full of people.\nIf they hadn't been, painting as a medium wouldn't have the prestige\nthat it does.\n\nLike it or not, programming languages are also for people,\nand I suspect the human brain is just as lumpy and idiosyncratic\nas the human body.  Some ideas are easy for people to grasp\nand some aren't.  For example, we seem to have a very limited\ncapacity for dealing with detail.  It's this fact that makes\nprograming languages a good idea in the first place; if we\ncould handle the detail, we could just program in machine\nlanguage.\n\nRemember, too, that languages are not\nprimarily a form for finished programs, but something that\nprograms have to be developed in.  Anyone in the arts could\ntell you that you might want different mediums for the\ntwo situations.  Marble, for example, is a nice, durable\nmedium for finished ideas, but a hopelessly inflexible one\nfor developing new ideas.\n\nA program, like a proof,\nis a pruned version of a tree that in the past has had\nfalse starts branching off all over it.  So the test of\na language is not simply how clean the finished program looks\nin it, but how clean the path to the finished program was.\nA design choice that gives you elegant finished programs\nmay not give you an elegant design process.  For example, \nI've written a few macro-defining macros full of nested\nbackquotes that look now like little gems, but writing them\ntook hours of the ugliest trial and error, and frankly, I'm still\nnot entirely sure they're correct.\n\nWe often act as if the test of a language were how good\nfinished programs look in it.\nIt seems so convincing when you see the same program\nwritten in two languages, and one version is much shorter.\nWhen you approach the problem from the direction of the\narts, you're less likely to depend on this sort of\ntest.  You don't want to end up with a programming\nlanguage like marble.\n\nFor example, it is a huge win in developing software to\nhave an interactive toplevel, what in Lisp is called a\nread-eval-print loop.  And when you have one this has\nreal effects on the design of the language.  It would not\nwork well for a language where you have to declare\nvariables before using them, for example.  When you're\njust typing expressions into the toplevel, you want to be \nable to set x to some value and then start doing things\nto x.  You don't want to have to declare the type of x\nfirst.  You may dispute either of the premises, but if\na language has to have a toplevel to be convenient, and\nmandatory type declarations are incompatible with a\ntoplevel, then no language that makes type declarations  \nmandatory could be convenient to program in.\n\n\n\nIn practice, to get good design you have to get close, and stay\nclose, to your users.  You have to calibrate your ideas on actual\nusers constantly, especially in the beginning.  One of the reasons\nJane Austen's novels are so good is that she read them out loud to\nher family.  That's why she never sinks into self-indulgently arty\ndescriptions of landscapes,\nor pretentious philosophizing.  (The philosophy's there, but it's\nwoven into the story instead of being pasted onto it like a label.)\nIf you open an average \"literary\" novel and imagine reading it out loud\nto your friends as something you'd written, you'll feel all too\nkeenly what an imposition that kind of thing is upon the reader.\n\nIn the software world, this idea is known as Worse is Better.\nActually, there are several ideas mixed together in the concept of\nWorse is Better, which is why people are still arguing about\nwhether worse\nis actually better or not.  But one of the main ideas in that\nmix is that if you're building something new, you should get a\nprototype in front of users as soon as possible.\n\nThe alternative approach might be called the Hail Mary strategy.\nInstead of getting a prototype out quickly and gradually refining\nit, you try to create the complete, finished, product in one long\ntouchdown pass.  As far as I know, this is a\nrecipe for disaster.  Countless startups destroyed themselves this\nway during the Internet bubble.  I've never heard of a case\nwhere it worked.\n\nWhat people outside the software world may not realize is that\nWorse is Better is found throughout the arts.\nIn drawing, for example, the idea was discovered during the\nRenaissance.  Now almost every drawing teacher will tell you that\nthe right way to get an accurate drawing is not to\nwork your way slowly around the contour of an object, because errors will\naccumulate and you'll find at the end that the lines don't meet.\nInstead you should draw a few quick lines in roughly the right place,\nand then gradually refine this initial sketch.\n\nIn most fields, prototypes\nhave traditionally been made out of different materials.\nTypefaces to be cut in metal were initially designed  \nwith a brush on paper.  Statues to be cast in bronze   \nwere modelled in wax.  Patterns to be embroidered on tapestries\nwere drawn on paper with ink wash.  Buildings to be\nconstructed from stone were tested on a smaller scale in wood.\n\nWhat made oil paint so exciting, when it\nfirst became popular in the fifteenth century, was that you\ncould actually make the finished work from the prototype.\nYou could make a preliminary drawing if you wanted to, but you\nweren't held to it; you could work out all the details, and\neven make major changes, as you finished the painting.\n\nYou can do this in software too.  A prototype doesn't have to\nbe just a model; you can refine it into the finished product.\nI think you should always do this when you can.  It lets you\ntake advantage of new insights you have along the way.  But\nperhaps even more important, it's good for morale.\n\n\n\nMorale is key in design.  I'm surprised people\ndon't talk more about it.  One of my first\ndrawing teachers told me: if you're bored when you're\ndrawing something, the drawing will look boring.\nFor example, suppose you have to draw a building, and you\ndecide to draw each brick individually.  You can do this\nif you want, but if you get bored halfway through and start\nmaking the bricks mechanically instead of observing each one,   \nthe drawing will look worse than if you had merely suggested\nthe bricks.\n\nBuilding something by gradually refining a prototype is good\nfor morale because it keeps you engaged.  In software, my  \nrule is: always have working code.  If you're writing\nsomething that you'll be able to test in an hour, then you\nhave the prospect of an immediate reward to motivate you.\nThe same is true in the arts, and particularly in oil painting.\nMost painters start with a blurry sketch and gradually\nrefine it.\nIf you work this way, then in principle\nyou never have to end the day with something that actually\nlooks unfinished.  Indeed, there is even a saying among\npainters: \"A painting is never finished, you just stop\nworking on it.\"  This idea will be familiar to anyone who\nhas worked on software.\n\nMorale is another reason that it's hard to design something\nfor an unsophisticated user.   It's hard to stay interested in\nsomething you don't like yourself.  To make something  \ngood, you have to be thinking, \"wow, this is really great,\"\nnot \"what a piece of shit; those fools will love it.\"\n\nDesign means making things for humans.  But it's not just the\nuser who's human.  The designer is human too.\n\n\n\nNotice all this time I've been talking about \"the designer.\"\nDesign usually has to be under the control of a single person to\nbe any good.   And yet it seems to be possible for several people\nto collaborate on a research project.  This seems to\nme one of the most interesting differences between research and\ndesign.\n\nThere have been famous instances of collaboration in the arts,\nbut most of them seem to have been cases of molecular bonding rather\nthan nuclear fusion.  In an opera it's common for one person to\nwrite the libretto and another to write the music.   And during the Renaissance, \njourneymen from northern\nEurope were often employed to do the landscapes in the\nbackgrounds of Italian paintings.  But these aren't true collaborations.\nThey're more like examples of Robert Frost's\n\"good fences make good neighbors.\"  You can stick instances\nof good design together, but within each individual project,\none person has to be in control.\n\nI'm not saying that good design requires that one person think\nof everything.  There's nothing more valuable than the advice\nof someone whose judgement you trust.  But after the talking is\ndone, the decision about what to do has to rest with one person.\n\nWhy is it that research can be done by collaborators and  \ndesign can't?  This is an interesting question.  I don't \nknow the answer.  Perhaps,\nif design and research converge, the best research is also\ngood design, and in fact can't be done by collaborators.\nA lot of the most famous scientists seem to have worked alone.\nBut I don't know enough to say whether there\nis a pattern here.  It could be simply that many famous scientists\nworked when collaboration was less common.\n\nWhatever the story is in the sciences, true collaboration\nseems to be vanishingly rare in the arts.  Design by committee is a\nsynonym for bad design.  Why is that so?  Is there some way to\nbeat this limitation?\n\nI'm inclined to think there isn't-- that good design requires\na dictator.  One reason is that good design has to   \nbe all of a piece.  Design is not just for humans, but\nfor individual humans.  If a design represents an idea that  \nfits in one person's head, then the idea will fit in the user's\nhead too.\n\n\n\nRelated:\n\n", "\n\nLike to build things? Try Hacker\nNews.\n\n\n\n\n\nAugust 2002\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nMay 2002\n", "May 2002\n\n\n\n\n\n\"The quantity of meaning compressed into a small space by \nalgebraic signs, is another circumstance that facilitates \nthe reasonings we are accustomed to carry on by their aid.\"\n\n- Charles Babbage, quoted in Iverson's Turing Award Lecture\n\n\n\n\n\nIn the discussion about issues raised by Revenge \nof the Nerds on the LL1 mailing list, Paul Prescod wrote\nsomething that stuck in my mind.\n\nPython's goal is regularity and readability, not succinctness.\n\nOn the face of it, this seems a rather damning thing to claim about a \nprogramming language.  As far as I can tell, succinctness = power.\nIf so, then substituting, we get\n\nPython's goal is regularity and readability, not power.\n\nand this doesn't seem a tradeoff (if it is a tradeoff)\nthat you'd want to make. \nIt's not far from saying that Python's goal is not to be effective \nas a programming language.\n\nDoes succinctness = power?  This seems to me an important question,\nmaybe the most important question for anyone interested in\nlanguage design, and one that it would be useful to confront\ndirectly.  I don't feel sure yet that the answer is a simple yes, but it seems \na good hypothesis to begin with.\n\nHypothesis\n\nMy hypothesis is that succinctness is power, or is close enough\nthat except in pathological examples you can treat them as \nidentical.\n\nIt seems to me that succinctness is what programming languages are \nfor.  Computers would be just as happy to be told what to\ndo directly in machine language.  I think that the main\nreason we take the trouble to develop high-level languages is to\nget leverage, so that we can say (and more importantly, think)\nin 10 lines of a high-level language what would require 1000\nlines of machine language.  In other words,\nthe main point of high-level languages is to make source code smaller.\n\nIf smaller source code is the purpose of high-level languages, and\nthe power of something is how well it achieves its purpose, then\nthe measure of the power of a programming language is how small it\nmakes your programs.\n\nConversely, a language that doesn't make your programs small is\ndoing a bad job of what programming languages are supposed to\ndo, like a knife that doesn't cut well, or printing that's illegible.\n\n\nMetrics\n\nSmall in what sense though?  The most common measure of code size is\nlines of code.  But I think that this metric is the most common because\nit is the easiest to measure.  I don't think anyone really believes\nit is the true test of the length of a program. Different\nlanguages have different conventions for how much you should put\non a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a \nprogram, but this is not very good either; some languages (Perl,\nfor example) just\nuse shorter identifiers than others.\n\nI think a better measure of the size of a program would be the \nnumber of elements, where an element is anything that\nwould be a distinct node if you drew a tree representing the \nsource code. The name of\na variable or function is an element; \nan integer or a floating-point number is an element;\na segment of literal text is an element;\nan element of a pattern, or a format directive, is an element;\na new block is an element.  There are borderline cases\n(is -5 two elements or one?) but I think most of them are the\nsame for every language, so they don't affect comparisons much.\n\nThis metric needs fleshing out, and\nit could require interpretation in the case of specific languages,\nbut I think it tries to measure the right thing, which is the \nnumber of parts a program has.  I think the tree you'd draw in this\nexercise is what you have to make in your head in order to\nconceive of the program, and so its size is proportionate to the\namount of work you have to do to write or read it.\n\nDesign\n\nThis kind of metric would allow us to compare different languages,\nbut that is not, at least for me, its main value.  The main value\nof the succinctness test is as a guide in designing languages.\nThe most useful comparison between languages is between two\npotential variants of the same language.  What can I do in the\nlanguage to make programs shorter?\n\nIf the conceptual load of\na program is proportionate to its complexity, and a given programmer\ncan tolerate a fixed conceptual load, then this is the same as asking,\nwhat can I do to enable programmers to get the most done?  And\nthat seems to me identical to asking, how can I design a good\nlanguage?\n\n(Incidentally, nothing makes it more patently obvious that the old\nchestnut \"all languages are equivalent\" is false than designing\nlanguages.  When you are designing a new language, you're constantly\ncomparing two languages-- the language if I did x, and if I didn't-- to\ndecide which is better.  If this were really a meaningless question,\nyou might as well flip a coin.)\n\nAiming for succinctness seems a good way to find new ideas.\nIf you can do something that makes many\ndifferent programs shorter, it is probably not a coincidence: you have \nprobably discovered a useful new abstraction.  You might even be\nable to write a program to help by searching\nsource code for repeated patterns.  Among other languages, those\nwith a reputation for succinctness would be the ones to look to for\nnew ideas: Forth, Joy, Icon.\n\nComparison\n\nThe first person to write about these issues, as far as I know, was\nFred Brooks in the Mythical Man Month.  He wrote\nthat programmers seemed to generate about the same\namount of code per day regardless of the language.\nWhen I first read this in my early twenties,\nit was a big surprise to me and seemed to have huge implications.\nIt meant that (a) the only way to get software written faster was to\nuse a more succinct language, and (b) someone who took the\ntrouble to do this could leave competitors who didn't in the dust.\n\nBrooks' hypothesis, if it's true, seems to be at the very heart of hacking.\nIn the years since, I've paid close attention to any evidence I could\nget on the question, from formal studies to anecdotes about individual\nprojects.   I have seen nothing to contradict him.\n\nI have not yet seen evidence that seemed to me conclusive,\nand I don't expect to.  Studies\nlike Lutz Prechelt's comparison of programming languages, while\ngenerating the kind of results I expected, tend to use problems that\nare too short to be meaningful tests.  A better test of a language is\nwhat happens in programs that take a month to write.  And the only\nreal test, if you believe as I do that the main purpose of a language\nis to be good to think in (rather than just to tell a computer what to\ndo once you've thought of it) is what new things you can write in it.\nSo any language comparison where\nyou have to meet a predefined spec is testing slightly the wrong\nthing.\n\nThe true test of a language is how well you can discover\nand solve new problems, not\nhow well you can use it to solve a problem someone else has\nalready formulated.  These two are quite different criteria.\nIn art, mediums like embroidery and mosaic work well if you\nknow beforehand what you want to make, but are absolutely lousy if\nyou don't.  When you want to discover the image as you make it--\nas you have to do with anything as complex as an image of a\nperson, for example-- you need to use a more fluid medium like pencil or\nink wash or oil paint.  And indeed, the way tapestries and mosaics are made in\npractice is to make a painting first, then copy it.  (The word\n\"cartoon\" was originally used to describe a painting intended for\nthis purpose).\n\nWhat this means is that we are never likely to have accurate comparisons\nof the relative power of programming languages.  We'll have precise\ncomparisons, but not accurate ones.  In particular, explicit studies\nfor the purpose of comparing languages,\nbecause they will probably use small problems, and will necessarily use\npredefined problems, will tend to underestimate the power of the\nmore powerful languages.\n\nReports from the field, though they will necessarily be less precise than\n\"scientific\" studies, are likely to be more meaningful.  For example, \nUlf Wiger of Ericsson did a \nstudy that \nconcluded that Erlang was 4-10x\nmore succinct than C++, and proportionately faster to develop \nsoftware in:\n\nComparisons between Ericsson-internal development projects indicate\nsimilar line/hour productivity, including all phases of software development,\nrather independently of which language (Erlang, PLEX, C, C++, or Java)\nwas used.  What differentiates the different languages then becomes source\ncode volume.\n\n The study also deals explictly with a point that was \nonly implicit in Brooks' book (since he measured lines of debugged code):\nprograms written in more powerful languages tend to have fewer bugs.\nThat becomes an end in itself, possibly more important than programmer\nproductivity, in applications like network switches.\n\nThe Taste Test\n\nUltimately, I think you have to go with your gut.  What does it feel\nlike to program in the language?  I think the way to find (or design)\nthe best language is to become hypersensitive to how well a language\nlets you think, then choose/design the language that feels best.  If\nsome language feature is awkward or restricting, don't worry, you'll\nknow about it.\n\nSuch hypersensitivity will come at a cost.  You'll find that you can't\nstand programming in clumsy languages.   I find it unbearably\nrestrictive to program in languages without macros, just as someone used\nto dynamic typing finds it unbearably restrictive to have to go back to\nprogramming in a language where you have to declare the type of\nevery variable, and can't make a list of objects of different types.\n\n\nI'm not the only one.  I know many Lisp hackers that this has happened\nto.  In fact, the most accurate measure of the relative power of programming\nlanguages might be the percentage of people who know the language\nwho will take any job where they get to use that language, regardless\nof the application domain.\n\nRestrictiveness\n\nI think most hackers know what it means for a language to feel restrictive.\nWhat's happening when you feel that?  I think it's the same feeling\nyou get when the street you want to take is blocked off, and you have to\ntake a long detour to get where you wanted to go.  There is something\nyou want to say, and the language won't let you.\n\nWhat's really going on here, I think, is that a restrictive language is\none that isn't succinct enough.  The problem is not simply that you can't\nsay what you planned to.  It's that the detour the language makes you\ntake is longer.  Try this thought experiment.  Suppose there were\nsome program you wanted to write, and the language wouldn't let you\nexpress it the way you planned to, but instead forced you to write the\nprogram in some other way that was shorter.  For me at least,\nthat wouldn't feel very restrictive.  It would be like the street you\nwanted to take being blocked off, and the policeman at the \nintersection directing you to a shortcut instead of a detour.  Great!\n\nI think most (ninety percent?) of \nthe feeling of restrictiveness comes from being forced to make the program\nyou write in the language longer than one you have in your head.\nRestrictiveness is mostly lack of succinctness.\nSo when a language feels restrictive, what that (mostly) means is that it isn't\nsuccinct enough, and when a language isn't succinct, it will\nfeel restrictive.\n\nReadability\n\nThe quote I began with mentions two other qualities, regularity and\nreadability.  I'm not sure what regularity is, or what advantage, \nif any, code that is regular and readable has over code that is merely\nreadable.  But I think I know what is meant by readability, and I think\nit is also related to succinctness.\n\nWe have to be careful here to distinguish between the readability of\nan individual line of code and the readability of the whole program.\nIt's the second that matters.  I agree that a line of Basic is likely to be\nmore readable than a line of Lisp.  But a program written in Basic is\nis going to have more lines than the same program written in\nLisp (especially once you cross over into Greenspunland). The\ntotal effort of reading the Basic program will surely be greater.\n\ntotal effort  = effort per line x number of lines\n\nI'm not as sure that readability is directly proportionate to succinctness\nas I am that power is, but certainly succinctness is a factor \n(in the mathematical sense; see equation above) in readability.\nSo it may not even be meaningful to say that the goal of a language is\nreadability, not succinctness; it could be like saying the goal was readability,\nnot readability.\n\nWhat readability-per-line does mean, to the user encountering the language\nfor the first time, is that source code will look unthreatening.  So\nreadability-per-line\ncould be a good marketing decision, even if it is a bad design\ndecision.  It's isomorphic to the very successful technique of letting\npeople pay in installments: instead of frightening them with a high\nupfront price, you tell them the low monthly payment.  Installment plans\nare a net lose for the buyer, though, as mere readability-per-line probably\nis for the programmer.\nThe buyer is going to make a lot of those low, low payments; and \nthe programmer is going to read a lot of those individually readable lines.\n\nThis tradeoff predates programming languages.  If you're used to reading\nnovels and newspaper articles, your first experience of reading a math\npaper can be dismaying.  It could take half an hour to read a single page.  \nAnd yet, I am pretty sure that the notation is not the problem, even though\nit may feel like it is.  The math paper is hard to read \nbecause the ideas are hard.  If you expressed the same ideas in prose\n(as mathematicians had to do before they evolved succinct notations),\nthey wouldn't be any easier to read, because the paper would grow to the\nsize of a book.\n\nTo What Extent?\n\nA number of people have rejected\nthe idea that succinctness = power.  I think it would be more useful, instead\nof simply arguing that they are the same or aren't, to ask:\nto what extent does succinctness = power?\nBecause clearly succinctness is\na large part of what higher-level languages are for.  If it is not all they're\nfor, then what else are they for, and how important, relatively, are these\nother functions?\n\nI'm not proposing this just to make the debate more civilized.  I really\nwant to know the answer.  When, if ever,  is a language too succinct for \nits own good?\n\nThe hypothesis I began with was that, except in pathological examples,\nI thought succinctness could be considered identical with power.  What\nI meant was that in any language anyone would design, they\nwould be identical, but that if someone wanted to design a language\nexplicitly to disprove this hyphothesis, they could probably do it.  I'm\nnot even sure of that, actually.\n\nLanguages, not Programs\n\nWe should be clear that we are talking about the succinctness\nof languages, not of individual programs.\nIt certainly is possible for individual programs to be written too densely.\n\nI wrote about this in On Lisp. A complex macro\nmay have to save many times its own length to be justified.  If writing\nsome hairy macro could save you ten lines of code every time you use it,\nand the macro is itself ten lines of code, then you get a net saving in\nlines if you use it more than once.  But that could still be a bad move,\nbecause macro definitions are harder to read than ordinary code.  You \nmight have to use the macro ten or twenty times before it yielded a net\nimprovement in readability.\n\nI'm sure every language has such tradeoffs (though I suspect the stakes\nget higher as the language gets more powerful).  Every programmer must\nhave seen code that some clever person has made marginally shorter\nby using dubious programming tricks.\n\nSo there is no argument about that-- at least, not from me.  Individual\nprograms can certainly be too succinct for their own good.  The question\nis, can a language be?  Can a language compel programmers to write\ncode that's short (in elements) at the expense of overall readability?\n\nOne reason it's hard to imagine a language being too succinct is that if\nthere were some excessively compact way to phrase something, there would\nprobably also be a longer way.  For example, if you felt Lisp programs using\na lot of macros or higher-order functions were too dense,  you could, if you\npreferred, write code that was isomorphic to Pascal.  If you\ndon't want to express factorial in Arc as a call to a higher-order function\n\n(rec zero 1 * 1-)\n\nyou can also write out a recursive definition:\n\n(rfn fact (x) (if (zero x) 1 (* x (fact (1- x)))))\n\nThough I can't off the top of my head think of any examples, I am interested\nin the question of whether a language could be too succinct.  Are there languages \nthat force you to write code in a way that is crabbed and incomprehensible?\nIf anyone has examples, I would be very interested to see them.\n\n(Reminder: What I'm looking for are programs that are very dense according\nto the metric of \"elements\" sketched above, not merely programs that are\nshort because delimiters can be omitted and everything has a one-character name.)\n\n\n\n\n", "\nKevin Kelleher suggested an interesting way to compare programming\nlanguages: to describe each in terms of the problem it\nfixes.  The surprising thing is how many, and how well, languages can be\ndescribed this way.\n\n\n\nAlgol: Assembly language is too low-level.\n\nPascal: Algol doesn't have enough data types.\n\nModula: Pascal is too wimpy for systems programming.\n\n\nSimula: Algol isn't good enough at simulations.\n\nSmalltalk: Not everything in Simula is an object.\n\nFortran: Assembly language is too low-level.\n\nCobol: Fortran is scary.\n\nPL/1: Fortran doesn't have enough data types.\n\nAda: Every existing language is missing something.\n\nBasic: Fortran is scary.\n\nAPL: Fortran isn't good enough at manipulating arrays.\n\nJ: APL requires its own character set.\n\nC: Assembly language is too low-level.\n\nC++: C is too low-level.\n\nJava: C++ is a kludge.  And Microsoft is going to crush us.\n\nC#: Java is controlled by Sun.\n\n\nLisp: Turing Machines are an awkward way to describe computation.\n\nScheme: MacLisp is a kludge.\n\nT: Scheme has no libraries.\n\nCommon Lisp: There are too many dialects of Lisp.\n\nDylan: Scheme has no libraries, and Lisp syntax is scary.\n\n\nPerl: Shell scripts/awk/sed are not enough like programming languages.\n\nPython: Perl is a kludge.\n\nRuby: Perl is a kludge, and Lisp syntax is scary.\n\nProlog: Programming is not enough like logic.\n\n\n\n\n\n\n", "February 2002\n\n\n\n\n\n\"...Copernicus'\naesthetic objections to [equants] provided one essential\nmotive for his rejection of the Ptolemaic system....\"\n\n- Thomas Kuhn, The Copernican Revolution\n\n\"All of us had been trained by Kelly Johnson and believed\nfanatically in his insistence that an airplane that looked\nbeautiful would fly the same way.\"\n\n- Ben Rich, Skunk Works\n\n\"Beauty is the first test: there is no permanent place in this\nworld for ugly mathematics.\"\n\n- G. H. Hardy, A Mathematician's Apology\n\n\n\n\nI was talking recently to a friend who teaches\nat MIT.  His field is hot now and\nevery year he is inundated by applications from\nwould-be graduate students.  \"A lot of them seem smart,\"\nhe said.  \"What I can't tell is whether they have any kind\nof taste.\"\n\nTaste.  You don't hear that word much now.\nAnd yet we still need the underlying\nconcept, whatever we call it.  What my friend meant was\nthat he wanted students who were not just good technicians,\nbut who could use their technical knowledge to\ndesign beautiful things.\n\nMathematicians call good work \"beautiful,\"\nand so, either now or in the past, have\nscientists, engineers, musicians, architects, designers,\nwriters, and painters.\nIs it just a coincidence that they used the same word, or is   \nthere some overlap in what they meant?  If there\nis an overlap, can we use one field's discoveries\nabout beauty to help us in another?\n\nFor those of us who design things, these are not just\ntheoretical questions.  If there is such a thing as\nbeauty, we need to be able to recognize it.  We need\ngood taste to make good things.\nInstead of\ntreating beauty as an airy abstraction, to be either blathered\nabout or avoided depending on how one feels about airy\nabstractions, let's try considering it as a practical question:\nhow do you make good stuff?\n\n\n\nIf you mention taste nowadays, a lot of people will tell\nyou that \"taste is subjective.\"\nThey believe this because it really feels that\nway to them.  When they like something, they have no idea\nwhy.  It could be because it's beautiful, or because their\nmother had one, or because they saw a movie star with one\nin a magazine, or because they know it's expensive.\nTheir thoughts are a tangle of unexamined impulses.\n\nMost of us are encouraged, as children, to leave this tangle\nunexamined.  If you make fun of your little brother for\ncoloring people green in his coloring book, your\nmother is likely to tell you something like \"you like to\ndo it your way and he likes to do it his way.\"\n\nYour mother at this point is not trying to teach you\nimportant truths about aesthetics.  She's trying to get\nthe two of you to stop bickering.\n\nLike many of the half-truths adults tell us, this one\ncontradicts other things they tell us.  After dinning\ninto you that taste is merely a matter of personal preference,\nthey take you to the museum and tell you that you should\npay attention because Leonardo is a great artist.\n\nWhat goes through the kid's head at this point?  What does\nhe think \"great artist\" means?  After having been\ntold for years that everyone just likes to do\nthings their own way, he is\nunlikely to head straight for the conclusion that a great\nartist is someone whose work is better than the others'.\nA far more likely theory, in his Ptolemaic model of\nthe universe, is that a great artist is something that's\ngood for you, like broccoli, because someone said so in a book.\n\n\n\nSaying that taste is just personal preference is a good way\nto prevent disputes.  The trouble is, it's not true.\nYou feel this when you start to design things.\n\nWhatever job people do, they naturally want to do better.\nFootball players\nlike to win games.  CEOs like to increase earnings.  It's\na matter of pride, and a real pleasure, to get better at\nyour job. But if\nyour job is to design things, and there is no such thing\nas beauty, then there is no way to get better at your job.\nIf taste is just personal preference, then everyone's is   \nalready perfect: you like whatever you like, and that's it.\n\nAs in any job, as you continue to design things, you'll get\nbetter at it.  Your tastes will change.  And, like anyone\nwho gets better at their job, you'll know you're getting\nbetter.  If so,\nyour old tastes were\nnot merely different, but worse.  Poof goes the axiom that\ntaste can't be wrong.\n\nRelativism is fashionable at the moment, and that may hamper\nyou from thinking about taste, even as yours grows.\nBut if you come out of the closet and admit, at least to yourself,\nthat there is such a thing as good and bad design, then you\ncan start to study good design in detail.\nHow has\nyour taste changed?  When you made mistakes, what\ncaused you to make them?  What have other people learned about\ndesign?\n\nOnce you start to examine the question, it's surprising how\nmuch different fields' ideas of beauty have in common.  The same\nprinciples of good design crop up again and again.\n\n\n\nGood design is simple.  You hear this from math to\npainting.  In math it means that a shorter proof tends to be\na better one.  Where axioms are concerned, especially,\nless is more.  It means much the same thing in programming.\nFor architects and designers it means that beauty should\ndepend on a few carefully chosen structural elements\nrather than a profusion of superficial ornament.  (Ornament\nis not in itself bad, only when it's camouflage on insipid\nform.)  Similarly, in painting, a\nstill life of a few carefully observed and solidly\nmodelled objects will tend to be more interesting than a\nstretch of flashy\nbut mindlessly repetitive painting of, say, a lace collar.\nIn writing it means: say what you mean\nand say it briefly.\n\nIt seems strange to have to emphasize simplicity.\nYou'd think simple would be the default.  Ornate\nis more work.  But something seems to come over people\nwhen they try to be creative.  Beginning writers adopt   \na pompous tone that doesn't sound anything like the way \nthey speak.  Designers trying to be artistic resort to\nswooshes and curlicues.  Painters discover that they're expressionists.\nIt's all evasion.\nUnderneath\nthe long words or the \"expressive\" brush strokes, there\nis not much going on, and that's frightening.\n\nWhen you're\nforced to be simple, you're forced to face the real problem.\nWhen you can't deliver ornament, you have to deliver\nsubstance.\n\n\n\nGood design is timeless.\nIn math, every proof is timeless unless it contains a mistake.\nSo what does Hardy mean when he says there is no permanent \nplace for ugly mathematics?  He means the same thing Kelly Johnson did:\nif something is ugly, it can't be the best solution.  There\nmust be a better one, and eventually\nsomeone will discover it.\n\nAiming at timelessness is a way to make\nyourself find the best answer:\nif you can imagine someone surpassing you, you should do it yourself.\nSome of the greatest masters did this so well that they\nleft little room for those who came after.\nEvery engraver since Durer has had to live in his shadow.\n\nAiming at timelessness is also a way to evade\nthe grip of fashion.  Fashions almost by definition\nchange with time, so if you can make something that\nwill still look good far into the future, then its\nappeal must derive more from merit and less from fashion.\n\nStrangely enough, if you want to make something that will \nappeal to future generations, one way to do it is to\ntry to appeal to past generations.  It's hard to guess what\nthe future will be like, but we can be sure it will be\nlike the past in caring nothing for present fashions.\nSo if you can make something that appeals to people today\nand would also have appealed to people in 1500, there is a good\nchance it will appeal to people in 2500.\n\n\n\nGood design solves the right problem. The typical\nstove has four burners arranged in a square, and a dial\nto control each.  How do you arrange the dials?  The\nsimplest answer is to put them in a row.  But this is a\nsimple answer to the wrong question.\nThe dials are for humans to use, and if you put them in a row,\nthe unlucky human will have to stop and think each time\nabout which dial matches which burner.  Better to arrange the dials\nin a square like the burners.\n\nA lot of bad design is industrious, but misguided.\nIn the mid twentieth century there was a vogue for\nsetting text in sans-serif fonts.\nThese fonts are closer to the pure, underlying letterforms.\nBut in text that's not the problem you're trying to solve. \nFor legibility it's more important that letters be easy\nto tell apart.\nIt may look Victorian, but a Times Roman lowercase g is\neasy to tell from a lowercase y.\n\nProblems can be improved as well as solutions.\nIn software, an intractable problem can usually be replaced\nby an equivalent one that's easy to solve.\nPhysics progressed faster as the problem became\npredicting observable behavior, instead of reconciling it\nwith scripture.\n\n\n\nGood design is suggestive.\nJane Austen's novels contain almost no\ndescription; instead of telling you how\neverything looks, she tells her story so well that you   \nenvision the scene for yourself.\nLikewise, a painting that suggests is usually more engaging\nthan one that tells.  Everyone makes up their own story about the\nMona Lisa.\n\nIn architecture and design, this\nprinciple means that a building or object should let you \nuse it how you want: a good building, for example, will\nserve as a backdrop for whatever life people want to lead in it, instead\nof making them live as if they were executing a program\nwritten by the architect.\n\nIn software, it means you should give users a few\nbasic elements that they can combine as they wish, like Lego. \nIn math it means a proof that\nbecomes the basis for a lot of new work is\npreferable to a proof that was difficult,\nbut doesn't lead to future discoveries; in the\nsciences generally, citation is considered a rough\nindicator of merit.\n\n\n\nGood design is often slightly funny.  This one\nmay not always be true.  But Durer's \nengravings\nand Saarinen's \nwomb chair and the \nPantheon and the\noriginal Porsche 911 all seem\nto me slightly funny.  Godel's incompleteness theorem\nseems like a practical joke.\n\nI think it's because humor is related to strength.\nTo have a sense of humor is to be strong:\nto keep one's sense of humor is to shrug off misfortunes,\nand to lose one's sense of humor is to be wounded by them.\nAnd so the mark-- or at least the prerogative-- of strength\nis not to take\noneself too seriously.\nThe confident will often, like\nswallows, seem to be making fun of the whole process slightly,\nas Hitchcock does in his films or Bruegel in his paintings-- or\nShakespeare, for that matter.\n\nGood design may not have to be funny, but it's hard to\nimagine something that could be called humorless also being\ngood design.\n\n\n\nGood design is hard.  If you look at the people who've\ndone great work, one thing they all seem to have in common is that they\nworked very hard.  If you're not working hard,\nyou're probably wasting your time.\n\nHard problems call for great\nefforts.  In math, difficult proofs require ingenious solutions,\nand those tend to be interesting.  Ditto in engineering.\n\nWhen you\nhave to climb a mountain you toss everything unnecessary\nout of your pack.  And so an architect who has to build\non a difficult site, or a small budget, will find that he\nis forced to produce an elegant design.  Fashions and\nflourishes get knocked aside by the difficult business\nof solving the problem at all.\n\nNot every kind of hard is good.  There is good pain and bad pain.\nYou want the kind of pain you get from going running, not the\nkind you get from stepping on a nail.\nA difficult\nproblem could be good for a designer, but a fickle client or unreliable\nmaterials would not be.\n\nIn art, the highest place has traditionally been given to\npaintings of people.  There is something to this tradition,\nand not just because pictures of faces get to press\nbuttons in our brains that other pictures don't.  We are \nso good at looking at faces that we force anyone who\ndraws them to work hard to satisfy us.  If you\ndraw a tree and you change the angle of a branch\nfive degrees, no one will know.  When you change the angle\nof someone's eye five degrees, people notice.\n\nWhen Bauhaus designers adopted Sullivan's \"form follows function,\"\nwhat they meant was, form should follow function.  And\nif function is hard enough, form is forced to follow it,\nbecause there is no effort to spare for error.  Wild animals\nare beautiful because they have hard lives.\n\n\n\nGood design looks easy.  Like great athletes,\ngreat designers make it look easy.  Mostly this is\nan illusion.  The easy, conversational tone of good\nwriting comes only on the eighth rewrite.\n\nIn science and engineering, some of the greatest\ndiscoveries seem so simple that you say to yourself,\nI could have thought of that.  The discoverer is\nentitled to reply, why didn't you?\n\nSome Leonardo heads are just a few lines.  You look\nat them and you think, all you have to do is get eight\nor ten lines in the right place and you've made this beautiful\nportrait.  Well, yes, but you have to get them in\nexactly the right place.  The slightest error\nwill make the whole thing collapse.\n\nLine drawings are in fact the most difficult visual\nmedium, because they demand near perfection.\nIn math terms, they are a closed-form solution; lesser  \nartists literally solve the same problems by successive\napproximation.  One of the reasons kids give up drawing\nat ten or so is that they decide to start\ndrawing like grownups, and one of the first things\nthey try is a line drawing of a face.  Smack!\n\nIn most fields the appearance of ease seems to come with\npractice.  Perhaps what practice does is train your\nunconscious mind to handle tasks that used to\nrequire conscious thought.  In some cases\nyou literally train your body.  An expert pianist can\nplay notes faster than the brain can send signals to\nhis hand.  \nLikewise an artist, after a while, can\nmake visual perception flow in through his eye and\nout through his hand as automatically as someone tapping his foot to\na beat.\n\nWhen people talk about being in\n\"the zone,\" I think what they mean is that the\nspinal cord has the situation under control.\nYour spinal cord is less hesitant, and\nit frees conscious thought for the hard problems.\n\n\n\n\nGood design uses symmetry.\nI think symmetry may just\nbe one way to achieve simplicity, but it's important enough\nto be mentioned on its own.\nNature uses it a lot, which is a good sign.\n\nThere are two kinds of symmetry, repetition and recursion.\nRecursion means repetition in subelements, like the\npattern of veins in a leaf.\n\nSymmetry is unfashionable in some fields now, in reaction to\nexcesses in the past.  Architects started consciously\nmaking buildings asymmetric in Victorian times and by the\n1920s asymmetry was an explicit premise of modernist architecture.\nEven these buildings only tended to be asymmetric\nabout major axes, though; there were hundreds of minor symmetries.\n\nIn writing you find symmetry at every level, from the phrases\nin a sentence to the plot of a novel.  You find the same\nin music and art.\nMosaics (and some Cezannes) get extra visual punch by making\nthe whole picture out of the same atoms.  Compositional \nsymmetry yields some of the most memorable paintings,  \nespecially when two halves react to one another, as in \nthe Creation of Adam or \nAmerican Gothic.\n\nIn math and engineering, recursion, especially, is a big win.\nInductive proofs are wonderfully short.  In software,\na problem that can be solved by recursion is nearly always\nbest solved that way. The Eiffel Tower looks striking partly\nbecause it is a recursive solution, a tower on a tower.\n\nThe danger of symmetry, and repetition especially, is that\nit can be used as a substitute for thought.\n\n\n\nGood design resembles nature.  It's not so much that\nresembling nature is intrinsically good as that nature\nhas had a long time to work on the\nproblem.  It's a good sign when your answer resembles nature's.\n\nIt's not cheating to copy.\nFew would deny that a story should be like life.\nWorking from life is a valuable tool in painting too, though its\nrole has often been misunderstood.\nThe aim is not simply to make a record.\nThe point of painting from life is\nthat it gives your mind something to chew on:  when your\neyes are looking at something, your hand will do more\ninteresting work.\n\nImitating nature also works in engineering.  Boats have\nlong had spines and ribs like an animal's ribcage.\nIn some cases we may have to wait for better technology:\nearly aircraft designers were mistaken to\ndesign aircraft that looked like birds, because they didn't\nhave materials or power sources light enough (the Wrights' engine\nweighed 152 lbs. and\ngenerated only 12 hp.) or control systems sophisticated\nenough for machines that flew like birds, but I could\nimagine little unmanned reconnaissance planes flying\nlike birds in fifty years.\n\nNow that we have enough computer power, we can imitate nature's   \nmethod as well as its results.  Genetic algorithms may let us\ncreate things too complex to design in the ordinary\nsense.\n\n\n\nGood design is redesign.  It's rare to get things right\nthe first time.  Experts expect to throw away some early work.\nThey plan for plans to change.\n\nIt takes confidence to throw work away.  You have to be able \nto think, there's more where that came from.   \nWhen people first start drawing, for example,\nthey're often reluctant to redo parts that aren't\nright; they feel they've been lucky to get that far,   \nand if they try to redo something, it will turn out worse.  Instead\nthey convince themselves that the drawing is not that bad,\nreally-- in fact, maybe they meant it to look that way.\n\nDangerous territory, that; if anything you should\ncultivate dissatisfaction.\nIn Leonardo's drawings there are often five\nor six attempts to get a line right.\nThe distinctive back of the Porsche\n911 only appeared in the redesign of an awkward \nprototype.\nIn Wright's early plans for the \nGuggenheim,\nthe right half was a ziggurat; he inverted it to get the\npresent shape.\n\nMistakes are natural.  Instead of treating them\nas disasters, make them easy to acknowledge and easy to fix.\nLeonardo more or less invented the sketch, as a\nway to make drawing bear a greater weight of exploration.\nOpen-source software has fewer bugs because it admits the\npossibility of bugs.\n\nIt helps to have a medium that makes change easy.\nWhen oil paint replaced tempera in the fifteenth century,\nit helped\npainters to deal with difficult subjects like the human \nfigure because, unlike tempera, oil can be blended and overpainted.\n\n\n\n\nGood design can copy.  Attitudes to copying\noften make a round trip.  A novice\nimitates without knowing it; next he tries\nconsciously to be original; finally, he decides it's\nmore important to be right than original.\n\nUnknowing imitation is almost a recipe for bad design.\nIf you don't know where your ideas are coming from,\nyou're probably imitating an imitator.\nRaphael so pervaded mid-nineteenth century taste that almost \nanyone who tried to draw was imitating him, often at several\nremoves.\nIt was this, more than Raphael's own work, that bothered\nthe Pre-Raphaelites.\n\nThe ambitious are not content to imitate. The\nsecond phase in the growth of taste is a conscious\nattempt at originality.\n\nI think the\ngreatest masters go on to achieve a kind of selflessness.\nThey just want to get the right answer, and if part of the\nright answer has already been discovered by someone else,\nthat's no reason not to use it.\nThey're confident enough to take from anyone without\nfeeling that their own vision will be lost in the process.\n\n\n\n\nGood design is often strange.  Some of the very best work\nhas an uncanny quality: Euler's \nFormula, \nBruegel's\nHunters in the Snow, the \nSR-71, Lisp.  They're not just\nbeautiful, but strangely beautiful.\n\nI'm not sure why.  It may just be my own stupidity.  A\ncan-opener must seem miraculous to a dog.  Maybe if I were smart\nenough it would seem the most natural thing in the world that\nei*pi = -1.  It is after all necessarily true.\n\nMost of the qualities I've mentioned are things that can be\ncultivated, but I don't think it works to cultivate strangeness.\nThe best you can do is not squash it if it starts to appear.\nEinstein didn't try to make relativity strange.\nHe tried to make it true, and the truth turned out to be strange.\n\nAt an art school where I once studied, the students wanted\nmost of all to develop a personal style.\nBut if you just try to make good things, you'll  \ninevitably do it in a distinctive way, just as each person\nwalks in a distinctive way.  Michelangelo was not trying\nto paint like Michelangelo.  He was just trying to paint\nwell; he couldn't help painting like Michelangelo.\n\nThe only style worth having is the one you can't help.\nAnd this is especially true for strangeness.  There is no\nshortcut to it.  The Northwest Passage that the Mannerists,\nthe Romantics, and two generations of American high school\nstudents have searched for does not seem to exist.  The\nonly way to get there is to go through good and come out\nthe other side.\n\n\n\n\nGood design happens in chunks.  The inhabitants\nof fifteenth century Florence included Brunelleschi, Ghiberti,\nDonatello, Masaccio, Filippo Lippi, \nFra Angelico, Verrocchio, Botticelli, Leonardo, and Michelangelo.\nMilan at the time was as big as Florence.\nHow many fifteenth century Milanese artists can you name?\n\nSomething was happening in Florence in the fifteenth century.\nAnd it can't have been heredity, because it isn't happening now.\nYou have to assume that whatever\ninborn ability Leonardo and Michelangelo had, there were\npeople born in Milan with just as much.  What happened to\nthe Milanese Leonardo?\n\nThere are roughly a thousand times\nas many people alive in the US right now as lived in\nFlorence during the fifteenth century.  A thousand Leonardos\nand a thousand Michelangelos walk among us.\nIf DNA ruled, we should be greeted daily by artistic\nmarvels.  We aren't, and the reason is that to make Leonardo\nyou need more than his innate ability.  You also need Florence \nin 1450.\n\nNothing is more powerful\nthan a community of talented people working on related\nproblems.  Genes count for little by comparison: being a genetic\nLeonardo was not enough to compensate for having been born   \nnear Milan instead of Florence.\nToday we move around more, but great work still comes\ndisproportionately from a few hotspots:\nthe Bauhaus, the Manhattan Project, the New Yorker,\nLockheed's Skunk Works, Xerox Parc.\n\nAt any given time there are a\nfew hot topics and a few groups doing great work on them,\nand it's nearly impossible to do\ngood work yourself if you're too far removed from one\nof these centers.  You can push or pull these trends\nto some extent, but you can't break away from them.\n(Maybe you can, but the Milanese Leonardo couldn't.)\n\n\n\n\nGood design is often daring.  At every period   \nof history, people have believed things that were just   \nridiculous, and believed them so strongly that you risked  \nostracism or even violence by saying otherwise.\n\nIf our own time were any different, that would be remarkable.\nAs far as I can tell it isn't.\n\nThis problem afflicts not just every\nera, but in some degree every field.\nMuch Renaissance art was in its time considered shockingly secular:\naccording to Vasari, Botticelli repented and gave up painting, and\nFra Bartolommeo and Lorenzo di Credi actually burned some of their\nwork.\nEinstein's theory of relativity offended many contemporary physicists,\nand was not fully accepted for decades-- in France, not until the\n1950s.\n\nToday's experimental error is tomorrow's new theory.  If\nyou want to discover great new things, then instead of turning\na blind eye to the places where conventional wisdom and\ntruth don't quite meet, you should pay particular attention \nto them.\n\n\n\nAs a practical matter, I think it's easier to see ugliness\nthan to imagine beauty.  Most of the people who've made beautiful\nthings seem to have done it by fixing something that they    \nthought ugly.  Great work usually seems to happen because someone sees\nsomething and thinks, I could do better than that.  Giotto\nsaw traditional Byzantine madonnas painted according to a\nformula that had satisfied everyone for centuries, and to him\nthey looked wooden and unnatural.\nCopernicus was so troubled by a hack that all his contemporaries\ncould tolerate that he felt there must be a better solution.\n\nIntolerance for ugliness is not in itself enough.  You have to\nunderstand a field well before you develop a good nose for\nwhat needs fixing.  You have to do your homework.  But as\nyou become expert in a field, you'll start to hear little\nvoices saying, What a hack!  There must be a better way.\nDon't ignore those voices.  Cultivate them.  The recipe for\ngreat work is: very exacting taste, plus the ability\nto gratify it.\n\n\n\n\n\nNotes\n\nSullivan\n actually said \"form ever follows function,\" but   \nI think the usual misquotation is closer to what modernist\narchitects meant.\n\n\nStephen G. Brush, \"Why was Relativity Accepted?\"\nPhys. Perspect. 1 (1999) 184-214.\n\n\n", "\nThere is a kind of mania for object-oriented programming at the moment, but\n\nsome of the smartest programmers I know are some of the least excited about it.\n\nMy own feeling is that object-oriented\nprogramming is a useful technique in some\ncases, but it isn't something that has to pervade every program you\nwrite.  You should be able to define new types,\nbut you shouldn't have to express every program as the\ndefinition of new types.\n\nI think there are five reasons people like object-oriented   \nprogramming, and three and a half of them are bad:\n\n\n Object-oriented programming is exciting   \nif you have a statically-typed language without \nlexical closures or macros.  To some degree, it offers a way around these\nlimitations.  (See Greenspun's Tenth Rule.)\n\n Object-oriented programming is popular in big companies,\nbecause it suits the way they write software.  At big companies,\nsoftware tends to be written by large (and frequently changing)  \nteams of\nmediocre programmers.  Object-oriented programming imposes a\ndiscipline on these programmers that prevents any one of them\nfrom doing too much damage.  The price is that the resulting\ncode is bloated with protocols and full of duplication.  \nThis is not too high a price for big companies, because their\nsoftware is probably going to be bloated and full of \nduplication anyway.\n\n Object-oriented\nprogramming generates a lot of what looks like work.\nBack in the days of fanfold, there was a type of programmer who\nwould only put five or ten lines of code on a page, preceded\nby twenty lines of elaborately formatted comments. \nObject-oriented programming is like crack for these people: it lets\nyou incorporate all this scaffolding right into your source\ncode.  Something that a Lisp hacker might handle by pushing\na symbol onto a list becomes a whole file of classes and\nmethods.  So it is a good tool if you want to convince yourself,\nor someone else, that you are doing a lot of work.\n\n If a language is itself an object-oriented program, it can\nbe extended by users.  Well, maybe.  Or maybe you can do\neven better by offering the sub-concepts\nof object-oriented programming a la carte.  Overloading, \nfor example, is not intrinsically tied to classes.  We'll see.\n\n Object-oriented abstractions map neatly onto the domains\nof  certain specific kinds of programs, like simulations and CAD\nsystems.                                        \n\n\nI personally have never needed object-oriented abstractions.\nCommon Lisp has an enormously powerful object system and I've\nnever used it once.  I've done a lot of things (e.g. making         \nhash tables full of closures) that would have required \nobject-oriented techniques to do in wimpier languages, but\nI have never had to use CLOS.\n\nMaybe I'm just stupid, or have worked on some limited subset\nof applications.  There is a danger in designing a language\nbased on one's own experience of programming.  But it seems\nmore dangerous to put stuff in that you've never needed \nbecause it's thought to be a good idea.\n\n", "December 2001 (rev. May 2002)\n\n(This article came about in response to some questions on\nthe LL1 mailing list.  It is now\nincorporated in Revenge of the Nerds.)\n\nWhen McCarthy designed Lisp in the late 1950s, it was\na radical departure from existing languages,\nthe most important of which was Fortran.\n\nLisp embodied nine new ideas:\n\n\n1. Conditionals.  A conditional is an if-then-else\nconstruct.  We take these for granted now.  They were \ninvented\nby McCarthy in the course of developing Lisp. \n(Fortran at that time only had a conditional\ngoto, closely based on the branch instruction in the \nunderlying hardware.)  McCarthy, who was on the Algol committee, got\nconditionals into Algol, whence they spread to most other\nlanguages.\n\n2. A function type. In Lisp, functions are first class \nobjects-- they're a data type just like integers, strings,\netc, and have a literal representation, can be stored in variables,\ncan be passed as arguments, and so on.\n\n3. Recursion.  Recursion existed as a mathematical concept\nbefore Lisp of course, but Lisp was the first programming language to support\nit.  (It's arguably implicit in making functions first class\nobjects.)\n\n4. A new concept of variables.  In Lisp, all variables\nare effectively pointers. Values are what\nhave types, not variables, and assigning or binding\nvariables means copying pointers, not what they point to.\n\n5. Garbage-collection.\n\n6. Programs composed of expressions. Lisp programs are \ntrees of expressions, each of which returns a value.  \n(In some Lisps expressions\ncan return multiple values.)  This is in contrast to Fortran\nand most succeeding languages, which distinguish between\nexpressions and statements.\n\nIt was natural to have this\ndistinction in Fortran because (not surprisingly in a language\nwhere the input format was punched cards) the language was\nline-oriented.  You could not nest statements.  And\nso while you needed expressions for math to work, there was\nno point in making anything else return a value, because\nthere could not be anything waiting for it.\n\nThis limitation\nwent away with the arrival of block-structured languages,\nbut by then it was too late. The distinction between\nexpressions and statements was entrenched.  It spread from \nFortran into Algol and thence to both their descendants.\n\nWhen a language is made entirely of expressions, you can\ncompose expressions however you want.  You can say either\n(using Arc syntax)\n\n(if foo (= x 1) (= x 2))\n\nor\n\n(= x (if foo 1 2))\n\n7. A symbol type.  Symbols differ from strings in that\nyou can test equality by comparing a pointer.\n\n8. A notation for code using trees of symbols.\n\n9. The whole language always available.  \nThere is\nno real distinction between read-time, compile-time, and runtime.\nYou can compile or run code while reading, read or run code\nwhile compiling, and read or compile code at runtime.\n\nRunning code at read-time lets users reprogram Lisp's syntax;\nrunning code at compile-time is the basis of macros; compiling\nat runtime is the basis of Lisp's use as an extension\nlanguage in programs like Emacs; and reading at runtime\nenables programs to communicate using s-expressions, an\nidea recently reinvented as XML.\n\n\nWhen Lisp was first invented, all these ideas were far\nremoved from ordinary programming practice, which was\ndictated largely by the hardware available in the late 1950s.\n\nOver time, the default language, embodied\nin a succession of popular languages, has\ngradually evolved toward Lisp.  1-5 are now widespread.\n6 is starting to appear in the mainstream.\nPython has a form of 7, though there doesn't seem to be\nany syntax for it.  \n8, which (with 9) is what makes Lisp macros\npossible, is so far still unique to Lisp,\nperhaps because (a) it requires those parens, or something \njust as bad, and (b) if you add that final increment of power, \nyou can no \nlonger claim to have invented a new language, but only\nto have designed a new dialect of Lisp ; -)\n\nThough useful to present-day programmers, it's\nstrange to describe Lisp in terms of its\nvariation from the random expedients other languages\nadopted.  That was not, probably, how McCarthy\nthought of it.  Lisp wasn't designed to fix the mistakes\nin Fortran; it came about more as the byproduct of an\nattempt to axiomatize computation.\n\n\n\n", "September 2001\n\n\n(This article explains why much of the next generation of software\nmay be server-based, what that will mean for programmers,\nand why this new kind of software is a great opportunity for startups.\nIt's derived from a talk at BBN Labs.)\n\n\nIn the summer of 1995, my friend Robert Morris and I decided to\nstart a startup.  The PR campaign leading up to Netscape's IPO was\nrunning full blast then, and there was a lot of talk in the press\nabout online commerce.  At the time there might have been thirty\nactual stores on the Web, all made by hand.  If there were going\nto be a lot of online stores, there would need to be software for making\nthem, so we decided to write some.\n\nFor the first week or so we intended to make this an ordinary   \ndesktop application.  Then one day we had the idea of making the\nsoftware run on our Web server, using the browser as an\ninterface.  We tried rewriting the software to work over\nthe Web, and it was clear that this was the way to go.\nIf we wrote our software to run on the server, it would be a lot easier\nfor the users and for us as well.\n\nThis turned out to be a good plan.  Now, as \nYahoo Store, this\nsoftware is the most popular online store builder, with\nabout 14,000 users.\n\nWhen we started Viaweb, hardly anyone understood what we meant when\nwe said that the software ran on the server.  It was not until\nHotmail was launched a year later that people started to get it.\nNow everyone knows that this is a valid approach.  There is\na name now for what we were: an Application Service Provider,\nor ASP.\n\nI think that a lot of the next generation of software will be\nwritten on this model.  Even Microsoft, who have the most to\nlose, seem to see the inevitablity of moving some things off\nthe desktop. If software moves\noff the desktop and onto servers, it will mean a very different\nworld for developers.  This article describes the surprising\nthings we saw, as some of the first visitors to this new world.\nTo the extent software does move onto\nservers, what I'm describing here is the future.\n\nThe Next Thing?\n\nWhen we look back on the desktop software era, I think we'll marvel\nat the inconveniences people put up with, just as we marvel now at\nwhat early car owners put up with.  For the first twenty or thirty\nyears, you had to be a car expert to own a car.  But cars were such\na big win that lots of people who weren't car experts wanted to\nhave them as well.\n\nComputers are in this phase now.  When you own a desktop computer,\nyou end up learning a lot more than you wanted to know about what's\nhappening inside it.  But more than half the households in the US\nown one.  My mother has a computer that she uses for email and for\nkeeping accounts.  About a year ago she was alarmed to receive a\nletter from Apple, offering her a discount on a new version of the\noperating system.  There's something wrong when a sixty-five year\nold woman who wants to use a computer for email and accounts has\nto think about installing new operating systems.  Ordinary users\nshouldn't even know the words \"operating system,\" much less \"device\ndriver\" or \"patch.\"\n\nThere is now another way to deliver software that will save users\nfrom becoming system administrators.  Web-based applications are\nprograms that run on Web servers and use Web pages as the user\ninterface.  For the average user this new kind of software will be\neasier, cheaper, more mobile, more reliable, and often more powerful\nthan desktop software.\n\nWith Web-based software, most users won't have to think about\nanything except the applications they use.  All the messy, changing\nstuff will be sitting on a server somewhere, maintained by the kind\nof people who are good at that kind of thing.  And so you won't\nordinarily need a computer, per se, to use software.  All you'll\nneed will be something with a keyboard, a screen, and a Web browser.\nMaybe it will have wireless Internet access.  Maybe it will also\nbe your cell phone.  Whatever it is, it will be consumer electronics:\nsomething that costs about $200, and that people choose mostly\nbased on how the case looks.  You'll pay more for Internet services\nthan you do for the hardware, just as you do now with telephones. [1]\n\nIt will take about a tenth of a second for a click to get to the\nserver and back, so users of heavily interactive software, like\nPhotoshop, will still want to have the computations happening on\nthe desktop.  But if you look at the kind of things most people\nuse computers for, a tenth of a second latency would not be a\nproblem.  My mother doesn't really need a desktop computer, and\nthere are a lot of people like her.\n\nThe Win for Users\n\nNear my house there is a car with a bumper sticker that reads \"death\nbefore inconvenience.\"  Most people, most of the time, will take\nwhatever choice requires least work.  If Web-based software wins,\nit will be because it's more convenient.  And it looks as if it\nwill be, for users and developers both.\n\nTo use a purely Web-based application, all you need is a browser\nconnected to the Internet.  So you can use a Web-based application\nanywhere.  When you install software on your desktop computer, you\ncan only use it on that computer.  Worse still, your files are\ntrapped on that computer.  The inconvenience of this model becomes\nmore and more evident as people get used to networks.\n\nThe thin end of the wedge here was Web-based email.  Millions of\npeople now realize that you should have access to email messages\nno matter where you are.  And if you can see your email, why not\nyour calendar?  \nIf you can discuss a document with your colleagues,\nwhy can't you edit it?  Why should any of your data be trapped on\nsome computer sitting on a faraway desk?\n\nThe whole idea of \"your computer\" is going away, and being replaced\nwith \"your data.\"  You should be able to get at your data from any\ncomputer.  Or rather, any client, and a client doesn't have to be\na computer.\n\nClients shouldn't store data; they should be like telephones.  In\nfact they may become telephones, or vice versa.  And as clients\nget smaller, you have another reason not to keep your data on them:\nsomething you carry around with you can be lost or stolen.   Leaving\nyour PDA in a taxi is like a disk crash, except that your data is\nhanded to someone else \ninstead of being vaporized.\n\nWith purely Web-based software, neither your data nor the applications\nare kept on the client.  So you don't have to install anything to\nuse it.  And when there's no installation, you don't have to worry\nabout installation going wrong.  There can't be incompatibilities\nbetween the application and your operating system, because the\nsoftware doesn't run on your operating system.\n\nBecause it needs no installation, it will be easy, and common, to\ntry Web-based software before you \"buy\" it.  You should expect to\nbe able to test-drive any Web-based application for free, just by\ngoing to the site where it's offered.  At Viaweb our whole site\nwas like a big arrow pointing users to the test drive.\n\nAfter trying the demo, signing up for the service should require\nnothing more than filling out a brief form (the briefer the better).\nAnd that should be the last work the user has to do.  With Web-based\nsoftware, you should get new releases without paying extra, or\ndoing any work, or possibly even knowing about it.\n\nUpgrades won't be the big shocks they are now.  Over time applications\nwill quietly grow more powerful.  This will take some effort on\nthe part of the developers.  They will have to design software so\nthat it can be updated without confusing the users.  That's a new\nproblem, but there are ways to solve it.\n\nWith Web-based applications, everyone uses the same version, and\nbugs can be fixed as soon as they're discovered.  So Web-based\nsoftware should have far fewer bugs than desktop software.  At\nViaweb, I doubt we ever had ten known bugs at any one time.  That's\norders of magnitude better than desktop software.\n\nWeb-based applications can be used by several people at the same\ntime.  This is an obvious win for collaborative applications, but\nI bet users will start to want this in most applications once they\nrealize it's possible.  It will often be useful to let two people\nedit the same document, for example.  Viaweb let multiple users\nedit a site simultaneously, more because that was the right way to\nwrite the software than because we expected users to want to, but\nit turned out that many did.\n\nWhen you use a Web-based application, your data will be safer.\nDisk crashes won't be a thing of the past, but users won't hear\nabout them anymore.  They'll happen within server farms.  And\ncompanies offering Web-based applications will actually do backups--\nnot only because they'll have real system administrators worrying\nabout such things, but because an ASP that does lose people's data\nwill be in big, big trouble.  When people lose their own data in\na disk crash, they can't get that mad, because they only have\nthemselves to be mad at.  When a company loses their data for them,\nthey'll get a lot madder.\n\nFinally, Web-based software should be less vulnerable to viruses.\nIf the client doesn't run anything except a browser, there's less\nchance of running viruses, and no data locally to damage.  And a\nprogram that attacked the servers themselves should find them very\nwell defended. [2]\n\nFor users, Web-based software will be less stressful.  I think if\nyou looked inside the average Windows user you'd find a huge and\npretty much untapped desire for software meeting that description.\nUnleashed, it could be a powerful force.\n\nCity of Code\n\nTo developers, the most conspicuous difference between Web-based\nand desktop software is that a Web-based application is not a single\npiece of code.  It will be a collection of programs of different\ntypes rather than a single big binary.  And so designing Web-based\nsoftware is like desiging a city rather than a building: as well\nas buildings you need roads, street signs, utilities, police and\nfire departments, and plans for both growth and various kinds of\ndisasters.\n\nAt Viaweb, software included fairly big applications that users\ntalked to directly, programs that those programs used, programs\nthat ran constantly in the background looking for problems, programs\nthat tried to restart things if they broke, programs that ran\noccasionally to compile statistics or build indexes for searches,\nprograms we ran explicitly to garbage-collect resources or to move\nor restore data, programs that pretended to be users (to measure\nperformance or expose bugs), programs for diagnosing network\ntroubles, programs for doing backups, interfaces to outside services,\nsoftware that drove an impressive collection of dials displaying\nreal-time server statistics (a hit with visitors, but indispensable\nfor us too), modifications (including bug fixes) to open-source\nsoftware, and a great many configuration files and settings.  Trevor\nBlackwell wrote a spectacular program for moving stores to new\nservers across the country, without shutting them down, after we\nwere bought by Yahoo. Programs paged us, sent faxes and email to\nusers, conducted transactions with credit card processors, and\ntalked to one another through sockets, pipes, http requests, ssh,\nudp packets, shared memory, and files.  Some of Viaweb even consisted\nof the absence of programs, since one of the keys to Unix security\nis not to run unnecessary utilities that people might use to break\ninto your servers.\n\nIt did not end with software.  We spent a lot of time thinking\nabout server configurations.  We built the servers ourselves, from\ncomponents-- partly to save money, and partly to get exactly what\nwe wanted.  We had to think about whether our upstream ISP had fast\nenough connections to all the backbones.  We serially  \ndated\nRAID suppliers.\n\nBut hardware is not just something to worry about.  When you control\nit you can do more for users.  With a desktop application, you can\nspecify certain minimum hardware, but you can't add more.  If you\nadminister the servers, you can in one step enable all your users\nto page people, or send faxes, or send commands by phone, or process\ncredit cards, etc, just by installing the relevant hardware.  We\nalways looked for new ways to add features with hardware, not just\nbecause it pleased users, but also as a way to distinguish ourselves\nfrom competitors who (either because they sold desktop software,\nor resold Web-based applications through ISPs) didn't have direct\ncontrol over the hardware.\n\nBecause the software in a Web-based application will be a collection\nof programs rather than a single binary, it can be written in any\nnumber of different languages.  When you're writing desktop software,\nyou're practically forced to write the application in the same\nlanguage as the underlying operating system-- meaning C and C++.\nAnd so these languages (especially among nontechnical people like\nmanagers and VCs) got to be considered as the languages for \"serious\"\nsoftware development.  But that was just an artifact of the way\ndesktop software had to be delivered.  For server-based software\nyou can use any language you want. [3]  Today a lot of the top\nhackers are using languages far removed from C and C++:  Perl,\nPython, and even Lisp.\n\nWith server-based software, no one can tell you what language to\nuse, because you control the whole system, right down to the\nhardware.  Different languages are good for different tasks.  You\ncan use whichever is best for each.  And when you have competitors,\n\"you can\" means \"you must\" (we'll return to this later), because\nif you don't take advantage of this possibility, your competitors\nwill.\n\nMost of our competitors used C and C++, and this made their software\nvisibly inferior because (among other things), they had no way\naround the statelessness of CGI scripts.  If you were going to\nchange something, all the changes had to happen on one page, with\nan Update button at the bottom.  As I've written elsewhere, by\nusing Lisp, which many people still consider \na research language,\nwe could make the Viaweb editor behave more like desktop software.\n\nReleases\n\nOne of the most important changes in this new world is the way you\ndo releases. In the desktop software business, doing a release is\na huge trauma, in which the whole company sweats and strains to\npush out a single, giant piece of code.  Obvious comparisons suggest\nthemselves, both to the process and the resulting product.\n\nWith server-based software, you can make changes almost as you\nwould in a program you were writing for yourself.  You release\nsoftware as a series of incremental changes instead of an occasional\nbig explosion. A typical desktop software company might do one or\ntwo releases a year.  At Viaweb we often did three to five releases\na day.\n\nWhen you switch to this new model, you realize how much software\ndevelopment is affected by the way it is released.  Many of the\nnastiest problems you see in the desktop software business are due\nto catastrophic nature of releases.\n\nWhen you release only one new version a year, you tend to deal with\nbugs wholesale.  Some time before the release date you assemble a\nnew version in which half the code has been torn out and replaced,\nintroducing countless bugs.  Then a squad of QA people step in and\nstart counting them, and the programmers work down the list, fixing\nthem.  They do not generally get to the end of the list, and indeed,\nno one is sure where the end is.  It's like fishing rubble out of\na pond.  You never really know what's happening inside the software.\nAt best you end up with a statistical sort of correctness.\n\nWith server-based software, most of the change is small and\nincremental.  That in itself is less likely to introduce bugs.  It\nalso means you know what to test most carefully when you're about\nto release software: the last thing you changed.  You end up with\na much firmer grip on the code.  As a general rule, you do know\nwhat's happening inside it.  You don't have the source code memorized,\nof course, but when you read the source you do it like a pilot\nscanning the instrument panel, not like a detective trying to\nunravel some mystery.\n\nDesktop software breeds a certain fatalism about bugs.  You know\nthat you're shipping something loaded with bugs, and you've even\nset up mechanisms to compensate for it (e.g. patch releases).  So\nwhy worry about a few more?  Soon you're releasing whole features\nyou know are broken.  \nApple \ndid this earlier this year.  They felt\nunder pressure to release their new OS, whose release date had\nalready slipped four times, but some of the software (support for\nCDs and DVDs) wasn't ready. The solution?  They released the OS\nwithout the unfinished parts, and users will have to install them\nlater.\n\nWith Web-based software, you never have to release software before\nit works, and you can release it as soon as it does work.\n\nThe industry veteran may be thinking, it's a fine-sounding idea to\nsay that you never have to release software before it works, but\nwhat happens when you've promised to deliver a new version of your\nsoftware by a certain date?  With Web-based software, you wouldn't\nmake such a promise, because there are no versions.  Your software\nchanges gradually and continuously.  Some changes might be bigger\nthan others, but the idea of versions just doesn't naturally fit\nonto Web-based software.\n\nIf anyone remembers Viaweb this might sound odd, because we were\nalways announcing new versions.  This was done entirely for PR\npurposes.  The trade press, we learned, thinks in version numbers.\nThey will give you major coverage for a major release, meaning a\nnew first digit on the version number, and generally a paragraph\nat most for a point release, meaning a new digit after the decimal\npoint.\n\nSome of our competitors were offering desktop software and actually\nhad version numbers.  And for these releases, the mere fact of\nwhich seemed to us evidence of their backwardness, they would get\nall kinds of publicity.  We didn't want to miss out, so we started\ngiving version numbers to our software too.  When we wanted some\npublicity, we'd make a list of all the features we'd added since\nthe last \"release,\" stick a new version number on the software,\nand issue a press release saying that the new version was available\nimmediately.  Amazingly, no one ever called us on it.\n\nBy the time we were bought, we had done this three times, so we\nwere on Version 4.  Version 4.1 if I remember correctly.  After\nViaweb became Yahoo Store, there was no longer such a desperate\nneed for publicity, so although the software continued to evolve,\nthe whole idea of version numbers was quietly dropped.\n\nBugs\n\nThe other major technical advantage of Web-based software is that\nyou can reproduce most bugs.  You have the users' data right there\non your disk.  If someone breaks your software, you don't have to\ntry to guess what's going on, as you would with desktop software:\nyou should be able to reproduce the error while they're on the\nphone with you.  You might even know about it already, if you have\ncode for noticing errors built into your application.\n\nWeb-based software gets used round the clock, so everything you do\nis immediately put through the wringer.  Bugs turn up quickly.\n\nSoftware companies are sometimes accused of letting the users debug\ntheir software.  And that is just what I'm advocating.  For Web-based\nsoftware it's actually a good plan, because the bugs are fewer and\ntransient.  When you release software gradually you get far fewer\nbugs to start with.  And when you can reproduce errors and release\nchanges instantly, you can find and fix most bugs as soon as they\nappear.  We never had enough bugs at any one time to bother with\na formal bug-tracking system.\n\nYou should test changes before you release them, of course, so no\nmajor bugs should get released.  Those few that inevitably slip\nthrough will involve borderline cases and will only affect the few\nusers that encounter them before someone calls in to complain.  As\nlong as you fix bugs right away, the net effect, for the average\nuser, is far fewer bugs.  I doubt the average Viaweb user ever saw\na bug.\n\nFixing fresh bugs is easier than fixing old ones.  It's usually\nfairly quick to find a bug in code you just wrote.  When it turns\nup you often know what's wrong before you even look at the source,\nbecause you were already worrying about it subconsciously. Fixing\na bug in something you wrote six months ago (the average case if\nyou release once a year) is a lot more work.  And since you don't\nunderstand the code as well, you're more likely to fix it in an\nugly way, or even introduce more bugs. [4]\n\nWhen you catch bugs early, you also get fewer compound bugs.\nCompound bugs are two separate bugs that interact:  you trip going\ndownstairs, and when you reach for the handrail it comes off in\nyour hand.  In software this kind of bug is the hardest to find,\nand also tends to have the worst consequences. [5]  The traditional\n\"break everything and then filter out the bugs\" approach inherently\nyields a lot of compound bugs.  And software that's released in a\nseries of small changes inherently tends not to. The floors are\nconstantly being swept clean of any loose objects that might later\nget stuck in something.\n\nIt helps if you use a technique called functional programming.\nFunctional programming means avoiding side-effects.  It's something\nyou're more likely to see in research papers than commercial\nsoftware, but for Web-based applications it turns out to be really\nuseful.  It's hard to write entire programs as purely functional\ncode, but you can write substantial chunks this way.  It makes\nthose parts of your software easier to test, because they have no\nstate, and that is very convenient in a situation where you are\nconstantly making and testing small modifications.  I wrote much\nof Viaweb's editor in this style, and we made our scripting language,\nRTML, \na purely functional language.\n\nPeople from the desktop software business will find this hard to\ncredit, but at Viaweb bugs became almost a game.  Since most released\nbugs involved borderline cases, the users who encountered them were\nlikely to be advanced users, pushing the envelope.  Advanced users\nare more forgiving about bugs, especially since you probably\nintroduced them in the course of adding some feature they were\nasking for.  In fact, because bugs were rare and you had to be\ndoing sophisticated things to see them, advanced users were often\nproud to catch one.  They would call support in a spirit more of\ntriumph than anger, as if they had scored points off us.\n\nSupport\n\nWhen you can reproduce errors, it changes your approach to customer\nsupport.  At most software companies, support is offered as a way\nto make customers feel better.  They're either calling you about\na known bug, or they're just doing something wrong and you have to\nfigure out what.  In either case there's not much you can learn\nfrom them.  And so you tend to view support calls as a pain in the\nass that you want to isolate from your developers as much as\npossible.\n\nThis was not how things worked at Viaweb.  At Viaweb, support was\nfree, because we wanted to hear from customers.  If someone had a\nproblem, we wanted to know about it right away so that we could\nreproduce the error and release a fix.\n\nSo at Viaweb the developers were always in close contact with\nsupport.  The customer support people were about thirty feet away\nfrom the programmers, and knew that they could always interrupt\nanything with a report of a genuine bug.  We would leave a board\nmeeting to fix a serious bug.\n\nOur approach to support made everyone happier.  The customers were\ndelighted.  Just imagine how it would feel to call a support line\nand be treated as someone bringing important news.  The customer\nsupport people liked it because it meant they could help the users,\ninstead of reading scripts to them.  And the programmers liked it\nbecause they could reproduce bugs instead of just hearing vague\nsecond-hand reports about them.\n\nOur policy of fixing bugs on the fly changed the relationship\nbetween customer support people and hackers.  At most software\ncompanies, support people are underpaid human shields, and hackers\nare little copies of God the Father, creators of the world.  Whatever\nthe procedure for reporting bugs, it is likely to be one-directional:\nsupport people who hear about bugs fill out some form that eventually\ngets passed on (possibly via QA) to programmers, who put it on\ntheir list of things to do.  It was very different at Viaweb.\nWithin a minute of hearing about a bug from a customer, the support\npeople could be standing next to a programmer hearing him say \"Shit,\nyou're right, it's a bug.\" It delighted the support people to hear\nthat \"you're right\" from the hackers.  They used to bring us bugs\nwith the same expectant air as a cat bringing you a mouse it has\njust killed.   It also made them more careful in judging the\nseriousness of a bug, because now their honor was on the line.\n\nAfter we were bought by Yahoo, the customer support people were\nmoved far away from the programmers.  It was only then that we\nrealized that they were effectively QA and to some extent marketing\nas well.  In addition to catching bugs, they were the keepers of\nthe knowledge of vaguer, buglike things, like features that confused\nusers. [6]  They were also a kind of proxy focus group; we could\nask them which of two new features users wanted more, and they were\nalways right.\n\nMorale\n\nBeing able to release software immediately is a big motivator.\nOften as I was walking to work I would think of some change I wanted\nto make to the software, and do it that day.  This worked for bigger\nfeatures as well.  Even if something was going to take two weeks\nto write (few projects took longer), I knew I could see the effect\nin the software as soon as it was done.\n\nIf I'd had to wait a year for the next release, I would have shelved\nmost of these ideas, for a while at least.  The thing about ideas,\nthough, is that they lead to more ideas.  Have you ever noticed\nthat when you sit down to write something, half the ideas that end\nup in it are ones you thought of while writing it?  The same thing\nhappens with software.  Working to implement one idea gives you\nmore ideas.  So shelving an idea costs you not only that delay in\nimplementing it, but also all the ideas that implementing it would\nhave led to.  In fact, shelving an idea probably even inhibits new\nideas: as you start to think of some new feature, you catch sight\nof the shelf and think \"but I already have a lot of new things I\nwant to do for the next release.\"\n\nWhat big companies do instead of implementing features is plan\nthem.  At Viaweb we sometimes ran into trouble on this account.\nInvestors and analysts would ask us what we had planned for the\nfuture.  The truthful answer would have been, we didn't have any\nplans.  We had general ideas about things we wanted to improve,\nbut if we knew how we would have done it already.  What were we\ngoing to do in the next six months? Whatever looked like the biggest\nwin.  I don't know if I ever dared give this answer, but that was\nthe truth.  Plans are just another word for ideas on the shelf.\nWhen we thought of good ideas, we implemented them.\n\nAt Viaweb, as at many software companies, most code had one definite\nowner.  But when you owned something you really owned it: no one\nexcept the owner of a piece of software had to approve (or even\nknow about) a release.  There was no protection against breakage\nexcept the fear of looking like an idiot to one's peers, and that\nwas more than enough.  I may have given the impression that we just\nblithely plowed forward writing code.  We did go fast, but we\nthought very carefully before we released software onto those\nservers.  And paying attention is more important to reliability\nthan moving slowly.  Because he pays close attention, a Navy pilot\ncan land a 40,000 lb. aircraft at 140 miles per hour on a pitching\ncarrier deck, at night, more safely than the average teenager can\ncut a bagel.\n\nThis way of writing software is a double-edged sword of course.\nIt works a lot better for a small team of good, trusted programmers\nthan it would for a big company of mediocre ones, where bad ideas\nare caught by committees instead of the people that had them.\n\nBrooks in Reverse\n\nFortunately, Web-based software does require fewer programmers.\nI once worked for a medium-sized desktop software company that had\nover 100 people working in engineering as a whole.  Only 13 of\nthese were in product development.  All the rest were working on\nreleases, ports, and so on.  With Web-based software, all you need\n(at most) are the 13 people, because there are no releases, ports,\nand so on.\n\nViaweb was written by just three people. [7]  I was always under\npressure to hire more, because we wanted to get bought, and we knew\nthat buyers would have a hard time paying a high price for a company\nwith only three programmers.  (Solution:  we hired more, but created\nnew projects for them.)\n\nWhen you can write software with fewer programmers, it saves you\nmore than money.  As Fred Brooks pointed out in The Mythical\nMan-Month, adding people to a project tends to slow it down.  The\nnumber of possible connections between developers grows exponentially\nwith the size of the group.  The larger the group, the more time\nthey'll spend in meetings negotiating how their software will work\ntogether, and the more bugs they'll get from unforeseen interactions.\nFortunately, this process also works in reverse: as groups get\nsmaller, software development gets exponentially more efficient.\nI can't remember the programmers at Viaweb ever having an actual\nmeeting.  We never had more to say at any one time than we could\nsay as we were walking to lunch.\n\nIf there is a downside here, it is that all the programmers have\nto be to some degree system administrators as well.  When you're\nhosting software, someone has to be watching the servers, and in\npractice the only people who can do this properly are the ones who\nwrote the software.  At Viaweb our system had so many components\nand changed so frequently that there was no definite border between\nsoftware and infrastructure.  Arbitrarily declaring such a border\nwould have constrained our design choices.  And so although we were\nconstantly hoping that one day (\"in a couple months\") everything\nwould be stable enough that we could hire someone whose job was\njust to worry about the servers, it never happened.\n\nI don't think it could be any other way, as long as you're still\nactively developing the product.  Web-based software is never going\nto be something you write, check in, and go home.  It's a live\nthing, running on your servers right now.  A bad bug might not just\ncrash one user's process; it could crash them all.  If a bug in\nyour code corrupts some data on disk, you have to fix it.  And so\non.  We found that you don't have to watch the servers every minute\n(after the first year or so), but you definitely want to keep an\neye on things you've changed recently.  You don't release code late\nat night and then go home.\n\nWatching Users\n\nWith server-based software, you're in closer touch with your code.\nYou can also be in closer touch with your users.  Intuit is famous\nfor introducing themselves to customers at retail stores and asking\nto follow them home.  If you've ever watched someone use your\nsoftware for the first time, you know what surprises must have\nawaited them.\n\nSoftware should do what users think it will.  But you can't have\nany idea what users will be thinking, believe me, until you watch\nthem.  And server-based software gives you unprecedented information\nabout their behavior.  You're not limited to small, artificial\nfocus groups.  You can see every click made by every user.  You\nhave to consider carefully what you're going to look at, because\nyou don't want to violate users' privacy, but even the most general\nstatistical sampling can be very useful.\n\nWhen you have the users on your server, you don't have to rely on\nbenchmarks, for example.  Benchmarks are simulated users.  With\nserver-based software, you can watch actual users.  To decide what\nto optimize, just log into a server and see what's consuming all\nthe CPU.  And you know when to stop optimizing too: we eventually\ngot the Viaweb editor to the point where it was memory-bound rather\nthan CPU-bound, and since there was nothing we could do to decrease\nthe size of users' data (well, nothing easy), we knew we might as\nwell stop there.\n\nEfficiency matters for server-based software, because you're paying\nfor the hardware.  The number of users you can support per server\nis the divisor of your capital cost, so if you can make your software\nvery efficient you can undersell competitors and still make a\nprofit.  At Viaweb we got the capital cost per user down to about\n$5.  It would be less now, probably less than the cost of sending\nthem the first month's bill.  Hardware is free now, if your software\nis reasonably efficient.\n\nWatching users can guide you in design as well as optimization.\nViaweb had a scripting language called RTML that let advanced users\ndefine their own page styles.  We found that RTML became a kind of\nsuggestion box, because users only used it when the predefined page\nstyles couldn't do what they wanted.  Originally the editor put\nbutton bars across the page, for example, but after a number of\nusers used RTML to put buttons down the left \nside, \nwe made that an\noption (in fact the default) in the predefined page styles.\n\nFinally, by watching users you can often tell when they're in\ntrouble.  And since the customer is always right, that's a sign of\nsomething you need to fix.  At Viaweb the key to getting users was\nthe online test drive.  It was not just a series of slides built\nby marketing people.  In our test drive, users actually used the\nsoftware.  It took about five minutes, and at the end of it they\nhad built a real, working store.\n\n\nThe test drive was the way we got nearly all our new users.  I\nthink it will be the same for most Web-based applications.   If\nusers can get through a test drive successfully, they'll like the\nproduct.  If they get confused or bored, they won't.  So anything\nwe could do to get more people through the test drive would increase\nour growth rate.\n\nI studied click trails of people taking the test drive and found\nthat at a certain step they would get confused and click on the\nbrowser's Back button.  (If you try writing Web-based applications,\nyou'll find that the Back button becomes one of your most interesting\nphilosophical problems.) So I added a message at that point, telling\nusers that they were nearly finished, and reminding them not to\nclick on the Back button.  Another great thing about Web-based\nsoftware is that you get instant feedback from changes:  the number\nof people completing the test drive rose immediately from 60% to\n90%.  And since the number of new users was a function of the number\nof completed test drives, our revenue growth increased by 50%, just\nfrom that change.\n\nMoney\n\nIn the early 1990s I read an article in which someone said that\nsoftware was a subscription business.  At first this seemed a very\ncynical statement.  But later I realized that it reflects reality:\nsoftware development is an ongoing process.  I think it's cleaner\nif you openly charge subscription fees, instead of forcing people\nto keep buying and installing new versions so that they'll keep\npaying you.  And fortunately, subscriptions are the natural way to\nbill for Web-based applications.\n\nHosting applications is an area where companies will play a role\nthat is not likely to be filled by freeware.  Hosting applications\nis a lot of stress, and has real expenses.  No one is going to want\nto do it for free.\n\nFor companies, Web-based applications are an ideal source of revenue.\nInstead of starting each quarter with a blank slate, you have a\nrecurring revenue stream.  Because your software evolves gradually,\nyou don't have to worry that a new model will flop; there never\nneed be a new model, per se, and if you do something to the software\nthat users hate, you'll know right away.  You have no trouble with\nuncollectable bills; if someone won't pay you can just turn off\nthe service.  And there is no possibility of piracy.\n\nThat last \"advantage\" may turn out to be a problem.  Some amount\nof piracy is to the advantage of software companies.  If some user\nreally would not have bought your software at any price, you haven't\nlost anything if he uses a pirated copy.  In fact you gain, because\nhe is one more user helping to make your software the standard--\nor who might buy a copy later, when he graduates from high school.\n\nWhen they can, companies like to do something called price\ndiscrimination, which means charging each customer as much as they\ncan afford. [8] Software is particularly suitable for price\ndiscrimination, because the marginal cost is close to zero.  This\nis why some software costs more to run on Suns than on Intel boxes:\na company that uses Suns is not interested in saving money and can\nsafely be charged more.  Piracy is effectively the lowest tier of\nprice discrimination.  I think that software companies understand\nthis and deliberately turn a blind eye to some kinds of piracy. [9] \nWith server-based software they are going to have to come up with \nsome other solution.\n\nWeb-based software sells well, especially in comparison to desktop\nsoftware, because it's easy to buy.  You might think that people\ndecide to buy something, and then buy it, as two separate steps.\nThat's what I thought before Viaweb, to the extent I thought about\nthe question at all.  In fact the second step can propagate back\ninto the first: if something is hard to buy, people will change\ntheir mind about whether they wanted it.  And vice versa: you'll\nsell more of something when it's easy to buy.  I buy more books\nbecause Amazon exists.  Web-based software is just about the easiest\nthing in the world to buy, especially if you have just done an\nonline demo.  Users should not have to do much more than enter a\ncredit card number.  (Make them do more at your peril.)\n\n\nSometimes Web-based software is offered through ISPs acting as\nresellers.  This is a bad idea.  You have to be administering the\nservers, because you need to be constantly improving both hardware\nand software.  If you give up direct control of the servers, you\ngive up most of the advantages of developing Web-based applications.\n\nSeveral of our competitors shot themselves in the foot this way--\nusually, I think, because they were overrun by suits who were\nexcited about this huge potential channel, and didn't realize that\nit would ruin the product they hoped to sell through it.  Selling\nWeb-based software through ISPs is like selling sushi through\nvending machines.\n\nCustomers\n\nWho will the customers be?  At Viaweb they were initially individuals\nand smaller companies, and I think this will be the rule with\nWeb-based applications.  These are the users who are ready to try\nnew things, partly because they're more flexible, and partly because\nthey want the lower costs of new technology.\n\nWeb-based applications will often be the best thing for big companies\ntoo (though they'll be slow to realize it).  The best intranet is\nthe Internet.  If a company uses true Web-based applications, the\nsoftware will work better, the servers will be better administered,\nand employees will have access to the system from anywhere.\n\nThe argument against this approach usually hinges on security: if\naccess is easier for employees, it will be for bad guys too.  Some\nlarger merchants were reluctant to use Viaweb because they thought\ncustomers' credit card information would be safer on their own\nservers.  It was not easy to make this point diplomatically, but\nin fact the data was almost certainly safer in our hands than\ntheirs.  Who can hire better people to manage security, a technology\nstartup whose whole business is running servers, or a clothing\nretailer?  Not only did we have better people worrying about\nsecurity, we worried more about it.  If someone broke into the\nclothing retailer's servers, it would affect at most one merchant,\ncould probably be hushed up, and in the worst case might get one\nperson fired.  If someone broke into ours, it could affect thousands\nof merchants, would probably end up as news on CNet, and could put\nus out of business.\n\nIf you want to keep your money safe, do you keep it under your\nmattress at home, or put it in a bank? This argument applies to\nevery aspect of server administration:  not just security, but\nuptime, bandwidth, load management, backups, etc.  Our existence\ndepended on doing these things right.  Server problems were the\nbig no-no for us, like a dangerous toy would be for a toy maker,\nor a salmonella outbreak for a food processor.\n\nA big company that uses Web-based applications is to that extent\noutsourcing IT.  Drastic as it sounds, I think this is generally\na good idea.  Companies are likely to get better service this way\nthan they would from in-house system administrators.  System\nadministrators can become cranky and unresponsive because they're\nnot directly exposed to competitive pressure:  a salesman has to\ndeal with customers, and a developer has to deal with competitors'\nsoftware, but a system administrator, like an old bachelor, has\nfew external forces to keep him in line. [10]  At Viaweb we had\nexternal forces in plenty to keep us in line. The people calling\nus were customers, not just co-workers.  If a server got wedged,\nwe jumped; just thinking about it gives me a jolt of adrenaline,\nyears later.\n\nSo Web-based applications will ordinarily be the right answer for\nbig companies too.  They will be the last to realize it, however,\njust as they were with desktop computers.  And partly for the same\nreason: it will be worth a lot of money to convince big companies\nthat they need something more expensive.\n\nThere is always a tendency for rich customers to buy expensive\nsolutions, even when cheap solutions are better, because the people\noffering expensive solutions can spend more to sell them.  At Viaweb\nwe were always up against this.  We lost several high-end merchants\nto Web consulting firms who convinced them they'd be better off if\nthey paid half a million dollars for a custom-made online store on\ntheir own server.  They were, as a rule, not better off, as more\nthan one discovered when Christmas shopping season came around and\nloads rose on their server.  Viaweb was a lot more sophisticated\nthan what most of these merchants got, but we couldn't afford to\ntell them.  At $300 a month, we couldn't afford to send a team of\nwell-dressed and authoritative-sounding people to make presentations\nto customers.\n\nA large part of what big companies pay extra for is the cost of\nselling expensive things to them.  (If the Defense Department pays\na thousand dollars for toilet seats, it's partly because it costs\na lot to sell toilet seats for a thousand dollars.)  And this is\none reason intranet software will continue to thrive, even though\nit is probably a bad idea.  It's simply more expensive.  There is\nnothing you can do about this conundrum, so the best plan is to go\nfor the smaller customers first.  The rest will come in time.\n\nSon of Server\n\nRunning software on the server is nothing new.  In fact it's the\nold model: mainframe applications are all server-based.  If\nserver-based software is such a good idea, why did it lose last\ntime?  Why did desktop computers eclipse mainframes?\n\nAt first desktop computers didn't look like much of a threat.  The\nfirst users were all hackers-- or hobbyists, as they were called\nthen.  They liked microcomputers because they were cheap.  For the\nfirst time, you could have your own computer.  The phrase \"personal\ncomputer\" is part of the language now, but when it was first used\nit had a deliberately audacious sound, like the phrase \"personal\nsatellite\" would today.\n\nWhy did desktop computers take over? I think it was because they\nhad better software.  And I think the reason microcomputer software\nwas better was that it could be written by small companies.\n\nI don't think many people realize how fragile and tentative startups\nare in the earliest stage.  Many startups begin almost by accident--\nas a couple guys, either with day jobs or in school, writing a\nprototype of something that might, if it looks promising, turn into\na company. At this larval stage, any significant obstacle will stop\nthe startup dead in its tracks.  Writing mainframe software required\ntoo much commitment up front.  Development machines were expensive,\nand because the customers would be big companies, you'd need an\nimpressive-looking sales force to sell it to them.  Starting a\nstartup to write mainframe software would be a much more serious\nundertaking than just hacking something together on your Apple II\nin the evenings.  And so you didn't get a lot of startups writing\nmainframe applications.\n\nThe arrival of desktop computers inspired a lot of new software,\nbecause writing applications for them seemed an attainable goal to\nlarval startups.  Development was cheap, and the customers would\nbe individual people that you could reach through computer stores\nor even by mail-order.\n\nThe application that pushed desktop computers out into the mainstream\nwas VisiCalc, the \nfirst spreadsheet.  It was written by two guys\nworking in an attic, and yet did things no mainframe software could\ndo. [11]  VisiCalc was such an advance, in its time, that people\nbought Apple IIs just to run it.  And this was the beginning of a\ntrend: desktop computers won because startups wrote software for\nthem.\n\nIt looks as if server-based software will be good this time around,\nbecause startups will write it.  Computers are so cheap now that\nyou can get started, as we did, using a desktop computer as a\nserver.  Inexpensive processors have eaten the workstation market\n(you rarely even hear the word now) and are most of the way through\nthe server market; Yahoo's servers, which deal with loads as high\nas any on the Internet, all have the same inexpensive Intel processors\nthat you have in your desktop machine.  And once you've written\nthe software, all you need to sell it is a Web site.  Nearly all\nour users came direct to our site through word of mouth and references\nin the press. [12]\n\nViaweb was a typical larval startup.  We were terrified of starting\na company, and for the first few months comforted ourselves by\ntreating the whole thing as an experiment that we might call off\nat any moment.  Fortunately, there were few obstacles except\ntechnical ones.  While we were writing the software, our Web server\nwas the same desktop machine we used for development, connected to\nthe outside world by a dialup line.  Our only expenses in that\nphase were food and rent.\n\nThere is all the more reason for startups to write Web-based software\nnow, because writing desktop software has become a lot less fun.\nIf you want to write desktop software now you do it on Microsoft's\nterms, calling their APIs and working around their buggy OS.  And\nif you manage to write something that takes off, you may find that\nyou were merely doing market research for Microsoft.\n\nIf a company wants to make a platform that startups will build on,\nthey have to make it something that hackers themselves will want\nto use.   That means it has to be inexpensive and well-designed.\nThe Mac was popular with hackers when it first came out, and a lot\nof them wrote software for it. [13] You see this less with Windows,\nbecause hackers don't use it.  The kind of people who are good at\nwriting software tend to be running Linux or FreeBSD now.\n\nI don't think we would have started a startup to write desktop\nsoftware, because desktop software has to run on Windows, and before\nwe could write software for Windows we'd have to use it.  The Web \nlet us do an end-run around Windows, and deliver software running \non Unix direct to users through the browser.  That is a liberating \nprospect, a lot like the arrival of PCs twenty-five years ago.\n\nMicrosoft\n\nBack when desktop computers arrived, IBM was the giant that everyone\nwas afraid of.  It's hard to imagine now, but I remember the feeling\nvery well.  Now the frightening giant is Microsoft, and I don't\nthink they are as blind to the threat facing them as IBM was.\nAfter all, Microsoft deliberately built their business in IBM's\nblind spot.\n\nI mentioned earlier that my mother doesn't really need a desktop\ncomputer.  Most users probably don't.  That's a problem for Microsoft,\nand they know it.  If applications run on remote servers, no one\nneeds Windows.  What will Microsoft do?  Will they be able to use\ntheir control of the desktop to prevent, or constrain, this new\ngeneration of software?\n\nMy guess is that Microsoft will develop some kind of server/desktop\nhybrid, where the operating system works together with servers they\ncontrol.  At a minimum, files will be centrally available for users\nwho want that.  I don't expect Microsoft to go all the way to the\nextreme of doing the computations on the server, with only a browser\nfor a client, if they can avoid it. If you only need a browser for\na client, you don't need Microsoft on the client, and if Microsoft\ndoesn't control the client, they can't push users towards their\nserver-based applications.\n\nI think Microsoft will have a hard time keeping the genie in the\nbottle.  There will be too many different types of clients for them\nto control them all.  And if Microsoft's applications only work\nwith some clients, competitors will be able to trump them by offering\napplications that work from any client. [14]\n\nIn a world of Web-based applications, there is no automatic place\nfor Microsoft.  They may succeed in making themselves a place, but\nI don't think they'll dominate this new world as they did the world\nof desktop applications.\n\nIt's not so much that a competitor will trip them up as that they\nwill trip over themselves.  With the rise of Web-based software,\nthey will be facing not just technical problems but their own\nwishful thinking.  What they need to do is cannibalize their existing\nbusiness, and I can't see them facing that.  The same single-mindedness\nthat has brought them this far will now be working against them.\nIBM was in exactly the same situation, and they could not master\nit.  IBM made a late and half-hearted entry into the microcomputer\nbusiness because they were ambivalent about threatening their cash\ncow, mainframe computing.  Microsoft will likewise be hampered by\nwanting to save the desktop.  A cash cow can be a damned heavy\nmonkey on your back.\n\nI'm not saying that no one will dominate server-based applications.\nSomeone probably will eventually.  But I think that there will be\na good long period of cheerful chaos, just as there was in the\nearly days of microcomputers.  That was a good time for startups.\nLots of small companies flourished, and did it by making cool\nthings.\n\nStartups but More So\n\nThe classic startup is fast and informal, with few people and little\nmoney.  Those few people work very hard, and technology magnifies\nthe effect of the decisions they make.  If they win, they win big.\n\nIn a startup writing Web-based applications, everything you associate\nwith startups is taken to an extreme.  You can write and launch a\nproduct with even fewer people and even less money.  You have to\nbe even faster, and you can get away with being more informal.\nYou can literally launch your product as three guys sitting in the\nliving room of an apartment, and a server collocated at an ISP.\nWe did.\n\nOver time the teams have gotten smaller, faster, and more informal.\nIn 1960, software development meant a roomful of men with horn\nrimmed glasses and narrow black neckties, industriously writing\nten lines of code a day on IBM coding forms.  In 1980, it was a\nteam of eight to ten people wearing jeans to the office and typing\ninto vt100s.  Now it's a couple of guys sitting in a living room\nwith laptops.  (And jeans turn out not to be the last word in\ninformality.)\n\nStartups are stressful, and this, unfortunately, is also taken to\nan extreme with Web-based applications.  \nMany software companies, especially at the beginning, have periods\nwhere the developers slept under their desks and so on.  The alarming\nthing about Web-based software is that there is nothing to prevent\nthis becoming the default.  The stories about sleeping under desks\nusually end:  then at last we shipped it and we all went home and\nslept for a week.  Web-based software never ships.  You can work\n16-hour days for as long as you want to.  And because you can, and\nyour competitors can, you tend to be forced to.  You can, so you\nmust.  It's Parkinson's Law running in reverse.\n\nThe worst thing is not the hours but the responsibility.  Programmers\nand system administrators traditionally each have their own separate\nworries.  Programmers have to worry about bugs, and system\nadministrators have to worry about infrastructure.  Programmers\nmay spend a long day up to their elbows in source code, but at some\npoint they get to go home and forget about it.  System administrators\nnever quite leave the job behind, but when they do get paged at\n4:00 AM, they don't usually have to do anything very complicated.\nWith Web-based applications, these two kinds of stress get combined.\nThe programmers become system administrators, but without the\nsharply defined limits that ordinarily make the job bearable.\n\nAt Viaweb we spent the first six months just writing software.  We\nworked the usual long hours of an early startup.  In a desktop\nsoftware company, this would have been the part where we were\nworking hard, but it felt like a vacation compared to the next\nphase, when we took users onto our server.  The second biggest\nbenefit of selling Viaweb to Yahoo (after the money) was to be able\nto dump ultimate responsibility for the whole thing onto the\nshoulders of a big company.\n\nDesktop software forces users to become system administrators.\nWeb-based software forces programmers to.  There is less stress in\ntotal, but more for the programmers.  That's not necessarily bad\nnews.  If you're a startup competing with a big company, it's good\nnews. [15]  Web-based applications offer a straightforward way to\noutwork your competitors.  No startup asks for more.\n\nJust Good Enough\n\nOne thing that might deter you from writing Web-based applications\nis the lameness of Web pages as a UI.  That is a problem, I admit.\nThere were a few things we would have really liked to add to\nHTML and HTTP.  What matters, though, is that Web pages are just\ngood enough.\n\nThere is a parallel here with the first microcomputers.  The\nprocessors in those machines weren't actually intended to be the\nCPUs of computers.  They were designed to be used in things like\ntraffic lights.  But guys like Ed Roberts, who designed the \nAltair,\nrealized that they were just good enough.  You could combine one\nof these chips with some memory (256 bytes in the first Altair),\nand front panel switches, and you'd have a working computer.  Being\nable to have your own computer was so exciting that there were\nplenty of people who wanted to buy them, however limited.\n\nWeb pages weren't designed to be a UI for applications, but they're\njust good enough.  And for a significant number of users, software\nthat you can use from any browser will be enough of a win in itself\nto outweigh any awkwardness in the UI.  Maybe you can't write the\nbest-looking spreadsheet using HTML, but you can write a spreadsheet\nthat several people can use simultaneously from different locations\nwithout special client software, or that can incorporate live data\nfeeds, or that can page you when certain conditions are triggered.\nMore importantly, you can write new kinds of applications that\ndon't even have names yet.  VisiCalc was not merely a microcomputer\nversion of a mainframe application, after all-- it was a new type\nof application.\n\nOf course, server-based applications don't have to be Web-based.\nYou could have some other kind of client.  But I'm pretty sure\nthat's a bad idea.  It would be very convenient if you could assume\nthat everyone would install your client-- so convenient that you\ncould easily convince yourself that they all would-- but if they\ndon't, you're hosed.  Because Web-based software assumes nothing\nabout the client, it will work anywhere the Web works.  That's a\nbig advantage already, and the advantage will grow as new Web\ndevices proliferate.  Users will like you because your software\njust works, and your life will be easier because you won't have to\ntweak it for every new client.   [16]\n\nI feel like I've watched the evolution of the Web as closely as\nanyone, and I can't predict what's going to happen with clients.\nConvergence is probably coming, but where?  I can't pick a winner.\nOne thing I can predict is conflict between AOL and Microsoft.\nWhatever Microsoft's .NET turns out to be, it will probably involve\nconnecting the desktop to servers.  Unless AOL fights back, they\nwill either be pushed aside or turned into a pipe between Microsoft\nclient and server software.  If Microsoft and AOL get into a client\nwar, the only thing sure to work on both will be browsing the Web,\nmeaning Web-based applications will be the only kind that work\neverywhere.\n\nHow will it all play out?  I don't know.  And you don't have to\nknow if you bet on Web-based applications.  No one can break that\nwithout breaking browsing.  The Web may not be the only way to\ndeliver software, but it's one that works now and will continue to\nwork for a long time.  Web-based applications are cheap to develop,\nand easy for even the smallest startup to deliver.  They're a lot\nof work, and of a particularly stressful kind, but that only makes\nthe odds better for startups.\n\nWhy Not?\n\nE. B. White was amused to learn from a farmer friend that many\nelectrified fences don't have any current running through them.\nThe cows apparently learn to stay away from them, and after that\nyou don't need the current.  \"Rise up, cows!\" he wrote, \"Take your\nliberty while despots snore!\"\n\nIf you're a hacker who has thought of one day starting a startup,\nthere are probably two things keeping you from doing it.  One is\nthat you don't know anything about business.  The other is that\nyou're afraid of competition.  Neither of these fences have any\ncurrent in them.\n\nThere are only two things you have to know about business:  build\nsomething users love, and make more than you spend.  If you get\nthese two right, you'll be ahead of most startups.  You can figure\nout the rest as you go.\n\nYou may not at first make more than you spend, but as long as the\ngap is closing fast enough you'll be ok.  If you start out underfunded,\nit will at least encourage a habit of frugality.  The less you\nspend, the easier it is to make more than you spend.  Fortunately,\nit can be very cheap to launch a Web-based application.  We launched\non under $10,000, and it would be even cheaper today.  We had to\nspend thousands on a server, and thousands more to get SSL.  (The\nonly company selling SSL software at the time was Netscape.)  Now\nyou can rent a much more powerful server, with SSL included, for\nless than we paid for bandwidth alone.  You could launch a Web-based\napplication now for less than the cost of a fancy office chair.\n\nAs for building something users love, here are some general tips.\nStart by making something clean and simple that you would want to\nuse yourself.  Get a version 1.0 out fast, then continue to improve\nthe software, listening closely to the users as you do.  The customer\nis always right, but different customers are right about different\nthings; the least sophisticated users show you what you need to\nsimplify and clarify, and the most sophisticated tell you what\nfeatures you need to add. The best thing software can be is easy,\nbut the way to do this is to get the defaults right, not to limit\nusers' choices.  Don't get complacent if your competitors' software\nis lame; the standard to compare your software to is what it could\nbe, not what your current competitors happen to have.  Use your\nsoftware yourself, all the time.  Viaweb was supposed to be an\nonline store builder, but we used it to make our own site too.\nDon't listen to marketing people or designers or product managers\njust because of their job titles.  If they have good ideas, use\nthem, but it's up to you to decide; software has to be designed by\nhackers who understand design, not designers who know a little\nabout software.  If you can't design software as well as implement\nit, don't start a startup.\n\nNow let's talk about competition.  What you're afraid of is not\npresumably groups of hackers like you, but actual companies, with\noffices and business plans and salesmen and so on, right?  Well,\nthey are more afraid of you than you are of them, and they're right.\nIt's a lot easier for a couple of hackers to figure out how to rent\noffice space or hire sales people than it is for a company of any\nsize to get software written.  I've been on both sides, and I know.\nWhen Viaweb was bought by Yahoo, I suddenly found myself working\nfor a big company, and it was like trying to run through waist-deep\nwater.\n\nI don't mean to disparage Yahoo.  They had some good hackers, and\nthe top management were real butt-kickers.  For a big company, they\nwere exceptional.  But they were still only about a tenth as\nproductive as a small startup.  No big company can do much better\nthan that.  What's scary about Microsoft is that a company so\nbig can develop software at all.  They're like a mountain that\ncan walk.\n\nDon't be intimidated.  You can do as much that Microsoft can't as\nthey can do that you can't.  And no one can stop you.  You don't\nhave to ask anyone's permission to develop Web-based applications.\nYou don't have to do licensing deals, or get shelf space in retail\nstores, or grovel to have your application bundled with the OS.\nYou can deliver software right to the browser, and no one can get\nbetween you and potential users without preventing them from browsing\nthe Web.\n\nYou may not believe it, but I promise you, Microsoft is scared of\nyou.  The complacent middle managers may not be, but Bill is,\nbecause he was you once, back in 1975, the last time a new way of\ndelivering software appeared.\n\n\n\n\n\nNotes\n\n[1] Realizing that much of the money is in the services, companies\nbuilding lightweight clients have usually tried to combine the\nhardware with an \nonline service. \n This approach has not worked\nwell, partly because you need two different kinds of companies to\nbuild consumer electronics and to run an online service, and partly\nbecause users hate the idea.  Giving away the razor and making\nmoney on the blades may work for Gillette, but a razor is much\nsmaller commitment than a Web terminal.  Cell phone handset makers\nare satisfied to sell hardware without trying to capture the service\nrevenue as well.  That should probably be the model for Internet\nclients too.  If someone just sold a nice-looking little box with\na Web browser that you could use to connect through any ISP, every\ntechnophobe in the country would buy one.\n\n[2] Security always depends more on not screwing up than any design\ndecision, but the nature of server-based software will make developers\npay more attention to not screwing up.  Compromising a server could\ncause such damage that ASPs (that want to stay in business) are\nlikely to be careful about security.\n\n[3] In 1995, when we started Viaweb, Java applets were supposed to\nbe the technology everyone was going to use to develop server-based\napplications.  Applets seemed to us an old-fashioned idea.  Download\nprograms to run on the client? Simpler just to go all the way and\nrun the programs on the server.  We wasted little time\non applets, but countless other startups must have been lured into\nthis tar pit.  Few can have escaped alive, or Microsoft could not\nhave gotten away with dropping Java in the most recent version of\nExplorer.\n\n[4] This point is due to Trevor Blackwell, who adds \"the cost of\nwriting software goes up more than linearly with its size.  Perhaps\nthis is mainly due to fixing old bugs, and the cost can be more\nlinear if all bugs are found quickly.\"\n\n[5] The hardest kind of bug to find may be a variant of compound\nbug where one bug happens to compensate for another.  When you fix\none bug, the other becomes visible.  But it will seem as if the\nfix is at fault, since that was the last thing you changed.\n\n[6] Within Viaweb we once had a contest to describe the worst thing\nabout our software.  Two customer support people tied for first\nprize with entries I still shiver to recall.  We fixed both problems\nimmediately.\n\n[7] Robert Morris wrote the ordering system, which shoppers used\nto place orders. Trevor Blackwell wrote the image generator and\nthe manager, which merchants used to retrieve orders, view statistics,\nand configure domain names etc.  I wrote the editor, which merchants\nused to build their sites.  The ordering system and image generator\nwere written in C and C++, the manager mostly in Perl, and the editor\nin Lisp.\n\n[8] Price discrimination is so pervasive (how often have you heard\na retailer claim that their buying power meant lower prices for\nyou?) that I was surprised to find it was outlawed in the U.S. by\nthe Robinson-Patman Act of 1936.  This law does not appear to be\nvigorously enforced.\n\n[9] In No Logo, Naomi Klein says that clothing brands favored by\n\"urban youth\" do not try too hard to prevent shoplifting because\nin their target market the shoplifters are also the fashion leaders.\n\n[10] Companies often wonder what to outsource and what not to.\nOne possible answer: outsource any job that's not directly exposed\nto competitive pressure, because outsourcing it will thereby expose\nit to competitive pressure.\n\n[11] The two guys were Dan Bricklin and Bob Frankston.  Dan wrote\na prototype in Basic in a couple days, then over the course of the\nnext year they worked together (mostly at night) to make a more\npowerful version written in 6502 machine language.  Dan was at\nHarvard Business School at the time and Bob nominally had a day\njob writing software.  \"There was no great risk in doing a business,\"\nBob wrote, \"If it failed it failed. No big deal.\"\n\n[12] It's not quite as easy as I make it sound.  It took a painfully\nlong time for word of mouth to get going, and we did not start to\nget a lot of press coverage until we hired a \nPR firm \n(admittedly\nthe best in the business) for $16,000 per month.  However, it was\ntrue that the only significant channel was our own Web site.\n\n[13] If the Mac was so great, why did it lose?  Cost, again.\nMicrosoft concentrated on the software business, and unleashed a\nswarm of cheap component suppliers on Apple hardware.  It did not\nhelp, either, that suits took over during a critical period.\n\n[14] One thing that would help Web-based applications, and help\nkeep the next generation of software from being overshadowed by\nMicrosoft, would be a good open-source browser.  Mozilla is\nopen-source but seems to have suffered from having been corporate\nsoftware for so long.  A small, fast browser that was actively\nmaintained would be a great thing in itself, and would probably\nalso encourage companies to build little Web appliances.\n\nAmong other things, a proper open-source browser would cause HTTP\nand HTML to continue to evolve (as e.g. Perl has).  It would help\nWeb-based applications greatly to be able to distinguish between\nselecting a link and following it; all you'd need to do this would\nbe a trivial enhancement of HTTP, to allow multiple urls in a\nrequest.  Cascading menus would also be good.\n\nIf you want to change the world, write a new Mosaic.  Think it's\ntoo late?  In 1998 a lot of people thought it was too late to launch\na new search engine, but Google proved them wrong.  There is always\nroom for something new if the current options suck enough.  Make\nsure it works on all the free OSes first-- new things start with\ntheir users.\n\n[15] Trevor Blackwell, who probably knows more about this from\npersonal experience than anyone, writes:\n\n\"I would go farther in saying that because server-based software\nis so hard on the programmers, it causes a fundamental economic\nshift away from large companies. It requires the kind of intensity\nand dedication from programmers that they will only be willing to\nprovide when it's their own company.  Software companies can hire\nskilled people to work in a not-too-demanding environment, and can\nhire unskilled people to endure hardships, but they can't hire\nhighly skilled people to bust their asses. Since capital is no\nlonger needed, big companies have little to bring to the table.\"\n\n[16] In the original version of this essay, I advised avoiding\nJavascript.  That was a good plan in 2001, but Javascript now works.\n\n\nThanks to Sarah Harlin, Trevor Blackwell, Robert Morris, Eric Raymond, Ken Anderson,\nand Dan Giffin for reading drafts of this paper; to Dan Bricklin and\nBob Frankston for information about VisiCalc; and again to Ken Anderson\nfor inviting me to speak at BBN.\n\n\n\nYou'll find this essay and 14 others in\nHackers & Painters.\n\n\n", "May 2001\n\n(I wrote this article to help myself understand exactly\nwhat McCarthy discovered.  You don't need to know this stuff\nto program in Lisp, but it should be helpful to \nanyone who wants to\nunderstand the essence of Lisp \u0097 both in the sense of its\norigins and its semantic core.  The fact that it has such a core\nis one of Lisp's distinguishing features, and the reason why,\nunlike other languages, Lisp has dialects.)\n\nIn 1960, John \nMcCarthy published a remarkable paper in\nwhich he did for programming something like what Euclid did for\ngeometry. He showed how, given a handful of simple\noperators and a notation for functions, you can\nbuild a whole programming language.\nHe called this language Lisp, for \"List Processing,\"\nbecause one of his key ideas was to use a simple\ndata structure called a list for both\ncode and data.\n\nIt's worth understanding what McCarthy discovered, not\njust as a landmark in the history of computers, but as\na model for what programming is tending to become in\nour own time.  It seems to me that there have been\ntwo really clean, consistent models of programming so\nfar: the C model and the Lisp model.\nThese two seem points of high ground, with swampy lowlands\nbetween them.  As computers have grown more powerful,\nthe new languages being developed have been moving\nsteadily toward the Lisp model.  A popular recipe\nfor new programming languages in the past 20 years \nhas been to take the C model of computing and add to\nit, piecemeal, parts taken from the Lisp model,\nlike runtime typing and garbage collection.\n\nIn this article I'm going to try to explain in the\nsimplest possible terms what McCarthy discovered.\nThe point is not just to learn about an interesting\ntheoretical result someone figured out forty years ago,\nbut to show where languages are heading.\nThe unusual thing about Lisp \u0097 in fact, the defining\nquality of Lisp \u0097 is that it can be written in\nitself.  To understand what McCarthy meant by this,\nwe're going to retrace his steps, with his mathematical\nnotation translated into running Common Lisp code.\n\n\n", "May 2001\n\n(These are some notes I made\nfor a panel discussion on programming language design\nat MIT on May 10, 2001.)\n\n\n\n\n\n1. Programming Languages Are for People.\n\nProgramming languages\nare how people talk to computers.  The computer would be just as\nhappy speaking any language that was unambiguous.  The reason we\nhave high level languages is because people can't deal with\nmachine language.  The point of programming\nlanguages is to prevent our poor frail human brains from being \noverwhelmed by a mass of detail.\n\nArchitects know that some kinds of design problems are more personal\nthan others.  One of the cleanest, most abstract design problems\nis designing bridges.  There your job is largely a matter of spanning\na given distance with the least material.  The other end of the\nspectrum is designing chairs.  Chair designers have to spend their\ntime thinking about human butts.\n\nSoftware varies in the same way. Designing algorithms for routing\ndata through a network is a nice, abstract problem, like designing\nbridges.  Whereas designing programming languages is like designing\nchairs: it's all about dealing with human weaknesses.\n\nMost of us hate to acknowledge this.  Designing systems of great\nmathematical elegance sounds a lot more appealing to most of us\nthan pandering to human weaknesses.  And there is a role for mathematical\nelegance: some kinds of elegance make programs easier to understand.\nBut elegance is not an end in itself.\n\nAnd when I say languages have to be designed to suit human weaknesses,\nI don't mean that languages have to be designed for bad programmers.\nIn fact I think you ought to design for the \nbest programmers, but\neven the best programmers have limitations.  I don't think anyone\nwould like programming in a language where all the variables were\nthe letter x with integer subscripts.\n\n2. Design for Yourself and Your Friends.\n\nIf you look at the history of programming languages, a lot of the best\nones were languages designed for their own authors to use, and a\nlot of the worst ones were designed for other people to use.\n\nWhen languages are designed for other people, it's always a specific\ngroup of other people: people not as smart as the language designer.\nSo you get a language that talks down to you.  Cobol is the most\nextreme case, but a lot of languages are pervaded by this spirit.\n\nIt has nothing to do with how abstract the language is.  C is pretty\nlow-level, but it was designed for its authors to use, and that's\nwhy hackers like it.\n\nThe argument for designing languages for bad programmers is that\nthere are more bad programmers than good programmers.  That may be\nso.  But those few good programmers write a disproportionately\nlarge percentage of the software.\n\nI'm interested in the question, how do you design a language that\nthe very best hackers will like?  I happen to think this is\nidentical to the question, how do you design a good programming\nlanguage?, but even if it isn't, it is at least an interesting\nquestion.\n\n3. Give the Programmer as Much Control as Possible.\n\nMany languages\n(especially the ones designed for other people) have the attitude\nof a governess: they try to prevent you from\ndoing things that they think aren't good for you.  I like the   \nopposite approach: give the programmer as much\ncontrol as you can.\n\nWhen I first learned Lisp, what I liked most about it was\nthat it considered me an equal partner.  In the other languages\nI had learned up till then, there was the language and there was my   \nprogram, written in the language, and the two were very separate.\nBut in Lisp the functions and macros I wrote were just like those\nthat made up the language itself.  I could rewrite the language\nif I wanted.  It had the same appeal as open-source software.\n\n4. Aim for Brevity.\n\nBrevity is underestimated and even scorned.\nBut if you look into the hearts of hackers, you'll see that they\nreally love it.  How many times have you heard hackers speak fondly\nof how in, say, APL, they could do amazing things with just a couple\nlines of code?  I think anything that really smart people really\nlove is worth paying attention to.\n\nI think almost anything\nyou can do to make programs shorter is good.  There should be lots\nof library functions; anything that can be implicit should be;\nthe syntax should be terse to a fault; even the names of things\nshould be short.\n\nAnd it's not only programs that should be short.  The manual should\nbe thin as well.  A good part of manuals is taken up with clarifications\nand reservations and warnings and special cases.  If you force  \nyourself to shorten the manual, in the best case you do it by fixing\nthe things in the language that required so much explanation.\n\n5. Admit What Hacking Is.\n\nA lot of people wish that hacking was\nmathematics, or at least something like a natural science.  I think\nhacking is more like architecture.  Architecture is\nrelated to physics, in the sense that architects have to design\nbuildings that don't fall down, but the actual goal of architects\nis to make great buildings, not to make discoveries about statics.\n\nWhat hackers like to do is make great programs.\nAnd I think, at least in our own minds, we have to remember that it's\nan admirable thing to write great programs, even when this work \ndoesn't translate easily into the conventional intellectual\ncurrency of research papers.  Intellectually, it is just as\nworthwhile to design a language programmers will love as it is to design a\nhorrible one that embodies some idea you can publish a paper\nabout.\n\n\n\n\n\n1. How to Organize Big Libraries?\n\nLibraries are becoming an\nincreasingly important component of programming languages.  They're\nalso getting bigger, and this can be dangerous.  If it takes longer\nto find the library function that will do what you want than it\nwould take to write it yourself, then all that code is doing nothing\nbut make your manual thick.  (The Symbolics manuals were a case in \npoint.)  So I think we will have to work on ways to organize\nlibraries.  The ideal would be to design them so that the programmer\ncould guess what library call would do the right thing.\n\n2. Are People Really Scared of Prefix Syntax?\n\nThis is an open\nproblem in the sense that I have wondered about it for years and\nstill don't know the answer.  Prefix syntax seems perfectly natural\nto me, except possibly for math.  But it could be that a lot of \nLisp's unpopularity is simply due to having an unfamiliar syntax.   \nWhether to do anything about it, if it is true, is another question. \n\n3. What Do You Need for Server-Based Software?\n\nI think a lot of the most exciting new applications that get written\nin the next twenty years will be Web-based applications, meaning\nprograms that sit on the server and talk to you through a Web\nbrowser.  And to write these kinds of programs we may need some\nnew things.\n\nOne thing we'll need is support for the new way that server-based \napps get released.  Instead of having one or two big releases a\nyear, like desktop software, server-based apps get released as a\nseries of small changes.  You may have as many as five or ten\nreleases a day.  And as a rule everyone will always use the latest\nversion.\n\nYou know how you can design programs to be debuggable?\nWell, server-based software likewise has to be designed to be\nchangeable.  You have to be able to change it easily, or at least\nto know what is a small change and what is a momentous one.\n\nAnother thing that might turn out to be useful for server based\nsoftware, surprisingly, is continuations.  In Web-based software\nyou can use something like continuation-passing style to get the\neffect of subroutines in the inherently \nstateless world of a Web\nsession.  Maybe it would be worthwhile having actual continuations,\nif it was not too expensive.\n\n4. What New Abstractions Are Left to Discover?\n\nI'm not sure how\nreasonable a hope this is, but one thing I would really love to    \ndo, personally, is discover a new abstraction-- something that would\nmake as much of a difference as having first class functions or\nrecursion or even keyword parameters.  This may be an impossible\ndream.  These things don't get discovered that often.  But I am always\nlooking.\n\n\n\n\n\n1. You Can Use Whatever Language You Want.\n\nWriting application\nprograms used to mean writing desktop software.  And in desktop\nsoftware there is a big bias toward writing the application in the\nsame language as the operating system.  And so ten years ago,\nwriting software pretty much meant writing software in C.\nEventually a tradition evolved:\napplication programs must not be written in unusual languages.  \nAnd this tradition had so long to develop that nontechnical people\nlike managers and venture capitalists also learned it.\n\nServer-based software blows away this whole model.  With server-based\nsoftware you can use any language you want.  Almost nobody understands\nthis yet (especially not managers and venture capitalists).\nA few hackers understand it, and that's why we even hear\nabout new, indy languages like Perl and Python.  We're not hearing\nabout Perl and Python because people are using them to write Windows\napps.\n\nWhat this means for us, as people interested in designing programming\nlanguages, is that there is now potentially an actual audience for\nour work.\n\n2. Speed Comes from Profilers.\n\nLanguage designers, or at least\nlanguage implementors, like to write compilers that generate fast\ncode.  But I don't think this is what makes languages fast for users.\nKnuth pointed out long ago that speed only matters in a few critical\nbottlenecks.  And anyone who's tried it knows that you can't guess\nwhere these bottlenecks are.  Profilers are the answer.\n\nLanguage designers are solving the wrong problem.  Users don't need\nbenchmarks to run fast.  What they need is a language that can show\nthem what parts of their own programs need to be rewritten.  That's\nwhere speed comes from in practice.  So maybe it would be a net \nwin if language implementors took half the time they would\nhave spent doing compiler optimizations and spent it writing a\ngood profiler instead.\n\n3. You Need an Application to Drive the Design of a Language.\n\nThis may not be an absolute rule, but it seems like the best languages\nall evolved together with some application they were being used to\nwrite.  C was written by people who needed it for systems programming.\nLisp was developed partly to do symbolic differentiation, and\nMcCarthy was so eager to get started that he was writing differentiation\nprograms even in the first paper on Lisp, in 1960.\n\nIt's especially good if your application solves some new problem.\nThat will tend to drive your language to have new features that   \nprogrammers need.  I personally am interested in writing\na language that will be good for writing server-based applications.\n\n[During the panel, Guy Steele also made this point, with the\nadditional suggestion that the application should not consist of\nwriting the compiler for your language, unless your language\nhappens to be intended for writing compilers.]\n\n4. A Language Has to Be Good for Writing Throwaway Programs.\n\nYou know what a throwaway program is: something you write quickly for\nsome limited task.  I think if you looked around you'd find that  \na lot of big, serious programs started as throwaway programs.  I\nwould not be surprised if most programs started as throwaway\nprograms.  And so if you want to make a language that's good for\nwriting software in general, it has to be good for writing throwaway\nprograms, because that is the larval stage of most software.\n\n5. Syntax Is Connected to Semantics.\n\nIt's traditional to think of\nsyntax and semantics as being completely separate.  This will\nsound shocking, but it may be that they aren't.\nI think that what you want in your language may be related\nto how you express it.\n\nI was talking recently to Robert Morris, and he pointed out that\noperator overloading is a bigger win in languages with infix\nsyntax.  In a language with prefix syntax, any function you define\nis effectively an operator.  If you want to define a plus for a\nnew type of number you've made up, you can just define a new function\nto add them.  If you do that in a language with infix syntax,\nthere's a big difference in appearance between the use of an\noverloaded operator and a function call.\n\n\n\n\n\n1. New Programming Languages.\n\nBack in the 1970s\nit was fashionable to design new programming languages.  Recently\nit hasn't been.  But I think server-based software will make new  \nlanguages fashionable again.  With server-based software, you can\nuse any language you want, so if someone does design a language that\nactually seems better than others that are available, there will be\npeople who take a risk and use it.\n\n2. Time-Sharing.\n\nRichard Kelsey gave this as an idea whose time\nhas come again in the last panel, and I completely agree with him.\nMy guess (and Microsoft's guess, it seems) is that much computing\nwill move from the desktop onto remote servers.  In other words,  \ntime-sharing is back.  And I think there will need to be support\nfor it at the language level.  For example, I know that Richard\nand Jonathan Rees have done a lot of work implementing process  \nscheduling within Scheme 48.\n\n3. Efficiency.\n\nRecently it was starting to seem that computers\nwere finally fast enough.  More and more we were starting to hear\nabout byte code, which implies to me at least that we feel we have\ncycles to spare.  But I don't think we will, with server-based\nsoftware.   Someone is going to have to pay for the servers that\nthe software runs on, and the number of users they can support per\nmachine will be the divisor of their capital cost.\n\nSo I think efficiency will matter, at least in computational\nbottlenecks.  It will be especially important to do i/o fast,\nbecause server-based applications do a lot of i/o.\n\nIt may turn out that byte code is not a win, in the end.  Sun and\nMicrosoft seem to be facing off in a kind of a battle of the byte\ncodes at the moment.  But they're doing it because byte code is a\nconvenient place to insert themselves into the process, not because\nbyte code is in itself a good idea.  It may turn out that this\nwhole battleground gets bypassed.  That would be kind of amusing.\n\n\n\n\n\n1. Clients.\n\nThis is just a guess, but my guess is that\nthe winning model for most applications will be purely server-based.\nDesigning software that works on the assumption that everyone will \nhave your client is like designing a society on the assumption that\neveryone will just be honest.  It would certainly be convenient, but\nyou have to assume it will never happen.\n\nI think there will be a proliferation of devices that have some\nkind of Web access, and all you'll be able to assume about them is\nthat they can support simple html and forms.  Will you have a\nbrowser on your cell phone?  Will there be a phone in your palm  \npilot?  Will your blackberry get a bigger screen? Will you be able\nto browse the Web on your gameboy?  Your watch?  I don't know.  \nAnd I don't have to know if I bet on\neverything just being on the server.  It's\njust so much more robust to have all the \nbrains on the server.\n\n2. Object-Oriented Programming.\n\nI realize this is a\ncontroversial one, but I don't think object-oriented programming\nis such a big deal.  I think it is a fine model for certain kinds\nof applications that need that specific kind of data structure,   \nlike window systems, simulations, and cad programs.  But I don't\nsee why it ought to be the model for all programming.\n\nI think part of the reason people in big companies like object-oriented\nprogramming is because it yields a lot of what looks like work.\nSomething that might naturally be represented as, say, a list of\nintegers, can now be represented as a class with all kinds of\nscaffolding and hustle and bustle.\n\nAnother attraction of\nobject-oriented programming is that methods give you some of the\neffect of first class functions.  But this is old news to Lisp\nprogrammers.  When you have actual first class functions, you can\njust use them in whatever way is appropriate to the task at hand,\ninstead of forcing everything into a mold of classes and methods.\n\nWhat this means for language design, I think, is that you shouldn't\nbuild object-oriented programming in too deeply.  Maybe the\nanswer is to offer more general, underlying stuff, and let people design\nwhatever object systems they want as libraries.\n\n3. Design by Committee.\n\nHaving your language designed by a committee is a big pitfall,  \nand not just for the reasons everyone knows about.  Everyone\nknows that committees tend to yield lumpy, inconsistent designs.  \nBut I think a greater danger is that they won't take risks.\nWhen one person is in charge he can take risks\nthat a committee would never agree on.\n\nIs it necessary to take risks to design a good language though?\nMany people might suspect\nthat language design is something where you should stick fairly\nclose to the conventional wisdom.  I bet this isn't true.\nIn everything else people do, reward is proportionate to risk.\nWhy should language design be any different?\n\n", "May 2001\n\n(This article was written as a kind of business plan for a\nnew language.\nSo it is missing (because it takes for granted) the most important\nfeature of a good programming language: very powerful abstractions.)\n\nA friend of mine once told an eminent operating systems\nexpert that he wanted to design a really good\nprogramming language.  The expert told him that it would be a\nwaste of time, that programming languages don't become popular\nor unpopular based on their merits, and so no matter how\ngood his language was, no one would use it.  At least, that\nwas what had happened to the language he had designed.\n\nWhat does make a language popular?  Do popular\nlanguages deserve their popularity?  Is it worth trying to\ndefine a good programming language?  How would you do it?\n\nI think the answers to these questions can be found by looking \nat hackers, and learning what they want.  Programming\nlanguages are for hackers, and a programming language\nis good as a programming language (rather than, say, an\nexercise in denotational semantics or compiler design)\nif and only if hackers like it.\n\n1 The Mechanics of Popularity\n\nIt's true, certainly, that most people don't choose programming\nlanguages simply based on their merits.  Most programmers are told\nwhat language to use by someone else.  And yet I think the effect\nof such external factors on the popularity of programming languages\nis not as great as it's sometimes thought to be. I think a bigger\nproblem is that a hacker's idea of a good programming language is\nnot the same as most language designers'.\n\nBetween the two, the hacker's opinion is the one that matters.\nProgramming languages are not theorems. They're tools, designed\nfor people, and they have to be designed to suit human strengths\nand weaknesses as much as shoes have to be designed for human feet.\nIf a shoe pinches when you put it on, it's a bad shoe, however\nelegant it may be as a piece of sculpture.\n\nIt may be that the majority of programmers can't tell a good language\nfrom a bad one. But that's no different with any other tool. It\ndoesn't mean that it's a waste of time to try designing a good\nlanguage. Expert hackers \ncan tell a good language when they see\none, and they'll use it. Expert hackers are a tiny minority,\nadmittedly, but that tiny minority write all the good software,\nand their influence is such that the rest of the programmers will\ntend to use whatever language they use. Often, indeed, it is not\nmerely influence but command: often the expert hackers are the very\npeople who, as their bosses or faculty advisors, tell the other\nprogrammers what language to use.\n\nThe opinion of expert hackers is not the only force that determines\nthe relative popularity of programming languages \u2014 legacy software\n(Cobol) and hype (Ada, Java) also play a role \u2014 but I think it is\nthe most powerful force over the long term. Given an initial critical\nmass and enough time, a programming language probably becomes about\nas popular as it deserves to be. And popularity further separates\ngood languages from bad ones, because feedback from real live users\nalways leads to improvements. Look at how much any popular language\nhas changed during its life. Perl and Fortran are extreme cases,\nbut even Lisp has changed a lot. Lisp 1.5 didn't have macros, for\nexample; these evolved later, after hackers at MIT had spent a\ncouple years using Lisp to write real programs. [1]\n\nSo whether or not a language has to be good to be popular, I think\na language has to be popular to be good. And it has to stay popular\nto stay good. The state of the art in programming languages doesn't\nstand still. And yet the Lisps we have today are still pretty much\nwhat they had at MIT in the mid-1980s, because that's the last time\nLisp had a sufficiently large and demanding user base.\n\nOf course, hackers have to know about a language before they can\nuse it. How are they to hear? From other hackers. But there has to\nbe some initial group of hackers using the language for others even\nto hear about it. I wonder how large this group has to be; how many\nusers make a critical mass? Off the top of my head, I'd say twenty.\nIf a language had twenty separate users, meaning twenty users who\ndecided on their own to use it, I'd consider it to be real.\n\nGetting there can't be easy. I would not be surprised if it is\nharder to get from zero to twenty than from twenty to a thousand.\nThe best way to get those initial twenty users is probably to use\na trojan horse: to give people an application they want, which\nhappens to be written in the new language.\n\n2 External Factors\n\nLet's start by acknowledging one external factor that does affect\nthe popularity of a programming language. To become popular, a\nprogramming language has to be the scripting language of a popular\nsystem. Fortran and Cobol were the scripting languages of early\nIBM mainframes. C was the scripting language of Unix, and so, later,\nwas Perl. Tcl is the scripting language of Tk. Java and Javascript\nare intended to be the scripting languages of web browsers.\n\nLisp is not a massively popular language because it is not the\nscripting language of a massively popular system. What popularity\nit retains dates back to the 1960s and 1970s, when it was the\nscripting language of MIT. A lot of the great programmers of the\nday were associated with MIT at some point. And in the early 1970s,\nbefore C, MIT's dialect of Lisp, called MacLisp, was one of the\nonly programming languages a serious hacker would want to use.\n\nToday Lisp is the scripting language of two moderately popular\nsystems, Emacs and Autocad, and for that reason I suspect that most\nof the Lisp programming done today is done in Emacs Lisp or AutoLisp.\n\nProgramming languages don't exist in isolation. To hack is a\ntransitive verb \u2014 hackers are usually hacking something \u2014 and in\npractice languages are judged relative to whatever they're used to\nhack. So if you want to design a popular language, you either have\nto supply more than a language, or you have to design your language\nto replace the scripting language of some existing system.\n\nCommon Lisp is unpopular partly because it's an orphan. It did\noriginally come with a system to hack: the Lisp Machine. But Lisp\nMachines (along with parallel computers) were steamrollered by the\nincreasing power of general purpose processors in the 1980s. Common\nLisp might have remained popular if it had been a good scripting\nlanguage for Unix. It is, alas, an atrociously bad one.\n\nOne way to describe this situation is to say that a language isn't\njudged on its own merits. Another view is that a programming language\nreally isn't a programming language unless it's also the scripting\nlanguage of something. This only seems unfair if it comes as a\nsurprise. I think it's no more unfair than expecting a programming\nlanguage to have, say, an implementation. It's just part of what\na programming language is.\n\nA programming language does need a good implementation, of course,\nand this must be free. Companies will pay for software, but individual\nhackers won't, and it's the hackers you need to attract.\n\nA language also needs to have a book about it. The book should be\nthin, well-written, and full of good examples. K&R is the ideal\nhere. At the moment I'd almost say that a language has to have a\nbook published by O'Reilly. That's becoming the test of mattering\nto hackers.\n\nThere should be online documentation as well. In fact, the book\ncan start as online documentation. But I don't think that physical\nbooks are outmoded yet. Their format is convenient, and the de\nfacto censorship imposed by publishers is a useful if imperfect\nfilter. Bookstores are one of the most important places for learning\nabout new languages.\n\n3 Brevity\n\nGiven that you can supply the three things any language needs \u2014 a\nfree implementation, a book, and something to hack \u2014 how do you\nmake a language that hackers will like?\n\nOne thing hackers like is brevity. Hackers are lazy, in the same\nway that mathematicians and modernist architects are lazy: they\nhate anything extraneous. It would not be far from the truth to\nsay that a hacker about to write a program decides what language\nto use, at least subconsciously, based on the total number of\ncharacters he'll have to type. If this isn't precisely how hackers\nthink, a language designer would do well to act as if it were.\n\nIt is a mistake to try to baby the user with long-winded expressions\nthat are meant to resemble English. Cobol is notorious for this\nflaw. A hacker would consider being asked to write\n\nadd x to y giving z\n\ninstead of\n\nz = x+y\n\nas something between an insult to his intelligence and a sin against\nGod.\n\nIt has sometimes been said that Lisp should use first and rest\ninstead of car and cdr, because it would make programs easier to\nread. Maybe for the first couple hours. But a hacker can learn\nquickly enough that car means the first element of a list and cdr\nmeans the rest. Using first and rest means 50% more typing. And\nthey are also different lengths, meaning that the arguments won't\nline up when they're called, as car and cdr often are, in successive\nlines. I've found that it matters a lot how code lines up on the\npage. I can barely read Lisp code when it is set in a variable-width\nfont, and friends say this is true for other languages too.\n\nBrevity is one place where strongly typed languages lose. All other\nthings being equal, no one wants to begin a program with a bunch\nof declarations. Anything that can be implicit, should be.\n\nThe individual tokens should be short as well. Perl and Common Lisp\noccupy opposite poles on this question. Perl programs can be almost\ncryptically dense, while the names of built-in Common Lisp operators\nare comically long. The designers of Common Lisp probably expected\nusers to have text editors that would type these long names for\nthem. But the cost of a long name is not just the cost of typing\nit. There is also the cost of reading it, and the cost of the space\nit takes up on your screen.\n\n4 Hackability\n\nThere is one thing more important than brevity to a hacker: being\nable to do what you want. In the history of programming languages\na surprising amount of effort has gone into preventing programmers\nfrom doing things considered to be improper. This is a dangerously\npresumptuous plan. How can the language designer know what the\nprogrammer is going to need to do? I think language designers would\ndo better to consider their target user to be a genius who will\nneed to do things they never anticipated, rather than a bumbler\nwho needs to be protected from himself. The bumbler will shoot\nhimself in the foot anyway. You may save him from referring to\nvariables in another package, but you can't save him from writing\na badly designed program to solve the wrong problem, and taking\nforever to do it.\n\nGood programmers often want to do dangerous and unsavory things.\nBy unsavory I mean things that go behind whatever semantic facade\nthe language is trying to present: getting hold of the internal\nrepresentation of some high-level abstraction, for example. Hackers\nlike to hack, and hacking means getting inside things and second\nguessing the original designer.\n\nLet yourself be second guessed. When you make any tool, people use\nit in ways you didn't intend, and this is especially true of a\nhighly articulated tool like a programming language. Many a hacker\nwill want to tweak your semantic model in a way that you never\nimagined. I say, let them; give the programmer access to as much\ninternal stuff as you can without endangering runtime systems like\nthe garbage collector.\n\nIn Common Lisp I have often wanted to iterate through the fields\nof a struct \u2014 to comb out references to a deleted object, for example,\nor find fields that are uninitialized. I know the structs are just\nvectors underneath. And yet I can't write a general purpose function\nthat I can call on any struct. I can only access the fields by\nname, because that's what a struct is supposed to mean.\n\nA hacker may only want to subvert the intended model of things once\nor twice in a big program. But what a difference it makes to be\nable to. And it may be more than a question of just solving a\nproblem. There is a kind of pleasure here too. Hackers share the\nsurgeon's secret pleasure in poking about in gross innards, the\nteenager's secret pleasure in popping zits. [2] For boys, at least,\ncertain kinds of horrors are fascinating. Maxim magazine publishes\nan annual volume of photographs, containing a mix of pin-ups and\ngrisly accidents. They know their audience.\n\nHistorically, Lisp has been good at letting hackers have their way.\nThe political correctness of Common Lisp is an aberration. Early\nLisps let you get your hands on everything. A good deal of that\nspirit is, fortunately, preserved in macros. What a wonderful thing,\nto be able to make arbitrary transformations on the source code.\n\nClassic macros are a real hacker's tool \u2014 simple, powerful, and\ndangerous. It's so easy to understand what they do: you call a\nfunction on the macro's arguments, and whatever it returns gets\ninserted in place of the macro call. Hygienic macros embody the\nopposite principle. They try to protect you from understanding what\nthey're doing. I have never heard hygienic macros explained in one\nsentence. And they are a classic example of the dangers of deciding\nwhat programmers are allowed to want. Hygienic macros are intended\nto protect me from variable capture, among other things, but variable\ncapture is exactly what I want in some macros.\n\nA really good language should be both clean and dirty: cleanly\ndesigned, with a small core of well understood and highly orthogonal\noperators, but dirty in the sense that it lets hackers have their\nway with it. C is like this. So were the early Lisps. A real hacker's\nlanguage will always have a slightly raffish character.\n\nA good programming language should have features that make the kind\nof people who use the phrase \"software engineering\" shake their\nheads disapprovingly. At the other end of the continuum are languages\nlike Ada and Pascal, models of propriety that are good for teaching\nand not much else.\n\n5 Throwaway Programs\n\nTo be attractive to hackers, a language must be good for writing\nthe kinds of programs they want to write. And that means, perhaps\nsurprisingly, that it has to be good for writing throwaway programs.\n\nA throwaway program is a program you write quickly for some limited\ntask: a program to automate some system administration task, or\ngenerate test data for a simulation, or convert data from one format\nto another. The surprising thing about throwaway programs is that,\nlike the \"temporary\" buildings built at so many American universities\nduring World War II, they often don't get thrown away. Many evolve\ninto real programs, with real features and real users.\n\nI have a hunch that the best big programs begin life this way,\nrather than being designed big from the start, like the Hoover Dam.\nIt's terrifying to build something big from scratch. When people\ntake on a project that's too big, they become overwhelmed. The\nproject either gets bogged down, or the result is sterile and\nwooden: a shopping mall rather than a real downtown, Brasilia rather\nthan Rome, Ada rather than C.\n\nAnother way to get a big program is to start with a throwaway\nprogram and keep improving it. This approach is less daunting, and\nthe design of the program benefits from evolution. I think, if one\nlooked, that this would turn out to be the way most big programs\nwere developed. And those that did evolve this way are probably\nstill written in whatever language they were first written in,\nbecause it's rare for a program to be ported, except for political\nreasons. And so, paradoxically, if you want to make a language that\nis used for big systems, you have to make it good for writing\nthrowaway programs, because that's where big systems come from.\n\nPerl is a striking example of this idea. It was not only designed\nfor writing throwaway programs, but was pretty much a throwaway\nprogram itself. Perl began life as a collection of utilities for\ngenerating reports, and only evolved into a programming language\nas the throwaway programs people wrote in it grew larger. It was\nnot until Perl 5 (if then) that the language was suitable for\nwriting serious programs, and yet it was already massively popular.\n\nWhat makes a language good for throwaway programs? To start with,\nit must be readily available. A throwaway program is something that\nyou expect to write in an hour. So the language probably must\nalready be installed on the computer you're using. It can't be\nsomething you have to install before you use it. It has to be there.\nC was there because it came with the operating system. Perl was\nthere because it was originally a tool for system administrators,\nand yours had already installed it.\n\nBeing available means more than being installed, though. An\ninteractive language, with a command-line interface, is more\navailable than one that you have to compile and run separately. A\npopular programming language should be interactive, and start up\nfast.\n\nAnother thing you want in a throwaway program is brevity. Brevity\nis always attractive to hackers, and never more so than in a program\nthey expect to turn out in an hour.\n\n6 Libraries\n\nOf course the ultimate in brevity is to have the program already\nwritten for you, and merely to call it. And this brings us to what\nI think will be an increasingly important feature of programming\nlanguages: library functions. Perl wins because it has large\nlibraries for manipulating strings. This class of library functions\nare especially important for throwaway programs, which are often\noriginally written for converting or extracting data.  Many Perl\nprograms probably begin as just a couple library calls stuck\ntogether.\n\nI think a lot of the advances that happen in programming languages\nin the next fifty years will have to do with library functions. I\nthink future programming languages will have libraries that are as\ncarefully designed as the core language. Programming language design\nwill not be about whether to make your language strongly or weakly\ntyped, or object oriented, or functional, or whatever, but about\nhow to design great libraries. The kind of language designers who\nlike to think about how to design type systems may shudder at this.\nIt's almost like writing applications! Too bad. Languages are for\nprogrammers, and libraries are what programmers need.\n\nIt's hard to design good libraries. It's not simply a matter of\nwriting a lot of code. Once the libraries get too big, it can\nsometimes take longer to find the function you need than to write\nthe code yourself. Libraries need to be designed using a small set\nof orthogonal operators, just like the core language. It ought to\nbe possible for the programmer to guess what library call will do\nwhat he needs.\n\nLibraries are one place Common Lisp falls short. There are only\nrudimentary libraries for manipulating strings, and almost none\nfor talking to the operating system. For historical reasons, Common\nLisp tries to pretend that the OS doesn't exist. And because you\ncan't talk to the OS, you're unlikely to be able to write a serious\nprogram using only the built-in operators in Common Lisp. You have\nto use some implementation-specific hacks as well, and in practice\nthese tend not to give you everything you want. Hackers would think\na lot more highly of Lisp if Common Lisp had powerful string\nlibraries and good OS support.\n\n7 Syntax\n\nCould a language with Lisp's syntax, or more precisely, lack of\nsyntax, ever become popular? I don't know the answer to this\nquestion. I do think that syntax is not the main reason Lisp isn't\ncurrently popular. Common Lisp has worse problems than unfamiliar\nsyntax. I know several programmers who are comfortable with prefix\nsyntax and yet use Perl by default, because it has powerful string\nlibraries and can talk to the os.\n\nThere are two possible problems with prefix notation: that it is\nunfamiliar to programmers, and that it is not dense enough. The\nconventional wisdom in the Lisp world is that the first problem is\nthe real one. I'm not so sure. Yes, prefix notation makes ordinary\nprogrammers panic. But I don't think ordinary programmers' opinions\nmatter. Languages become popular or unpopular based on what expert\nhackers think of them, and I think expert hackers might be able to\ndeal with prefix notation. Perl syntax can be pretty incomprehensible,\nbut that has not stood in the way of Perl's popularity. If anything\nit may have helped foster a Perl cult.\n\nA more serious problem is the diffuseness of prefix notation. For\nexpert hackers, that really is a problem. No one wants to write\n(aref a x y) when they could write a[x,y].\n\nIn this particular case there is a way to finesse our way out of\nthe problem. If we treat data structures as if they were functions\non indexes, we could write (a x y) instead, which is even shorter\nthan the Perl form. Similar tricks may shorten other types of\nexpressions.\n\nWe can get rid of (or make optional) a lot of parentheses by making\nindentation significant. That's how programmers read code anyway:\nwhen indentation says one thing and delimiters say another, we go\nby the indentation. Treating indentation as significant would\neliminate this common source of bugs as well as making programs\nshorter.\n\nSometimes infix syntax is easier to read. This is especially true\nfor math expressions. I've used Lisp my whole programming life and\nI still don't find prefix math expressions natural. And yet it is\nconvenient, especially when you're generating code, to have operators\nthat take any number of arguments. So if we do have infix syntax,\nit should probably be implemented as some kind of read-macro.\n\nI don't think we should be religiously opposed to introducing syntax\ninto Lisp, as long as it translates in a well-understood way into\nunderlying s-expressions. There is already a good deal of syntax\nin Lisp. It's not necessarily bad to introduce more, as long as no\none is forced to use it. In Common Lisp, some delimiters are reserved\nfor the language, suggesting that at least some of the designers\nintended to have more syntax in the future.\n\nOne of the most egregiously unlispy pieces of syntax in Common Lisp\noccurs in format strings; format is a language in its own right,\nand that language is not Lisp. If there were a plan for introducing\nmore syntax into Lisp, format specifiers might be able to be included\nin it. It would be a good thing if macros could generate format\nspecifiers the way they generate any other kind of code.\n\nAn eminent Lisp hacker told me that his copy of CLTL falls open to\nthe section format. Mine too. This probably indicates room for\nimprovement. It may also mean that programs do a lot of I/O.\n\n8 Efficiency\n\nA good language, as everyone knows, should generate fast code. But\nin practice I don't think fast code comes primarily from things\nyou do in the design of the language. As Knuth pointed out long\nago, speed only matters in certain critical bottlenecks.  And as\nmany programmers have observed since, one is very often mistaken\nabout where these bottlenecks are.\n\nSo, in practice, the way to get fast code is to have a very good\nprofiler, rather than by, say, making the language strongly typed.\nYou don't need to know the type of every argument in every call in\nthe program. You do need to be able to declare the types of arguments\nin the bottlenecks. And even more, you need to be able to find out\nwhere the bottlenecks are.\n\nOne complaint people have had with Lisp is that it's hard to tell\nwhat's expensive. This might be true. It might also be inevitable,\nif you want to have a very abstract language. And in any case I\nthink good profiling would go a long way toward fixing the problem:\nyou'd soon learn what was expensive.\n\nPart of the problem here is social. Language designers like to\nwrite fast compilers. That's how they measure their skill. They\nthink of the profiler as an add-on, at best. But in practice a good\nprofiler may do more to improve the speed of actual programs written\nin the language than a compiler that generates fast code. Here,\nagain, language designers are somewhat out of touch with their\nusers. They do a really good job of solving slightly the wrong\nproblem.\n\nIt might be a good idea to have an active profiler \u2014 to push\nperformance data to the programmer instead of waiting for him to\ncome asking for it. For example, the editor could display bottlenecks\nin red when the programmer edits the source code. Another approach\nwould be to somehow represent what's happening in running programs.\nThis would be an especially big win in server-based applications,\nwhere you have lots of running programs to look at. An active\nprofiler could show graphically what's happening in memory as a\nprogram's running, or even make sounds that tell what's happening.\n\nSound is a good cue to problems. In one place I worked, we had a\nbig board of dials showing what was happening to our web servers.\nThe hands were moved by little servomotors that made a slight noise\nwhen they turned. I couldn't see the board from my desk, but I\nfound that I could tell immediately, by the sound, when there was\na problem with a server.\n\nIt might even be possible to write a profiler that would automatically\ndetect inefficient algorithms. I would not be surprised if certain\npatterns of memory access turned out to be sure signs of bad\nalgorithms. If there were a little guy running around inside the\ncomputer executing our programs, he would probably have as long\nand plaintive a tale to tell about his job as a federal government\nemployee. I often have a feeling that I'm sending the processor on\na lot of wild goose chases, but I've never had a good way to look\nat what it's doing.\n\nA number of Lisps now compile into byte code, which is then executed\nby an interpreter. This is usually done to make the implementation\neasier to port, but it could be a useful language feature. It might\nbe a good idea to make the byte code an official part of the\nlanguage, and to allow programmers to use inline byte code in\nbottlenecks. Then such optimizations would be portable too.\n\nThe nature of speed, as perceived by the end-user, may be changing.\nWith the rise of server-based applications, more and more programs\nmay turn out to be i/o-bound. It will be worth making i/o fast.\nThe language can help with straightforward measures like simple,\nfast, formatted output functions, and also with deep structural\nchanges like caching and persistent objects.\n\nUsers are interested in response time. But another kind of efficiency\nwill be increasingly important: the number of simultaneous users\nyou can support per processor. Many of the interesting applications\nwritten in the near future will be server-based, and the number of\nusers per server is the critical question for anyone hosting such\napplications. In the capital cost of a business offering a server-based\napplication, this is the divisor.\n\nFor years, efficiency hasn't mattered much in most end-user\napplications. Developers have been able to assume that each user\nwould have an increasingly powerful processor sitting on their\ndesk. And by Parkinson's Law, software has expanded to use the\nresources available. That will change with server-based applications.\nIn that world, the hardware and software will be supplied together.\nFor companies that offer server-based applications, it will make\na very big difference to the bottom line how many users they can\nsupport per server.\n\nIn some applications, the processor will be the limiting factor,\nand execution speed will be the most important thing to optimize.\nBut often memory will be the limit; the number of simultaneous\nusers will be determined by the amount of memory you need for each\nuser's data. The language can help here too. Good support for\nthreads will enable all the users to share a single heap. It may\nalso help to have persistent objects and/or language level support\nfor lazy loading.\n\n9 Time\n\nThe last ingredient a popular language needs is time. No one wants\nto write programs in a language that might go away, as so many\nprogramming languages do. So most hackers will tend to wait until\na language has been around for a couple years before even considering\nusing it.\n\nInventors of wonderful new things are often surprised to discover\nthis, but you need time to get any message through to people. A\nfriend of mine rarely does anything the first time someone asks\nhim. He knows that people sometimes ask for things that they turn\nout not to want. To avoid wasting his time, he waits till the third\nor fourth time he's asked to do something; by then, whoever's asking\nhim may be fairly annoyed, but at least they probably really do\nwant whatever they're asking for.\n\nMost people have learned to do a similar sort of filtering on new\nthings they hear about. They don't even start paying attention\nuntil they've heard about something ten times. They're perfectly\njustified: the majority of hot new whatevers do turn out to be a\nwaste of time, and eventually go away. By delaying learning VRML,\nI avoided having to learn it at all.\n\nSo anyone who invents something new has to expect to keep repeating\ntheir message for years before people will start to get it. We\nwrote what was, as far as I know, the first web-server based\napplication, and it took us years to get it through to people that\nit didn't have to be downloaded. It wasn't that they were stupid.\nThey just had us tuned out.\n\nThe good news is, simple repetition solves the problem. All you\nhave to do is keep telling your story, and eventually people will\nstart to hear. It's not when people notice you're there that they\npay attention; it's when they notice you're still there.\n\nIt's just as well that it usually takes a while to gain momentum.\nMost technologies evolve a good deal even after they're first\nlaunched \u2014 programming languages especially. Nothing could be better,\nfor a new techology, than a few years of being used only by a small\nnumber of early adopters. Early adopters are sophisticated and\ndemanding, and quickly flush out whatever flaws remain in your\ntechnology. When you only have a few users you can be in close\ncontact with all of them. And early adopters are forgiving when\nyou improve your system, even if this causes some breakage.\n\nThere are two ways new technology gets introduced: the organic\ngrowth method, and the big bang method. The organic growth method\nis exemplified by the classic seat-of-the-pants underfunded garage\nstartup. A couple guys, working in obscurity, develop some new\ntechnology. They launch it with no marketing and initially have\nonly a few (fanatically devoted) users. They continue to improve\nthe technology, and meanwhile their user base grows by word of\nmouth. Before they know it, they're big.\n\nThe other approach, the big bang method, is exemplified by the\nVC-backed, heavily marketed startup. They rush to develop a product,\nlaunch it with great publicity, and immediately (they hope) have\na large user base.\n\nGenerally, the garage guys envy the big bang guys. The big bang\nguys are smooth and confident and respected by the VCs. They can\nafford the best of everything, and the PR campaign surrounding the\nlaunch has the side effect of making them celebrities. The organic\ngrowth guys, sitting in their garage, feel poor and unloved. And\nyet I think they are often mistaken to feel sorry for themselves.\nOrganic growth seems to yield better technology and richer founders\nthan the big bang method. If you look at the dominant technologies\ntoday, you'll find that most of them grew organically.\n\nThis pattern doesn't only apply to companies. You see it in sponsored\nresearch too. Multics and Common Lisp were big-bang projects, and\nUnix and MacLisp were organic growth projects.\n\n10 Redesign\n\n\"The best writing is rewriting,\" wrote E. B. White.  Every good\nwriter knows this, and it's true for software too. The most important\npart of design is redesign. Programming languages, especially,\ndon't get redesigned enough.\n\nTo write good software you must simultaneously keep two opposing\nideas in your head. You need the young hacker's naive faith in\nhis abilities, and at the same time the veteran's skepticism. You\nhave to be able to think \nhow hard can it be? with one half of\nyour brain while thinking \nit will never work with the other.\n\nThe trick is to realize that there's no real contradiction here.\nYou want to be optimistic and skeptical about two different things.\nYou have to be optimistic about the possibility of solving the\nproblem, but skeptical about the value of whatever solution you've\ngot so far.\n\nPeople who do good work often think that whatever they're working\non is no good. Others see what they've done and are full of wonder,\nbut the creator is full of worry. This pattern is no coincidence:\nit is the worry that made the work good.\n\nIf you can keep hope and worry balanced, they will drive a project\nforward the same way your two legs drive a bicycle forward. In the\nfirst phase of the two-cycle innovation engine, you work furiously\non some problem, inspired by your confidence that you'll be able\nto solve it. In the second phase, you look at what you've done in\nthe cold light of morning, and see all its flaws very clearly. But\nas long as your critical spirit doesn't outweigh your hope, you'll\nbe able to look at your admittedly incomplete system, and think,\nhow hard can it be to get the rest of the way?, thereby continuing\nthe cycle.\n\nIt's tricky to keep the two forces balanced. In young hackers,\noptimism predominates. They produce something, are convinced it's\ngreat, and never improve it. In old hackers, skepticism predominates,\nand they won't even dare to take on ambitious projects.\n\nAnything you can do to keep the redesign cycle going is good. Prose\ncan be rewritten over and over until you're happy with it. But\nsoftware, as a rule, doesn't get redesigned enough. Prose has\nreaders, but software has users. If a writer rewrites an essay,\npeople who read the old version are unlikely to complain that their\nthoughts have been broken by some newly introduced incompatibility.\n\nUsers are a double-edged sword. They can help you improve your\nlanguage, but they can also deter you from improving it. So choose\nyour users carefully, and be slow to grow their number. Having\nusers is like optimization: the wise course is to delay it. Also,\nas a general rule, you can at any given time get away with changing\nmore than you think. Introducing change is like pulling off a\nbandage: the pain is a memory almost as soon as you feel it.\n\nEveryone knows that it's not a good idea to have a language designed\nby a committee. Committees yield bad design. But I think the worst\ndanger of committees is that they interfere with redesign. It is\nso much work to introduce changes that no one wants to bother.\nWhatever a committee decides tends to stay that way, even if most\nof the members don't like it.\n\nEven a committee of two gets in the way of redesign. This happens\nparticularly in the interfaces between pieces of software written\nby two different people. To change the interface both have to agree\nto change it at once. And so interfaces tend not to change at all,\nwhich is a problem because they tend to be one of the most ad hoc\nparts of any system.\n\nOne solution here might be to design systems so that interfaces\nare horizontal instead of vertical \u2014 so that modules are always\nvertically stacked strata of abstraction. Then the interface will\ntend to be owned by one of them. The lower of two levels will either\nbe a language in which the upper is written, in which case the\nlower level will own the interface, or it will be a slave, in which\ncase the interface can be dictated by the upper level.\n\n11 Lisp\n\nWhat all this implies is that there is hope for a new Lisp.  There\nis hope for any language that gives hackers what they want, including\nLisp. I think we may have made a mistake in thinking that hackers\nare turned off by Lisp's strangeness. This comforting illusion may\nhave prevented us from seeing the real problem with Lisp, or at\nleast Common Lisp, which is that it sucks for doing what hackers\nwant to do. A hacker's language needs powerful libraries and\nsomething to hack. Common Lisp has neither. A hacker's language is\nterse and hackable. Common Lisp is not.\n\nThe good news is, it's not Lisp that sucks, but Common Lisp. If we\ncan develop a new Lisp that is a real hacker's language, I think\nhackers will use it. They will use whatever language does the job.\nAll we have to do is make sure this new Lisp does some important\njob better than other languages.\n\nHistory offers some encouragement. Over time, successive new\nprogramming languages have taken more and more features from Lisp.\nThere is no longer much left to copy before the language you've\nmade is Lisp. The latest hot language, Python, is a watered-down\nLisp with infix syntax and no macros. A new Lisp would be a natural\nstep in this progression.\n\nI sometimes think that it would be a good marketing trick to call\nit an improved version of Python. That sounds hipper than Lisp. To\nmany people, Lisp is a slow AI language with a lot of parentheses.\nFritz Kunze's official biography carefully avoids mentioning the\nL-word.  But my guess is that we shouldn't be afraid to call the\nnew Lisp Lisp. Lisp still has a lot of latent respect among the\nvery best hackers \u2014 the ones who took 6.001 and understood it, for\nexample. And those are the users you need to win.\n\nIn \"How to Become a Hacker,\" Eric Raymond describes Lisp as something\nlike Latin or Greek \u2014 a language you should learn as an intellectual\nexercise, even though you won't actually use it:\n\n  Lisp is worth learning for the profound enlightenment experience\n  you will have when you finally get it; that experience will make\n  you a better programmer for the rest of your days, even if you\n  never actually use Lisp itself a lot.\n\nIf I didn't know Lisp, reading this would set me asking questions.\nA language that would make me a better programmer, if it means\nanything at all, means a language that would be better for programming.\nAnd that is in fact the implication of what Eric is saying.\n\nAs long as that idea is still floating around, I think hackers will\nbe receptive enough to a new Lisp, even if it is called Lisp. But\nthis Lisp must be a hacker's language, like the classic Lisps of\nthe 1970s. It must be terse, simple, and hackable. And it must have\npowerful libraries for doing what hackers want to do now.\n\nIn the matter of libraries I think there is room to beat languages\nlike Perl and Python at their own game. A lot of the new applications\nthat will need to be written in the coming years will be \nserver-based\napplications. There's no reason a new Lisp shouldn't have string\nlibraries as good as Perl, and if this new Lisp also had powerful\nlibraries for server-based applications, it could be very popular.\nReal hackers won't turn up their noses at a new tool that will let\nthem solve hard problems with a few library calls. Remember, hackers\nare lazy.\n\nIt could be an even bigger win to have core language support for\nserver-based applications. For example, explicit support for programs\nwith multiple users, or data ownership at the level of type tags.\n\nServer-based applications also give us the answer to the question\nof what this new Lisp will be used to hack. It would not hurt to\nmake Lisp better as a scripting language for Unix. (It would be\nhard to make it worse.) But I think there are areas where existing\nlanguages would be easier to beat. I think it might be better to\nfollow the model of Tcl, and supply the Lisp together with a complete\nsystem for supporting server-based applications. Lisp is a natural\nfit for server-based applications. Lexical closures provide a way\nto get the effect of subroutines when the ui is just a series of\nweb pages. S-expressions map nicely onto html, and macros are good\nat generating it. There need to be better tools for writing\nserver-based applications, and there needs to be a new Lisp, and\nthe two would work very well together.\n\n12 The Dream Language\n\nBy way of summary, let's try describing the hacker's dream language.\nThe dream language is \nbeautiful, clean, and terse. It has an\ninteractive toplevel that starts up fast. You can write programs\nto solve common problems with very little code.  Nearly all the\ncode in any program you write is code that's specific to your\napplication. Everything else has been done for you.\n\nThe syntax of the language is brief to a fault. You never have to\ntype an unnecessary character, or even to use the shift key much.\n\nUsing big abstractions you can write the first version of a program\nvery quickly. Later, when you want to optimize, there's a really\ngood profiler that tells you where to focus your attention. You\ncan make inner loops blindingly fast, even writing inline byte code\nif you need to.\n\nThere are lots of good examples to learn from, and the language is\nintuitive enough that you can learn how to use it from examples in\na couple minutes. You don't need to look in the manual much. The\nmanual is thin, and has few warnings and qualifications.\n\nThe language has a small core, and powerful, highly orthogonal\nlibraries that are as carefully designed as the core language. The\nlibraries all work well together; everything in the language fits\ntogether like the parts in a fine camera. Nothing is deprecated,\nor retained for compatibility. The source code of all the libraries\nis readily available. It's easy to talk to the operating system\nand to applications written in other languages.\n\nThe language is built in layers. The higher-level abstractions are\nbuilt in a very transparent way out of lower-level abstractions,\nwhich you can get hold of if you want.\n\nNothing is hidden from you that doesn't absolutely have to be. The\nlanguage offers abstractions only as a way of saving you work,\nrather than as a way of telling you what to do. In fact, the language\nencourages you to be an equal participant in its design. You can\nchange everything about it, including even its syntax, and anything\nyou write has, as much as possible, the same status as what comes\npredefined.\n\n\n\nNotes\n\n[1]  Macros very close to the modern idea were proposed by Timothy\nHart in 1964, two years after Lisp 1.5 was released. What was\nmissing, initially, were ways to avoid variable capture and multiple\nevaluation; Hart's examples are subject to both.\n\n[2]  In When the Air Hits Your Brain, neurosurgeon Frank Vertosick\nrecounts a conversation in which his chief resident, Gary, talks\nabout the difference between surgeons and internists (\"fleas\"):\n\n  Gary and I ordered a large pizza and found an open booth. The\n  chief lit a cigarette. \"Look at those goddamn fleas, jabbering\n  about some disease they'll see once in their lifetimes. That's\n  the trouble with fleas, they only like the bizarre stuff. They\n  hate their bread and butter cases. That's the difference between\n  us and the fucking fleas. See, we love big juicy lumbar disc\n  herniations, but they hate hypertension....\"\n\nIt's hard to think of a lumbar disc herniation as juicy (except\nliterally). And yet I think I know what they mean. I've often had\na juicy bug to track down. Someone who's not a programmer would\nfind it hard to imagine that there could be pleasure in a bug.\nSurely it's better if everything just works. In one way, it is.\nAnd yet there is undeniably a grim satisfaction in hunting down\ncertain sorts of bugs.\n\n", "April 2001\n\nThis essay developed out of conversations I've had with\nseveral other programmers about why Java smelled suspicious.  It's not\na critique of Java!  It is a case study of hacker's radar.\n\nOver time, hackers develop a nose for good (and bad) technology.\nI thought it might be interesting to try and write down what\nmade Java seem suspect to me.\n\nSome people who've read this think it's an interesting attempt to write about\nsomething that hasn't been written about before.  Others say I\nwill get in trouble for appearing to be writing about\nthings I don't understand.  So, just in\ncase it does any good, let me clarify that I'm not writing here\nabout Java (which I have never used) but about hacker's radar\n(which I have thought about a lot).\n\n\n\nThe aphorism \"you can't tell a book by its cover\" originated in\nthe times when books were sold in plain cardboard covers, to be\nbound by each purchaser according to his own taste.  In those days,\nyou couldn't tell a book by its cover.  But publishing has advanced\nsince then: present-day publishers work hard to make the cover\nsomething you can tell a book by.\n\nI spend a lot of time in bookshops and I feel as if I have by now\nlearned to understand everything publishers mean to tell me about\na book, and perhaps a bit more.  The time I haven't spent in\nbookshops I've spent mostly in front of computers, and I feel as\nif I've learned, to some degree, to judge technology by its cover\nas well.  It may be just luck, but I've saved myself from a few\ntechnologies that turned out to be real stinkers.\n\nSo far, Java seems like a stinker to me.  I've never written a Java\nprogram, never more than glanced over reference books about it,\nbut I have a hunch that it won't be a very successful language.\nI may turn out to be mistaken; making predictions about technology\nis a dangerous business.  But for what it's worth, as a sort of\ntime capsule, here's why I don't like the look of Java:\n\n\n1. It has been so energetically hyped.  Real standards don't have\nto be promoted.  No one had to promote C, or Unix, or HTML.  A real\nstandard tends to be already established by the time most people\nhear about it.  On the hacker radar screen, Perl is as big as Java,\nor bigger, just on the strength of its own merits.\n\n2. It's aimed low.  In the original Java white paper, Gosling\nexplicitly says Java was designed not to be too difficult for\nprogrammers used to C.  It was designed to be another C++: C plus\na few ideas taken from more advanced languages.  Like the creators\nof sitcoms or junk food or package tours, Java's designers were\nconsciously designing a product for people not as smart as them.\nHistorically, languages designed for other people to use have been\nbad:  Cobol, PL/I, Pascal, Ada, C++.  The good languages have been\nthose that were designed for their own creators:  C, Perl, Smalltalk,\nLisp.\n\n3. It has ulterior motives.  Someone once said that the world would\nbe a better place if people only wrote books because they had\nsomething to say, rather than because they wanted to write a book.\nLikewise, the reason we hear about Java all the time is not because\nit has something to say about programming languages.  We hear about\nJava as part of a plan by Sun to undermine Microsoft.\n\n4. No one loves it.  C, Perl, Python, Smalltalk, and Lisp programmers\nlove their languages.  I've never heard anyone say that they loved\nJava.\n\n5. People are forced to use it.  A lot of the people I know using\nJava are using it because they feel they have to.  Either it's\nsomething they felt they had to do to get funded, or something they\nthought customers would want, or something they were told to do by\nmanagement.  These are smart people; if the technology was good,\nthey'd have used it voluntarily.\n\n6. It has too many cooks.  The best programming languages have been\ndeveloped by small groups.  Java seems to be run by a committee.\nIf it turns out to be a good language, it will be the first time\nin history that a committee has designed a good language.\n\n7. It's bureaucratic.  From what little I know about Java, there\nseem to be a lot of protocols for doing things.  Really good\nlanguages aren't like that.  They let you do what you want and get\nout of the way.\n\n8. It's pseudo-hip.  Sun now pretends that Java is a grassroots,\nopen-source language effort like Perl or Python.  This one just\nhappens to be controlled by a giant company.  So the language is\nlikely to have the same drab clunkiness as anything else that comes\nout of a big company.\n\n9. It's designed for large organizations.  Large organizations have\ndifferent aims from hackers. They want languages that are (believed\nto be) suitable for use by large teams of mediocre programmers--\nlanguages with features that, like the speed limiters in U-Haul\ntrucks, prevent fools from doing too much damage.  Hackers don't\nlike a language that talks down to them.  Hackers just want power.\nHistorically, languages designed for large organizations (PL/I,\nAda) have lost, while hacker languages (C, Perl) have won.  The\nreason: today's teenage hacker is tomorrow's CTO.\n\n10. The wrong people like it.  The programmers I admire most are\nnot, on the whole, captivated by Java.  Who does like Java?  Suits,\nwho don't know one language from another, but know that they keep\nhearing about Java in the press; programmers at big companies, who\nare amazed to find that there is something even better than C++;\nand plug-and-chug undergrads, who are ready to like anything that\nmight get them a job (will this be on the test?).  These people's\nopinions change with every wind.\n\n11. Its daddy is in a pinch.  Sun's business model is being undermined\non two fronts.  Cheap Intel processors, of the same type used in\ndesktop machines, are now more than fast enough for servers.  And\nFreeBSD seems to be at least as good an OS for servers as Solaris.\nSun's advertising implies that you need Sun servers for industrial\nstrength applications.  If this were true, Yahoo would be first in\nline to buy Suns;  but when I worked there, the servers were all\nIntel boxes running FreeBSD.  This bodes ill for Sun's future.  If\nSun runs into trouble, they could drag Java down with them.\n\n12. The DoD likes it.  The Defense Department is encouraging\ndevelopers to use Java. This seems to me the most damning sign of\nall.  The Defense Department does a fine (though expensive) job of\ndefending the country, but they love plans and procedures and\nprotocols.  Their culture is the opposite of hacker culture; on\nquestions of software they will tend to bet wrong.  The last time\nthe DoD really liked a programming language, it was Ada.\n\n\nBear in mind, this is not a critique of Java, but a critique of\nits cover.  I don't know Java well enough to like it or dislike\nit.  This is just an explanation of why I don't find that I'm eager\nto learn it.\n\nIt may seem cavalier to dismiss a language before you've even tried\nwriting programs in it.  But this is something all programmers have\nto do.  There are too many technologies out there to learn them\nall.  You have to learn to judge by outward signs which will be\nworth your time.  I have likewise cavalierly dismissed Cobol, Ada,\nVisual Basic, the IBM AS400, VRML, ISO 9000, the SET protocol, VMS,\nNovell Netware, and CORBA, among others.  They just smelled wrong.\n\nIt could be that in Java's case I'm mistaken.  It could be that a\nlanguage promoted by one big company to undermine another, designed\nby a committee for a \"mainstream\" audience, hyped to the skies,\nand beloved of the DoD, happens nonetheless to be a clean, beautiful,\npowerful language that I would love programming in.  It could be,\nbut it seems very unlikely.\n\n", "\n\nWant to start a startup?  Get funded by\nY Combinator.\n\n\n\n\n\nApril 2001, rev. April 2003\n", "\nAfter a link to \nBeating the Averages was posted on slashdot, \nsome readers wanted to hear in more detail \nabout the specific technical advantages we got from using\nLisp in Viaweb.  For those who are interested,\nhere are some excerpts from a talk I gave in April 2001 at\nBBN Labs in Cambridge, MA.\n\n", "1993\n\n(This essay is from the introduction to On Lisp.)\n\n\nIt's a long-standing principle of programming style that the functional\nelements of a program should not be too large.  If some component of a\nprogram grows beyond the stage where it's readily comprehensible,\nit becomes a mass of complexity which conceals errors as easily\nas a big city conceals fugitives.  Such software will be\nhard to read, hard to test, and hard to debug.\n\nIn accordance with this principle, a large program must be divided\ninto pieces, and the larger the program, the more it must be divided.\nHow do you divide a program?  The traditional approach is\ncalled top-down design: you say \"the purpose of the\nprogram is to do these seven things, so I divide it into seven major\nsubroutines.  The first subroutine has to do these four things, so\nit in turn will have four of its own subroutines,\" and so on.\nThis process continues until the whole program has the right level\nof granularity-- each part large enough to do something substantial,\nbut small enough to be understood as a single unit.\n\nExperienced Lisp programmers divide up their programs differently.\nAs well as top-down design, they follow a principle which\ncould be called bottom-up design-- changing the language\nto suit the problem.\nIn Lisp, you don't just write your program down toward the language,\nyou also build the language up toward your program.  As you're\nwriting a program you may think \"I wish Lisp had such-and-such an\noperator.\" So you go and write it. Afterward\nyou realize that using the new operator would simplify the design  \nof another part of the program, and so on.\nLanguage and program evolve together.\nLike the border between two warring states,\nthe boundary between language and program is drawn and redrawn,\nuntil eventually it comes to rest along the mountains and rivers,\nthe natural frontiers of your problem.\nIn the end your program will look as if the language had been\ndesigned for it.\nAnd when language and\nprogram fit one another well, you end up with code which is\nclear, small, and efficient.\n\n\nIt's worth emphasizing that bottom-up design doesn't mean\njust writing the same program in a different order.  When you\nwork bottom-up, you usually end up with a different program.\nInstead of a single, monolithic program,\nyou will get a larger language with more abstract operators,   \nand a smaller program written in it.  Instead of a lintel,\nyou'll get an arch.\n\n\nIn typical code, once you abstract out the parts which are\nmerely bookkeeping, what's left is much shorter;\nthe higher you build up the language, the less distance you\nwill have to travel from the top down to it.\nThis brings several advantages:\n\n\n By making the language do more of the work, bottom-up design\nyields programs which are smaller and more agile.  A shorter\nprogram doesn't have to be divided into so many components, and\nfewer components means programs which are easier to read or\nmodify.  Fewer components also means fewer connections between   \ncomponents, and thus less chance for errors there.  As\nindustrial designers strive to reduce the number of moving parts\nin a machine, experienced Lisp programmers use bottom-up design\nto reduce the size and complexity of their programs.\n\n Bottom-up design promotes code re-use.\nWhen you write two\nor more programs, many of the utilities you wrote for the first\nprogram will also be useful in the succeeding ones.  Once you've  \nacquired a large substrate of utilities, writing a new program can\ntake only a fraction of the effort it would require if you had to \nstart with raw Lisp.\n\n Bottom-up design makes programs easier to read.\n\nAn instance of this type\nof abstraction asks the reader to understand a general-purpose operator;\nan instance of functional abstraction asks the reader to understand\na special-purpose subroutine. [1]\n\n Because it causes you always to be on the lookout for patterns\nin your code, working bottom-up helps to clarify your ideas about\nthe design of your program.  If two distant components of a program\nare similar in form, you'll be led to notice the similarity and\nperhaps to redesign the program in a simpler way.\n\n\nBottom-up design is possible to a certain degree in languages\nother than Lisp.  Whenever you see library functions,\nbottom-up design is happening.  However, Lisp gives you much broader\npowers in this department, and augmenting the language plays a\nproportionately larger role in Lisp style-- so much so that\nLisp is not just a different language, but a whole different way\nof programming.\n\nIt's true that this style of development is better suited to\nprograms which can be written by small groups.  However, at the\nsame time, it extends the limits of what can be done by a small\ngroup.  In The Mythical Man-Month,\nFrederick Brooks\nproposed that the productivity of a group of programmers\ndoes not grow linearly with its size.  As the size of the\ngroup increases, the productivity of individual programmers\ngoes down.  The experience of Lisp programming  \nsuggests a more cheerful way\nto phrase this law: as the size of the group decreases, the\nproductivity of individual programmers goes up.\nA small group wins, relatively speaking, simply because it's\nsmaller.  When a small group also takes advantage of the\ntechniques that Lisp makes possible, it can \nwin outright.\n\n\n\nNew: Download On Lisp for Free.\n\n\n\n\n\n\n[1] \"But no one can read\nthe program without understanding all your new utilities.\"\nTo see why such statements are usually mistaken,\nsee Section 4.8.\n\n", "November 2016\n\nIf you're a California voter, there is an important proposition\non your ballot this year: Proposition 62, which bans the death\npenalty.\n\nWhen I was younger I used to think the debate about the death\npenalty was about when it's ok to take a human life.  Is it ok\nto kill a killer?\n\nBut that is not the issue here.\n\nThe real world does not work like the version I was shown on TV growing up.  The police \noften arrest the wrong person.\nDefendants' lawyers are often incompetent.  And prosecutors\nare often motivated more by publicity than justice.\n\nIn the real world,       \nabout 4% of people sentenced to death\nare innocent.\nSo this is not about whether it's ok to kill killers. This\nis about whether it's ok to kill innocent people.\n\nA child could answer that one for you.\n\nThis year, in California, you have a chance to end this, by\nvoting yes on Proposition 62. But beware, because there is another \nproposition, Proposition 66, whose goal is to make it \neasier to execute people. So yes on 62, no on 66.\n\nIt's time.\n\n"]